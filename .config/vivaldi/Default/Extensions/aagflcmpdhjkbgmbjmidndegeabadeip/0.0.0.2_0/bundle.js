(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (__dirname){
const ENCODING = require(`../com/io/encoding.js`);
const ENV = require('../com/environment.js');

const fs = ENV.NODE ? require('fs') : null;
const path = require('path');


class FSUTIL {

    static DeleteDirContent(p_path, stats = null){

        if(!stats){
            try { stats = fs.statSync(p_path); }catch(err) { return; }
        }
        
        if(!stats.isDirectory()){return;}

        var content = fs.readdirSync(p_path, ENCODING.UTF8);
        for(var i = 0, n = content.length; i < n; i++ ){
            FSUTIL.Delete( path.join(p_path, content[i]) );
        }

    }

    static Delete(p_path){
        var stats = null;
        try { stats = fs.statSync(p_path); }catch(err) { return; }

        if(stats.isDirectory()){
            FSUTIL.DeleteDirContent(p_path, stats);
            fs.rmdirSync(p_path, (e) => {if(e){console.error(`FS ERROR : ${e.message}`);}});
        }else if(stats.isFile()){
            fs.unlinkSync(p_path);
        }
    }

    static Rename(p_oldPath, p_newPath){
        fs.renameSync(p_oldPath, p_newPath);
    }

    static mkDirByPathSync(p_path, p_relativeToScript = false, p_callback = null ) {
        var sep = '/';
        var initDir = path.isAbsolute(p_path) ? sep : '';
        var baseDir = p_relativeToScript ? __dirname : '.';

        var result = null;
        
        try{
            var pathsplt = p_path.split(sep);
            result = pathsplt.reduce((parentDir, childDir) => {

                var curDir = path.resolve(baseDir, parentDir, childDir);
                try {
                    fs.mkdirSync(curDir);
                } catch (err) {

                    if (err.code === 'EEXIST') { // curDir already exists!
                        return curDir;
                    }

                    // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.
                    if (err.code === 'ENOENT') { // Throw the original parentDir error on curDir `ENOENT` failure.
                        throw new Error(`ENOENT: permission denied, mkdir '${parentDir}' ('${p_path}' / ${pathsplt})`);
                    }

                    var caughtErr = ['EACCES', 'EPERM', 'EISDIR'].indexOf(err.code) > -1;
                    if (!caughtErr || caughtErr && curDir === path.resolve(p_path)) {
                        throw err; // Throw if it's just the last created dir.
                    }

                }

                return curDir;
            }, initDir);
        }catch(err){
            result = null;
            if(p_callback){
                p_callback(err);
            }else{
                throw err;
            }
        }

        if(result){
            if(p_callback){p_callback();}
        }

    }
}

module.exports = FSUTIL;
}).call(this,"/app/js/com-electron")
},{"../com/environment.js":94,"../com/io/encoding.js":109,"fs":358,"path":360}],2:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const IOProcess = require(`../../com/io/io-process.js`);
const PATH = require(`../../com/path.js`);
const fs = require(`fs`);

/**
 * Desktop IO Reader
 */

class IOReader extends IOProcess{
    
    constructor() { super(); }

    _Init(){
        super._Init();
        
        this._Bind(this._Handle);
    }

    Process(){
        this._running = true;
        var rsc = this._rsc;
        rsc.ReadStart();

        var path = PATH.EX(rsc.path);
        
        if(!fs.existsSync(path)){
            rsc.ReadError(new Error(`File do not exists at location : ${path}`));
            this._running = false;
            this.Complete();
            return;
        }

        rsc.ReadProgress(0);

        if(rsc.isDir){
            fs.readdir(path, rsc.encoding, this._Handle);
        }else{
            fs.readFile(path, rsc.encoding, this._Handle);
        }
    }

    _Handle( p_err, p_data ){

        var rsc = this._rsc;
        if(p_err){
            rsc.ReadError(p_err);
        }else{
            rsc.ReadProgress(1);
            rsc.raw = p_data; //if dir, p_data = file list
            rsc.ReadComplete();
        }
        this.Complete();
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = IOReader;
},{"../../com/io/io-process.js":111,"../../com/path.js":121,"../../com/util.js":244,"fs":358}],3:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const IOProcess = require(`../../com/io/io-process.js`);
const PATH = require(`../../com/path.js`);
const fs = require(`fs`);
const FSUTIL = require(`../fs-util.js`);
/**
 * Desktop IO Reader
 */

class IORename extends IOProcess{
    
    constructor() { super(); }

    _Init(){
        super._Init();
        
        this._targetPath = null;
        this._oldPath = null;

        this._Bind(this._Handle);
        this._Bind(this._HandleDir);

    }

    set targetPath(p_value){ this._targetPath = PATH.EX(p_value); }
    get targetPath(){ return this._targetPath; }

    Process(){
        this._running = true;
        var rsc = this._rsc;

        this._oldPath = PATH.EX(rsc.path);

        if(fs.existsSync(this._oldPath)){
            if(!fs.existsSync(this._targetPath)){
                FSUTIL.mkDirByPathSync(PATH.dir(this._targetPath), false, this._HandleDir)
            }else{
                this._CommitRename();
            }
        }else{
            //No file to actually rename
            this._Handle(null);
        }
    }

    _HandleDir(p_err = null){
        if(p_err){
            this._rsc.RenameError(p_err);
            this.Complete();
        }else{
            this._CommitRename();
        }
    }

    _CommitRename(){
        fs.rename(this._oldPath, this._targetPath, this._Handle);
    }

    _Handle(p_err){
        var rsc = this._rsc;
        if(p_err){
            rsc.RenameError(p_err);
        }else{            
            rsc._UpdatePath(this._targetPath);
            rsc.RenameProgress(1);
            rsc.RenameComplete();
        }
        this.Complete();
    }

    _CleanUp(){
        this._expandedPath = null;
        super._CleanUp();
    }

}

module.exports = IORename;
},{"../../com/io/io-process.js":111,"../../com/path.js":121,"../../com/util.js":244,"../fs-util.js":1,"fs":358}],4:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const IOProcess = require(`../../com/io/io-process.js`);
const PATH = require(`../../com/path.js`);
const fs = require(`fs`);
const FSUTIL = require(`../fs-util.js`);
/**
 * Desktop IO Reader
 */

class IOWriter extends IOProcess{
    
    constructor() { super(); }

    _Init(){
        super._Init();
        
        this._expandedPath = null;

        this._Bind(this._Handle);
        this._Bind(this._HandleDir);

    }

    Process(){
        this._running = true;
        var rsc = this._rsc;
        rsc.WriteStart();
        rsc.WriteProgress(0);

        this._expandedPath = PATH.EX(rsc.path);

        var dirPath = this._expandedPath;
        if(rsc.isDir){
            if (!fs.existsSync(dirPath)){
                FSUTIL.mkDirByPathSync(dirPath, false, this._HandleDir);
                //fs.mkdir(dirPath, {recursive: true}, this._HandleDir);
            }else{
                this._HandleDir();
            }
        }else{
            dirPath = PATH.dir(dirPath);
            if (!fs.existsSync(dirPath)){
                FSUTIL.mkDirByPathSync(dirPath, false, this._HandleDir);
                //fs.mkdir(dirPath, {recursive: true}, this._HandleDir);
            }else{
                this._WriteFile();
            }    
        }
    }

    _HandleDir(p_err = null){
        var rsc = this._rsc;
        if(rsc.isDir){
            if(p_err){
                rsc.WriteError(p_err);
            }else{
                rsc.WriteProgress(1);
                rsc.WriteComplete();
            }
            this.Complete();
        }else{
            if(p_err){
                rsc.WriteError(p_err);
                this.Complete();
            }else{
                this._WriteFile();
            }
        }
    }

    _HandleDirBackup(p_err){

    }

    _WriteFile(){
        var rsc = this._rsc;
        fs.writeFile(this._expandedPath, rsc.raw, rsc.encoding, this._Handle);
    }

    _Handle(p_err = null){
        var rsc = this._rsc;
        if(p_err){
            rsc.WriteError(p_err);
        }else{
            rsc.WriteProgress(1);
            rsc.WriteComplete();
        }
        this.Complete();
    }

    _CleanUp(){
        this._expandedPath = null;
        super._CleanUp();
    }

}

module.exports = IOWriter;
},{"../../com/io/io-process.js":111,"../../com/path.js":121,"../../com/util.js":244,"../fs-util.js":1,"fs":358}],5:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const { U, PATH, EVENT } = require(`../../com/@.js`);
const { POOL, Dictionary } = require(`../../com/collections/@.js`);

const IO_EVENT = require(`../../com/io/io-event.js`);

const ServiceBase = require(`../../com/services/service-base.js`);
const ENCODING = require(`../../com/io/encoding.js`);
const Resource = require(`../../com/io/resource.js`);
const Directory = require(`../../com/io/directory.js`);

const IOReader = require(`./io-reader.js`);
const IOWriter = require(`./io-writer.js`);
const IORename = require(`./io-rename.js`);
const IOQueue = require(`../../com/io/io-queue.js`);

const fs = require('fs');
const path = require('path');
const FSUTIL = require(`../fs-util.js`);
const ENV = require('../../com/environment.js');

class RESOURCES extends ServiceBase{
    
    constructor() { super(); }

    _Init(){ 
        super._Init();

        if(ENV.NODE){
            this._FS = require('fs');
        }else{

            var BrowserFS = require('browserfs');
            this._FS = BrowserFS.BFSRequire('fs');
            var bfs_fs = BrowserFS.BFSRequire('path');
         
            var myFilesystem = new BrowserFS.FileSystem.InMemory();
            BrowserFS.initialize(myFilesystem);
            
        }

        this._resources = new Dictionary();

        this._IOWriteClass = U.Default(this._IOWriteClass, IOWriter);
        this._IOReadClass = U.Default(this._IOReadClass, IOReader);
        this._IORenameClass = U.Default(this._IORenameClass, IORename);

        this._IOQueue = new IOQueue();

        this._Bind(this._RequestRead);
        this._Bind(this._RequestWrite);
        this._Bind(this._RequestDelete);
        this._Bind(this._RequestRename);
        this._Bind(this._CommitRename);
        this._Bind(this._RequestRsc);

    }

    _PostInit(){
        super._PostInit();
    }

    static Get(p_path, p_encoding = null, p_class = null ){
        return RESOURCES.instance._Get(p_path, p_encoding, p_class);
    }

    static GetDir(p_path ){
        return RESOURCES.instance._Get(p_path, null, Directory);
    }

    _Get( p_path, p_encoding = null, p_class = null ){
        
        //Rule of thumb : resources are mapped using SHRINKED path.

        var shPath = PATH.SH(p_path);
        var rsc = this._resources.Get(shPath);

        if(rsc){
            if(p_class && !U.IoF(rsc, p_class)){
                throw new Error(`Attempting to get an existing resource (${rsc.constructor.name}) with a mismatching type(${p_class.name})`);
            }
            return rsc; 
        }

        var stats = null;
        p_path = PATH.EX(p_path);
        
        try { stats = this._FS.statSync(p_path); }catch(err) { stats = null; console.warn(`RESOURCES._Get : ${err.message}`); }

        if(!stats){
            p_class = U.Default(p_class, Resource);
        }else if(stats.isDirectory()){
            if(p_class && !U.IoF(p_class, Directory)){
                throw new Error(`Attempting to create a resource for a directory with a mismatching resource type(${p_class.name})`);
            }
            p_class = U.Default(p_class, Directory);
        }else if(stats.isFile()){
            p_class = U.Default(p_class, Resource);
        }

        rsc = POOL.Rent(p_class);

        /*
        if(rsc.isDir){
            console.log(`++/ ${p_path}`);
        }else{
            console.log(`+++ ${p_path}`);
        }
        */
        
        rsc.path = shPath;
        rsc.encoding = U.Default(p_encoding, ENCODING.UTF8);
        rsc.stats = stats;
        rsc.exists = stats != null;

        this._RegisterRsc(rsc);

        return rsc;
    }

    _RegisterRsc(p_rsc){
        
        p_rsc._readFn = this._RequestRead;
        p_rsc._writeFn = this._RequestWrite;
        p_rsc._deleteFn = this._RequestDelete;
        p_rsc._renameFn = this._RequestRename;
        p_rsc._commitRnFn = this._CommitRename;

        if(p_rsc.isDir){
            p_rsc._requestRsc = this._RequestRsc;
        }

        p_rsc.Subscribe(EVENT.RELEASED, this, this._OnRscReleased);
        this._resources.Set(p_rsc.path, p_rsc);

        var dirPath = PATH.dir(p_rsc.path);
        var dirRsc = this._resources.Get(dirPath);

        if(dirRsc && dirRsc != p_rsc){ dirRsc.Add(p_rsc); }

        this._Notify(IO_EVENT.RSC_REGISTERED, p_rsc);
    }

    _RequestRead(p_rsc){

        if(!p_rsc.path){
            throw new Error(`Read requested for a resource with no path set.`);
        }

        //Queue IO read
        var ioProcess = POOL.Rent(this._IOReadClass);
        ioProcess.rsc = p_rsc;
        this._IOQueue.Add(ioProcess);

    }

    _RequestWrite(p_rsc){

        if(!p_rsc.path){
            throw new Error(`Write requested for a resource with no path set.`);
        }

        //Queue IO write
        var ioProcess = POOL.Rent(this._IOWriteClass);
        ioProcess.rsc = p_rsc;
        this._IOQueue.Add(ioProcess);

    }

    _RequestDelete(p_rsc){
        throw new Error(`RESOURCES._requestDelete not implemented`);

    }

    _RequestRename(p_rsc, p_newPath){

        p_newPath = PATH.SH(p_newPath);
        var existingRsc = this._resources.Get(p_newPath);
        if(existingRsc){ return; }

        //TODO : Make sure we're not renaming a folder into a file
        //or a file into a folder.

        //Queue IO rename
        var ioProcess = POOL.Rent(this._IORenameClass);
        ioProcess.rsc = p_rsc;
        ioProcess.targetPath = p_newPath;
        this._IOQueue.Add(ioProcess);

    }

    _CommitRename(p_rsc, p_oldKey){
        this._resources.Remove(p_oldKey);
        var newPath = p_rsc.path;
        this._resources.Set(newPath, p_rsc);

        //Check if target directory is loaded
        //and add the item if necessary
        var dirPath = PATH.dir(newPath);
        var dir = this._resources.Get(dirPath);
        if(dir){ 
            //If found, update directory
            p_rsc.directory = dir; 
        }else if(p_rsc.directory){
            //Otherwise, clear that resource directory
            p_rsc.directory = null;
        }
    }

    _RequestRsc(  p_path, p_encoding = null, p_class = null ){
        return this._Get( p_path, p_encoding, p_class );
    }

    _OnRscReleased(p_rsc){
        this._resources.Remove(p_rsc.path);
        this._Notify(IO_EVENT.RSC_UNREGISTERED, p_rsc);
    }

    Tick(p_delta){
        super.Tick(p_delta);
        this._UpdateQueue(this._IOQueue);
    }

    _UpdateQueue(p_queue){
        if(!p_queue.running && !p_queue.empty){ p_queue.ProcessNext(); }
    }


}

module.exports = RESOURCES;
},{"../../com/@.js":6,"../../com/collections/@.js":22,"../../com/environment.js":94,"../../com/io/directory.js":105,"../../com/io/encoding.js":109,"../../com/io/io-event.js":110,"../../com/io/io-queue.js":112,"../../com/io/resource.js":117,"../../com/services/service-base.js":134,"../fs-util.js":1,"./io-reader.js":2,"./io-rename.js":3,"./io-writer.js":4,"browserfs":357,"fs":358,"path":360}],6:[function(require,module,exports){
module.exports = {    
    U : require(`./util.js`),
    M : require(`./meta.js`),
    C : require(`./constants.js`),
    PATH : require(`./path.js`),
    URI : require(`./uri.js`),
    EVENT : require(`./event.js`),
    APP_REQUEST : require(`./app-request.js`),
    K : require(`./keyboard.js`)
}
},{"./app-request.js":21,"./constants.js":38,"./event.js":103,"./keyboard.js":119,"./meta.js":120,"./path.js":121,"./uri.js":243,"./util.js":244}],7:[function(require,module,exports){
module.exports = {    
    TIME : require(`./time.js`),
    UI : require(`./ui.js`),
    INPUT : require(`./input.js`),
    RELAY : require(`./relay.js`),
    ENV : require(`./environment.js`),
}
},{"./environment.js":94,"./input.js":104,"./relay.js":122,"./time.js":148,"./ui.js":242}],8:[function(require,module,exports){
module.exports = {

    ActionStack : require(`./action-stack.js`),
    Action : require(`./action.js`),
    CommandChain : require(`./command-chain.js`),
    COMMAND_EVENT : require(`./command-event.js`),
    Command : require(`./command.js`),
    CommandFn : require(`./command-fn.js`),
    CommandCluster : require(`./command-cluster.js`)
    
}
},{"./action-stack.js":11,"./action.js":12,"./command-chain.js":14,"./command-cluster.js":15,"./command-event.js":16,"./command-fn.js":17,"./command.js":18}],9:[function(require,module,exports){
/**
 * Command can trigger actions.
 * Commands are a receptacle for :
 * - a function to execute
 * - shortcuts that will execute said function
 * - events that will allow UI to feedback the availability of a given command
 */

'use strict';

//const U = require(`../util.js`);
//const EVENT = require(`../event.js`);
//const POOL = require(`../collections/pool.js`);
//const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);

const { U, EVENT } = require(`../@.js`);
const { POOL, DisposableObjectEx } = require(`../collections/@.js`);
const COMMAND_EVENT = require(`./command-event.js`);

class Command extends DisposableObjectEx{
    constructor() {super();}

    //---> Static members

    static Rent(p_class, p_name = null, p_icon = null){
        var cmd = POOL.Rent(p_class);
        cmd.name = U.Empty(p_name) ? U.CamelSplit(p_class.name) : p_name;
        cmd.icon = U.Empty(p_icon) ? `%ICON%/icon_cmd.svg` : p_icon;
        return cmd;
    }

    //---> Init

    _Init(){
        super._Init();
        this._icon = ``;
        this._name = U.CamelSplit(this.constructor.name);
        this._enabled = true;
        this._context = null;
        this._emitter = null;
        this._order = 0;
        this._running = false;
    }

    get running(){return this._running;}

    get order(){ return this._order; }
    set order(p_value){this._order = p_value;}    

    get icon(){return this._icon;}
    set icon(p_value){this._icon = p_value;}    

    get name(){return this._name;}
    set name(p_value){this._name = p_value;} 

    get emitter(){return this._emitter;}
    set emitter(p_value){
        if(this._emitter == p_value ){return;}
        var oldEmitter = this._emitter;
        this._emitter = p_value;
        if(oldEmitter){
            oldEmitter.Unsubscribe(EVENT.RELEASED, this, this._OnEmitterReleased);
        }
        if(p_value){
            p_value.Subscribe(EVENT.RELEASED, this, this._OnEmitterReleased);
        }
    }

    _OnEmitterReleased(p_emitter){
        this.emitter = null;
    }

    //---> Availability

    get enabled(){return this._enabled;}
    set enabled(p_value){
        if(this._enabled == p_value){ return; }
        this._enabled = p_value;
        this._Notify(EVENT.UPDATED, this);
    }

    //---> Execution

    get context(){return this._context;}
    set context(p_value){
        var sanitizedValue = this._SanitizeContext(p_value);
        if(this._context == sanitizedValue){return;}
        this._context = sanitizedValue;
        this._OnContextChanged();
        this.enabled = this.CanExecute(this._context);
    }

    _SanitizeContext(p_context){
        return p_context;
    }

    _OnContextChanged(){

    }

    CanExecute(p_context){
        return true;
    }

    Execute(p_context){
        if(this._running){return;}
        this.context = U.Default(p_context, this._context);
        if(!this._enabled){return;}
        this._Start();
        this._InternalExecute();
    }

    _InternalExecute(){
        
    }

    _InternalCancel(){

    }

    //---> Default events

    _Start(){
        if(this._running){return;}
        this._running = true;
        this._Notify(COMMAND_EVENT.START, this);
        this._Notify(EVENT.UPDATED, this);
    }

    _Success(){
        this._Notify(COMMAND_EVENT.SUCCESS, this);
        this._End();
    }

    _Fail(p_msg){
        console.error(`${this} failed : ${p_msg}`);
        this._Notify(COMMAND_EVENT.FAIL, this, p_msg);
        this._End();
    }

    Cancel(){
        if(!this._running){return;}
        this._Cancel();
    }
    _Cancel(){
        this._InternalCancel();
        this._Notify(COMMAND_EVENT.CANCEL, this);
        this._End();
    }

    _End(){
        this._running = false;
        this._Notify(COMMAND_EVENT.END, this);
        this._Notify(EVENT.UPDATED, this);
    }

    //---> Pooling

    _CleanUp(){        
        this.Cancel();
        this._icon = ``;
        this._enabled = true;
        this.context = null;
        this.emitter = null;
        this.order = 0;
        super._CleanUp();
    }
    
    toString(){
        return `[>>${this.constructor.name}]`;
    }

}

module.exports = Command;
},{"../@.js":6,"../collections/@.js":22,"./command-event.js":16}],10:[function(require,module,exports){
'use strict';

const Action = require(`./action.js`);

class ActionGroup extends Action{
    constructor() {super();}

    static get mergeable(){return false;}
    
    //---> Init

    _Init(){
        super._Init();
        this._actions = new Array(0);
        this._last = null;
    }

    get last(){ return this._last; }

    _Register( p_action ){
        this._actions.push(p_action);
        this._last = p_action;
        return p_action;
    }

    Do( p_operation, p_merge = false ){
        //Do nothing
    }

    _InternalDo( p_operation, p_merge = false ){
        //Do nothing
    }

    _InternalUndo(){
        var list = this._actions;
        for(var i = list.length-1; i >= 0; i--){
            list[i].Undo();
        }
    }

    _InternalRedo(){
        var list = this._actions;
        for(var i = 0, n = list.length; i < n; i++){
            list[i].Redo();
        }
    }

    _CleanUp(){        
        this._last = null;
        var list = this._actions;
        while(list.length != 0){ list.pop().Release(); }
        this._actions.length = 0;
        super._CleanUp();
    }

}

module.exports = ActionGroup;
},{"./action.js":12}],11:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);
const ActionGroup = require(`./action-group.js`);

class ActionStack{

    constructor() {
        this._Init();
        this._PostInit();
    }


    //---> Init

    _Init(){
        this._maxCount = -1;
        this._headIndex = -1;
        this._stack = new Array(0);
        this._enabled = true;
        this._groupingActive = false;
        this._group = null;
    }

    _PostInit(){

    }

    get enabled(){ return this._enabled; }
    set enabled(p_value){ this._enabled = p_value; }

    ToggleGrouping(p_toggle){
        if(this._groupingActive == p_toggle){ return; }
        this._groupingActive = p_toggle;
        if(!p_toggle && this._group){

            //TODO : If group has only one action merge it with the stack instead
            this._group = null; 
        }
    }

    //---> Registration

    Do(p_actionClass, p_operation){

        
        if(!this._enabled){ return null; }

        if(this._groupingActive){
            if(!this._group){ this._group = this._Register(POOL.Rent(ActionGroup)); }
        }

        // Check if last action can be updated instead of creating a new one.
        var lastAction;
        if(this._group){
            lastAction = this._group.last;
        }else{
            lastAction = this._stack.length > 0 ? this._stack[this._stack.length-1] : null;
        }
        
        if(p_actionClass.mergeable){
            if(U.IoF(lastAction, p_actionClass)){
                if(lastAction.CanMerge(p_operation)){
                    //Merge if mergeable & can merge current options
                    return lastAction.Do(p_operation, true);;
                }
            }
        }

        if(this._group){
            return this._group._Register(POOL.Rent(p_actionClass).Do(p_operation, false));
        }else{
            return this._Register(POOL.Rent(p_actionClass).Do(p_operation, false));
        }

    }

    /**
     * Register an action that has just been performed.
     * Clears any action undoed before.
     * @param {*} p_action 
     */
    _Register( p_action ){
        var stack = this._stack;

        if(this._headIndex != stack.length-1){
            //Actions have be undoed but still in line.
            var index = this._headIndex+1;
            for(var i = index; i < stack.length; i++){stack[i].Release();}
            stack.length = index;            
        }

        stack.push(p_action);
        this._headIndex = stack.length - 1;

        return p_action;
    }

    /**
     * Undo the last action in line
     */
    Undo(){

        var stack = this._stack;

        if(stack.length == 0){return;}

        var index = this._headIndex;

        //No more action in line.
        if(index == -1){return;}

        var action = stack[index];
        this._headIndex = index-1;

        action.Undo();

    }

    /**
     * Redo the next action in line, if any
     */
    Redo(){

        if(this._stack.length == 0){return;}

        var index = this._headIndex;
        index += 1;

        //Redo-ing action that hasn`t happened yet.
        if(index >= this._stack.length){return;}

        var action = this._stack[index];
        this._headIndex = index;

        action.Redo();

    }

    /**
     * Clear all action in the stack
     */
    Clear(){
        this.ToggleGrouping(false);
        var stack = this._stack;
        while(stack.length != 0){stack.pop().Release();}
        stack.length = 0;
        this._headIndex = -1;
        this._groupingActive = false;
    }

}

module.exports = ActionStack;
},{"../@.js":6,"../collections/@.js":22,"./action-group.js":10}],12:[function(require,module,exports){
'use strict';

const { DisposableObject } = require(`../collections/@.js`);

class Action extends DisposableObject{
    constructor() {super();}

    static get mergeable(){return false;}
    //---> Init

    _Init(){
        super._Init();
        this._operation = null;
        this._undoed = false;
    }

    get options(){return this._operation;}

    //---> Can merge ?

    CanMerge( p_operation ){ return false; }

    //---> Do / undo

    Do( p_operation, p_merge = false ){
        if(!p_merge){ this._operation = p_operation; }
        this._InternalDo( p_operation, p_merge );
        return this;
    }

    Undo(){
        this._undoed = true;
        this._InternalUndo();
    }

    Redo(){
        this._undoed = false;
        this._InternalRedo();
    }

    _InternalDo( p_operation, p_merge = false ){

    }

    _InternalUndo(){

    }

    _InternalRedo(){

    }

    _CleanUp(){        
        this._operation = null;
        this._undoed = false;
        super._CleanUp();
    }

    

}

module.exports = Action;
},{"../collections/@.js":22}],13:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const INPUT = require(`../input.js`);
const POOL = require(`../collections/pool.js`);
const { Observer } = require(`../signals/@.js`);
const COMMAND_EVENT = require(`./command-event.js`);
const Command = require(`./command.js`);

// CommandAction requires :
// - an action class
// - the 'context' is the action's operation
// - an emitter, used to seek up an editor, if any.

let _COMMAND_ACTION = null;

class CommandAction extends Command{
    constructor() {super();}

    static Do( p_emitter = null, p_actionClass, p_operation ){
        
        var A = this._COMMAND_ACTION;

        if(!A){ A = this._COMMAND_ACTION = new CommandAction();}

        A.emitter = p_emitter;
        A.actionClass = p_actionClass;
        A.Execute(p_operation);

    }

    //---> Init

    _Init(){
        super._Init();
        this._actionClass = null;
    }

    get actionClass(){return this._actionClass;}
    set actionClass(p_value){this._actionClass = p_value;} 

    CanExecute(p_context){
        if(!p_context || !this._actionClass){return false;}
        return true;
    }

    _InternalExecute(){
        //TODO : Check whether or not there is an ongoing drag'n drop action
        //and concatenate all resulting actions
        var editor = null;
        if(this._emitter){
            editor = this._emitter.editor;
            if(!editor){
                //Look in parenting stack in case no editor is found
                //stop at first editor or last ?
                //assume first for now.
                var editorClass = POOL.GetClass(`Editor`);
                var p = this._emitter;
                while(!editor && p){
                    if(U.IoF(p, editorClass)){ editor = p; }
                    p = p.parent;
                }
            }
        }



        if(editor){
            //If editor found, make it do the thing
            editor.Do(this._actionClass, this._context);
        }else{
            //If no editor found, create action, execute it then release it immediately.
            POOL.Rent(this._actionClass).Do(this._context, false).Release();
        }

        this._Success();
    }

    _CleanUp(){
        this._actionClass = null;
        super._CleanUp();
    }

}

module.exports = CommandAction;
},{"../@.js":6,"../collections/pool.js":37,"../input.js":104,"../signals/@.js":137,"./command-event.js":16,"./command.js":18}],14:[function(require,module,exports){
/**
 * Command can trigger actions.
 * Commands are a receptacle for :
 * - a function to execute
 * - shortcuts that will execute said function
 * - events that will allow UI to feedback the availability of a given command
 */

'use strict';

//const U = require(`../util.js`);
//const EVENT = require(`../event.js`);
//const POOL = require(`../collections/pool.js`);
//const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);

const { U, EVENT } = require(`../@.js`);
const { Observer } = require(`../signals/@.js`);
const COMMAND_EVENT = require(`./command-event.js`);
const Command = require(`./command.js`);

class CommandChain extends Command{
    constructor() {super();}

    //---> Init

    _Init(){
        super._Init();

        this._nodes = new Array(0);
        this._currentIndex = 0;
        this._cmdObserver = new Observer();

        this._cmdObserver.Hook(COMMAND_EVENT.START, this, this._NodeStart);
        this._cmdObserver.Hook(COMMAND_EVENT.END, this, this._NodeEnd);
        this._cmdObserver.Hook(COMMAND_EVENT.SUCCESS, this, this._NodeSuccess);
        this._cmdObserver.Hook(COMMAND_EVENT.FAIL, this, this._NodeFail);

    }

    //---> Execution
    _OnContextChanged(){
        super._OnContextChanged();
        for(var i = 0, n = this._nodes.length; i < n; i++){
            this._nodes[i].context = this._context;
        }
    }

    CanExecute(p_context){
        var r = super.CanExecute(p_context);
        if(!r){return false;}
        for(var i = 0, n = this._nodes.length; i < n; i++){
            if(!this._nodes[i].CanExecute(p_context)){ return false; }
        }
        return true;
    }

    Execute(p_context = null){
        if(this._running){return;}
        this.context = U.Default(p_context, this._context);
        if(!this._enabled){return;}
        this._Start();
        this._InternalExecute();
    }

    _InternalExecute(){
        this._currentIndex = -1;
        this._ExecuteNextIndex();
    }

    _ExecuteNextIndex(){
        this._currentIndex += 1;
        var l = this._nodes.length;

        if( this._currentIndex >= l ){
            this._Success();
            return;
        }

        var cmd = this._nodes[this._currentIndex];
        this._cmdObserver.observable = cmd;
        cmd.Execute(this._context);
    }

    _InternalCancel(){
        
    }

    //---> Node events

    _NodeStart(p_cmd){

    }

    _NodeSuccess(p_cmd){
        this._ExecuteNextIndex();
    }

    _NodeFail(p_cmd, p_msg){
        this._Fail(p_msg);
    }

    _NodeEnd(p_cmd){

    }

    //---> Default events

    _Start(){
        if(this._running){return;}
        this._running = true;
        this._Notify(COMMAND_EVENT.START, this);
        this._Notify(EVENT.UPDATED, this);
    }

    _Success(){
        this._Notify(COMMAND_EVENT.SUCCESS, this);
        this._End();
    }

    _Fail(p_msg){
        this._Notify(COMMAND_EVENT.FAIL, this, p_msg);
        this._End();
    }

    Cancel(){
        if(!this._running){return;}
        this._Cancel();
    }
    _Cancel(){
        this._InternalCancel();
        this._Notify(COMMAND_EVENT.CANCEL, this);
        this._End();
    }

    _End(){
        this._running = false;
        this._Notify(COMMAND_EVENT.END, this);
        this._Notify(EVENT.UPDATED, this);
    }

    //---> Pooling

    _CleanUp(){        
        super._CleanUp();
    }
    
    toString(){
        return `[>>${this.constructor.name}]`;
    }

}

module.exports = CommandChain;
},{"../@.js":6,"../signals/@.js":137,"./command-event.js":16,"./command.js":18}],15:[function(require,module,exports){
'use strict';

const { C, U, EVENT } = require(`../@.js`);
const { List, Dictionary } = require(`../collections/@.js`); 
const Command = require(`./command.js`);

class CommandCluster {
    constructor(p_onRegister = null) {

        this._context = null;

        this._commandList = new List(0);
        this._commandHooks = new Dictionary();
        this._onRegisterCmd = p_onRegister;

    }

    //---> Init

    get list(){ return this._commandList; }

    get context(){ return this._context; }
    set context(p_value)
    {
        this._context = p_value;
        var cmdList = this._commandList;
        for(var i = 0, n = cmdList.count; i < n; i++){
            cmdList.At(i).context = p_value;
        }
    }

    //---> Command registration

    Create( p_class, p_name = null, p_icon = null, p_hooks = null ){
        var cmd = Command.Rent(p_class, p_name, p_icon);
        this._Register(cmd, p_hooks);
        return cmd;
    }

    _Register(p_cmd, p_hooks = null){
        if(this._commandList.Add(p_cmd)){
            if(p_hooks){
                this._commandHooks.Set(p_cmd, p_hooks);
                var hook = null;
                for(var i = 0, n = p_hooks.length; i < n; i++){
                    hook = p_hooks[i];
                    p_cmd.Subscribe(hook.evt, U.Default(hook.thisArg, null), hook.fn);
                }
            }
            this._OnCommandRegistered(p_cmd); 
        }
    }

    _OnCommandRegistered(p_cmd){
        p_cmd.context = this._context;
        if(this._onRegisterCmd){ this._onRegisterCmd.call(null, p_cmd); }
    }

    RemoveCommand(p_cmd){
        if(this._commandList.Remove(p_cmd)){ 
            var hooks = this._commandHooks.Get(p_cmd);
            if(hooks){
                this._commandHooks.Remove(p_cmd);
                var hook = null;
                for(var i = 0, n = p_hooks.length; i < n; i++){
                    hook = p_hooks[i];
                    p_cmd.Unsubscribe(hook.evt, U.Default(hook.thisArg, null), hook.fn);
                }
            }
            this._OnCommandRemoved(p_cmd);
        }
    }

    _OnCommandRemoved(p_cmd){
        p_cmd.context = null;
    }

}

module.exports = CommandCluster;
},{"../@.js":6,"../collections/@.js":22,"./command.js":18}],16:[function(require,module,exports){
'use strict';

const _evt_success        = Symbol(`success`);
const _evt_fail         = Symbol(`fail`);
const _evt_cancel         = Symbol(`cancel`);
const _evt_start         = Symbol(`start`);
const _evt_end         = Symbol(`end`);

class COMMAND_EVENT{
    constructor() {}

    static get SUCCESS(){ return _evt_success; }
    static get FAIL(){ return _evt_fail; }
    static get CANCEL(){ return _evt_cancel; }
    static get START(){ return _evt_start; }
    static get END(){ return _evt_end; }
    

}

module.exports = COMMAND_EVENT;
},{}],17:[function(require,module,exports){
/**
 * Command can trigger actions.
 * Commands are a receptacle for :
 * - a function to execute
 * - shortcuts that will execute said function
 * - events that will allow UI to feedback the availability of a given command
 */

'use strict';

//const U = require(`../util.js`);
//const EVENT = require(`../event.js`);
//const POOL = require(`../collections/pool.js`);
//const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);

const { C, U, EVENT } = require(`../@.js`);
const POOL = require(`../collections/pool.js`);
const Command = require(`./Command.js`);
const COMMAND_EVENT = require(`./command-event.js`);

class CommandFn extends Command{
    constructor() {super();}

    //---> Static members

    static RentFn(p_options){

        var fn = U.Get(p_options, `fn`, null);
        if(!fn){ 
            throw new Error(`Cannot create CommandFn with empty function`); 
        }

        var cmd = POOL.Rent(CommandFn);
        cmd.options = p_options;

        return cmd;
    }

    //---> Init

    _Init(){

        super._Init();
        
        this._fn = null;
        this._thisArg = null;        
        this._options = null;

    }

    get thisArg(){return this._thisArg;}
    set thisArg(p_value){this._thisArg = p_value;}

    get fn(){return this._fn;}
    set fn(p_value){this._fn = p_value;}

    get options(){return this._options;}
    set options(p_value){

        this._options = p_value;

        this.fn = U.Get(p_value, `fn`, null);
        if(!this._fn){
            throw new Error(`CommandFn options have no function defined.`); 
        }

        this.thisArg = U.Get(p_value, `thisArg`, null);
        this.name = U.Get(p_value, `name`, U.CamelSplit(this._fn.name));
        this.icon = U.Get(p_value, `icon`, `%ICON%/icon_cmd.svg`);
        this.order = U.Get(p_value, `order`, 0);

    }

    _InternalExecute(){
        try{
            if(this._context){
                this._fn.call(this._thisArg, this._context);
            }else{
                this._fn.call(this._thisArg);
            }            
            this._Success();
        }catch(e){
            this._Fail(e.message);
        }
        
    }

}

module.exports = CommandFn;
},{"../@.js":6,"../collections/pool.js":37,"./Command.js":9,"./command-event.js":16}],18:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"../@.js":6,"../collections/@.js":22,"./command-event.js":16,"dup":9}],19:[function(require,module,exports){
/**
 * Streamlined app kickstart class
 * - is provided with a few basic data from electron such as global paths
 * - attempts to load preferences
 *      - on fail : create preference file
 *      - on success : read preference file
 *          - load and deploy base kit dependencies
 */
'use strict';

const SingletonEx = require(`./singleton-ex.js`);

const U = require(`./util.js`);
const PATH = require(`./path.js`);
const ENV = require(`./environment.js`);
const UI = require(`./ui.js`);
const EVENT = require(`./event.js`);
const RELAY = require(`./relay.js`);
const TIME = require(`./time.js`);
const APP_MESSAGES = require(`./app-messages.js`);
const APP_REQUEST = require(`./app-request.js`);

const CommandCluster = require(`./actions/command-cluster.js`);

const LayerContainer = require(`./ui-core/layer-container.js`);
const Preferences = require(`./data-app/preferences.js`);

const ENCODING = require(`./io/encoding.js`);
const IO_EVENT = require(`./io/io-event.js`);

const DIALOG = require(`./dialog.js`);
const RESOURCES = require(`./io/resources.js`);
const DocumentManager = require(`./io/document-manager.js`);

const { KitManager } = require(`./environment/@.js`);
const KitCore = require(`../kits/core/kit-core.js`);

const { DialogManager, AutoUpdateDialogBox } = require(`../com/ui-app/dialogs/@.js`);
const List = require(`./collections/list.js`);
const Command = require(`./actions/command.js`);

class AppBase extends SingletonEx{
    
    constructor() { super(); }

    _Init(){

        super._Init();

        ENV.instance.app = this;

        this._appWrapperClass = null;
        this._appWrapper = null;
        
        this._appLayers = null;
        this._env = null;

        this._prefsDoc = null;
        this._prefs = null;

        this._dialogHandlerClass = DialogManager;
        this._dialogHandler = null;

        this._commands = new CommandCluster();

        this._Bind(this._OnReceiveError);
        this._Bind(this._OnReceiveWarning);
        this._Bind(this._OnReceiveMessage);

        this._Bind(this._LoadBaseKits);
        this._Bind(this._OnPreferencesLoadSuccess);
        this._Bind(this._OnPreferencesLoadFail);
        this._Bind(this.SavePrefs);

    }

    _PostInit(){        
        super._PostInit();

        if(!this._appWrapperClass){ 
            throw new Error(`No app wrapper class defined.`); 
        }

        if(!U.IoF(this._appWrapperClass, LayerContainer)){ 
            throw new Error(`App wrapper class (${this._appWrapperClass.name}) must implement LayerContainer.`); 
        }

        this._SetUp();

    }

    _SetUp(){
        
        this._appWrapper = UI.Rent(this._appWrapperClass);
        this._appWrapper.setAttribute(`id`, `app`);

        if(this._appLayers){
            var layers = this._appLayers;
            var layerConf = null;
            var layer = null;
            for(var i = 0, n = layers.length; i < n; i++){
                layerConf = layers[i];
                layer = this._appWrapper.Add(layerConf.cl, -1);
                //TODO : Register layers and add an easy way to get them by ID
            }
        }

        this._dialogHandler = this._appWrapper.Add(this._dialogHandlerClass, -1);
        
        document.body.appendChild(this._appWrapper);

        // Subscribe to dialog events since we are ready to handle them
        RELAY.Subscribe(APP_REQUEST.DIALOG, this, this._HandleDialogRequest);

        // Initialize dialog after the wrappers have been set up
        DIALOG.instance.InitializeAndStart();
        RESOURCES.instance.InitializeAndStart();

    }

    get appWrapper(){ return this._appWrapper; }

    get prefs(){ return this._prefs; }

    Boot(){

        console.log(`%c ${this.constructor.name} => Boot `, 'background: #313131; color: #fff');

        this._LoadBaseKits();

        var prefs = DocumentManager.instance.GetMetaDocument(`${PATH.USER_DATA}/preferences.json`, Preferences);
        this._prefsDoc = prefs;
        this._prefs = prefs.data;
        
        prefs.Load({ 
            success:this._OnPreferencesLoadSuccess, 
            fail:this._OnPreferencesLoadFail 
        });

    }

    _LoadBaseKits(){
        KitManager.instance.Register(KitCore);
    }

    _OnPrefsUpdated(){
        TIME.NEXT_TICK = this.SavePrefs;
    }

    SavePrefs(){
        this._prefsDoc.Save();
    }

    _InitPreferences(p_prefs){
        p_prefs.Get('some-array', new Array(0));
    }

    _OnPreferencesLoadFail(p_prefs, p_err){
        this._InitPreferences(this._prefs);
        p_prefs.Save({ 
            success:this._OnPreferencesLoadSuccess, 
            fail:this._OnPreferencesLoadFail 
        });
    }

    _OnPreferencesLoadSuccess(p_prefs){
        this._prefs.Subscribe(EVENT.UPDATED, this, this._OnPrefsUpdated);

        //Force an initialization of preferences
        //so if any parameter has been added it will be accounted for.
        this._InitPreferences(this._prefs);
        this._PrepareEnvironment();
        this._PostPrepareEnvironment();
        this._OnAppReady();
    }    

    _PrepareEnvironment(){        
        RELAY.instance.Subscribe(APP_REQUEST.EDIT, this, this._OnEditRequest);
    }

    _PostPrepareEnvironment(){
        if(ENV.NODE){
            if(true){//Check if auto-updates are enabled
                DIALOG.Push({ dialogClass:AutoUpdateDialogBox });
            }
        }
    }

    _OnAppReady()
    {
        console.log(`%c ${this.constructor.name} => Ready `, 'background: #7ca500; color: #fff');
    }

    _HandleDialogRequest(p_request){
        this._dialogHandler.HandleDialogRequest(p_request);
    }
    
    _OnEditRequest(p_request){

    }

    // ---> E-APP Message handling (error/warning/messages)

    _OnReceiveError(p_evt, p_content){
        console.error(p_content.error);
        DIALOG.Push({ 
            title:p_content.message,
            icon:`%ICON%/icon_error.svg`,
            message:`${p_content.error.message}`,
            actions:[
                { text:`Close` },
            ]
        });
    }

    _OnReceiveWarning(p_evt, p_content){
        console.warning(p_content.message);
        DIALOG.Push({ 
            title:`Attention !`,
            icon:`%ICON%/icon_warning.svg`,
            message:`${p_content.message}`,
            actions:[
                { text:`Close` },
            ]
        });
    }

    _OnReceiveMessage(p_evt, p_content){
        console.log(p_content.message);
    }

}

module.exports = AppBase;
},{"../com/ui-app/dialogs/@.js":160,"../kits/core/kit-core.js":295,"./actions/command-cluster.js":15,"./actions/command.js":18,"./app-messages.js":20,"./app-request.js":21,"./collections/list.js":36,"./data-app/preferences.js":41,"./dialog.js":93,"./environment.js":94,"./environment/@.js":95,"./event.js":103,"./io/document-manager.js":106,"./io/encoding.js":109,"./io/io-event.js":110,"./io/resources.js":118,"./path.js":121,"./relay.js":122,"./singleton-ex.js":146,"./time.js":148,"./ui-core/layer-container.js":234,"./ui.js":242,"./util.js":244}],20:[function(require,module,exports){
'use strict'

class APP_MESSAGES{
    constructor(){}

    static get AU_CHECK_REQUEST(){ return `au-check-request`; }
    static get AU_CHECK_REQUEST_HANDLED(){ return `au-check-request-handled`; }
    static get AU_ERROR(){ return `au-error`; }
    static get AU_WARNING(){ return `au-warning`; }
    static get AU_MESSAGE(){ return `au-message`; }
    static get AU_NO_SERVER(){ return `au-no-server`; }
    static get AU_ATTEMPT_CHECK(){ return `au-attempt-check`; }
    static get AU_CHECKING_FOR_UPDATE(){ return `au-checking-for-update`; }
    static get AU_UPDATE_AVAILABLE(){ return `au-udpate-available`; }
    static get AU_UPDATE_NOT_AVAILABLE(){ return `au-update-not-available`; }
    static get AU_UPDATE_DOWNLOADED(){ return `au-update-downloaded`; }
    

}

module.exports = APP_MESSAGES;
},{}],21:[function(require,module,exports){
'use strict';

const _evt_exit        = 'exit';

const _evt_edit        = 'edit';
const _evt_preview     = 'preview';
const _evt_open        = 'open';
const _evt_close       = 'close';
const _evt_create      = 'create';

const _evt_save        = 'save';
const _evt_delete      = 'delete';
const _evt_rename      = 'rename';

const _evt_apply       = 'apply';

const _evt_dialog      = 'dialog';

class APP_REQUEST{
    constructor() {}

    static get EXIT(){ return _evt_exit; }

    static get EDIT(){ return _evt_edit; }
    static get PREVIEW(){ return _evt_preview; }
    static get OPEN(){ return _evt_open; }
    static get CLOSE(){ return _evt_close; }
    static get CREATE(){ return _evt_create; }
    
    static get SAVE(){ return _evt_save; }
    static get DELETE(){ return _evt_delete; }
    static get RENAME(){ return _evt_rename; }

    static get APPLY(){ return _evt_apply; }

    static get DIALOG(){ return _evt_dialog; }

}

module.exports = APP_REQUEST;
},{}],22:[function(require,module,exports){
module.exports = {

    DisposableObject : require(`./disposable-object.js`),
    DisposableObjectEx : require(`./disposable-object-ex.js`),

    Dictionary : require(`./dictionary.js`),
    KDictionary : require(`./k-dictionary.js`),
    DictionaryList : require(`./dictionary-list.js`),

    List : require(`./list.js`),

    Catalog : require(`./catalog.js`),
    CatalogItem : require(`./catalog-item.js`),
    CatalogHandler : require(`./catalog-handler.js`),

    ID : require(`./id.js`),
    IDDispenser : require(`./id-dispenser.js`),

    POOL : require(`./pool.js`),
    COLLECTION_EVENT : require(`./collection-event.js`),
    CATALOG_EVENT : require(`./catalog-event.js`),
    CATALOG_SORTING : require(`./catalog-sorting.js`)

}
},{"./catalog-event.js":23,"./catalog-handler.js":24,"./catalog-item.js":25,"./catalog-sorting.js":26,"./catalog.js":27,"./collection-event.js":28,"./dictionary-list.js":29,"./dictionary.js":30,"./disposable-object-ex.js":31,"./disposable-object.js":32,"./id-dispenser.js":33,"./id.js":34,"./k-dictionary.js":35,"./list.js":36,"./pool.js":37}],23:[function(require,module,exports){
'use strict';

const _evt_itemAdded     = Symbol(`itemAdded`);
const _evt_itemRemoved   = Symbol(`itemRemoved`);

const _evt_rootItemAdded     = Symbol(`rootItemAdded`);
const _evt_rootItemRemoved   = Symbol(`rootItemRemoved`);

const _evt_sorted   = Symbol(`sorted`);

const _evt_itemDataAdded     = Symbol(`dataItemAdded`);
const _evt_itemDataRemoved   = Symbol(`dataItemRemoved`);

class CATALOG_EVENT{
    constructor() {}

    static get ITEM_ADDED(){ return _evt_itemAdded; }
    static get ITEM_REMOVED(){ return _evt_itemRemoved; }

    static get ROOT_ITEM_ADDED(){ return _evt_rootItemAdded; }
    static get ROOT_ITEM_REMOVED(){ return _evt_rootItemRemoved; }

    static get ITEM_DATA_CHANGED(){ return _evt_itemDataAdded; }
    static get ITEM_DATA_RELEASED(){ return _evt_itemDataRemoved; }

    static get SORTED(){ return _evt_sorted; }

}

module.exports = CATALOG_EVENT;
},{}],24:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

const DisposableObjectEx = require(`./disposable-object-ex.js`);
const COLLECTION_EVENT = require(`./collection-event.js`);
const CATALOG_EVENT = require(`./catalog-event.js`);
const Dictionary = require(`./dictionary.js`);
const Observer = require(`../signals/observer.js`);

class CatalogHandler extends DisposableObjectEx{
    constructor() {super();}

    //---> Init

    _Init(){

        super._Init();

        this._releaseItemAlongData = false;

        this._catalog = null;
        this._bindings = new Dictionary();

        this._catalogObserver = new Observer();
        this._catalogObserver.Hook(COLLECTION_EVENT.ITEM_ADDED, this, this._OnItemAdded);
        this._catalogObserver.Hook(COLLECTION_EVENT.ITEM_REMOVED, this, this._OnItemRemoved);
        this._catalogObserver.Hook(CATALOG_EVENT.SORTED, this, this._OnCatalogSorted);

    }
    
    get count(){return this._catalog.count;}

    get releaseItemAlongData(){return this._releaseItemAlongData;}
    set releaseItemAlongData(p_value){ this._releaseItemAlongData = p_value }

    get catalog(){return this._catalog;}
    set catalog(p_value){

        if(this._catalog == p_value){return;}
        var oldValue = this._catalog;
        this._catalog = p_value;

        if(oldValue){

        }
        if(p_value){

        }

        this._catalogObserver.observable = p_value;
        this._OnCatalogChanged(oldValue);
    }

    /**
     * Returns the item at the specified position in the catalog.
     * @param {Number} p_position 
     */
    At(p_position){
        return this._catalog.At(p_position);
    }

    /**
     * Callback when catalog data has changed
     * @param {*} p_oldDir 
     */
    _OnCatalogChanged(p_oldDir){

        var count = 0;

        if(p_oldDir){
            count = p_oldDir.count;
            for(var i = 0; i < count; i++){
                this._OnItemRemoved(p_oldDir, p_oldDir.At(i))
            }
        }
        
        var c = this._catalog;

        if(c){
            count = c.count;
            for(var i = 0; i < count; i++){
                this._OnItemAdded(c, c.At(i))
            }
        }
        
    }

    /**
     * Callback when an item is added to the catalog
     * @param {*} p_origin 
     * @param {*} p_item 
     */
    _OnItemAdded(p_origin, p_item){
        p_item.Subscribe(CATALOG_EVENT.ITEM_DATA_CHANGED, this, this._OnItemDataChanged);
        p_item.Subscribe(CATALOG_EVENT.ITEM_DATA_RELEASED, this, this._OnItemDataReleased);

        this._Notify(COLLECTION_EVENT.ITEM_ADDED, this, p_item);
    }

    /**
     * Callback when an item is removed from the catalog
     * @param {*} p_origin 
     * @param {*} p_item 
     */
    _OnItemRemoved(p_origin, p_item){

        p_item.Unsubscribe(CATALOG_EVENT.ITEM_DATA_CHANGED, this, this._OnItemDataChanged);
        p_item.Unsubscribe(CATALOG_EVENT.ITEM_DATA_RELEASED, this, this._OnItemDataReleased);

        var binding = this._bindings.Get(p_item);
        this.UnbindItem(p_item, binding);
        this._Notify(COLLECTION_EVENT.ITEM_REMOVED, this, p_item, binding);
    }

    _OnItemDataChanged(p_item, p_data)
    {

    }

    _OnItemDataReleased(p_item, p_data)
    {
        if(this._releaseItemAlongData){ p_item.Release(); }
    }

    _OnCatalogSorted(p_catalog){
        this._Notify(COLLECTION_EVENT.SORTED, this);
    }

    ApplySortOrder(p_items){
        var item;
        for(var i = 0, n = p_items.length; i < n; i++ ){
            item = p_items[i];
            item.order = this._catalog._items.indexOf(item.data);
        }
    }

    /**
     * Returns the binding associated with the specified item.
     * @param {*} p_item 
     */
    GetBinding(p_item){
        return this._bindings.Get(p_item);
    }

    /**
     * Returns the binding associated with the item 
     * at the specified position in the catalog
     * @param {*} p_position 
     */
    GetBindingAt(p_position){
        var item = this._catalog.At(p_position);
        if(!item){return null;}
        return this._bindings.Get(item);
    }

    /**
     * Binds an item in this handler to an item in the catalog
     * @param {*} p_item 
     * @param {*} p_binding 
     */
    BindItem(p_item, p_binding){
        var b = this._bindings;
        var current = b.Get(p_item);
        if(current){throw new Error(`Item already bound.`);}
        b.Set(p_item, p_binding);
    }

    /**
     * Removes the specified item from the binding list
     * @param {*} p_item 
     */
    UnbindItem(p_item){
        this._bindings.Remove(p_item);
    }

    _CleanUp(){
        this._catalog = null;
        super._CleanUp();        
    }

}

module.exports = CatalogHandler;
},{"../@.js":6,"../signals/observer.js":142,"./catalog-event.js":23,"./collection-event.js":28,"./dictionary.js":30,"./disposable-object-ex.js":31}],25:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const ID = require(`./id.js`);
const DisposableObjectEx = require(`./disposable-object-ex.js`);
const CATALOG_EVENT = require(`./catalog-event.js`);
const CallNext = require(`../signals/callnext.js`);

class CatalogItem extends DisposableObjectEx{
    constructor() {super();}

    get isDir(){return this._isDir;}

    //---> Init

    _Init(){
        super._Init();

        this._nextOnUpdate = new CallNext(this._Bind(this._OnUpdate));

        this._parent = null;
        this._options = null;

        this._isDir = false;
        this._name = null;
        this._icon = null;
        this._path = null;

        this._primaryCommand = null;
        this._secondaryCommand = null;
        this._commandList = null;

        this._autoRelease = true;

    }

    get autoRelease(){return this._autoRelease;}
    set autoRelease(p_value){this._autoRelease = p_value;}
    
    set parent( p_value ){        
        if(this._parent == p_value){return;}
        var oldValue = this._parent;
        this._parent = p_value;

        if(oldValue){
            oldValue.Remove(this);
        }
        if(p_value){
            p_value.Add(this);
        }
    }
    get parent(){ return this._parent; }

    get options(){ return this._options; }
    set options( p_value ){
        this._options = p_value; 

        this._path = U.Get(p_value, `path`, this._path);
        this._name = U.Get(p_value, `name`, this._name);
        this._icon = U.Get(p_value, `icon`, this._icon);
        this._primaryCommand = U.Get(p_value, `primaryCommand`, this._primaryCommand);
        this._secondaryCommand = U.Get(p_value, `secondaryCommand`, this._secondaryCommand);
        this._commandList = U.Get(p_value, `commandList`, this._commandList);

        this.data = U.Get(p_value, `data`, this._data);

        this._OnOptionsUpdated(p_value);
        this._ScheduleOnUpdate();
    }

    get path(){ return this._path; }
    set path( p_value ){ 
        this._path = p_value; 
        this._ScheduleOnUpdate(); 
    }
    
    get name(){ return this._name; }
    set name( p_value ){ 
        this._name = p_value; 
        this._ScheduleOnUpdate(); 
    }
    
    get icon(){ return this._icon; }
    set icon( p_value ){ 
        this._icon = p_value; 
        this._ScheduleOnUpdate(); 
    }

    get data(){ return this._data; }
    set data( p_value ){
        var p_oldValue = this._data;
        this._data = p_value; 

        if(p_oldValue)
        {
            p_oldValue.Unsubscribe(EVENT.RELEASED, this, this._OnDataReleased); 
        }

        if(p_value)
        {
            p_value.Subscribe(EVENT.RELEASED, this, this._OnDataReleased);
        }

        this._OnDataChanged(p_oldValue);
        if(p_value){ this._OnDataUpdated(p_value); }

    }

    _OnDataChanged(p_oldData){
        this._Notify(CATALOG_EVENT.ITEM_DATA_CHANGED, this, this._data);
        this._ScheduleOnUpdate();
    }

    _OnDataUpdated(p_data){
        
    }

    _OnDataReleased(p_data)
    {
        this._Notify(CATALOG_EVENT.ITEM_DATA_RELEASED, this, p_data);
    }

    _OnOptionsUpdated( p_options ){

    }

    //---> Commands

    get primaryCommand(){return this._primaryCommand;}
    set primaryCommand(p_value){
        //Set a primary command associated with this catalog item.
        this._primaryCommand = p_value;
        this._ScheduleOnUpdate();
    }

    get secondaryCommand(){return this._secondaryCommand;}
    set secondaryCommand(p_value){
        //Set a secondary command associated with this catalog item.
        this._secondaryCommand = p_value;
        this._ScheduleOnUpdate();
    }

    get commandList(){return this._commandList;}
    set commandList(p_value){
        //Set a command list available for a toolbar to display.
        this._commandList = p_value;
        this._ScheduleOnUpdate();
    }
    
    
    AddCommand(p_cmd){
        if(!this._commandList){
            this.commandList = [p_cmd];
            return;
        }
        
        if(this._commandList.includes(p_cmd)){return;}
        this._commandList.push(p_cmd);
        this._ScheduleOnUpdate();
    }

    //---> Options

    /**
     * Appends the specified options this item's options.
     * @param {Object} p_options 
     */
    AppendOptions(p_options){
        var opt = this._options;
        if(!opt){
            opt = {};
            this._options = opt;
        }

        for(var member in p_options){
            opt[member] = p_options[member];
        }

        this._ScheduleOnUpdate();
    }

    /**
     * Return the option value at specified id.
     * Return the fallback value in case no option exists.
     * @param {String} p_id 
     * @param {*} p_fallback 
     */
    GetOption(p_id, p_fallback = null){
        var opt = this._options;
        if(!opt || !opt.hasOwnProperty(p_id)){return p_fallback;}
        return opt[p_id];
    }

    /**
     * Set the value of the option with the specified id.
     * @param {String} p_id 
     * @param {*} p_value 
     */
    SetOption(p_id, p_value){

        var opt = this._options;
        if(!opt){
            opt = new {};
            this._options = opt;
        }
        var oldValue = opt[p_id];
        opt[p_id] = p_value;

        this._ScheduleOnUpdate();

    }

    get root(){

        if(!this._parent){
            return this;
        }else{
            return this._parent.root;
        }
    }

    _CleanUp(){

        if(this._parent){
            this._parent.Remove(this);
        }
        
        this._autoRelease = true;

        this._parent = null;
        this._options = null;

        this._path = null;
        this._name = null;
        this.data = null;

        super._CleanUp();
        
    }

    _ScheduleOnUpdate(){
        this._nextOnUpdate.Schedule();
    }

    _OnUpdate(){
        this._Notify(EVENT.UPDATED, this);
    }

    toString(){
        return `${this._name} (${this.constructor.name})`;
    }

}

module.exports = CatalogItem;
},{"../@.js":6,"../signals/callnext.js":140,"./catalog-event.js":23,"./disposable-object-ex.js":31,"./id.js":34}],26:[function(require,module,exports){
let _optionID = ``;
let _compareMethod = null;

/*

compareFunction(a,b) < 0
Then a comes before b in the answer.

compareFunction(a,b) > 0
Then b comes before a in the answer.

compareFunction(a,b) = 0
Then the order of a and b remains unchanged.

*/

class CATALOG_SORTING{
    constructor(){}

    static NAME_ASC( p_a, p_b ){
        var a = p_a._isDir, b = p_b._isDir;
        if((a && b) || (!a && !b)){
            return p_a._name.localeCompare(p_b._name);
        }else if(!a){
            return 1;
        }else{
            return -1;
        }
    }

    static NAME_DSC( p_a, p_b ){
        var a = p_a._isDir, b = p_b._isDir;
        if((a && b) || (!a && !b)){
            return p_a._name.localeCompare(p_b._name) * -1;
        }else if(!a){
            return 1;
        }else{
            return -1;
        }
    }

    // 0, 1, 2
    static NUMERIC_ASC( p_a, p_b ){
        return p_a - p_b;
    }

    // 2, 1, 0
    static NUMERIC_DSC( p_a, p_b ){
        return p_b - p_a;
    }

    // a, b, c
    static STRING_ASC( p_a, p_b ){
        return p_a.localeCompare(p_b);
    }

    // c, b, a
    static STRING_DSC( p_a, p_b ){
        return p_a.localeCompare(p_b) * -1;
    }

    static OPTION( p_a, p_b ){
        var a = p_a._isDir, b = p_b._isDir;
        if((a && b) || (!a && !b)){
            return _compareMethod(p_a.GetOption(_optionID), p_b.GetOption(_optionID));
        }else if(!a){
            return 1;
        }else{
            return -1;
        }
    }

    static SortByOption(p_catalog, p_optionId, p_method ){
        _optionID = p_optionId;
        _compareMethod = p_method;
        p_catalog._items.sort(CATALOG_SORTING.OPTION);
    }

}
},{}],27:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const TIME = require(`../time.js`);

const CATALOG_EVENT = require(`./catalog-event.js`);
const COLLECTION_EVENT = require(`./collection-event.js`);
const POOL = require(`./pool.js`);
const CatalogItem = require(`./catalog-item.js`);
const CATALOG_SORTING = require(`./catalog-sorting.js`);

class Catalog extends CatalogItem{
    constructor(p_autoSort = true) {super(); this.autoSort = p_autoSort;}
    
    /**
     * Parse a string to a catalog-friendly format
     * @param {String} p_path 
     */
    static PathInfos(p_path){

        var result = {
            path:null,
            isDir:false,
            name:null,
            valid:false
        };

        if(!p_path){
            return result;
        }else{
            result.valid = true;
        }

        var pathSplit = p_path.split(`/`);
        var isDir = false;
        var name = '';
        if(pathSplit.length == 1){
            //Assumed to be a single item
            name = pathSplit[0];
        }else{

            var pathArray = new Array();
            var current = null;
            for(var i = 0, n = pathSplit.length; i < n; i++){
                current = pathSplit.shift();
                if(!U.Empty(current)){
                    pathArray.push(current);
                }else if(i == n-1){
                    isDir = true;
                }
            }

            if(isDir){
                name = pathArray[pathArray.length-1];
            }else{
                name = pathArray.pop();
            }

            result.path = pathArray;

        }

        result.isDir = isDir;
        result.name = name;
        return result;

    }

    /**
     * Creates a Catalog from a mockup object.
     * @param {Object} p_rootOptions 
     * @param {*} p_content 
     * @param {*} p_parent 
     */
    static CreateFrom(p_rootOptions, p_content, p_parent = null){
        if(!p_content && !p_rootOptions){
            throw new Error(`Cannot create Catalog from null options or struct.`);}

        var catalog = POOL.Rent(Catalog);
        catalog.options = p_rootOptions;

        if(p_parent){
            catalog.parent = p_parent;
        }

        if(p_content){

            var item_options = null;
            var item = null;
            for(var i = 0, n = p_content.length; i < n; i++){
                item_options = p_content[i];
                if(item_options.hasOwnProperty(`content`)){
                    Catalog.CreateFrom(item_options, item_options.content, catalog);
                }else{
                    catalog.Register(item_options);
                }
            }

        }

        return catalog;

    }

    _OnOptionsUpdated( p_options ){
        super._OnOptionsUpdated(p_options);
        this.autoSort = U.Get( p_options, `autoSort`, this._parent ? this._parent.autoSort : this._autoSort);
    }

    _Init(){
        super._Init();
        
        this._isDir = true;
        this._expanded = false;
        this._items = new Array(0);

        this._Bind(this._SortTick);
        this._sortPending = false;
        this._autoSort = true;
        this._defaultSortFunc = null;
    }

    get expanded(){return this._expanded;}
    set expanded(p_value){this._expanded = p_value;}

    get count(){return this._items.length;}
    

    /**
     * Returns the item at the specified position in this catalog.
     * @param {Number} p_position 
     */
    At(p_position){
        if(this._items.length <= p_position){throw new Error(`Argument error : Catalog index outside boundaries.`);}
        return this._items[p_position];
    }

    /**
     * Loops through all items in Catalog. Callback should match the signature :
     * (item, index)
     * @param {Object} p_callback
     * @param {Object} p_this
     * @param {Object} p_reverse
     */
    ForEach(p_callback, p_this = null, p_reverse = false){

        var n = this._items.length;

        if(p_this)
        {
            if(p_reverse)
            {
                for(var i = n-1; i >= 0; i--){
                    p_callback.call(p_this, this._items[i], i);
                }
            }
            else
            {
                for(var i = 0; i < n; i++){
                    p_callback.call(p_this, this._items[i], i);
                }
            }
        }
        else
        {
            if(p_reverse)
            {
                for(var i = n-1; i >= 0; i--){
                    p_callback.call(null, this._items[i], i);
                }
            }
            else
            {
                for(var i = 0; i < n; i++){
                    p_callback.call(null, this._items[i], i);
                }
            }
        }
    }

    /**
     * Gets or create a catalog inside this one using the specified options
     * @param {Object} p_options 
     */
    GetOrCreateCatalog(p_options){

        var tof = typeof p_options;
        var catalogName = catalogName = ( tof == `string`) ? p_options : p_options.name;

        var list = this._items;
        var catalog = null;
        for(var i = 0, n = list.length; i < n; i++){
            catalog = list[i];
            if(U.IoF(catalog, Catalog) && catalog.name == catalogName){ return catalog; }
        }

        catalog = POOL.Rent(Catalog);
        catalog.icon = `%ICON%/icon_directory.svg`;
        
        if(tof == `object`){catalog.options = p_options;}
        catalog.name = catalogName;        

        return this.Add(catalog);

    }

    /**
     * Create a catalog item given the specified item infos.
     * @param {Object} p_itemInfos 
     */
    Register(p_itemInfos){

        if(!p_itemInfos){
            throw new Error(`Cannot register item with null infos`);
        }

        var pathInfos = Catalog.PathInfos(p_itemInfos.path);
        var item = null;

        //If no valid path is provided, simply create and return a new CatalogItem
        if(!pathInfos.valid || !pathInfos.path){
            item = POOL.Rent(CatalogItem);
            item.name = pathInfos.name;
            item.icon = `%ICON%/icon_document.svg`;
            item.options = p_itemInfos;
            return this.Add(item);
        }

        //Given a path we reach for the root to handle registration
        var r = this.root;
        if(r != this){ return r.Register(p_itemInfos); }

        //As the root, resolve or create the provided path
        var path = pathInfos.path;
        var catalog = null;
        for(var i = 0, n = path.length; i < n; i++){
            catalog = (i == 0 ? this : catalog ).GetOrCreateCatalog(path[i]);
        }

        if(pathInfos.isDir){
            catalog.options = p_itemInfos;
            return catalog;
        }else{
            item = POOL.Rent(CatalogItem);
            item.name = pathInfos.name;
            item.icon = U.Get(p_itemInfos, `icon`, `%ICON%/icon_document.svg`);
            item.options = p_itemInfos;
            return catalog.Add(item);
        }

    }

    /**
     * Add the specified item to this catalog
     * @param {CatalogItem} p_item 
     */
    Add(p_item){

        if(!U.IoF(p_item, CatalogItem)){return;}

        var index = this._items.indexOf(p_item);
        if(index != -1){return;}

        this._items.push(p_item);
        this._OnItemAdded(p_item);

        return p_item;

    }

    /**
     * Callback when an item has been added to the catalog
     * @param {CatalogItem} p_item 
     */
    _OnItemAdded(p_item){
        
        p_item.parent = this;

        this._Notify(COLLECTION_EVENT.ITEM_ADDED, this, p_item);
        p_item.Subscribe(EVENT.RELEASED, this, this._OnItemReleased);

        if(this._autoSort){ this._RequestSort(); }

    }

    _OnItemReleased(p_item){
        this.Remove(p_item);
    }

    /**
     * Removes the specified item from this catalog
     * @param {CatalogItem} p_item 
     */
    Remove(p_item){

        if(!U.IoF(p_item, CatalogItem)){return;}

        var index = this._items.indexOf(p_item);

        if(index == -1){return;}

        this._items.splice(index, 1);

        this._OnItemRemoved(p_item);
    }
    
    /**
     * Callback when an item is removed from this catalog
     * @param {CatalogItem} p_item 
     */
    _OnItemRemoved(p_item){
        this._Notify(COLLECTION_EVENT.ITEM_REMOVED, this, p_item);
        p_item.Unsubscribe(EVENT.RELEASED, this, this._OnItemReleased);

        if(p_item.parent == this){
            p_item.parent = null;
            if(p_item._autoRelease){
                p_item.Release();
            }
        }        
    }

    /**
     * Resolve the specified path and return the item if it exists.
     * @param {String | Array} p_path
     * @param {Number} p_from
     */
    Resolve( p_path, p_from = 0 )
    {
        //TODO:Resolve path or id, based on whether it`s an array or a string
    }

    FindDataHolders( p_data, p_results = null ){

        if(!p_results){ p_results = new Array(0); }
        
        var item = null;

        for(var i = 0, n = this._items.length; i < n; i++){
            item = this._items[i];
            if(item.data == p_data){ 
                if(!p_results.includes(item)){
                    p_results.push(item);
                }
            }
            if(U.IoF(item, Catalog)){
                item.FindDataHolders(p_data, p_results);
            }
        }

        return p_results;

    }

    FindFirstDataHolder( p_data ){
        
        var item = null;

        for(var i = 0, n = this._items.length; i < n; i++){
            item = this._items[i];
            if(item.data == p_data){ return item; }
            if(U.IoF(item, Catalog)){
                item = item.FindDataHolders(p_data);
                if(item){ return item; }
            }
        }

        return null;

    }

    FindFirstDataByStringID( p_stringID )
    {
        var item = null;

        for(var i = 0, n = this._items.length; i < n; i++){
            item = this._items[i];
            if(item.data && item.data.id && item.data.id.name == p_stringID){
                return item;
            }
        }

        return null;
    }

    FindFirstByOptionValue( p_key, p_value )
    {
        var item = null;
        var opt;
        for(var i = 0, n = this._items.length; i < n; i++){
            item = this._items[i];
            opt = item._options[p_key];
            if(opt && opt == p_value){
                return item;
            }
        }

        return null;
    }

    //--->

    get autoSort(){ return this._autoSort; }
    set autoSort(p_value){
        if(this._autoSort == p_value){ return; }
        this._autoSort = p_value;
        if(p_value){
            this._RequestSort();
        }else{
            this._ClearPendingSort();
        }
    }

    get defaultSortFunc(){return this._defaultSortFunc;}
    set defaultSortFunc(p_value){this._defaultSortFunc = p_value;}

    Sort(p_options = null){

        var sorted = false;
        if(!p_options){
            this._items.sort(this._defaultSortFunc ? this._defaultSortFunc : CATALOG_SORTING.NAME_ASC);
            sorted = true;
        }else{
            if(p_options.id){
                CATALOG_SORTING.SortByOption(this, p_options.id, p_options.fn);
                sorted = true;
            }else if(p_options.fn){
                this._items.sort(p_options.fn);
                sorted = true;
            }
        }

        if(sorted){ this._Notify(CATALOG_EVENT.SORTED, this); }

    }

    _RequestSort(p_force = false){

        if(p_force){
            this._ClearPendingSort();
            this.Sort();
        }else if(!this._sortPending){
            this._sortPending = true;
            TIME.ON(TIME.TICK, this._SortTick);
        }
    }

    _SortTick(){
        if(!this._ClearPendingSort()){ return; }
        this.Sort();
    }

    _ClearPendingSort(){
        if(this._sortPending){
            TIME.OFF(TIME.TICK, this._SortTick);
            this._sortPending = false;
            return true;
        }
        return false;
    }

    /**
     * Clears the catalog and releases all items
     */
    Clear(){

        var list = this._items;
        
        for(var i = 0, n = list.length; i < n; i++ ){
            list[list.length-1].Release();
        }

        list.length = 0;
        this._ClearPendingSort();

    }

    _CleanUp()
    {
        this._autoSort = true;
        this._defaultSortFunc = null;
        this.Clear();
        super._CleanUp();
    }

    StructToString( p_string = null, p_depth = null ){

        if(!p_string){p_string = '';}
        if(U.Void(p_depth)){p_depth = -1;}
        p_depth++;

        var s = `\t`
        var spaces = ``;
        for(var i = 0; i < p_depth; i++){ spaces += s; }

        p_string += `${spaces}/${this._name} \n`;

        var item = null;
        for(var i = 0, n = this._items.length; i < n; i++){
            item = this._items[i];
            if(U.IoF(item, Catalog)){
                p_string = item.StructToString(p_string, p_depth);
            }else{
                p_string += `${spaces}${s}· ${item.name}\n`;
            }
        }

        return p_string;
    }

    

    toString(){
        //starts with `!` to ensure this gets sorted first in arrays
        return `!${this._name} (${this._items.length})`;
    }

}

module.exports = Catalog;
},{"../@.js":6,"../time.js":148,"./catalog-event.js":23,"./catalog-item.js":25,"./catalog-sorting.js":26,"./collection-event.js":28,"./pool.js":37}],28:[function(require,module,exports){
'use strict';

const _evt_itemAdded         = Symbol(`itemAdded`);
const _evt_itemRemoved         = Symbol(`itemRemoved`);

class COLLECTION_EVENT{
    constructor() {}

    static get ITEM_ADDED(){ return _evt_itemAdded; }
    static get ITEM_REMOVED(){ return _evt_itemRemoved; }

}

module.exports = COLLECTION_EVENT;
},{}],29:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

class DictionaryList{

    constructor() {
        this._map = new Map();
    }

    get internalMap(){ return this._map; }

    get count(){ return this._map.size; }

    get keys(){ return Array.from( this._map.keys() ); }

    /**
     * Return whether or not the Dictionary contains the given key.
     * If a value is specified, return whether or not the key has the given value registered.
     * @param {*} p_key 
     * @param {*} p_value 
     */    
    Contains( p_key, p_value = undefined ){

        if(!this._map.has(p_key)){
            return false;
        }

        if(p_value == undefined){
            return true;
        }else{
            return this._map.get(p_key).includes(p_value);
        }
        
    }

    /**
     * Return the value count for the given key.
     * @param {*} p_key 
     */
    Count( p_key ){

        if(this._map.has(p_key)){
            return this._map.get(p_key).length;
        }else{
            return 0;
        }            

    }

    /**
     * Add a value to the list associated with the given key.
     * @param {*} p_key 
     * @param {*} p_value 
     */
    Set( p_key, p_value ){

        var list = null;
        
        if(this._map.has(p_key)){
            list = this._map.get(p_key);
        }else{
            list = new Array(0);
            this._map.set(p_key, list);
        }

        if(list.includes(p_value)){return;}

        list.push(p_value);

    }

    /**
     * Return the list associated with the given key.
     * If index is specified (>= 0), return the value at the given index or undefined if out-of-bounds
     * @param {*} p_key 
     * @param {*} p_index 
     */
    Get( p_key, p_index ){

        if(!this._map.has(p_key)){return undefined;}
        
        var list = this._map.get(p_key);
        if(p_index == undefined || p_index == -1){
            return list;
        }else if(list.length < p_index){
            return list[p_index];
        }else{
            return undefined;
        }

    }

    /**
     * Remove the given value from the list associated with the given key.
     * Returns true if the value existed and has been removed, otherwise return false.
     * @param {*} p_key 
     * @param {*} p_value 
     */
    Remove( p_key, p_value ){

        if(!p_value|| !p_key){return false;}

        var list = this._map.get(p_key);

        if(!list){return false;}

        var index = list.indexOf(p_value);
        if(index != -1){
            list.splice(index, 1);
            if(list.length == 0){
                this._map.delete(p_key);
            }
            return true;
        }

        return false;

    }

    /**
     * TODO : Doc
     * @param {*} p_key 
     * @param  {...any} args 
     */
    RemoveMultiple(p_key, ...args){
        throw new Error("RemoveMultiple not implemented");
    }

    /**
     * Remove and return the last value from the list associated with the given key
     * @param {*} p_key 
     */
    Pop( p_key ){

        if(!this._map.has(p_key)){return undefined;}
        
        var list = this._map.get(p_key);
        var value = list.pop();

        if(list.length == 0){
            this._map.delete(p_key);
        }

        return value;

    }

    /**
     * Clears all keys and values.
     */
    Clear(){
        this._map.forEach( this._Clear, this );
        this._map.clear();
    }

    _Clear( p_value, p_key, p_map ){
        p_value.length = 0;
    }

}

module.exports = DictionaryList;
},{"../@.js":6}],30:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

class Dictionary{

    constructor() {
        this._map = new Map();
    }

    get internalMap(){ return this._map; }

    get count(){ return this._map.size; }

    get keys(){ return Array.from( this._map.keys() ); }

    /**
     * Return whether or not the Dictionary contains the given key.
     * @param {*} p_key 
     */
    Contains( p_key ){
        return this._map.has(p_key);
    }

    /**
     * Associate a value to a given key.
     * @param {*} p_key 
     * @param {*} p_value 
     */
    Set( p_key, p_value ){
        this._map.set(p_key, p_value);
    }

    /**
     * Return the value associated with the given key.
     * @param {*} p_key 
     */
    Get( p_key ){
        return this._map.get(p_key);
    }

    /**
     * Reverse lookup through the keys and return an array 
     * of keys mapped to given value. Costly function, avoid.
     * @param {*} p_value 
     */
    GetValueKeys( p_value ){
        if(U.Void(p_value)){return null;}
        var result = null;
        var keyList = this.keys;
        var key;
        for(var i = 0, n = keyList.length; i < n; i++){
            key = keyList[i];
            if(this._map.get(key) == p_value){
                if(result == null){result = new Array(0);}
                result.push(key);
            }
        }
        return result;
    }

    /**
     * Remove the given key from the Dictionary, along with its associated value.
     * Returns true if the key existed and has been removed, otherwise return false.
     * @param {*} p_key 
     */
    Remove( p_key ){
        return this._map.delete(p_key);
    }

    /**
     * Clears the Dictionary from all keys and values.
     */
    Clear(){
        this._map.clear();
    }

}

module.exports = Dictionary;
},{"../@.js":6}],31:[function(require,module,exports){
'use strict';

const { EVENT } = require(`../@.js`);

const DisposableObject = require(`./disposable-object.js`);
const SignalBox = require(`../signals/signal-box`);

class DisposableObjectEx extends DisposableObject{
    constructor() {super();}

    //---> Init

    _Init(){
        super._Init();
        this._releasePrevented = false;
        this._signalBox = new SignalBox();
        this._signalBox._observable = this;
    }

    //---> Signals

    _Notify( p_evt, ...args ){
        this._signalBox.Dispatch(p_evt, ...args);
        //this._signalBox.Dispatch.apply(this._signalBox, ...args);
    }

    On( p_evt, p_fn ){ this.Subscribe(p_evt, null, p_fn); }    
    Subscribe( p_evt, p_suscriber, p_fn){ 
        this._signalBox.Add(p_evt, p_suscriber, p_fn); 
    }
    
    Off( p_evt, p_fn ){ this.Unsubscribe(p_evt, null, p_fn); }
    Unsubscribe( p_evt, p_suscriber, p_fn ){ 
        this._signalBox.Remove(p_evt, p_suscriber, p_fn); 
    }

    //---> Pooling

    PreventRelease(){
        this._releasePrevented = true;
    }

    /**
     * Releases the object and pool it.
     */
    Release(){
        
        if(this._releasing){return;}        

        this._signalBox.silent = false;
        this._releasing = true;

        this._Notify(EVENT.RELEASING, this);

        if(this._releasePrevented){
            this._releasing = false;
            this._releasePrevented = false;
            return;
        }

        this._Notify(EVENT.RELEASED, this);
        this._CleanUp();
        
        if(this._returnFn != undefined){ this._returnFn(this); }
        this._releasing = false;

    }

    _CleanUp(){
        super._CleanUp();
        this._releasePrevented = false;
        this._signalBox.Clear();
    }

    

}

module.exports = DisposableObjectEx;
},{"../@.js":6,"../signals/signal-box":144,"./disposable-object.js":32}],32:[function(require,module,exports){
'use strict';

const { U, M } = require(`../@.js`);

class DisposableObject{

    constructor() {
        this._Init();
        this._PostInit();
    }

    get meta(){
        return M.ETA(this);
    }

    _Init(){
        this._releasing = false;
        this._returnFn = null;
    }

    _PostInit(){
        
    }

    /**
     * Bind the given function to this object and returns it.
     * Note that it replaces the function reference, hence referencing function before they are being bound in _Init,
     * ( i.e in the constructor ) will target an obsolete function.
     * @param {*} p_func 
     */
    _Bind(p_func) { return this[p_func.name] = p_func.bind(this); }

    //---> Pooling
    
    /**
     * Releases the object and return it back to the pool.
     */
    Release(){
        if(this._releasing){return;}
        this._releasing = true;

        this._CleanUp();
        if(this._returnFn != undefined){ this._returnFn(this); }
        
        this._releasing = false;
    }

    _CleanUp()
    {
        
    }

    

}

module.exports = DisposableObject;
},{"../@.js":6}],33:[function(require,module,exports){
'use strict';

const { EVENT } = require(`../@.js`);

const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);
const POOL = require(`../collections/pool.js`);
const ID = require(`../collections/id.js`);
const Dictionary = require(`../collections/dictionary.js`);

class IDDispenser extends DisposableObjectEx{
    constructor() {super();}

    _Init(){
        super._Init();
        this._rep = new Dictionary();
        // - Repertoire for IDs to avoid duplicate IDs.
        // - factory should check for duplicates through repertoire
    }

    /**
     * TODO : Doc
     * @param {String} p_string 
     */
    IsAvailable( p_string ){
        return !this._rep.Contains(p_string);
    }

    /**
     * Return whether or not the repertoire contains an ID associated with
     * a given string
     * @param {String} p_string 
     */
    Contains( p_string ){
        return this._rep.Contains(p_string);
    }

    /**
     * Return the ID associated with a given string, if any
     * @param {String} p_string 
     */
    Get( p_string ){
        return this._rep.Get(p_string);
    }

    /**
     * Create and return new ID with a given string.
     * @param {String} p_string 
     */
    Create( p_string ){

        if(!this.IsAvailable(p_string)){
            throw new Error("Cannot create an ID that already exists.");
        }

        var newID = POOL.Rent(ID);
        newID.name = p_string;
        this._rep.Set(p_string, newID);

        newID.Subscribe(EVENT.RELEASED, this, this._OnIDReleased);
        newID.Subscribe(EVENT.RENAMING, this, this._OnIDRenaming);
        newID.Subscribe(EVENT.RENAMED, this, this._OnIDRenamed);

        return newID;

    }

    /**
     * Removes & release a given ID.
     * Returns true if the ID existed and has been released, otherwise return false.
     * @param {ID} p_id 
     */
    Remove( p_id ){
        if(this._rep.Remove(p_id.name)){
            p_id.Release();
            return true;
        }

        return false;
    }

    /**
     * TODO : Doc
     * @param {*} p_id 
     * @param {*} p_newName 
     */
    _OnIDRenaming( p_id, p_newName ){
        if(this._rep.Contains(p_newName)){
            p_id.PreventRenaming();
        }
    }

    /**
     * TODO : Doc
     * @param {*} p_id 
     * @param {*} p_newName 
     * @param {*} p_oldName 
     */
    _OnIDRenamed( p_id, p_newName, p_oldName ){
        this._rep.Remove(p_oldName);
        this._rep.Set(p_newName, p_id);
    }

    /**
     * TODO : Doc
     * @param {*} p_id 
     */
    _OnIDReleased( p_id ){
        this.Remove(p_id);
    }

    _CleanUp(){
        super._CleanUp();
    }


}

module.exports = IDDispenser;
},{"../@.js":6,"../collections/dictionary.js":30,"../collections/disposable-object-ex.js":31,"../collections/id.js":34,"../collections/pool.js":37}],34:[function(require,module,exports){
'use strict';

const { EVENT } = require(`../@.js`);
const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);

class ID extends DisposableObjectEx{
    constructor() {super();}

    //---> Init

    _Init(){
        super._Init();
        this._renamingPrevented = false;
        this._name = "";
    }

    /**
     * TODO : Doc
     */
    PreventRenaming(){
        this._renamingPrevented = true;
    }

    set name(p_value){

        if(this._name == p_value){return;}

        this._Notify(EVENT.RENAMING, this, p_value);

        if(this._renamingPrevented){
            this._renamingPrevented = false;
            return;
        }

        var oldName = this._name;
        this._name = p_value;

        this._renamingPrevented = false;

        this._Notify(EVENT.RENAMED, this, oldName);

    }

    get name(){
        return this._name;
    }

    

    _CleanUp(){
        this._name = "";
        super._CleanUp();
    }

    toString(){
        return `[ID::${this.name}]`;
    }

}

module.exports = ID;
},{"../@.js":6,"../collections/disposable-object-ex.js":31}],35:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

class KDictionary{

    constructor() {
        this._rootMap = new Map();
    }

    get rootMap(){ return this._rootMap; }

    Contains( ...keyChain ){
        var map = this._rootMap;
        for(var i = 0, n = keyChain.length; i < n; i++){
            map = map.get(keyChain[i]);
            if(!map){return false;}
        }
        return true;
    }

    Set( ...keyChain ){
        var value = keyChain.pop();
        var key = keyChain.pop();
        var map = this._rootMap;
        var lastMap = map;
        var kkey = null;
        
        for(var i = 0, n = keyChain.length; i < n; i++){
            kkey = keyChain[i];
            map = map.get(kkey);
            if(!map){
                map = new Map();
                lastMap.set(kkey, map);
            }
            lastMap = map;
        }

        lastMap.set(key, value);
    }

    Get( ...keyChain ){
        var key = keyChain.pop();
        var map = this._rootMap;
        for(var i = 0, n = keyChain.length; i < n; i++){
            map = map.get(keyChain[i]);
            if(!map){return null;}
        }
        return map.get(key);
    }

    Remove( ...keyChain ){
        var key = keyChain.pop();
        var map = this._rootMap;
        for(var i = 0, n = keyChain.length; i < n; i++){
            map = map.get(keyChain[i]);
            if(!map){return null;}
        }
        var value = map.get(key);
        if(U.Void(value)){return;}
        if(U.IoF(value, Map)){ value.clear(); }
        map.remove(key);
    }

    /**
     * Clears the Dictionary from all keys and values.
     */
    Clear(){
        //TODO : In-depth clear to avoid generating too much garbage
        this._rootMap.clear();
    }

}

module.exports = KDictionary;
},{"../@.js":6}],36:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

/**
 * A list of item that does not accept duplicates nor null values.
 */
class List{

    constructor(p_length = 0) {
        this._array = new Array(p_length);
    }

    get internalArray(){ return this._array; }

    get empty(){ return ( this._array.length == 0 ); }

    get count(){ return this._array.length; }

    get first(){ return this._array[0];}

    get last(){ return this._array[this._array.length-1]; }

    /**
     * Return whether or not the List contains the given item.
     * @param {*} p_item 
     */
    Contains( p_item ){
        if(p_item == null || p_item == undefined){return false;}

        return ( this._array.indexOf(p_item) != -1 );
    }

    /**
     * TODO : Doc
     * @param {*} p_item 
     */
    IndexOf( p_item ){
        return this._array.indexOf(p_item);
    }

    /**
     * TODO : Doc
     * @param {*} p_item 
     */
    Add( p_item ){
        if(p_item == null || p_item == undefined){return false;}

        var index = this._array.indexOf(p_item);
        if(index != -1){return false;}
        this._array.push(p_item);
        return true;
    }

    /**
     * TODO : Doc
     * @param {*} p_item 
     */
    Remove( p_item ){
        if(p_item == null || p_item == undefined){return false;}
        return this.RemoveAt( this._array.indexOf(p_item) );
    }

    /**
     * TODO : Doc
     * @param {*} p_index 
     */
    RemoveAt( p_index ){
        if(p_index < 0 || p_index >= this._array.length ){return false;}
        return this._array.splice(p_index, 1);
    }

    /**
     * TODO : Doc
     * @param {*} p_item 
     * @param {*} p_index 
     */
    Insert( p_item, p_index ){
        if(p_item == null || p_item == undefined){return false;}

        var index = this._array.indexOf(p_item);
        if(index != -1){return;}
        if(p_index >= this._array.length){
            this._array.push(p_item);
            return p_item;
        }
        this._array.splice(p_index, 0, p_item);
        return p_item;
    }

    /**
     * TODO : Doc
     * @param {Number} p_index 
     */
    At(p_index){
        return this._array[p_index];
    }

    /**
     * TODO : Doc
     */
    Pop(){
        return this._array.pop();
    }

    /**
     * TODO : Doc
     */
    Shift(){
        return this._array.shift();
    }

    /**
     * Loops through all items in List. Callback should match the signature :
     * (item, index)
     * @param {Object} p_callback
     * @param {Object} p_this
     * @param {Object} p_reverse
     */
    ForEach(p_callback, p_this = null, p_reverse = false){

        var n = this._array.length;

        if(p_this)
        {
            if(p_reverse)
            {
                for(var i = n-1; i >= 0; i--){
                    p_callback.call(p_this, this._array[i], i);
                }
            }
            else
            {
                for(var i = 0; i < n; i++){
                    p_callback.call(p_this, this._array[i], i);
                }
            }
        }
        else
        {
            if(p_reverse)
            {
                for(var i = n-1; i >= 0; i--){
                    p_callback.call(null, this._array[i], i);
                }
            }
            else
            {
                for(var i = 0; i < n; i++){
                    p_callback.call(null, this._array[i], i);
                }
            }
        }
    }

    /**
     * Clears the List
     */
    Clear(){
        this._array.length = 0;
    }

}

module.exports = List;
},{"../@.js":6}],37:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

const Singleton = require(`../singleton.js`);
const DisposableObject = require(`./disposable-object.js`);
const Dictionary = require(`./dictionary.js`);
const DictionaryList = require(`./dictionary-list.js`);

class POOL extends Singleton{
    constructor() {super();}

    _Init(){
        super._Init();
        
        this._globalTypes = new Dictionary();
        this._globalPool = new DictionaryList();

        this._Bind(this._Return);
    }

    /**
     * TODO : Doc
     * @param {Class} p_class 
     */
    static Register(p_class){ POOL.instance._Register(p_class); }

    /**
     * Register custom element
     * @param {DisposableObject} p_class 
     */
    _Register( p_class ){

        if(typeof p_class != `function`){
            console.error(`Register used with invalid class : ${p_class}`);
            return;
        }

        this._globalTypes.Set( p_class.name, p_class );
        //#LOG console.log(`%c+ ${p_class.name}`, 'color: #ff8a00');
    }

    static GetClass( p_id ){ return POOL.instance._GetClass(p_id); }

    _GetClass( p_id ){
        return this._globalTypes.Get( p_id );
    }

    /// POOLING ///

    /**
     * Return a deprecated DisposableHTMLElement to be re-used later.
     * @param {DisposableObject} p_obj 
     */
    _Return( p_obj ){

        if(typeof p_obj != `object`
        || !U.IoF(p_obj, DisposableObject)){
            console.error("Return used with invalid object : "+p_obj);
            return;
        }

        var keyName = p_obj.constructor.name;

        if(!this._globalTypes.Contains(keyName)){
            console.error("Return used with a never-registered object type : "+keyName);
            return;
        }

        this._globalPool.Set(keyName, p_obj);

    }

    /**
     * TODO : Doc
     * @param {Class} p_class 
     */
    static Rent(p_class){
        return POOL.instance._Rent(p_class);
    }

    /**
     * TODO : Doc
     * @param {String | DisposableObject} p_class 
     */
    _Rent( p_class ){

        var keyName = null;
        
        if(U.IsString(p_class)){
            keyName = p_class;
        }else if(typeof p_class == `function`){
            keyName = p_class.name;
        }else{
            console.error("Rent requires either a string or a class.");
            return null;
        }

        if(!this._globalTypes.Contains(keyName)){
            if(typeof p_class == `function` 
            && U.IoF(p_class.prototype, DisposableObject)){
                this._Register(p_class);
            }else{
                console.error(`Could not find any class association for : ${keyName}`);
                return null; 
            }
        }

        p_class = this._globalTypes.Get(keyName);
        var obj = this._globalPool.Pop(keyName);

        if(!obj){
            obj = new p_class();
            obj._returnFn = this._Return;
        }

        if('Wake' in obj){obj.Wake();}
        return obj;

    }


}

module.exports = POOL;

},{"../@.js":6,"../singleton.js":147,"./dictionary-list.js":29,"./dictionary.js":30,"./disposable-object.js":32}],38:[function(require,module,exports){
'use strict'

let constants = {
    colors:{}
};

const _default = `default`; //Symbol(`default`);
const _inherit = `inherit`; //Symbol(`inherit`);
const _metaPrefix = `META@`;


class Constants{
    constructor(){}

    static get METAPREFIX(){ return _metaPrefix; }

    static get DEFAULT(){ return _default; }
    static get INHERIT(){ return _inherit; }

    static get NOSCALE(){ return `no-scale`; }

    static get UP(){ return `up`; }
    static get DOWN(){ return `down`; }
    static get LEFT(){ return `left`; }
    static get RIGHT(){ return `right`; }

    static get VERTICAL(){ return `vertical`; }
    static get HORIZONTAL(){ return `horizontal`; }
    
    static get COLORS(){return constants.colors;}
    static GOC_COLOR(p_id, p_value){
        if(p_id in constants.colors){ return constants.colors[p_id]; }
        constants.colors[p_id] = p_value;
        return p_value;
    }

}

Constants.COLORS.main = `62,193,136`;
Constants.COLORS.infos = `102,175,204`;
Constants.COLORS.warning = `255,206,0`;
Constants.COLORS.error = `255,118,74`;

Constants.COLORS.mid = `127,127,127`;
Constants.COLORS.white = `255,255,255`;
Constants.COLORS.black = `0,0,0`;


module.exports = Constants;

},{}],39:[function(require,module,exports){
'use strict';

const _evt_booted = Symbol(`projectBooted`);
const _evt_projectChanged = Symbol(`projectChanged`);

class APP_DATA_EVENT{
    constructor() {}

    static get BOOTED(){ return _evt_booted; }
    static get PROJECT_CHANGED(){return _evt_projectChanged;}

}

module.exports = APP_DATA_EVENT;
},{}],40:[function(require,module,exports){
const { U, C, EVENT } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const APP_UI_FLAGS = require(`../ui-app/app-ui-flags.js`);

const _evt_consumed = Symbol(`consumed`);

class DialogInfos extends DisposableObjectEx{
    constructor(){super();}

    static get CONSUMED(){ return _evt_consumed; }

    _Init(){
        super._Init();
        this._actions = new Array(0);
        this._content = new Array(0);
        this._Reset();
    }

    _Reset(){
        this._consumed = false;
        this._dialogClass = null;
        this._title = ``;
        this._message = ``;
        this._type = ``;
        this._primary = null;
        this._secondary = null;
        this._inputClass = null;
        this._origin = null;
        this._actions.length = 0;
        this._content.length = 0;
    }

    get origin(){ return this._origin; }
    set origin(p_value){ this._origin = p_value; }

    get title(){ return this._title; }
    set title(p_value){ this._title = p_value; }

    get message(){ return this._message; }
    set message(p_value){ this._message = p_value; }

    get type(){ return this._type; }
    set type(p_value){ this._type = p_value; }

    get dialogClass(){ return this._dialogClass; }
    set dialogClass(p_value){ this._dialogClass = p_value; }

    get primary(){ return this._primary; }
    set primary(p_value){ this._primary = p_value; }

    get secondary(){ return this._secondary; }
    set secondary(p_value){ this._secondary = p_value; }

    get content(){ return this._content; }
    set content(p_value){
        if(this._content == p_value){return;}
        if(!p_value){ this._content.length = 0; return; }
        for(var i = 0, n = p_value.length; i < n; i++){
            this._content.push(p_value[i]);
        }
    }

    get actions(){ return this._actions; }
    set actions(p_value){
        if(this._actions == p_value){return;}
        if(!p_value){ this._actions.length = 0; return; }
        this.primary = null;
        this.secondary = null;
        var action = null;
        for(var i = 0, n = p_value.length; i < n; i++){
            action = p_value[i];
            this._actions.push(action);
            if(i == 0){ this.primary = action; }
            else if(i == 1){ this.secondary = action; }
        }
    }

    get options(){ return this._options; }
    set options(p_value){

        this._options = p_value;

        this.title = U.Get(p_value, `title`, this._title);
        this.message = U.Get(p_value, `message`, this._message);
        this.type = U.Get(p_value, `type`, U.Default(this._type, APP_UI_FLAGS.INFOS) );
        this.actions = U.Get(p_value, `actions`, this._actions);
        this.content = U.Get(p_value, `content`, this._content);
        this.dialogClass = U.Get(p_value, `dialogClass`, this._dialogClass);
        this.origin = U.Get(p_value, `origin`, this._origin);

        //TODO : Add support for custom popup content request
        // = when displaying popup, callback to some function providing both dialog & dialog info

        this._Notify(EVENT.UPDATE, this);

    }

    GetOption(p_id, p_fallback){
        return U.Get(this._options, p_id, p_fallback);
    }

    Consume(){
        if(this._consumed){return;}
        this._consumed = true;
        this._Notify(DialogInfos.CONSUMED, this);
    }

    _CleanUp(){
        this._Reset();
        super._CleanUp();
    }

    toString(){
        return `<? ${this._title} : ${this._message} />`;
    }
}

module.exports = DialogInfos;
},{"../@.js":6,"../collections/@.js":22,"../ui-app/app-ui-flags.js":151}],41:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { METADATA } = require(`../data-core/@.js`);

class DataPreferences extends METADATA{
    constructor() {super();}

    _Init(){
        super._Init();
    }

    _CleanUp()
    {
        super._CleanUp();
    }

}

module.exports = DataPreferences;
},{"../@.js":6,"../data-core/@.js":43}],42:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const { U, PATH } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);
const { KitManager } = require(`../environment/@.js`);
const SingletonEx = require(`../singleton-ex.js`);

const APP_DATA_EVENT = require(`./app-data-event.js`);

class ProjectManager extends SingletonEx{
    constructor() { super(); }

    static Kickstart(p_options){
        var project = POOL.Rent(p_options.cl);
        project.path = p_options.path;
        project._bootCB.Push(p_options.callbacks);
        ProjectManager.instance.currentProject = project;
        return project;
    }

    _Init(){ 
        super._Init();
        this._Bind(this._OnCurrentProjectBooted);
        this._currentProject = null;
    }
    
    get currentProject(){return this._currentProject;}
    set currentProject(p_value){

        if(this._currentProject == p_value){return;}
        var oldValue = this._currentProject;
        this._currentProject = p_value;

        if(oldValue){
            
        }
        if(p_value){
            
        }

        this._OnCurrentProjectChanged(oldValue);

    }

    _OnCurrentProjectChanged(p_oldValue)
    {
        var e = null;
        if(p_oldValue){
            e = p_oldValue.ecosystem;
            KitManager.instance.ConcealEcosystemIntegration(e);
        }

        if(this._currentProject){
            if(this._currentProject.booted){
                this._OnCurrentProjectBooted(this._currentProject);
            }else{
                this._currentProject.Subscribe(APP_DATA_EVENT.BOOTED, this, this._OnCurrentProjectBooted);
                this._currentProject.Boot({
                    callbacks:{
                        fail:this._OnCurrentProjectBooted
                    }
                });
            }
        }

        this._Notify(APP_DATA_EVENT.PROJECT_CHANGED, this, this._currentProject, p_oldValue);
    }

    _OnCurrentProjectBooted(p_proj){
        p_proj.Unsubscribe(APP_DATA_EVENT.BOOTED, this, this._OnCurrentProjectBooted);
        var e = p_proj.ecosystem;
        KitManager.instance.DeployEcosystemIntegration(e);
    }

    _OnCurrentProjectBootFailed(p_err){
        console.error(`Project boot failed : ${p_err.message}`);
    }

}

module.exports = ProjectManager;
},{"../@.js":6,"../collections/@.js":22,"../environment/@.js":95,"../singleton-ex.js":146,"./app-data-event.js":39}],43:[function(require,module,exports){
module.exports = {

    DATA_EVENT : require(`./core-data-event.js`),
    DataBlock : require(`./data-block.js`),
    DerivableDataBlock : require(`./data-block-derivable.js`),
    DataEntry : require(`./data-entry.js`),
    DataLibrary : require(`./data-library.js`),
    EcosystemPart : require(`./ecosystem-part.js`),
    Ecosystem : require(`./ecosystem.js`),
    Factory : require(`./factory.js`),
    FieldDescriptor : require(`./field-descriptor.js`),
    FieldSettings : require(`./field-settings.js`),
    FieldSettingsProxy : require(`./field-settings-proxy.js`),
    Field : require(`./field.js`),
    EntryManager : require(`./manager-entries.js`),
    FieldManager : require(`./manager-fields.js`),
    ModelManager : require(`./manager-models.js`),
    Model : require(`./model.js`),
    ModelProxy : require(`./model-proxy.js`),
    ModelMockup : require(`./model-mockup.js`),
    MetadataObserver : require(`./observer-metadata.js`),
    Repertoire : require(`./repertoire.js`),
    METADATA : require(`./metadata.js`)
    
}
},{"./core-data-event.js":71,"./data-block-derivable.js":72,"./data-block.js":73,"./data-entry.js":74,"./data-library.js":75,"./ecosystem-part.js":76,"./ecosystem.js":77,"./factory.js":78,"./field-descriptor.js":79,"./field-settings-proxy.js":80,"./field-settings.js":81,"./field.js":82,"./manager-entries.js":83,"./manager-fields.js":84,"./manager-models.js":85,"./metadata.js":86,"./model-mockup.js":87,"./model-proxy.js":88,"./model.js":90,"./observer-metadata.js":91,"./repertoire.js":92}],44:[function(require,module,exports){
module.exports = {
    ActionModelCreateField : require(`./action-model-create-field.js`),
    ActionModelOverrideField : require(`./action-model-override-field.js`),
    ActionModelDeleteField : require(`./action-model-delete-field.js`),
    ActionModelReorderField : require(`./action-model-reorder-field.js`),
}
},{"./action-model-create-field.js":46,"./action-model-delete-field.js":47,"./action-model-override-field.js":48,"./action-model-reorder-field.js":49}],45:[function(require,module,exports){
'use strict';

const Action = require(`../../actions/action.js`);

class ActionMetadataSet extends Action{
    constructor() {super();}

    static get mergeable(){return true;}
    
    //---> Can merge ?

    CanMerge(p_operation){
        var operation = this._operation; 

        if(operation.target == p_operation.target
        && operation.path == p_operation.path){
            return true;
        }else{
            return false;
        }
    }

    //---> Do / undo

    _InternalDo( p_operation, p_merge = false ){

        var op = p_operation;

        var mData = op.target;
        var mPath = op.path;
        var originalValue = null;

        if(!p_merge){
            this._operation = op;
            originalValue = mData.Get(mPath, undefined);
            op.originalValue = originalValue;
        }else{
            this._operation.value = op.value;
            originalValue = this._operation.originalValue;
            op = this._operation;
        }

        mData.Set(mPath, op.value);

        console.log(`%cDO : ${originalValue} => ${op.value}`, 'color: #909090');
        return this;

    }

    _InternalUndo(){
        var op = this._operation;
        op.target.Set(op.path, op.originalValue);
    }

    _InternalRedo(){
        var op = this._operation;
        op.target.Set(op.path, op.value);
    }

}

module.exports = ActionMetadataSet;
},{"../../actions/action.js":12}],46:[function(require,module,exports){
'use strict';

const { U } = require(`../../@.js`);
const Action = require(`../../actions/action.js`);

const Model = require(`../model.js`);

class ActionModelCreateField extends Action{
    constructor() {super();}

    static get mergeable(){return false;}

    //---> Do / undo

    _InternalDo( p_operation, p_merge = false ){

        var op = p_operation;

        var target = op.target;
        var descriptor = op.descriptor;

        var fieldID = `${descriptor.fieldClass.name}${U.unsafeUID}`;
        op.id = fieldID;

        var field = Model.CreateField( 
            target, 
            descriptor.fieldClass,
            fieldID,
            {
                //TODO : options ?
            });

        op.field = field;
        
        field.dirty = true;
        console.log(`%cDO : ${target} += ${fieldID}`, 'color: #909090');
        return this;

    }

    _InternalUndo(){
        var op = this._operation;
        op.target.Unregister(op.field);
    }

    _InternalRedo(){
        var op = this._operation;
        op.target.Register(op.field, op.fieldID);
    }

    _CleanUp(){
        if(this._undoed){
            this._operation.field.Release();
        }
        super._CleanUp();
    }

}

module.exports = ActionModelCreateField;
},{"../../@.js":6,"../../actions/action.js":12,"../model.js":90}],47:[function(require,module,exports){
'use strict';

const Action = require(`../../actions/action.js`);

const Model = require(`../model.js`);

class ActionModelDeleteField extends Action{
    constructor() {super();}

    static get mergeable(){return false;}

    //---> Do / undo

    _InternalDo( p_operation, p_merge = false ){

        var target = p_operation.target;
        var model = target.model;

        p_operation.id = target.id.name;

        model.Unregister(target);

        console.log(`%cDO : ${model} -= ${p_operation.id}`, 'color: #909090');
        return this;

    }

    _InternalUndo(){
        var op = this._operation;
        op.model.Register(op.target, op.id);
    }

    _InternalRedo(){
        var op = this._operation;
        op.model.Unregister(op.target);
    }

    _CleanUp(){
        if(!this._undoed){
            this._operation.target.Release();
        }
        super._CleanUp();
    }

}

module.exports = ActionModelDeleteField;
},{"../../actions/action.js":12,"../model.js":90}],48:[function(require,module,exports){
'use strict';

const { U } = require(`../../@.js`);
const Action = require(`../../actions/action.js`);

const Model = require(`../model.js`);

class ActionModelOverrideField extends Action{
    constructor() {super();}

    static get mergeable(){return false;}

    //---> Do / undo

    _InternalDo( p_operation, p_merge = false ){

        var op = p_operation;

        var target = op.target;
        var originalField = op.originalField;
        var fieldID = originalField.id.name;

        var field = Model.CreateField( 
            target, 
            originalField.fieldClass, 
            fieldID, 
            {
                //TODO : options ?
            }); 

        op.field = field;

        field.dirty = true;
        console.log(`%cDO : ${target} *= ${fieldID} (${field.base})`, 'color: #909090');
        return this;

    }

    _InternalUndo(){
        var op = this._operation;
        op.target.Unregister(op.field);
    }

    _InternalRedo(){
        var op = this._operation;
        op.target.Register(op.field, op.fieldID);
    }

    _CleanUp(){
        if(this._undoed){
            this._operation.field.Release();
        }
        super._CleanUp();
    }

}

module.exports = ActionModelOverrideField;
},{"../../@.js":6,"../../actions/action.js":12,"../model.js":90}],49:[function(require,module,exports){
'use strict';

const Action = require(`../../actions/action.js`);

const Model = require(`../model.js`);

class ActionModelReorderField extends Action{
    constructor() {super();}

    static get mergeable(){return true;}

    //---> Can merge ?

    CanMerge(p_operation){
        var operation = this._operation; 

        if(operation.target == p_operation.target){
            return true;
        }else{
            return false;
        }
    }

    //---> Do / undo

    _InternalDo( p_operation, p_merge = false ){

        var op = p_operation;

        var target = op.target;
        var index = op.index;

        if(!p_merge){
            this._operation = op;
            op.originalIndex = target.fieldIndex;
        }else{
            op = this._operation;
            op.index = index;            
        }

        var model = target.model;
        var list = model.localFieldList;
        var currentIndex = list.indexOf(target);

        if(currentIndex > index){ currentIndex++; } //offset remove index based on target position

        list.splice(index, 0, target); //move to new spot
        list.splice(currentIndex, 1); //remove old reference

        console.log(`${target} from ${currentIndex} to ${index}`);

        model._UpdateLocalFieldIndexes(true);

        console.log(`%cDO : ${target} @${op.originalIndex} => ${op.index}|${target.fieldIndex}`, 'color: #909090');
        return this;

    }

    _InternalUndo(){

    }

    _InternalRedo(){

    }

}

module.exports = ActionModelReorderField;
},{"../../actions/action.js":12,"../model.js":90}],50:[function(require,module,exports){
'use strict';

const Action = require(`../../actions/action.js`);

class ActionRenameID extends Action{
    constructor() {super();}

    static get mergeable(){return true;}
    
    //---> Can merge ?

    CanMerge(p_operation){
        var operation = this._operation; 

        if(operation.target == p_operation.target){
            return true;
        }else{
            return false;
        }
    }

    //---> Do / undo

    Do( p_operation, p_merge = false ){

        var id = p_operation.target;
        var originalValue = null;

        if(!p_merge){
            this._operation = p_operation;
            originalValue = id.name;
            p_operation.originalValue = originalValue;
        }else{
            this._operation.value = p_operation.value;
            originalValue = this._operation.originalValue;
            p_operation = this._operation;
        }

        id.name = p_operation.value;

        console.log(`%cDO : ${originalValue} => ${p_operation.value}`, 'color: #909090');
        return this;

    }

    Merge( p_options ){
        
    }

    Undo(){
        var operation = this._operation;
        operation.target.name = operation.originalValue;
    }

    Redo(){
        var operation = this._operation;
        operation.target.name = operation.value;
    }

}

module.exports = ActionRenameID;
},{"../../actions/action.js":12}],51:[function(require,module,exports){
module.exports = {
    EntryCreateChild : require(`./entry-create-child.js`),
    EntryEdit : require(`./entry-edit.js`),
    EntrySave : require(`./entry-save.js`),
    EntryDelete : require(`./entry-delete.js`),
    EntryDuplicate : require(`./entry-duplicate.js`)
}
},{"./entry-create-child.js":56,"./entry-delete.js":57,"./entry-duplicate.js":58,"./entry-edit.js":59,"./entry-save.js":60}],52:[function(require,module,exports){
module.exports = {

    ModelApply : require(`./model-apply.js`),
    ModelApplyAndSave : require(`./model-apply-and-save.js`),
    ModelCreate : require(`./model-create.js`),
    ModelCreateChild : require(`./model-create-child.js`),
    ModelCreateEntry : require(`./model-create-entry.js`),
    ModelDelete : require(`./model-delete.js`),
    ModelEdit : require(`./model-edit.js`),
    ModelRename : require(`./model-rename.js`),
    ModelSave : require(`./model-save.js`),
    ModelDuplicate : require(`./model-duplicate.js`)
}
},{"./model-apply-and-save.js":61,"./model-apply.js":62,"./model-create-child.js":63,"./model-create-entry.js":64,"./model-create.js":65,"./model-delete.js":66,"./model-duplicate.js":67,"./model-edit.js":68,"./model-rename.js":69,"./model-save.js":70}],53:[function(require,module,exports){
const { U } = require(`../../@.js`);
const EcosystemCommand = require(`./command-ecosystem.js`);

class DataManipulationCommand extends EcosystemCommand{
    constructor() {super(); this._ecosystemFromContext = true; this._dataClass = null;}

    _SanitizeContext(p_context){

        if(!p_context){return null;}
        var dClass =this._dataClass;
        if(U.IoF(p_context, dClass)){return p_context;}
        var cData = p_context.data;
        if(cData){
            if(U.IoF(cData, dClass)){
                return cData;
            }else if(U.IoF(cData.data, dClass)){
                return cData.data;//In case the actual data item is a wrapper.
            }
        }        
        return null;
    }

    _OnContextChanged(){
        if(this._ecosystemFromContext && this._context){
            this.ecosystem = this._context.ecosystem;
        }
    }

}

module.exports = DataManipulationCommand;

},{"../../@.js":6,"./command-ecosystem.js":54}],54:[function(require,module,exports){
const { U } = require(`../../@.js`);

const Command = require(`../../actions/command.js`);
const CommandChain = require(`../../actions/command-chain.js`);

class EcosystemCommand extends Command{
    constructor() {super();}

    _Init(){
        super._Init();
        this._ecosystem = null;
    }

    set ecosystem(p_value){ this._ecosystem = p_value; }
    get ecosystem(){return this._ecosystem;}

    CanExecute(p_context){
        if(!this._ecosystem){return false;}
        return super.CanExecute(p_context);
    }

}


module.exports = EcosystemCommand;
},{"../../@.js":6,"../../actions/command-chain.js":14,"../../actions/command.js":18}],55:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const { ID } = require(`../../collections/@.js`);
const EcosystemCommand = require(`./command-ecosystem.js`);
const Request = require(`../../signals/request.js`);

class EcosystemCleanCatalog extends EcosystemCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    _InternalExecute(){
        var catalog = this._ecosystem.catalog;
        this._CleanDirectory(catalog);
        this._Success();
    }

    _CleanDirectory(p_dir){

        var list = p_dir._items;
        var item = null;

        console.log(`clean dir : ${p_dir}`);

        for(var i = 0, n = list.length; i < n; i++){
            item = list[i];
            if(item.isDir){ 
                if(this._CleanDirectory(item)){ i--; } 
            }            
        }

        if(list.length == 0){ 
            p_dir.Release();
            return true;
        }else{
            return false;
        }
    }

}

module.exports = EcosystemCleanCatalog;

},{"../../@.js":6,"../../collections/@.js":22,"../../signals/request.js":143,"../model.js":90,"./command-ecosystem.js":54}],56:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class EntryCreateChild extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../data-entry.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){

        var tempEntry = this._ecosystem.entries.CreateTemp(this._context.model);
        tempEntry.base = this._context;

        var options = {
            data:tempEntry
        };

        Request.Emit( APP_REQUEST.CREATE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        p_request.options.data.Release();
        this._Fail(`Entry creation from ${this._context} has not been handled. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = EntryCreateChild;

},{"../../@.js":6,"../../signals/request.js":143,"../data-entry.js":74,"./command-data.js":53}],57:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class EntryDelete extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../data-entry.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return true; //p_context.editable;
    }

    _InternalExecute(){

        var options = {
            data:this._context
        };

        Request.Emit( APP_REQUEST.DELETE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        this._Fail(`Unhandled request. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = EntryDelete;

},{"../../@.js":6,"../../signals/request.js":143,"../data-entry.js":74,"./command-data.js":53}],58:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);
const JSONSerializer = require(`../../serialization/serializer-json.js`);

class EntryDuplicate extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../data-entry.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return true; //p_context.editable;
    }

    _InternalExecute(){
        try{
            var baseId = this._context.id.name;
            var i = 1;
            var duplicateId = `${baseId}(${i})`;
            var dLib = this._ecosystem.entries.Get(this._context.model);
            
            while(!dLib.IsIDAvailable(duplicateId)){ duplicateId = `${baseId}(${i++})`; }

            JSONSerializer.Deserialize(
                JSONSerializer.Serialize(this._context), 
                { ecosystem:this._ecosystem, id:duplicateId });
        }catch(e){
            this._Fail(`Error during serialization : ${e.message}`);
            return;
        }

        this._Success();
    }

}

module.exports = EntryDuplicate;

},{"../../@.js":6,"../../serialization/serializer-json.js":132,"../../signals/request.js":143,"../data-entry.js":74,"./command-data.js":53}],59:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class EntryEdit extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../data-entry.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return true; //p_context.editable;
    }

    _InternalExecute(){

        var options = {
            data:this._context
        };

        Request.Emit( APP_REQUEST.EDIT, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        this._Fail(`Unhandled request. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = EntryEdit;

},{"../../@.js":6,"../../signals/request.js":143,"../data-entry.js":74,"./command-data.js":53}],60:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class EntrySave extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../data-entry.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return true; //p_context.editable;
    }

    _InternalExecute(){

        var options = {
            data:this._context
        };

        console.log(`Stringifyied and packed ${this._context} =`);
        console.log(JSON.stringify(this._context.Pack(), U.JSONStripEmpty, '  '));

        Request.Emit( APP_REQUEST.SAVE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        this._Fail(`Unhandled request. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = EntrySave;

},{"../../@.js":6,"../../signals/request.js":143,"../data-entry.js":74,"./command-data.js":53}],61:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const CommandChain = require(`../../actions/command-chain.js`);
const Request = require(`../../signals/request.js`);

const ModelApply = require(`./model-apply.js`);
const ModelSave = require(`./model-save.js`);

class ModelApplyAndSave extends CommandChain{
    constructor(){super();}

    set proxy(p_value){ this._cmdApply.proxy = p_value; }
    get proxy(){ return this._cmdApply.proxy; }

    _Init(){
        super._Init();
        
        this._cmdApply = new ModelApply();
        this._cmdSave = new ModelSave();

        this._nodes.push(this._cmdApply, this._cmdSave);
    }

}

module.exports = ModelApplyAndSave;

},{"../../@.js":6,"../../actions/command-chain.js":14,"../../signals/request.js":143,"./model-apply.js":62,"./model-save.js":70}],62:[function(require,module,exports){
const { U, C, APP_REQUEST } = require(`../../@.js`);
const CSS = require(`../../ui-core/css.js`);
const DIALOG = require(`../../dialog.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);
const FieldSettingsProxy = require(`../field-settings-proxy.js`);
const Model = require(`../model.js`)

class ModelApply extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    _Init(){
        super._Init();
        this._derivations = new Array(0);
        this._libs = new Array(0);
        this._toBeDeleted = new Array(0);
        this._toBeAdded = new Array(0);
        this._toBeModified = new Array(0);
        this._toBeUntouched = new Array(0);


        this._Bind(this._OnDialogFail);
        this._Bind(this._OnDialogCancel);
        this._Bind(this._OnDialogConfirm);
    }

    set proxy(p_value){ this._proxy = p_value; }
    get proxy(){ return this._proxy; }

    CanExecute(p_context){
        if(!p_context || !this._proxy){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){


        var e = this._context.ecosystem;
        var m = e.models;

        //TODO : Clear open editors action stacks to prevent fuckups with history and updated models

        //TODO :
        // - check if model has entries
        //      - if not, just skip everything and save.
        // - check how many entries will be affected
        // - ask user if he's sure ('XXX entries will be affected and saved in their current state.')
        //      - check if any affected entry is currently dirty
        //      - check if any of these entries is currently edited in an editor
        //      - give details about these, because the action stack will be flushed
        // - update field settings
        // - for each field updated, attempt to salvage existing data.
        // - save model file
        // - re-save any affected model that is now dirty (based on the list of entries extracted earlier)
        // - voila ?

        //!!!Check if there are field deletion that can be handled automatically, thus highlighting new dirty entries/

        // Make sure ID is valid.

        if(!this._ValidateID()){
            return this._Fail(
                this._ErrorDialog(
                    `Invalid ID`, 
                    `Check the model ID. It is either invalid as an identifier, or a model with this name already exists.`
                )
            );
        }

        // Check if base has changed.

        if(this._context.base != this._proxy.base){
            // Make sure this does not create circular references.
            if(m.CheckCircularReference(this._context, this._proxy.base)){
                return this._Fail(
                    this._ErrorDialog(
                        `Circular reference`, 
                        `The selected base (${this._proxy.base.id.name}) would create a circular reference and engulf all life and hope in an instant.<br/>Can't let you do that.`
                    )
                );
            }
        }


        // Check if fields have changed, or meta only

        var hasMetaChanges = false;
        var hasFieldChanges = false;
        var proxyFieldList = this._proxy.localFieldList;
        var field = null;

        for(var i = 0; i < proxyFieldList.length; i++ ){
            field = proxyFieldList[i];
            if(U.IoF(field, FieldSettingsProxy)){
                if(field.isDeletePlanned){ 
                    this._toBeDeleted.push(field); //Field is to be delete
                }else{
                    if(field.dirty || !field.EqualsReference()){
                        this._toBeModified.push(field); //Field is to be modified
                    }else{
                        this._toBeUntouched.push(field); //Field untouched
                    }
                }
            }else{
                this._toBeAdded.push(field); //Field added
            }
        }

        // Check how many entries will likely be affected
        
        var models = m.GetDerivations(this._context, this._derivations);
        var libs = e.entries.GetLibraries(models, this._libs);

        var eCount = 0;
        for(var i = 0; i < libs.length; i++){
            eCount += libs[i].count;
        }

        if(this._context.isTemp){
            this._AttemptApply();
            return;
        }

        this._ConfirmDialog(
            CSS.T_C(`No way back`, C.COLORS.warning), 
            `Applying these changes will affect ${CSS.T_W(`${models.length} models`)}, and ${CSS.T_W(`${eCount} entries`)}.<br/><br/>`
            +`${this._toBeDeleted.length} fields will be deleted,<br/>`
            +`${this._toBeAdded.length} fields will be added,<br/>`
            +`${this._toBeModified.length} fields will be updated,<br/>`
            +`${this._toBeUntouched.length} fields are left untouched.<br/><br/>`
            +`Are you sure you want to move forward with this ? ${CSS.T_W(`It cannot be undone.`)}`
        )

    }

    _End(){

        //Clean garbage
        //Do this before calling super in case the Command is reused immediately
        this._derivations.length = 0;
        this._libs.length = 0;

        this._toBeAdded.length = 0;
        this._toBeDeleted.length = 0;
        this._toBeModified.length = 0;
        this._toBeUntouched.length = 0;
        
        //Call super
        super._End();

    }

    _Apply(){
        
        var original = this._context;
        var proxy = this._proxy;
        var ofsList = original.localFieldList;
        var pfsList = proxy.localFieldList;

        var ofs = null;
        var pfs = null;
        
        // 1 - Create new fields
        for(var i = 0, n = this._toBeAdded.length; i < n; i++){
            pfs = this._toBeAdded[i];
            ofs = Model.CreateField( original, pfs.fieldClass, pfs.id.name,
                { settings:U.Clone(pfs.settings), metadata:pfs.metadata });
            pfs.referenceField = ofs;
            ofsList.pop(); //New field added at the end of the list
            ofsList.splice(pfs.fieldIndex, 0, ofs);
        }

        // 2 - Update field order in target model
        // indexes should match proxy since no deletion happened yet
        var fIndex = -1;
        for(var i = 0, n = pfsList.length; i < n; i++){
            pfs = pfsList[i];
            U.Move(ofsList, ofsList.indexOf(pfs.referenceField), pfs.fieldIndex);
        }

        // 3 - Remove fields
        for(var i = 0, n = this._toBeDeleted.length; i < n; i++){
            this._toBeDeleted[i].referenceField.Release();
        }

        // 5 - Apply other modifications
        for(var i = 0, n = this._toBeModified.length; i < n; i++){
            pfs = this._toBeModified[i];
            ofs = pfs.referenceField;
            //Update metadata
            if(pfs.metadata.dirty){
                ofs.metadata.Clone(pfs.metadata);
            }            
            //Update ID
            if(pfs.id.name != ofs.id.name){
                let tName = pfs.id.name;
                let efs = original.Get(tName, true);
                if(efs && efs != ofs){ efs.id.name = `#`; }
                ofs.id.name = tName;
            }
            //Update type
            if(ofs.fieldClass != pfs.fieldClass){
                ofs._fieldClass = pfs.fieldClass;
            }
            //Update settings
            //note : it is important to update settings after renaming, as override may have occured
            if(!U.Same(pfs.settings, ofs.settings)){
                ofs._settings = U.Clone(pfs.settings);
            }
        }

        if(original.isTemp){
            original.id = null;
            original.ecosystem.models.Register(original, this._proxy.id.name);
        }else{
            original.id.name = this._proxy.id.name;
        }

        original._UpdateLocalFieldIndexes(true);

        return true;

    }

    _ValidateID(){
        var id = this._proxy.id.name;
        
        if(!U.ValidIdentifier(id)){ 
            // Invalid identifier
            return false; 
        }

        var existingModel = this._context.ecosystem.models.Get(id);
        if(existingModel){
            if(existingModel != this._context){
                // ID Already in use
                return false;
            }
        }

        return true;        
    }

    _ErrorDialog(p_title, p_message){
        DIALOG.Push({ 
            title:p_title,
            message:p_message,
            icon:`%ICON%/icon_error.svg`,
            actions:[
                { text:`Ok`, trigger:{ fn:this._OnDialogFail, arg:p_message}, icon:`%ICON%/icon_close.svg` }
            ]
        });
        return p_message;
    }

    _ConfirmDialog(p_title, p_message){
        DIALOG.Push({ 
            title:p_title,
            message:p_message,
            icon:`%ICON%/icon_warning.svg`,
            actions:[
                { text:`Apply.`, trigger:{ fn:this._OnDialogConfirm} },
                { text:`Abort !`, trigger:{ fn:this._OnDialogCancel}, icon:`%ICON%/icon_close.svg` }
            ]
        });
        return p_message;
    }

    _OnDialogFail(p_msg){
        //this._Fail(p_msg);
    }

    _OnDialogCancel(){
        this._Cancel();
    }

    _OnDialogConfirm(){
        this._AttemptApply();
    }

    _AttemptApply(){
        if(this._Apply()){
            this._Success();
        }else{
            this._Fail();
        }
    }
}

module.exports = ModelApply;


},{"../../@.js":6,"../../dialog.js":93,"../../signals/request.js":143,"../../ui-core/css.js":227,"../field-settings-proxy.js":80,"../model.js":90,"./command-data.js":53}],63:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelCreateChild extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){

        var tempModel = this._ecosystem.models.CreateTemp(this._context);

        var options = {
            data:tempModel
        };

        Request.Emit( APP_REQUEST.CREATE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        p_request.options.data.Release();
        this._Fail(`Model creation from ${this._context} has not been handled. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = ModelCreateChild;

},{"../../@.js":6,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],64:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelCreateEntry extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        if(!p_context.entryCreationAllowed){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){

        var tempEntry = this._ecosystem.entries.CreateTemp(this._context);

        var options = {
            data:tempEntry
        };

        Request.Emit( APP_REQUEST.CREATE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        p_request.options.data.Release();
        this._Fail(`Entry creation of type ${this._context} has not been handled. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){this._Success(); }

}

module.exports = ModelCreateEntry;

},{"../../@.js":6,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],65:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const { ID } = require(`../../collections/@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelCreate extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    _Init(){
        super._Init();
        //this._name = `Create Model`;
    }

    _InternalExecute(){

        var tempModel = this._ecosystem.models.CreateTemp();
        var tempID = new ID();

        var name = `NewModel${U.unsafeUID}`;

        //Make sure we don't push a duplicate id
        while(this._ecosystem.models.Get(name)){
            name = `NewModel${U.unsafeUID}`;
        }

        tempID.name = name;
        tempModel.id = tempID;
        tempModel.dirty = true;

        var options = {
            data:tempModel
        };

        Request.Emit( APP_REQUEST.CREATE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        p_request.options.data.Release();
        this._Fail(`Model creation request has not been handled. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = ModelCreate;

},{"../../@.js":6,"../../collections/@.js":22,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],66:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelDelete extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){

        var options = {
            data:this._context
        };

        Request.Emit( APP_REQUEST.DELETE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){ this._Fail();}
    _OnRequestSuccess(p_request){ this._Success();}

}

module.exports = ModelDelete;

},{"../../@.js":6,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],67:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);
const JSONSerializer = require(`../../serialization/serializer-json.js`);

class ModelDuplicate extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return p_context.editable;
    }

    _InternalExecute(){
        try{

            var baseId = this._context.id.name;
            var i = 1;
            var duplicateId = `${baseId}(${i})`;
            var f = this._ecosystem.models._factory;
            
            while(!f.IsIDAvailable(duplicateId)){ duplicateId = `${baseId}(${i++})`; }

            JSONSerializer.Deserialize(
                JSONSerializer.Serialize(this._context), 
                { ecosystem:this._ecosystem, id:duplicateId });
        }catch(e){
            this._Fail(`Error during serialization : ${e.message}`);
            return;
        }

        this._Success();
    }

}

module.exports = ModelDuplicate;

},{"../../@.js":6,"../../serialization/serializer-json.js":132,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],68:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelEdit extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return p_context.editable;
    }

    _InternalExecute(){

        var options = {
            data:this._context
        };

        Request.Emit( APP_REQUEST.EDIT, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        this._Fail(`Model editing request has not been handled. Reason : ${p_request.failReason}`);
    }

    _OnRequestSuccess(p_request){ this._Success(); }

}

module.exports = ModelEdit;

},{"../../@.js":6,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],69:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelRename extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){

        var options = {
            data:null
        };

        Request.Emit( APP_REQUEST.RENAME, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){ this._Fail();}
    _OnRequestSuccess(p_request){ this._Success();}

}

module.exports = ModelRename;

},{"../../@.js":6,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],70:[function(require,module,exports){
const { U, APP_REQUEST } = require(`../../@.js`);
const DataManipulationCommand = require(`./command-data.js`);
const Request = require(`../../signals/request.js`);

class ModelSave extends DataManipulationCommand{
    constructor() {super(); this._dataClass = require(`../model.js`);}

    CanExecute(p_context){
        if(!p_context){return false;}
        return super.CanExecute(p_context);
    }

    _InternalExecute(){

        var options = {
            data:this._context
        };

        console.log(`Stringifyied and packed ${this._context} =`);
        console.log(JSON.stringify(this._context.Pack(), U.JSONStripEmpty, '  '));
        
        Request.Emit( APP_REQUEST.SAVE, 
            options, this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){ this._Fail();}
    _OnRequestSuccess(p_request){ this._Success();}

}

module.exports = ModelSave;

},{"../../@.js":6,"../../signals/request.js":143,"../model.js":90,"./command-data.js":53}],71:[function(require,module,exports){
'use strict';

const _evt_valueChanged         = Symbol(`valueChanged`);
const _evt_baseChanged         = Symbol(`baseChanged`);

const _evt_itemRegistered      = Symbol(`itemRegistered`);
const _evt_itemUnregistered    = Symbol(`itemUnregistered`);
const _evt_itemUpdated          = Symbol(`itemUpdated`);

const _evt_fieldAdded           = Symbol(`fieldAdded`);
const _evt_fieldRemoved         = Symbol(`fieldRemoved`);
const _evt_fieldRenamed         = Symbol(`fieldRenamed`);
const _evt_fieldUpdated         = Symbol(`fieldUpdated`);
const _evt_fieldClassChanged         = Symbol(`fieldClassChanged`);

const _evt_metaAdded           = Symbol(`metaAdded`);
const _evt_metaRemoved         = Symbol(`metaRemoved`);
const _evt_metaUpdated         = Symbol(`metaUpdated`);
const _evt_metaMidUpdate     = Symbol(`metaMidUpdate`);

const _evt_dirty       = Symbol(`dirty`);
const _evt_saved       = Symbol(`saved`);
const _evt_any_dirty       = Symbol(`any-dirty`);

class DATA_EVENT{
    constructor() {}

    static get VALUE_CHANGED(){ return _evt_valueChanged; }
    static get BASE_CHANGED(){ return _evt_baseChanged; }

    static get ITEM_REGISTERED(){ return _evt_itemRegistered; }
    static get ITEM_UNREGISTERED(){ return _evt_itemUnregistered; }
    static get ITEM_UPDATED(){ return _evt_itemUpdated; }

    static get FIELD_ADDED(){ return _evt_fieldAdded; }
    static get FIELD_REMOVED(){ return _evt_fieldRemoved; }
    static get FIELD_RENAMED(){ return _evt_fieldRenamed; }
    static get FIELD_UPDATED(){ return _evt_fieldUpdated; }
    static get FIELD_CLASS_CHANGED(){ return _evt_fieldClassChanged; }

    static get META_ADDED(){ return _evt_metaAdded; }
    static get META_REMOVED(){ return _evt_metaRemoved; }
    static get META_UPDATED(){ return _evt_metaUpdated; }
    static get META_MID_UPDATE(){ return _evt_metaMidUpdate; }

    static get DIRTY(){ return _evt_dirty; }
    static get CLEANED(){ return _evt_saved; }

}

module.exports = DATA_EVENT;
},{}],72:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);
const METADATA = require(`./metadata.js`);
const Observer = require(`../signals/observer.js`);

class DerivableDataBlock extends DataBlock{
    constructor() {super();}

    _Init(){
        super._Init();
        this._base = null;
        this._baseObserver = new Observer();
        this._baseObserver.Hook(EVENT.RELEASED, this, this._OnBaseReleased);
        this._baseObserver.Hook(EVENT.UPDATED, this, this._OnBaseUpdated);
    } 

    get base(){return this._base;}
    set base(p_value){
        if(this._base == p_value){return;}

        var oldBase = this._base;

        //Stop catching events during derivation clean up
        if(oldBase){
            this._baseObserver.observable = null;
            this._ClearDerivation(oldBase);
        }

        this._base = p_value;

        if(p_value){
            this._baseObserver.observable = p_value;
            this._BuildDerivation(p_value);
        }

        this._OnBaseChanged(oldBase);
        this._Notify(DATA_EVENT.BASE_CHANGED, this, oldBase);
        if(p_value){this._OnBaseUpdated(p_value);}
        this.dirty = true;
    }

    _ClearDerivation(p_oldBase){
        
    }

    _BuildDerivation(p_base){

    }

    _OnBaseChanged(p_oldValue){

    }

    _OnBaseUpdated(p_base){
        
    }

    _OnBaseReleased(p_base){
        this.base = null;
    }

    _CleanUp(){
        this.base = null;
        super._CleanUp();
    }

}

module.exports = DerivableDataBlock;
},{"../@.js":6,"../signals/observer.js":142,"./core-data-event.js":71,"./data-block.js":73,"./metadata.js":86}],73:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const METADATA = require(`./metadata.js`);

class DataBlock extends DisposableObjectEx{
    constructor() {super();}

    static get _NFO_(){ return {
        icon:`%ICON%/icon_data_block.svg`
    };}

    _Init(){
        super._Init();
        this._id = null;
        this._isTemp = false;
        this._metadirty = false;
        this._dirty = false;
        this._ecosystem = null;

        this._metadata = new METADATA();
        this._metadata.owner = this;
        
        this._metadata.Subscribe(DATA_EVENT.DIRTY, this, this._Dirty);
        this._metadata.Subscribe(DATA_EVENT.CLEANED, this, this._OnMetadataCleaned);

        this._ready = true;
    }

    get ready(){return this._ready;}

    get metadata(){ return this._metadata; }

    get ecosystem(){return this._ecosystem;}
    set ecosystem(p_value){this._ecosystem = p_value;}

    get uri(){ `${this._id.name}`; }

    set dirty(p_value){
        if(this._dirty == p_value){return;}
        this._dirty = p_value;
        if(p_value){
            this._Notify(DATA_EVENT.DIRTY, this);
        }else{
            this._Notify(DATA_EVENT.CLEANED, this);
        }
    }
    get dirty(){return this._dirty;}

    set id( p_value ){
        if(this._id == p_value){return;}
        var oldId = this._id;
        this._id = p_value;
        if(oldId){
            oldId.Unsubscribe(EVENT.RENAMED, this, this._Dirty );
        }
        if(p_value){
            p_value.Subscribe(EVENT.RENAMED, this, this._Dirty );
        }
    }

    get id(){
        return this._id;
    }

    get isTemp(){return this._isTemp;}

    Pack(){
        //throw new Error(`DataBlock.Pack not implemented`);
    }

    Unpack( p_object ){
        //throw new Error(`DataBlock.Unpack not implemented`);
    }

    CommitUpdate(){
        this.dirty = true;
        this._Notify(EVENT.UPDATED, this);
    }

    _CleanUp()
    {

        this._ecosystem = null;
        
        if(this._id){
            this._id.Release();
            this._id = null;
        }
        
        this._metadata._dirty = false;
        this._metadirty = false;
        this._dirty = false;

        this._ready = true;
        this._isTemp = false;
        this._metadata.Clear();

        super._CleanUp();

    }

    _Dirty(){
        this.dirty = true;
    }

    toString(){
        if(this._id){
            return `[${this.constructor.name}::${this._id.name}]`;
        }else{
            return `[${this.constructor.name}::]`;
        }        
    }    

}

module.exports = DataBlock;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./metadata.js":86}],74:[function(require,module,exports){
'use strict';

const { U, C, URI } = require(`../@.js`);
const { Dictionary } = require(`../collections/@.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);



class DataEntry extends DataBlock{
    constructor() {super();}

    _Init(){
        super._Init();
        this._model = null;
        this._base = null;

        this._fieldMap = new Dictionary();
        this._fieldData = {};
        this._roamingFieldData = {};       
    }

    get fieldMap(){ return this._fieldMap; }

    set model(p_value){
        if(this._model == p_value){return;}
        var oldValue = this._model;
        this._model = p_value;
        this._OnModelChanged(oldValue);
    }
    get model(){ return this._model; }

    // modelID:entryID
    get uri(){ return `${this._model.uri}${URI.DELIM_MODEL}${this._id ? this._id.name : '?'}`; }

    _OnModelChanged(p_oldValue){

    }

    set base( p_value ){

        if(this._base == p_value){return;}
        var oldValue = this._base;
        this._base = p_value;

        if(oldValue){

        }
        if(p_value){

        }

        this._OnBaseChanged(oldValue);
        this._Notify(DATA_EVENT.BASE_CHANGED, this);

    }

    get base(){
        return this._base;
    }

    _OnBaseChanged(p_oldValue)
    {

    }

    Inherits( p_entry )
    {

        if(!this._base || !p_entry){return false;}
        if(this._base == p_entry){
            return true;
        }

        return this._base.Inherits(p_entry);

    }

    SetFieldData(p_id, p_data){
        this._fieldMap.Set(p_id, p_data);
        this._fieldData[p_id.name] = p_data;
    }

    GetFieldData(p_id, p_localOnly = true){
        
        var data = this._fieldMap.Get(p_id);

        if(!p_localOnly || !this._base ){
            return data;
        }
        
        if(!data){
            data = this._base.GetFieldData(p_id, false);
        }
            
        return data;
        
    }

    GetBaseFieldData(p_id){
        if(!this._base){return null;}
        return this._base.GetFieldData(p_id, false);
    }

    _FieldRenamed(p_id, p_oldName){
        this._fieldData[p_id.name] = this._fieldData[p_oldName];
        delete this._fieldData[p_oldName];
        this.dirty = true;
        this._Notify(DATA_EVENT.FIELD_RENAMED, this, p_id, p_oldName);
    }

    _FieldRemoved(p_id){
        this._fieldMap.Remove(p_id);
        var stringID = p_id.name;
        var data = this._fieldData[stringID];
        this._roamingFieldData[stringID] = data;        
        delete this._fieldData[stringID];
        this._Notify(DATA_EVENT.FIELD_REMOVED, this, p_id);
    }

    _FieldAdded(p_id, p_data = null){
        var stringID = p_id.name;     
        var roaming = this._roamingFieldData[stringID];

        if(p_data == C.DEFAULT || p_data == C.INHERIT){
            if(roaming){ 
                p_data = roaming; 
                delete this._roamingFieldData[stringID];
            }
        }

        this._fieldMap.Set(p_id, p_data );
        this._fieldData[stringID] = p_data;
        this._Notify(DATA_EVENT.FIELD_ADDED, this, p_id);
    }
    
    _CleanUp()
    {

        this._model = null;
        this._base = null;

        this._fieldMap.Clear();

        this._fieldData = U.Clear(this._fieldData, true);
        this._roamingFieldData = U.Clear(this._roamingFieldData, true);
        this._metadata = U.Clear(this._metadata, true);

        super._CleanUp();
    }

    toString()
    {

        var sID = this._id ? this._id.name : '';
        var mID = this._model ? this._model.id ? this._model.id.name : '?' : '';

        return this.uri;

    }

}

module.exports = DataEntry;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./data-block.js":73}],75:[function(require,module,exports){
/**
 * A DataLibrary manages a single data-model and all corresponding entries.
 * In order to use a factory, it must be provided with a valid data-model
 * as well as a valid DataEntry class that will be used to store data.
 * 
 * The workflow is as follow :
 * Request a new, empty entry through CreateTemp()
 * then register it using Register( p_entry, p_id ).
 * If the id is already in use, the registration will fail. Make sure
 * the id is not already in use through 
 * 
 */
'use strict';

const { U, C } = require(`../@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const Factory = require(`./factory.js`);
const DataEntry = require(`./data-entry.js`);
const Observer = require(`../signals/observer.js`);

class DataLibrary extends Factory{
    constructor() {super();}

    _Init(){
        super._Init();
        this._model = null;
        this._itemClass = DataEntry;
        
        this._modelObserver = new Observer();
        this._modelObserver.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnModelFieldAdded);
        this._modelObserver.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnModelFieldRemoved);
        this._modelObserver.Hook(DATA_EVENT.FIELD_UPDATED, this, this._OnModelFieldUpdated);
        this._modelObserver.Hook(DATA_EVENT.FIELD_RENAMED, this, this._OnModelFieldRenamed);
        
        this._modelObserver.Hook(DATA_EVENT.DIRTY, this, this._OnModelDirty);

    }

    get model(){
        return this._model;
    }

    set model( p_value ){

        if(this._model == p_value){return;}

        var oldValue = this._model;
        this._model = p_value;

        if(oldValue){

        }
        if(p_value){

        }

        this._modelObserver.observable = p_value;
        this._OnModelChanged(oldValue);

    }

    _OnModelChanged(p_oldModel){

    }

    _OnModelFieldAdded( p_model, p_fieldSettings )
    {
        var list = this.itemList;
        var n = list.length;
        if(p_fieldSettings.model == p_model){
            // Model emitter is field owner
            for(var i = 0; i < n; i++){
                list[i]._FieldAdded(p_fieldSettings.id, C.DEFAULT);
            }
        }else{
            // Model emitter is not the field owner
            // This is an inherited field
            for(var i = 0; i < n; i++){
                list[i]._FieldAdded(p_fieldSettings.id, C.INHERIT);
            }
        }
    }

    _OnModelFieldRemoved( p_model, p_fieldSettings )
    {
        var list = this.itemList;
        for(var i = 0, n = list.length; i < n; i++){
            list[i]._FieldRemoved(p_fieldSettings.id);
        }
    }
    
    _OnModelFieldUpdated( p_model, p_fieldSettings ){
        //Update all entries, if needed
    }

    _OnModelFieldRenamed( p_model, p_id, p_oldName ){
        var list = this.itemList;
        var id = p_model.id;
        for(var i = 0, n = list.length; i < n; i++){
            list[i]._FieldRenamed(id, p_oldName);
        }
    }

    _OnModelDirty( p_model ){
        var list = this.itemList;
        for(var i = 0, n = list.length; i < n; i++){
            list[i].dirty = true;
        }
    }

    /**
     * Create a temp data entry to be registered afterward.
     */
    CreateTemp(p_from = null, p_class = null )
    {

        //!!!! Watch out for potential issues with CreateTemp having a different signature from extended Factory. 
        
        if(!this._model){
            throw new Error("Attempting to create an entry using a factory with no model set.");
        }

        var m = this._model;
        var newEntry = super.CreateTemp(p_class);
        newEntry.model = m;

        //Fill temp model with fields
        var f = null;
        var totalCount = m.FieldCount(false);

        if(!p_from){
            for(var i = 0; i < totalCount; i++){
                f = m.GetFieldAt(i, false);
                newEntry._FieldAdded(f.id, C.DEFAULT);
            }
        }else{
            newEntry.base = p_from;
            for(var i = 0; i < totalCount; i++){
                f = m.GetFieldAt(i, false);
               // newEntry._FieldAdded(f.id, C.INHERIT);
            }
        }

        return newEntry;

    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = DataLibrary;
},{"../@.js":6,"../signals/observer.js":142,"./core-data-event.js":71,"./data-entry.js":74,"./factory.js":78}],76:[function(require,module,exports){
'use strict';

//const U = require(`../util.js`);
//const POOL = require(`../collections/pool.js`);
//const List = require(`../collections/list.js`);
//const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);
//const Catalog = require(`../collections/catalog.js`);

const { U } = require(`../@.js`);
const { POOL, DisposableObjectEx, List, Catalog } = require(`../collections/@.js`);

const EcosystemCommand = require(`./commands/command-ecosystem.js`);
const CommandCluster = require(`../actions/command-cluster.js`);

class EcosystemPart extends DisposableObjectEx{
    constructor() {super();}

    _Init()
    {   
        super._Init();        

        this._commands = new CommandCluster();

        this._ecosystem = null;
        this._catalog = new Catalog();
        this._catalog.expanded = true;

        this._metaTemplate = {
            note:``,
            tags:[],
            export:{
                identifier:``,
                deprecated:false
            },
            presentation:{
                color:`#7f7f7f`,
                weight:0.25,
                order:1,
                group:``,
                catalogPath:``
            },
            editors:{}
        }

    }

    get metaTemplate(){return this._metaTemplate;}
    set metaTemplate(p_value){
        this._metaTemplate = p_value;
    }

    get ecosystem(){return this._ecosystem;}
    set ecosystem(p_value){

        if(this._ecosystem == p_value){return;}
        var oldValue = this._ecosystem;
        this._ecosystem = p_value;

        if(oldValue){

        }

        if(p_value){

        }

        this._OnEcosystemChanged(oldValue);

    }

    get catalog(){return this._catalog;}

    _OnEcosystemChanged(p_oldValue){
        var list = this._commands.list;
        var cmd = null;
        for(var i = 0; i < list.count; i++){
            cmd = list.At(i);
            if(U.IoF(cmd, EcosystemCommand)){ cmd.ecosystem = this._ecosystem; }
        }
    }

    _OnDataCreated( p_data ){
        p_data.ecosystem = this._ecosystem;
        p_data.metadata.Clone(this._metaTemplate);
    }

    _OnDataRegistered( p_data ){

    }

    _CleanUp(){
        this._ecosystem = null;
        super._CleanUp();
    }

}

module.exports = EcosystemPart;

},{"../@.js":6,"../actions/command-cluster.js":15,"../collections/@.js":22,"./commands/command-ecosystem.js":54}],77:[function(require,module,exports){
/**
 * The goal of an ecosystem is to isolate and encapsulate
 * all data-related functionalities in a closed ecosystem such as :
 * - a field manager
 * - a model manager
 * - entries etc
 * These parts are usually singletons but it lack flexbility down the line.
 */
'use strict';

const { U, C, URI } = require(`../@.js`);
const { POOL, List, Catalog } = require(`../collections/@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);

const EcosystemCommand = require(`./commands/command-ecosystem.js`);
const CommandCluster = require(`../actions/command-cluster.js`);

const FieldManager = require(`./manager-fields.js`);
const ModelManager = require(`./manager-models.js`);
const EntryManager = require(`./manager-entries.js`);

const EcosystemCleanCatalog = require(`./commands/ecosystem-clean-catalog.js`);

class Ecosystem extends DataBlock{
    constructor() {super();}

    _Init(){

        super._Init();

        this._commands = new CommandCluster(this._Bind(this._OnCmdRegister));
        this._dependencies = {}; //Kits are registered here
        
        var fields = POOL.Rent(FieldManager);
        fields.ecosystem = this;
        fields.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnFieldRegistered);
        fields.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnFieldUnregistered);
        this._fields = fields;
        
        var models = POOL.Rent(ModelManager);
        models.ecosystem = this;
        models.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnModelRegistered);
        models.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnModelUnregistered);
        this._models = models;

        var entries = POOL.Rent(EntryManager);
        entries.ecosystem = this;
        entries.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnEntryRegistered);
        entries.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnEntryUnregistered);
        this._entries = entries;

        this._catalog = new Catalog();
        this._catalog.expanded = true;
        this._catalog.name = `Ecosystem`;

        this._cmdCleanCatalog = this._commands.Create(
            EcosystemCleanCatalog, null,
            `%ICON%/icon_clean.svg`);

        this._catalog.AddCommand(this._cmdCleanCatalog);

    }

    get fields(){return this._fields;}
    get models(){return this._models;}
    get entries(){return this._entries;}

    get catalog(){return this._catalog;}

    Resolve(p_uri){ return URI.Resolve(p_uri, this); }

    _OnFieldRegistered( p_field ){

    }

    _OnFieldUnregistered( p_field ){

    }


    _OnModelRegistered( p_model ){
        this._entries.Deploy(p_model);
        //Check for reference token to this model.
        this._OnEntityRegistered(p_model);
    }

    _OnModelUnregistered( p_model ){
        this._entries.Conceal(p_model);
        this._OnEntityUnregistered(p_model);
    }


    _OnEntryRegistered( p_entry ){
        this._OnEntityRegistered(p_entry);
    }

    _OnEntryUnregistered( p_entry ){
        this._OnEntityUnregistered(p_entry);
    }

    //--->

    _OnEntityRegistered(p_entity){
        p_entity.Subscribe(DATA_EVENT.DIRTY, this, this._OnEntityDirty);
        p_entity.Subscribe(DATA_EVENT.CLEANED, this, this._OnEntityCleaned);
        if(p_entity.dirty){
            this._OnEntityDirty(p_entity);
        }
    }

    _OnEntityUnregistered(p_entity){
        p_entity.Unsubscribe(DATA_EVENT.DIRTY, this, this._OnEntityDirty);
        p_entity.Unsubscribe(DATA_EVENT.CLEANED, this, this._OnEntityCleaned);
    }

    _OnEntityDirty(p_entity){
        
    }

    _OnEntityCleaned(p_entity){

    }

    //--->

    _OnCmdRegister(p_cmd){
        if(U.IoF(p_cmd, EcosystemCommand)){ p_cmd.ecosystem = this; }
    }

    //--->

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = Ecosystem;
},{"../@.js":6,"../actions/command-cluster.js":15,"../collections/@.js":22,"./commands/command-ecosystem.js":54,"./commands/ecosystem-clean-catalog.js":55,"./core-data-event.js":71,"./data-block.js":73,"./manager-entries.js":83,"./manager-fields.js":84,"./manager-models.js":85}],78:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { POOL, DisposableObjectEx } = require(`../collections/@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);
const Repertoire = require(`./repertoire.js`);

class Factory extends DisposableObjectEx{
    constructor() {super();}

    _Init(){
        
        super._Init();

        this._id = null;
        this._tempItemList = new Array(0);

        this._itemRep = new Repertoire();
        this._itemRep.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnItemRegistered);
        this._itemRep.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnItemUnregistered);

        this._itemClass = null;

    }

    set id( p_value ){
        super._id = p_value;
    }

    get id(){
        return this._id;
    }

    set itemClass( p_value ){
        if(!U.IoF(p_value, DataBlock)){throw new Error(`A library has been given a non-DataBlock item class to work with.`);}
        this._itemClass = p_value;
    }

    get itemClass(){
        return this._itemClass;
    }

    get itemList(){ return this._itemRep.itemList; }

    get count(){ return this._itemRep.itemList.length; }

    /**
     * Return whether an string ID already exists
     * @param {String} p_id 
     */
    IsIDAvailable( p_id )
    {
        return this._itemRep.IsIDAvailable(p_id);
    }
    
    /**
     * Create a temp data item to be registered afterward.
     */
    CreateTemp( p_class = null )
    {
        var cl = this._itemClass;

        if(p_class){
            if(!U.IoF(p_class, cl)){
                throw new Error(`CreateTemp custom class (${p_class}) does not extends factory class (${this._itemClass.name})`);
            }else{
                cl = p_class;
            }
        }

        if(!cl){
            throw new Error(`Cannot create temp item with no itemClass set.`);
        }

        var newItem = POOL.Rent(cl);
        newItem._isTemp = true;
        this._tempItemList.push(newItem);

        newItem.Subscribe(EVENT.RELEASED, this, this._OnItemReleased);

        return newItem;

    }

    /**
     * Register an item previously created through CreateTemp() with a given ID.
     * @param {*} p_item 
     * @param {String | ID} p_id 
     */
    Register( p_item, p_id )
    {

        var index = this._tempItemList.indexOf(p_item);

        if(index == -1){
            throw new Error(`Cannot register an item that hasn't been created by this factory.`); 
        }else{
            this._tempItemList.splice(index, 1);
            p_item._isTemp = false;
        }

        this._itemRep.Register(p_item, p_id);

        return p_item;
        
    }

    _OnItemRegistered( p_repertoire, p_item )
    {
        this._Notify(DATA_EVENT.ITEM_REGISTERED, this, p_item);
    }

    /**
     * Unregister and release an item created by this library
     * @param {*} p_item 
     */
    Unregister( p_item )
    {
        this._itemRep.Unregister(p_item);
        p_item.Release();
    }

    _OnItemUnregistered( p_repertoire, p_item )
    {
        this._Notify(DATA_EVENT.ITEM_UNREGISTERED, this, p_item);
    }

    _OnItemReleased( p_item )
    {
        var index = this._tempItemList.indexOf(p_item);
        if(index != -1){
            //This is a temp item, simply remove it.
            this._tempItemList.splice(index, 1);
        }
    }

    /**
     * Return the item associated with the given ID.
     * Returns null if no ID or item is found.
     * @param {String | ID} p_id 
     */
    Get( p_id )
    {
        return this._itemRep.Get(p_id); 
    }

    

    _CleanUp()
    {
        throw new Error(`CleanUp Not implemented in ${this.constructor.name}`);
        this._itemClass = null;
        super._CleanUp();
    }

}

module.exports = Factory;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./data-block.js":73,"./repertoire.js":92}],79:[function(require,module,exports){
'use strict';

const { U, M } = require(`../@.js`);
const { COLLECTION_EVENT } = require(`../collections/@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);
const Repertoire = require(`./repertoire.js`);

class FieldDescriptor extends DataBlock{
    constructor() {super();}

    _Init(){
        super._Init();
        this._fieldClass = null;
        this._fieldMeta = null;
    }

    get fieldClass(){
        return this._fieldClass;
    }

    set fieldClass(p_value){
        this._fieldClass = p_value;
        if(p_value){
            var meta = M.ETA(p_value);
            if(meta){
                this.fieldMeta = meta;
            }
        }
    }

    get fieldMeta(){
        return this._fieldMeta;
    }

    set fieldMeta(p_value){
        this._fieldMeta = p_value;
    }    

    _CleanUp()
    {
        this._fieldClass = null;
        this._fieldMeta = null;
        super._CleanUp();
    }

}

module.exports = FieldDescriptor;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./data-block.js":73,"./repertoire.js":92}],80:[function(require,module,exports){
const { U } = require(`../@.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const FieldSettings = require(`./field-settings.js`);
const Observer = require(`../signals/observer.js`);

const _evt_plannedDeleteChanged = Symbol(`plannedDeleteChanged`);

class FieldSettingsProxy extends FieldSettings{
    constructor(){super();}

    static get PLANNED_DELETE_CHANGED(){ return _evt_plannedDeleteChanged; }

    _Init(){
        super._Init();
        this._isDeletePlanned = false;
        this._referenceField = null;
        this._isFresh = false;

        this._refObserver = new Observer();
        this._refObserver.Hook(DATA_EVENT.BASE_CHANGED, this, this._OnRefBaseChanged);
        this._refObserver.Hook(DATA_EVENT.FIELD_CLASS_CHANGED, this, this._OnRefClassChanged);

    }

    get referenceField(){ return this._referenceField; }
    set referenceField(p_value){ 
        this._referenceField = p_value; 
        if(p_value){
            this.fieldIndex = p_value.fieldIndex;
            if(!U.Same(this._metadata._data, p_value._metadata._data)){
                this._metadata.Clone(p_value._metadata);
            }
        }
        this.CommitUpdate();
    }

    get isDeletePlanned(){ return this._isDeletePlanned; }
    set isDeletePlanned(p_value){ this.TogglePlannedDelete(p_value); }

    get isFresh(){ return this._isFresh; }
    set isFresh(p_value){ this._isFresh = p_value; }

    TogglePlannedDelete( p_toggle = false ){
        if(this._isDeletePlanned == p_toggle){return;}
        this._isDeletePlanned = p_toggle;
        this._Notify(FieldSettingsProxy.PLANNED_DELETE_CHANGED, this, p_toggle);
    }

    _OnRefBaseChanged(p_ref){
        //TODO : Update this field's base ?
        //this is a tricky case. It means a parent model has been updated while editing this model.
    }

    _OnRefClassChanged(p_ref, p_was){
        //TODO : force-update class only if ref has a base
        if(p_ref.base){ this.fieldClass = p_ref.fieldClass; }
    }

    /**
     * Check wether two fields have equal data.
     * Skips field index check & metadata check as they do not affect data entries.
     * @param {*} p_otherField 
     */
    EqualsReference(){
        var ref = this._referenceField;
        if(this._id.name != ref.id.name){return false;}
        if(this._base != ref.base){return false;}
        if(this._fieldClass != ref.fieldClass){return false;}
        if(!U.Same(this._settings, ref.settings)){return false;}
        return true;
    }

    _CleanUp(){
        this._referenceField = null;
        this._isDeletePlanned = false;
        this._isFresh = false;
        super._CleanUp();
    }

}

module.exports = FieldSettingsProxy;
},{"../@.js":6,"../signals/observer.js":142,"./core-data-event.js":71,"./field-settings.js":81}],81:[function(require,module,exports){
'use strict';

const { U, M, EVENT, URI } = require(`../@.js`);
const { POOL, COLLECTION_EVENT } = require(`../collections/@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const DerivableDataBlock = require(`./data-block-derivable.js`);
const Repertoire = require(`./repertoire.js`);
const Observer = require(`../signals/observer.js`);

class FieldSettings extends DerivableDataBlock{
    constructor() {super();}

    _Init(){
        super._Init();
        this._model = null;
        this._fieldClass = null;
        this._fieldInstance = null;
        this._fieldIndex = -1;
        this._settings = {};

        //!!! IMPORTANT
        //When using a base, the field class instance is responsible for making sure
        //critical field settings are inherited.
        //i.e an ENUM field should not authorize where it grabs values from.
    }

    _BuildDerivation(p_base){
        if(this._fieldClass != p_base.fieldClass){
            this.fieldClass = p_base.fieldClass;
            this.settings = U.Clone(p_base.settings);
        }
    }

    get uri(){ return `${this._model.uri}${URI.DELIM_FIELD}${this._id.name}`; }

    get fieldIndex(){return this._fieldIndex;}
    set fieldIndex(p_value){
        if(this._fieldIndex == p_value){return;}
        this._fieldIndex = p_value;
        this.dirty = true;
    }

    get model(){return this._model;}
    set model(p_value){this._model = p_value;}

    get fieldClass(){return this._fieldClass;}
    set fieldClass(p_value){
        if(this._fieldClass == p_value){return;}
        var oldFieldClass = this._fieldClass;
        this._fieldClass = p_value;

        if(this._fieldInstance){ 
            this._fieldInstance.Release(); 
            this._fieldInstance = null;
        }

        if(p_value){
            this._fieldInstance = POOL.Rent(p_value);
            this._fieldInstance.settings = this._settings;
        }

        this.dirty = true;
        this._Notify(DATA_EVENT.FIELD_CLASS_CHANGED, this, oldFieldClass);
    }

    get fieldInstance(){return this._fieldInstance;}

    get settings(){return this._settings;}
    set settings(p_value){
        if(this._settings == p_value){return;}
        this._settings = p_value;
        if(this._fieldInstance){ 
            this._fieldInstance.settings = this._settings; 
        }
        this.dirty = true;
    }

    _OnBaseUpdated(p_base){
        super._OnBaseUpdated(p_base);
        //TODO : Make sure to update type & settings if needed.
        this.fieldClass = p_base.fieldClass;
    }
    
    _CleanUp()
    {
        this.fieldClass = null;
        this._fieldIndex = -1;
        this._model = null;
        this._settings = U.Clear(this._settings, true);
        super._CleanUp();
    }

    toString(){
        return this.uri;
    }

}

module.exports = FieldSettings;
},{"../@.js":6,"../collections/@.js":22,"../signals/observer.js":142,"./core-data-event.js":71,"./data-block-derivable.js":72,"./repertoire.js":92}],82:[function(require,module,exports){
'use strict';

//A field descriptor is used for
// - declaring a value slot in a data entry
// - data validation when attempting to change that entry field`s value
// - a field type may be :
//      - a native value
//      - a data-model entry : either a reference to an existing one, or an "embedded" one.
//          - embedded data-model entries are in fact created and "hidden" elsewhere, so they are never really embedded.
const { U } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);

const _val_default = Symbol(`default`);
const _val_inherit = Symbol(`inherit`);

class Field extends DisposableObjectEx{
    constructor() {super();}

    static get DEFAULT(){ return _val_default; }
    static get INHERIT(){ return _val_inherit; }

    static get _NFO_(){ return {
        icon:`%ICON%/KitCore/icon_field.svg`
    };}

    // A field setting definition is stored
    // inside the FieldSetting object, instead of inside the field instance
    // The instance is only used for control & data validation purposes.

    _Init(){
        super._Init();
        this._settings = null;
    }

    get settings(){return this._settings;}
    set settings(p_value){
        if(this._settings == p_value){ return; }
        var oldSettings = this._settings;
        this._settings = p_value;
        this._OnSettingsChanged(oldSettings);
    }

    _OnSettingsChanged(p_oldSettings){
        
    }

    _CleanUp(){
        this._settings = null;
        super._CleanUp();
    }

    toString(){
        if(!this._id){ 
            return `[Field::?]`;
        }else{
            return `[Field::${this.constructor.name}]`;
        }
    }

}

module.exports = Field;
},{"../@.js":6,"../collections/@.js":22}],83:[function(require,module,exports){
'use strict';


//const U = require(`../util.js`);
//const Catalog = require(`../collections/catalog.js`);
//const List = require(`../collections/list.js`);
//const Dictionary = require(`../collections/dictionary.js`);
//const POOL = require(`../collections/pool.js`);
//const ID = require(`../collections/id.js`);

const { U, EVENT } = require(`../@.js`);
const { ID, POOL, Dictionary, Catalog, List } = require(`../collections/@.js`);

const EcosystemPart = require(`./ecosystem-part.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const DataLibrary = require(`./data-library.js`);
const Factory = require(`./factory.js`);
const Model = require(`./model.js`);
const DataEntry = require(`./data-entry.js`);

const { EntryCreateChild, EntryEdit, EntrySave, EntryDelete, EntryDuplicate } = require(`./commands/@entry.js`);


const _meta_catalogPath = `presentation.catalogPath`;
const _meta_iconPath = `presentation.iconPath`;

class EntryManager extends EcosystemPart{
    constructor() {super();}

    _Init()
    {
        super._Init();

        this._libraries = new List();
        this._librariesMap = new Dictionary();
        this._entryCatalogMap = new Dictionary();

        //Commands

        this._cmdEntryCreateChild = this._commands.Create( 
            EntryCreateChild, null,
            `%ICON%/icon_cmd_createchildentry.svg`);

        this._cmdEntryEdit = this._commands.Create( 
            EntryEdit, null,
            `%ICON%/icon_cmd_editmodel.svg`);

        this._cmdEntrySave = this._commands.Create( 
            EntrySave, null,
            `%ICON%/icon_cmd_save.svg`);

        this._cmdEntryDelete = this._commands.Create( 
            EntryDelete, null,
            `%ICON%/icon_delete.svg`);

        this._cmdEntryDuplicate = this._commands.Create( 
            EntryDuplicate, null,
            `%ICON%/icon_copy_document.svg`);
    }

    /**
     * Register a model and create a data library based on it.
     * @param {Model} p_model 
     */
    Deploy( p_model ){

        var id = p_model.id;
        if(this._librariesMap.Contains(id)){
            throw new Error(`A library already exists with that model ID : ${id}`);
        }

        var newLibrary = POOL.Rent(DataLibrary);
        newLibrary.model = p_model;

        newLibrary.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnEntryRegistered);
        newLibrary.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnEntryUnregistered);

        this._libraries.Add(newLibrary);
        this._librariesMap.Set(id, newLibrary);

        return newLibrary;
    }

    /**
     * Unregister a model and release the associated data library.
     * @param {Model} p_model 
     */
    Conceal( p_model ){

        var id = p_model.id;
        if(this._librariesMap.Contains(id)){
            throw new Error(`No library is associated with the model id : ${id}`);
        }

        var library = this._librariesMap.Get(id);

        newLibrary.Unsubscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnEntryRegistered);
        newLibrary.Unsubscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnEntryUnregistered);

        this._libraries.Remove(library);
        this._librariesMap.Remove(library);        

        library.Release();

    }


    /**
     * Return a data library associated with a given key (model or ID)
     * @param {ID | Model} p_key 
     */
    GetLibrary( p_key ){
        
        var id = null;

        if(U.IoF(p_key, ID)){
            id = p_key;
        }else if(U.IoF(p_key, Model)){
            id = p_key.id;
        }else{
            throw new Error(`Argument Error`);
        }

        return this._librariesMap.Get( id );

    }

    GetLibraries(p_models, p_result = null){
        if(!p_result){p_result = new Array(0);}
        for(var i = 0, n = p_models.length; i < n; i++){
            p_result.push(this._librariesMap.Get(p_models[i].id));
        }
        return p_result;
    }

    Get(p_key, p_id){

        if(!p_key){ throw new Error(`Argument Error : Null model reference`);}

        if(U.IsString(p_key)){
            p_key = this._ecosystem.models.Get(p_key);
        }

        var lib = this.GetLibrary(p_key);

        if(!lib){ throw new Error(`Argument Error : No library for model ${p_key}`); }

        return lib.Get(p_id);

    }

    CreateTemp( p_from, p_class = null ){
        
        var model = p_from;
        var base = null;
        if(U.IoF(p_from, DataEntry)){
            model = p_from.model;
            base = p_from;
        }
        
        if(!model){ throw new Error(`Argument Error : CreateTemp : Null model`); }
        
        var lib = this.GetLibrary(model);
        
        if(!lib){
            console.warn(`Registering model on the fly, this is dangerous : ${model}`);
            lib = this.Deploy(model);
        }

        var p_entry = lib.CreateTemp(base, p_class);
        this._OnDataCreated(p_entry);

        return p_entry;

    }

    Register(p_entry, p_id){

        if(!p_entry){ throw new Error(`Argument Error : Register : Null entry`); }
        
        var lib = this.GetLibrary(p_entry.model);
        
        if(!lib){ throw new Error(`Argument Error : Register : No library found with model ${p_entry.model}`); }

        var result = lib.Register(p_entry, p_id);
        this._OnDataRegistered(p_entry);

        return result;

    }


    _OnEntryRegistered( p_library, p_entry ){
        
        this._CreateCatalogEntry(p_entry);

        p_entry.dirty = false;
        p_entry.metadirty = false;

        this._Notify(DATA_EVENT.ITEM_REGISTERED, p_entry);

        p_entry.metadata.Subscribe(DATA_EVENT.META_UPDATED, this, this._OnEntryMetaUpdated);

    }

    _OnEntryMetaUpdated(p_meta, p_path, p_value, p_oldValue){

        switch(p_path){
            case _meta_catalogPath :
                this._CreateCatalogEntry(p_meta.owner);
            break;
            case _meta_iconPath :
                this._entryCatalogMap.Get(p_meta.owner).icon = p_value;
            break;
        }
    }

    _OnCatalogEntryRelease(p_cItem){

        var entry = p_cItem.options.data;

        var entryMap = this._entryCatalogMap;
        var cItem = entryMap.Get(entry);

        if(!cItem){
            //No entry associated with data, just ignore. 
            return;
        }

        entryMap.Remove(entry);
        this._DefaultsCatalogPath(entry);

    }

    _CreateCatalogEntry(p_entry, p_options = null){
        
        var entryMap = this._entryCatalogMap;
        var cItem = entryMap.Get(p_entry);
        
        if(cItem){
            if(!p_options){ p_options = cItem.options; }
            entryMap.Remove(cItem.options.data);
            cItem.Unsubscribe(EVENT.RELEASED, this, this._OnCatalogEntryRelease);
            cItem.Release();
        }
        
        var name = p_entry.id.name;

        if(!p_options){
            p_options = {
                name:name,
                data:p_entry,
                icon:p_entry.metadata.Get(_meta_iconPath, `%ICON%/icon_document.svg`),
                secondaryCommand:this._cmdEntryEdit,
                commandList:[this._cmdEntryCreateChild, this._cmdEntryDuplicate]
            }
        }

        var path = p_entry.metadata.Get(_meta_catalogPath);
        if(U.Empty(path)){ path = this._DefaultsCatalogPath(p_entry); }
        p_options.path = `${path}/${name}`;

        cItem = this._ecosystem._catalog.Register(p_options);
        cItem.Subscribe(EVENT.RELEASED, this, this._OnCatalogEntryRelease);
        
        entryMap.Set(p_entry, cItem);
        return cItem;

    }

    _DefaultsCatalogPath(p_entry){
        var path = `Data/${p_entry.model.id.name}/`;
        p_entry.metadata.Set(_meta_catalogPath, path);
        return path;
    }

    _OnEntryUnregistered( p_library, p_entry ){

        var entryMap = this._entryCatalogMap;
        var cItem = entryMap.Get(p_entry);
        if(cItem){
            entryMap.Remove(p_entry);
            cItem.Release();
        }

        this._Notify(DATA_EVENT.ITEM_UNREGISTERED, p_entry);
        this._entryCatalogMap.Remove(p_entry);
    }

    /**
     * Checks whether using `p_otherEntry` inside `p_userEntry` would create a circular reference
     * @param {*} p_userEntry 
     * @param {*} p_otherEntry 
     */
    CheckCircularReference( p_userEntry, p_otherEntry ){
        var base = p_otherEntry;
        while(base != null){
            if(base == p_userEntry){return true;}
            base = base.base;
        }
        return false;
    }
}

module.exports = EntryManager;

},{"../@.js":6,"../collections/@.js":22,"./commands/@entry.js":51,"./core-data-event.js":71,"./data-entry.js":74,"./data-library.js":75,"./ecosystem-part.js":76,"./factory.js":78,"./model.js":90}],84:[function(require,module,exports){
'use strict';

const { U, M } = require(`../@.js`);
const { Dictionary, Catalog } = require(`../collections/@.js`);

const EcosystemPart = require(`./ecosystem-part.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const Factory = require(`./factory.js`);
const Field = require(`./field.js`);
const FieldDescriptor = require(`./field-descriptor.js`);

class FieldManager extends EcosystemPart{
    constructor() {super();}

    _Init()
    {
        
        super._Init();

        this._factory = new Factory();
        this._factory.itemClass = FieldDescriptor;

        this._factory.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnFieldRegistered);
        this._factory.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnFieldUnregistered);

        this._idMap = new Dictionary();
        
        this._catalog.name = `Fields`;
        this._catalog.icon = `%ICON%/icon_fieldlist.svg`;
        
    }

    Register( p_fieldClass )
    {

        if(!U.IoF(p_fieldClass, Field)){
            throw new Error("Attempting to register a non-field class.");
        }

        var fieldID = p_fieldClass.name;
        var fieldItem = this._factory.CreateTemp();
        fieldItem.fieldClass = p_fieldClass;

        this._OnDataCreated(fieldItem);
        
        this._factory.Register(fieldItem, fieldID);
        this._idMap.Set(p_fieldClass, fieldItem.id);

        var fieldMETA = M.ETA(p_fieldClass);
        
        this._catalog.Register(
            {
                path:fieldMETA.catalogPath,
                data:fieldItem,
                icon:U.Default(fieldMETA.icon, `%ICON%/icon_field.svg`),
                name:U.CamelSplit(p_fieldClass.name)
            }
        );

        //#LOG console.log(`%c+ ${p_fieldClass.name}`, 'color: #00589b');

    }

    Get( p_id ){
        return this._factory.Get(p_id);
    }
    
    _OnFieldRegistered(p_factory, p_field)
    {
        this._OnDataRegistered(p_field);
        this._Notify(DATA_EVENT.ITEM_REGISTERED, p_field);
    }

    _OnFieldUnregistered(p_factory, p_field)
    {
        this._Notify(DATA_EVENT.ITEM_UNREGISTERED, p_field);
    }

}

module.exports = FieldManager;

},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./ecosystem-part.js":76,"./factory.js":78,"./field-descriptor.js":79,"./field.js":82}],85:[function(require,module,exports){
'use strict';

const { U, M } = require(`../@.js`);
const { POOL, Dictionary } = require(`../collections/@.js`);

const SystemModel = require(`./model-system.js`);
const EcosystemPart = require(`./ecosystem-part.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const DataLibrary = require(`./data-library.js`);
const Factory = require(`./factory.js`);
const Model = require(`./model.js`);

const { ModelCreate, ModelCreateChild, ModelEdit, ModelCreateEntry, ModelDuplicate } = require(`./commands/@model.js`);

class ModelManager extends EcosystemPart{
    constructor() {super();}

    _Init()
    {
        
        super._Init();

        this._factory = new Factory();
        this._factory.itemClass = Model;

        this._factory.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnModelRegistered);
        this._factory.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnModelUnregistered);

        this._catMap = new Dictionary();

        this._catalog.name = `Models`;
        this._catalog.icon = `%ICON%/icon_modellist.svg`;

        this._metaTemplate.presentation.catalogPath = ``;

        //Commands

        this._cmdModelCreate = this._commands.Create( 
            ModelCreate, null,
            `%ICON%/icon_create.svg`);

        this._cmdModelCreateChild = this._commands.Create( 
            ModelCreateChild, null,
            `%ICON%/icon_cmd_createchildmodel.svg`); //icon_cmd_createchildmodel

        this._cmdModelEdit = this._commands.Create( 
            ModelEdit, null,
            `%ICON%/icon_cmd_editmodel.svg`);

        this._cmdModelCreateEntry = this._commands.Create(
            ModelCreateEntry, null,
            `%ICON%/icon_plus.svg`);

        this._cmdModelDuplicate = this._commands.Create(
            ModelDuplicate, null,
            `%ICON%/icon_plus.svg`);
            
        this._catalog.AddCommand(this._cmdModelCreate);

    }

    _OnEcosystemChanged(p_oldValue){
        super._OnEcosystemChanged(p_oldValue);
    }

    get factory(){
        return this._factory;
    }

    CreateTemp(p_from = null, p_class = null){
        var model = this._factory.CreateTemp(p_class);
        model.ecosystem = this._ecosystem;
        model.base = p_from;
        this._OnDataCreated(model);
        return model;
    }

    Register(p_model, p_id){
        return this._factory.Register(p_model, p_id);
    }

    Get( p_id ){
        return this._factory.Get(p_id);
    }

    GetDerivations( p_model, p_result = null ){
        if(!p_result){ p_result = new Array(0);}
        var list = this._factory.itemList;
        var m = null;
        for(var i = 0, n = list.length; i < n; i++){
            m = list[i];
            if(m.Inherits(p_model)){ p_result.push(m); }
        }
        return p_result;
    }

    _OnModelRegistered(p_factory, p_model)
    {

        this._OnDataRegistered(p_model);

        //Create an entry in the catalog based on model meta
        var itemOptions = {
            name:p_model.id.name,
            data:p_model,
            path:`${p_model.constructor.name}s/${p_model.id.name}/`,
            icon:U.IoF(p_model, SystemModel) ? `%ICON%/icon_lock.svg` : `%ICON%/icon_model.svg`,
            secondaryCommand:this._cmdModelEdit,
            commandList:[this._cmdModelCreateChild, this._cmdModelCreateEntry] //this._cmdModelDuplicate
        }

        var modelMeta = M.ETA(p_model);

        if(modelMeta){
            //console.log(modelMeta);
            itemOptions.path = U.Default(`${modelMeta.catalogPath}/`, `${itemOptions.path}/`);
            itemOptions.icon = U.Default(modelMeta.icon, itemOptions.icon);
        }else{
            //console.log(`no meta found for ${p_model}`);
        }

        var catEntry = this._catalog.Register(itemOptions);
        catEntry.expanded = true;
        this._catMap.Set(p_model, catEntry);

        // TODO : Listen to model NFO path update

        //console.log(`%c +${p_model}`, 'color: #00d2ff');

        this._Notify(DATA_EVENT.ITEM_REGISTERED, p_model);

    }

    _OnModelUnregistered(p_factory, p_model)
    {
        //Remove catalog's entry for the model that got unregistered
        var catEntry = this._catMap.Get(p_model);
        if(catEntry){
            catEntry.Release();
        }

        this._Notify(DATA_EVENT.ITEM_UNREGISTERED, p_model);        
    }

    /**
     * Checks whether using `p_otherModel` inside `p_userModel` would create a circular reference
     * @param {*} p_userModel 
     * @param {*} p_otherModel 
     */
    CheckCircularReference( p_userModel, p_otherModel ){
        var base = p_otherModel;
        while(base != null){
            if(base == p_userModel){return true;}
            base = base.base;
        }
        return false;
    }

}

module.exports = ModelManager;

},{"../@.js":6,"../collections/@.js":22,"./commands/@model.js":52,"./core-data-event.js":71,"./data-library.js":75,"./ecosystem-part.js":76,"./factory.js":78,"./model-system.js":89,"./model.js":90}],86:[function(require,module,exports){

'use strict';

const { U, EVENT } = require(`../@.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const { POOL, Dictionary, DisposableObjectEx } = require(`../collections/@.js`);

class METADATA extends DisposableObjectEx{

    constructor(){
        super();
        this._owner = null;
        this._data = {};
        this._dirty = false;
    }

    static Copy(p_metadata){
        var newMetadata = POOL.Rent(METADATA);
        newMetadata._data = U.Clone(p_metadata._data);
        return newMetadata;
    }

    get owner(){return this._owner;}
    set owner(p_value){this._owner = p_value;}

    get dirty(){ return this._dirty; }
    set dirty(p_value){ 
        if(this._dirty == p_value){return;}
        this._dirty = p_value;
        if(p_value){
            this._Notify(DATA_EVENT.DIRTY, this);
        }else{
            this._Notify(DATA_EVENT.CLEANED, this);
        }
    }

    Set(p_path, p_value){

        var path = null;
        if(Array.isArray(p_path)){
            path = p_path;
        }else if(typeof p_path == 'string'){
            path = p_path.split('.');
        }else{
            throw new Error(`Path ${p_path} is invalid.`);
        }

        var element = this._data;
        var lastElement = element;
        var i = 0;
        var id = null;
        var n = path.length;
        var countMinusOne = n-1;
        var dispatch = false;
        var created = false;
        var previousValue = null;

        //TODO : For loop the path to dispatch all level of update afterward
        //so if presentation.color.A is updated
        //we can still listen to update applied to presentation.color 
        //Also, we probably want to stack update and dispatch them on next update to aleviate garbage collection
        //update 0 - 1 - 2 - 3
        //dispatch 3 - 2 - 1 - 0

        while(i < n){
            id = path[i];

            if(i == countMinusOne){
                var existingValue = lastElement[id];

                if(U.Void(existingValue)){created = true;}
                if(existingValue == p_value){ 
                    return p_value; 
                }

                dispatch = true;
                previousValue = existingValue;
                lastElement[id] = p_value;
                lastElement = p_value;
            }else{
                element = lastElement[id];
                
                if(U.Void(element)){
                    element = {};
                    lastElement[id] = element;
                }

                lastElement = element;
            }

            i++;
        }

        if(dispatch){

            if(created){ this._Notify(DATA_EVENT.META_ADDED, this, p_path, lastElement); }

            n -= 1;
            for(var p = 0; p < n; p++){
                this._Notify(DATA_EVENT.META_MID_UPDATE, this, U.Join(path, '.', 0, p));
            }

            this._Notify(DATA_EVENT.META_UPDATED, this, p_path, lastElement, previousValue);
            this._Notify(EVENT.UPDATED, this);
            this.dirty = true;
        }

        return lastElement;

    }

    Get(p_path, p_fallback = null){

        var path = null;
        var tof = typeof p_path;
        
        if(Array.isArray(p_path)){
            path = p_path;
        }else if(tof == 'string'){
            path = p_path.split('.');
        }else{
            throw new Error(`Path ${p_path} is invalid.`);
        }

        var element = null;

        if(U.Void(p_fallback)){
            element = this._data;
            while(!U.Void(element) && path.length != 0){
                element = element[path.shift()];
            }
            path.length = 0;
            return element;
        }else{
            element = this._data;
            var lastElement = element;
            var id = null;
            while(path.length != 0){
                id = path.shift();
                element = lastElement[id];
                if(U.Void(element)){
                    path.length = 0;
                    this._signalBox.silent = true;
                    element = this.Set(p_path, p_fallback);
                    this._signalBox.silent = false; // This was causing a lot of signal loops.
                    return element;
                }
                lastElement = element;
            }
            return element;
        }

    }

    Clear(){
        this._data = U.DeepClear(this._data, true);
    }
    
    Clone(p_source = null, p_silent = true){
        if(p_source){
            if(U.IoF(p_source, METADATA)){
                this._data = U.Clone(p_source._data);
            }else if(typeof p_source == 'object'){
                this._data = U.Clone(p_source);
            }else{
                return;
            }
            this.dirty = !p_silent;
        }else{
            return METADATA.Copy(this);
        }
    }

    toString(){
        return `{MetaData}`;
    }

}

module.exports = METADATA;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71}],87:[function(require,module,exports){
'use strict';

const { U, C, M } = require(`../@.js`);
const { POOL, DisposableObjectEx } = require(`../collections/@.js`);

const FieldSettings = require(`./field-settings.js`);
const Model = require(`./model.js`);

class ModelMockup extends DisposableObjectEx{


    /**
     * Turns a JS object into a ModelMockup.
     * @param {Object} p_object 
     */
    static Mock( p_object ){
        var mockup = POOL.Rent(ModelMockup);
        try{ 
            mockup.mockup = p_object;
        }catch(err){
            mockup.Release();
            throw err;
        }
        return mockup;
    }

    /**
     * Turn a JS object into a ModelMockup, with handling
     * of extra mockup properties.
     * @param {*} p_object 
     */
    static CompleteMock( p_object ){
        var mockup = ModelMockup.Mock(p_object.mockup);
        mockup.id = p_object.id;
        mockup.base = p_object.base;
        mockup.modelClass = U.Default(p_object.modelClass, Model);
        mockup.NFO = p_object.NFO;
        return mockup;
    }

    /**
     * Expands a mockup into an existing model by creating
     * missing fields.
     * Throws an error if a field with a mockup'd ID already exists
     * with a missmatching type.
     * @param {Model} p_model 
     * @param {ModelMockup} p_mockup 
     */
    static Expand(p_model, p_mockup){

        var oldBase = p_model.base;
        var p_base = p_mockup.base;

        if(p_base){ 
            if(p_model.base && p_model.base.Inherit(p_base)){
                //Do nothing : base model already extends mocked base at some point
            }else{
                p_model.base = p_base; 
            }
        }

        if(!p_model.NFO){
            p_model.NFO = p_mockup.NFO;
        }

        var mockup = p_mockup.mockup;
        var existingField = null;
        var mockField = null;
        var field = null;
        for(var member in mockup){

            existingField = p_model.Get(member);
            mockField = mockup[member];

            if(!existingField){

                Model.CreateField( 
                    p_model, 
                    mockField.cl, 
                    member,
                    { 
                        settings:mockField.settings 
                    });

            }else{

                if(U.IoF(existingField.fieldClass, mockField.cl)){
                    //Field exists, type matches.
                    if(mockField.settings){
                        existingField.Unpack(mockField.settings);
                    }
                    continue;
                }else{
                    //Field exists, type mismatches :()
                    throw new Error();
                }
            }
        }

        return p_model;
        
    }

    /**
     * Creates and register a model in a given ecosystem, based on
     * a given mockup.
     * @param {Ecosystem} p_ecosystem 
     * @param {ModelMockup} p_mockup 
     * @param {String} p_id 
     */
    static Register(p_ecosystem, p_mockup, p_id = null ){
        var model = p_ecosystem.models.CreateTemp(null, p_mockup.modelClass);
        p_ecosystem.models.Register(
            ModelMockup.Expand(model, p_mockup),
            U.Default(p_id, p_mockup.id));

        return model;
    }

    

    constructor() {super();}

    _Init(){
        super._Init();
        this._id = ``;
        this._base = null;
        this._NFO = null;
        this._modelClass = Model;
        this._mockup = {};
        this._fieldCount = 0;
    }

    get NFO(){return this._NFO;}
    set NFO(p_value){
        this._NFO = p_value;
        if(p_value){
            var cPath = U.Get(p_value, `catalogPath`, null);
            if(!cPath || cPath == C.DEFAULT ){
                p_value.catalogPath = `${this._modelClass.name}s/${this._id}/`;
                /*
                //Register to default path
                var arr = new Array(0);
                var b = this._base;
                while(b != null){
                    arr.push(b.id.name);
                    b = b.base;
                }
                arr.push(`User models`);
                arr.reverse();
                arr.push(this._id);
                p_value.catalogPath = arr.join(`/`)+'/';
                */
            }
        }
    }

    get base(){return this._base;}
    set base(p_value){this._base = p_value;}

    get id(){return this._id;}
    set id(p_value){this._id = p_value;}

    get modelClass(){return this._modelClass;}
    set modelClass(p_value){this._modelClass = p_value;}

    get mockup(){return this._mockup;}
    set mockup(p_value){
        this._mockup = p_value;
        if(!p_value){
            this._fieldCount = 0;
        }else{
            var field = null;
            for(var member in p_value){
                if(!p_value[member].hasOwnProperty(`cl`)){
                    throw new Error(`Field ${member} is missing a class definition.`);
                }
                this._fieldCount += 1;
            }
        }
    }

    /**
     * Checks whether a field exists with a given ID
     * @param {String} p_fieldId 
     */
    Has(p_fieldId){ return this._mockup.hasOwnProperty(p_fieldId); }

    Add(p_fieldId, p_fieldClass, p_fieldSettings = null){
        if(U.Empty(p_fieldId)){ throw new Error(`Cannot add a field with an empty ID.`);}
        if(!p_fieldClass){ throw new Error(`Cannot add a field with an empty type.`);}
        var mockup = this._mockup;
        if(mockup.hasOwnProperty(p_fieldId)){
            throw new Error(`Mockup already have a field named ${p_fieldId}`);
        }
        mockup[p_fieldId] = { cl:p_fieldClass, settings:p_fieldSettings };
        this._fieldCount += 1;
    }

    Remove(p_fieldId){
        var mockup = this._mockup;
        if(mockup.hasOwnProperty(p_fieldId)){return;}
        delete mockup[p_fieldId];
        this._fieldCount -= 1;
    }

    /**
     * Checks whether a given model is an exact match of this
     * mockup.
     * @param {Model} p_model 
     * @param {Boolean} p_inspectSettings should the settings match too ?
     */
    Equals(p_model, p_inspectSettings = false){
        

        if(this._fieldCount != p_model.FieldCount(true)){ return false; } //Field count mismatch.

        var mockup = this._mockup;
        var mockField = null;
        var existingField = null;

        for(var member in mockup){
            existingField = p_model.Get(member);
            if(!existingField){return false;}//Field missing
            mockField = mockup[member];
            if(!U.IoF(existingField.fieldClass, mockField.cl)){return false;} //Field type mismatch
            if(!p_inspectSettings){continue;}
            throw new Error(`settings inspection not implemented yet`);
        }

        return true;
    }

    /**
     * Checks whether a given model fits the mockup.
     * This is a loose alternative to Equals(), and only
     * checks wheter fields are present
     * @param {Model} p_model 
     */
    Fits(p_model){

        var mockup = this._mockup;
        var existingField = null;

        for(var member in mockup){
            existingField = p_model.Get(member);
            if(!existingField){return false;}//Field missing
            if(!U.IoF(existingField.fieldClass, mockup[member].cl)){return false;} //Field type mismatch
        }

        return true;
    }

    /**
     * 
     * @param {Ecosystem} p_ecosystem 
     * @param {String} p_id 
     */
    RegisterTo(p_ecosystem, p_id = null ){
        return ModelMockup.Register(p_ecosystem, this, p_id );
    }
    
    /**
     * 
     * @param {Ecosystem} p_ecosystem 
     * @param {Model} p_model
     */
    ExpandTo(p_model){
        ModelMockup.Expand(p_model, this );
    }

    _CleanUp()
    {
        this._id = ``;
        this._base = null;
        this._modelClass = Model;
        this._mockup = {};
        this._NFO = null;
        this._fieldCount = 0;
        super._CleanUp();
    }

}

module.exports = ModelMockup;
},{"../@.js":6,"../collections/@.js":22,"./field-settings.js":81,"./model.js":90}],88:[function(require,module,exports){
const { U } = require(`../@.js`);
const { Dictionary } = require(`../collections/@.js`);
const ID = require(`../collections/id.js`);
const Observer = require(`../signals/observer.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const Model = require(`./model.js`);
const FieldSettingsProxy = require(`./field-settings-proxy.js`);

const _evt_proxyFieldRegistered = Symbol(`proxyFieldRegistered`);
const _evt_proxyFieldUnregistered = Symbol(`proxyFieldUnregistered`);

class ModelProxy extends Model{
    constructor(){super();}

    static get PROXY_FIELD_REGISTERED(){return _evt_proxyFieldRegistered;}
    static get PROXY_FIELD_UNREGISTERED(){return _evt_proxyFieldUnregistered;}

    _Init(){
        super._Init();
        this._referenceModel = null;
        this._id = new ID();
        this._proxyMap = new Dictionary();

        this._refObserver = new Observer();
        this._refObserver.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnRefModelFieldAdded);
        this._refObserver.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnRefModelFieldRemoved);

    }

    get referenceModel(){ return this._referenceModel; }
    set referenceModel(p_value){ 
        if(this._referenceModel == p_value){return;}
        var oldRef = this._referenceModel;
        this._referenceModel = p_value;

        this._refObserver.observable = p_value;

        if(oldRef){
            this._ClearProxy(); 
        }

        if(p_value){ 
            this._BuildProxy(); 
        }
    }

    _ClearProxy(){

        this._id.name = `(no_ref)`;
        this.ecosystem = null;
        this.base = null;

        var fieldList = this._fieldRep.itemList;
        var proxyFieldSettings = null;
        var fieldSettings = null;

        while(fieldList.length != 0){
            proxyFieldSettings = fieldList[fieldList.length-1];
            this.Unregister(proxyFieldSettings);
            this._Notify(ModelProxy.PROXY_FIELD_UNREGISTERED, this, proxyFieldSettings);
            proxyFieldSettings.Release();
        }

        this._proxyMap.Clear();

    }

    _BuildProxy(){

        var ref = this._referenceModel;

        this._id.name = ref.id.name;
        this.ecosystem = ref.ecosystem;

        this._metadata.Clone(ref.metadata);
        this.base = ref.base;

        var fieldList = ref.localFieldList;
        var proxyFieldSettings = null;

        for(var i = 0, n = fieldList.length; i < n; i++){
            proxyFieldSettings = this._RegisterProxyField(fieldList[i]);
            proxyFieldSettings.metadata.dirty = false;
            proxyFieldSettings.dirty = false;
        }

    }

    _RegisterProxyField(p_fieldSettings){

        var proxyFieldSettings = Model.CreateField( 
            this, 
            p_fieldSettings.fieldClass, 
            p_fieldSettings.id.name, 
            {
                cl:FieldSettingsProxy, 
                settings:U.Clone(p_fieldSettings.settings),
                metadata:p_fieldSettings.metadata
            });

        proxyFieldSettings.referenceField = p_fieldSettings;
        this._proxyMap.Set( p_fieldSettings, proxyFieldSettings);

        this._Notify(ModelProxy.PROXY_FIELD_REGISTERED, this, proxyFieldSettings);
        return proxyFieldSettings;

    }

    _OnRefModelFieldAdded(){

    }

    _OnRefModelFieldRemoved(){
        
    }

    _CleanUp(){
        this.referenceModel = null;
        super._CleanUp();
    }

}

module.exports = ModelProxy;
},{"../@.js":6,"../collections/@.js":22,"../collections/id.js":34,"../signals/observer.js":142,"./core-data-event.js":71,"./field-settings-proxy.js":80,"./model.js":90}],89:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { COLLECTION_EVENT } = require(`../collections/@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);
const Repertoire = require(`./repertoire.js`);
const Model = require(`./model.js`);

class SystemModel extends Model{
    constructor() {super();}

    _Init(){
        super._Init();
        this._editable = false;
    }

    _CleanUp()
    {
        super._CleanUp();
    }

    toString(){
        if(!this._id){ 
            return `[Model::?]`;
        }else{
            return `[Model::${this._id.name}]`;
        }
    }

}

module.exports = SystemModel;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./data-block.js":73,"./model.js":90,"./repertoire.js":92}],90:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);

const METADATA = require(`./metadata.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const DerivableDataBlock = require(`./data-block-derivable.js`);
const Repertoire = require(`./repertoire.js`);
const FieldSettings = require(`./field-settings.js`);
const Observer = require(`../signals/observer.js`);

let uinc = 0;

class Model extends DerivableDataBlock{
    constructor() {super();}

    static CreateField( p_model, p_fieldClass, p_id, p_options = null ){

        var fieldSettings = POOL.Rent(U.Get(p_options, `cl`, FieldSettings));
        fieldSettings.fieldClass = p_fieldClass;
        fieldSettings.instance = POOL.Rent(p_fieldClass);

        var settings = U.Get(p_options, `settings`, null);
        if(settings){ fieldSettings.settings = settings; }
        var metadata = U.Get(p_options, `metadata`, null);
        if(metadata){ 
            if(U.IoF(metadata, METADATA)){
                fieldSettings.metadata.Clone(metadata);
            }else{
                fieldSettings.metadata._data = metadata;
            }
        }

        p_model.Register(fieldSettings, p_id);
        return fieldSettings;

    }

    static get _NFO_(){ return {
        icon:`%ICON%/icon_model.svg`
    };}

    _NFO_(){
        return this._NFO;
    }

    _Init(){
        super._Init();

        this._uinc = uinc++;

        this._NFO = null;
        this._base = null;

        this._editable = true;
        this._entryCreationAllowed = true;

        this._fieldRep = new Repertoire();
        this._fieldRep.Subscribe(DATA_EVENT.ITEM_REGISTERED, this, this._OnFieldRegistered);
        this._fieldRep.Subscribe(DATA_EVENT.ITEM_UNREGISTERED, this, this._OnFieldUnregistered);
        this._fieldRep.Subscribe(EVENT.RENAMED, this, this._OnFieldRenamed);

        this._baseObserver.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnBaseFieldAdded);
        this._baseObserver.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnBaseFieldRemoved);
        this._baseObserver.Hook(DATA_EVENT.FIELD_RENAMED, this, this._OnBaseFieldRenamed);

    }

    // modelID.fieldID
    get uri(){ return `${this._id ? this._id.name : '?'}`; }

    get NFO(){return this._NFO;}
    set NFO(p_value){
        if(this._NFO){ throw new Error(`Cannot update existing model's META infos.`); }
        this._NFO = p_value;
    }

    get editable(){return this._editable;}
    get entryCreationAllowed(){return this._entryCreationAllowed;}

    get localFieldList(){return this._fieldRep.itemList;}

    FieldCount(p_localOnly = true){
        return p_localOnly ? this._fieldRep.count : this._fieldRep.count + this._InheritedFieldCount() ;
    }

    GetFieldAt(p_index, p_localOnly = true){
        return p_localOnly ? this._fieldRep.At(p_index) : this._InheritedFieldAt(p_index);
    }

    _InheritedFieldAt(p_index){
        var sum = this.FieldCount(false);
        var sumin = sum - this._fieldRep.count; 
        var index = p_index - sumin;
        if(p_index >= sumin){
            return this._fieldRep.At(index);
        }else{
            return this._base._InheritedFieldAt(p_index);
        }
    }

    _InheritedFieldCount(){
        if(!this._base){return 0;}
        return this._base.FieldCount(false);
    }

    _ClearDerivation(p_oldBase){
        var fieldSettings = null;
        var fieldCount = p_oldBase.FieldCount(false);
        for(var i = 0; i < fieldCount; i++){
            fieldSettings = p_oldBase.GetFieldAt(i, false);
            this._OnBaseFieldRemoved(p_oldBase, fieldSettings);
        }
    }

    _BuildDerivation(p_base){
        var fieldSettings = null;
        var fieldCount = p_base.FieldCount(false);
        for(var i = 0; i < fieldCount; i++){
            fieldSettings = p_base.GetFieldAt(i, false);
            this._OnBaseFieldAdded(p_base, fieldSettings);
        }
    }

    get root(){
        if(!this._base){
            return this;
        }else{
            return this._base.root;
        }
    }

    _OnBaseFieldAdded( p_base, p_fieldSettings ){

        var existingField = this._fieldRep.Get(p_fieldSettings.id.name);
        if(existingField){
            //A field with the same name already exists.
            //Override inherited member.
            existingField.base = p_fieldSettings;
        }else{
            this._Notify(DATA_EVENT.FIELD_ADDED, this, p_fieldSettings);
        }

    }

    _OnBaseFieldRemoved( p_base, p_fieldSettings ){

        var existingField = this._fieldRep.Get(p_fieldSettings.id.name);
        if(existingField){
            //A field with the same name already exists.
            existingField.base = null;
        }else{
            this._Notify(DATA_EVENT.FIELD_REMOVED, this, p_fieldSettings);
        }

    }

    _OnBaseFieldRenamed( p_base, p_id, p_oldName ){

        var existingFieldOld = this._fieldRep.Get(p_oldName);
        var existingFieldNew = this._fieldRep.Get(p_id.name);
        if(existingFieldOld){
            //A field here was using the same name.
            if(!existingFieldNew){
                //Rename existing field to keep override valid & active
                existingFieldOld.id.name = p_id.name;
            }else{
                //Unlink old and rename new
                existingFieldOld.base = null;
                existingFieldNew.base = p_base.Get(p_id);
            }
        }else if(existingFieldNew){
            //No link to old name, but link to the new one
            existingFieldNew.base = p_base.Get(p_id);
        }else{
            this._Notify(DATA_EVENT.FIELD_RENAMED, this, p_id, p_oldName );
        }

    }

    Inherits( p_model ){        

        if(this._base == p_model){return true;}
        if(!p_model){return false;}
        if(this == p_model){return true;}

        if(!this._base){
            return false;
        }else{
            return this._base.Inherits(p_model);   
        }
    }

    GetInheritanceChain(p_includeSelf = false){

        var path = new Array(0);
        if(p_includeSelf){ path.push(this); }

        var b = this._base;
        while(b){
            path.push(b);
            b = b.base;
        }
        return path;

    }

    /**
     * Return whether an string ID is available to be used as a field ID
     * @param {String} p_id 
     */
    IsIDAvailable( p_id ){
        return this._fieldRep.IsIDAvailable(p_id);
    }

    Register( p_fieldSettings, p_id ){
        this._fieldRep.Register(p_fieldSettings, p_id);
    }

    _OnFieldRegistered(p_repertoire, p_fieldSettings){

        p_fieldSettings.Subscribe(DATA_EVENT.DIRTY, this, this._OnFieldDirty);
        p_fieldSettings.model = this;
        p_fieldSettings.fieldIndex = this._fieldRep.IndexOf(p_fieldSettings);
        p_fieldSettings.metadata.Clone(this._ecosystem.fields.metaTemplate);

        if(this._base){
            var existingField = this._base.Get(p_fieldSettings.id.name);
            if(existingField){
                p_fieldSettings.base = existingField;
            }
        }

        this._Notify(DATA_EVENT.FIELD_ADDED, this, p_fieldSettings);
        this.dirty = true;

    }

    Unregister( p_fieldSettings ){
        this._fieldRep.Unregister(p_fieldSettings);
    }

    _OnFieldUnregistered(p_repertoire, p_fieldSettings){
        p_fieldSettings.Unsubscribe(DATA_EVENT.DIRTY, this, this._OnFieldDirty);
        this._Notify(DATA_EVENT.FIELD_REMOVED, this, p_fieldSettings);
        if(p_fieldSettings.model == this){ 
            p_fieldSettings.model = null; 
        }        
        this.dirty = true;
    }

    _OnFieldRenamed(p_id, p_oldName){

        if(this._base){
            var existingField = this._base.Get(p_id.name);
            if(existingField){
                this.Get(p_id, true).base = existingField;
            }
        }

        this._Notify(DATA_EVENT.FIELD_RENAMED, this, p_id, p_oldName );
    }

    _OnFieldDirty(p_fieldSettings){
        this.dirty = true;
    }    

    /**
     * Get this model`s field associated with the given ID.
     * If the field cannot be found, will look in model base, if any, unless
     * p_localOnly is set to true.
     * @param {ID} p_field_id 
     * @param {boolean} p_localOnly 
     */
    Get( p_field_id, p_localOnly = false ){

        var field = this._fieldRep.Get(p_field_id);

        if(!field){
            if(!this._base || p_localOnly){ return null; }
            return this._base.Get(p_field_id, false);
        }else{
            return field;
        }
        
    }

    _UpdateLocalFieldIndexes(p_commitUpdate = false){
        var list = this.localFieldList;
        if(p_commitUpdate){
            var field = null;
            var updated = false;
            for(var i = 0, n = list.length; i < n; i++){
                field = list[i];
                
                if(field.fieldIndex == i){continue;}

                updated = true;
                field.fieldIndex = i;
                field.CommitUpdate();
            }
            if(updated){ this.CommitUpdate(); }
        }else{
            for(var i = 0, n = list.length; i < n; i++){
                list[i].fieldIndex = i;
            }
        }
        
    }

    Clear(){
        //TODO : Release all local field settings.
    }

    _CleanUp()
    {
        this._NFO = null;
        this._fieldRep.Clear();
        this._editable = true;
        this._entryCreationAllowed = true;
        this._isTemp = false;
        super._CleanUp();
    }

    toString(){
        if(!this._id){return `[(${this._uinc})Model::?]`;}
        return this.uri;
    }

}

module.exports = Model;
},{"../@.js":6,"../collections/@.js":22,"../signals/observer.js":142,"./core-data-event.js":71,"./data-block-derivable.js":72,"./field-settings.js":81,"./metadata.js":86,"./repertoire.js":92}],91:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { KDictionary, DisposableObjectEx } = require(`../collections/@.js`);
const DATA_EVENT = require(`./core-data-event.js`);
const { Observer } = require(`../signals/@.js`);

const _add_ = `ADD`;
const _rem_ = `REM`;
const _upd_ = `UPD`;
const _mpd_ = `IPD`;

class MetadataObserver extends DisposableObjectEx {
    constructor() {super();}

    //---> Init

    _Init(){ 
        super._Init(); 
        this._observer = new Observer();
        this._observer.Hook(DATA_EVENT.META_ADDED, this, this._OnMetaAdded);
        this._observer.Hook(DATA_EVENT.META_REMOVED, this, this._OnMetaRemoved);
        this._observer.Hook(DATA_EVENT.META_UPDATED, this, this._OnMetaUpdated);
        this._observer.Hook(DATA_EVENT.META_MID_UPDATE, this, this._OnMetaMidUpdate);
    }

    _GetPrefix(p_evt){
        switch(p_evt){
            case DATA_EVENT.META_ADDED : return _add_;
            case DATA_EVENT.META_REMOVED : return _rem_;
            case DATA_EVENT.META_UPDATED : return _upd_;
            case DATA_EVENT.META_MID_UPDATE : return _mpd_;
        }

        throw new Error(`Cannot hook to an event that isn't META_ADDED, META_REMOVED or META_UPDATED`);
    }

    Hook( p_evt, p_path, p_subscriber, p_fn ){
        var evt = `${this._GetPrefix(p_evt)}@${p_path}`;
        this.Subscribe(evt, p_subscriber, p_fn);
    }

    Unhook( p_evt, p_path, p_subscriber, p_fn ){
        var evt = `${this._GetPrefix(p_evt)}@${p_path}`;
        this.Unsubscribe(evt, p_subscriber, p_fn);
    }

    _OnMetaAdded(p_meta, p_path, p_value){
        var evt = `${_add_}@${p_path}`;
        this._Notify(evt, p_meta, p_path, p_value);
    }

    _OnMetaRemoved(p_meta, p_path){
        var evt = `${_rem_}@${p_path}`;
        this._Notify(evt, p_meta, p_path, p_value, p_oldValue);
    }

    _OnMetaUpdated(p_meta, p_path, p_value, p_oldValue){
        var evt = `${_upd_}@${p_path}`;
        this._Notify(evt, p_meta, p_path, p_value, p_oldValue);
    }

    _OnMetaMidUpdate(p_meta, p_path){
        var evt = `${_mpd_}@${p_path}`;
        this._Notify(evt, p_meta, p_path);
    }


    get observable(){return this._observer._observable;}
    set observable(p_value){this._observer.observable = p_value;}
    
    _CleanUp()
    {
        this.observable = null;
        super._CleanUp();
    }    

}

module.exports = MetadataObserver;
},{"../@.js":6,"../collections/@.js":22,"../signals/@.js":137,"./core-data-event.js":71}],92:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { POOL, ID, DisposableObjectEx, Dictionary } = require(`../collections/@.js`);

const DATA_EVENT = require(`./core-data-event.js`);
const DataBlock = require(`./data-block.js`);


class Repertoire extends DisposableObjectEx{
    constructor() {super();}

    _Init(){

        super._Init();

        this._idList = new Array(0); // [ID, ID, ...]
        this._idMap = new Dictionary(); // <string, ID>

        this._itemList = new Array(0); // [entry, entry, ...]
        this._itemMap = new Dictionary(); // <ID, entry>

    }

    get idList(){ return this._idList; }

    get idMap(){ return this._idMap; }

    get itemList(){ return this._itemList; }

    get itemMap(){ return this._itemMap; }

    get count(){ return this._itemList.length; }

    IndexOf(p_item){
        return this._itemList.indexOf(p_item);
    }

    /**
     * Return whether a given string is available to be used
     * to create a new ID
     * @param {String} p_string 
     */
    IsIDAvailable( p_string )
    {
        if(!p_string){return false;}
        return !this._idMap.Contains(p_string);
    }

    /**
     * Return whether or not the repertoire contains the given ID
     * @param {string or ID} p_id 
     */
    ContainsID( p_id )
    {
        if(!p_id){return false;}
        if( U.IoF(p_id, ID)){
            return this._itemMap.Contains(p_string);
        }else{
            return this._idMap.Contains(p_string);
        }
    }

    /**
     * Return the ID associated with a given string, if any
     * @param {String} p_string 
     */
    GetID( p_string )
    {
        if(!p_string){return null;}
        return this._idMap.Get(p_string);
    }

    /**
     * Create and return new ID with a given string.
     * @param {String} p_string 
     */
    ReserveID( p_string )
    {

        if(!this.IsIDAvailable(p_string)){
            throw new Error("Cannot create an ID that already exists.");
        }

        var newID = POOL.Rent(ID);
        newID.name = p_string;
        this._idMap.Set(p_string, newID);
        this._idList.push(newID);

        newID.Subscribe(EVENT.RELEASED, this, this._OnIDReleased);
        newID.Subscribe(EVENT.RENAMING, this, this._OnIDRenaming);
        newID.Subscribe(EVENT.RENAMED, this, this._OnIDRenamed);

        return newID;

    }

    _OnIDRenaming( p_id, p_newName )
    {
        if(this._idMap.Contains(p_newName)){
            p_id.PreventRenaming();
        }
    }

    _OnIDRenamed( p_id, p_oldName )
    {
        this._idMap.Remove(p_oldName);
        this._idMap.Set(p_id.name, p_id);
        this._Notify(EVENT.RENAMED, p_id, p_oldName);
    }

    _OnIDReleased( p_id )
    {

        var item = this._itemMap.Get(p_id);

        if(item){
            console.warn(`An ID (${p_id.name}) has been released. Removing existing item from repertoire.`);
            this.Unregister(item);
        }

        this._idMap.Remove(p_id.name);
        var index = this._idList.indexOf(p_id);
        if(index != -1){
            this._idList.splice(index, 1);
        }

    }

    /**
     * Register an item with a given ID. If no ID is provided, creates and assign
     * a randomly generated one.
     * @param {*} p_item 
     * @param {*} p_id 
     */
    Register( p_item, p_id )
    {

        if(!p_item){throw new Error(`Cannot register a null item.`);}
        if(!U.IoF(p_item, DataBlock)){throw new Error(`Cannot register a non-DataBlock item.`);}
        
        var index = this._itemList.indexOf(p_item);
        if(index != -1){throw new Error(`Cannot re-register an item.`);}
        if(p_item.id){throw new Error(`Cannot register an item with an ID already set.`);}

        var itemID = null;

        if(!p_id){
            //No ID provided. Create a random one.
            itemID = this.ReserveID( U.unsafeUID );
        }else{
            //An ID has been provided.
            var itemID = p_id;
            if(U.IoF(p_id, ID)){
                //Provided ID is an ID object                
                if(this._idMap.Get(p_id.name) == p_id){
                    //ID appear is owned by this repertoire.
                    if(this._itemMap.Contains(p_id)){throw new Error(`ID(${p_id}) already in use.`);}
                }else{
                    //ID isn`t owned by this repertoire.
                    throw new Error(`Cannot register an item with an ID(${p_id.name}) that hasn't been provided by this repertoire.`);
                }
                itemID = p_id;
            }else{
                //Provided ID is not an ID object
                if(typeof p_id != 'string'){throw new Error(`Cannot register an item with an ID that isn't an ID object nor a string.`);}
                if(p_id == ""){throw new Error(`Cannot use empty string as ID. Use null or undefined instead to generate a random one.`);}
                var existingID = this._idMap.Get(p_id);
                if(existingID){
                    //An ID has already been created with this string
                    if(this._itemMap.Contains(existingID)){
                        throw new Error(`ID(${p_id}) already in use.`);
                    }
                    itemID = existingID;
                }else{
                    itemID = this.ReserveID( p_id );
                }
            }
        }

        this._itemList.push(p_item);
        this._itemMap.Set(itemID, p_item);
        p_item.id = itemID;

        //console.log(`Registered : ${p_item} with id ${p_item.id}`);
        
        this._OnItemRegistered( p_item );

        this._Notify(DATA_EVENT.ITEM_REGISTERED, this, p_item);

    }

    _OnItemRegistered( p_item )
    {
        p_item.Subscribe(EVENT.RELEASED, this, this._OnItemReleased);
    }

    /**
     * Unregister an item and releases its ID.
     * @param {*} p_item 
     */
    Unregister( p_item )
    {

        if(!p_item){throw new Error(`Cannot unregister a null item.`);}
        
        var itemID = p_item.id;
        if(!itemID){throw new Error(`Cannot unregister a item with no ID.`);}

        var index = this._itemList.indexOf(p_item);
        if(index == -1){throw new Error(`Cannot unregister an item that is not in the repertoire.`);}

        this._itemList.splice(index, 1);
        this._itemMap.Remove(itemID);
        
        this._OnItemUnregistered(p_item);

        this._Notify(DATA_EVENT.ITEM_UNREGISTERED, this, p_item);

        //Free ID
        p_item.id = null;
        itemID.Release();

    }

    _OnItemUnregistered( p_item )
    {
        p_item.Unsubscribe(EVENT.RELEASED, this, this._OnItemReleased);
    }
    
    _OnItemReleased( p_item )
    {
        this.Unregister( p_item );
    }

    Get( p_id )
    {
        if(!p_id){return null;}
        if(U.IsString(p_id)){
            return this._itemMap.Get(this._idMap.Get(p_id));
        }else{
            return this._itemMap.Get(p_id);
        }
    }

    At(p_index){
        return this._itemList[p_index];
    }

    Clear(){
        //TODO : Implement clearing the repertoire
    }

    _CleanUp()
    {
        this.Clear();
        super._CleanUp();
    }


}

module.exports = Repertoire;
},{"../@.js":6,"../collections/@.js":22,"./core-data-event.js":71,"./data-block.js":73}],93:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const U = require(`./util.js`);
const ServiceBase = require(`./services/service-base.js`);
const { POOL, List, Dictionary } = require(`./collections/@.js`);
const APP_REQUEST = require(`./app-request.js`);
const Request = require(`./signals/request.js`);

const DialogInfos = require(`./data-app/dialog-infos.js`);

class DIALOG extends ServiceBase{
    constructor() { super(); }
    
    _Init(){ 
        super._Init();
        this._dialogs = new List();
        this._ownedDialogData = new Dictionary();

        this._Bind(this._ProcessNext);
        this._inDialog = false;

    }

    _Start(){
        if(!super.Start()){return false;}
        //Some dialog push can occur prior to the service being started
        this._ProcessNext();
        return true;
    }


    static Push( p_options ){
        DIALOG.instance._Push(p_options);
    }

    _Push( p_options ){

        var dialogInfos = null;

        if(!U.IoF(p_options, DialogInfos)){
            dialogInfos = POOL.Rent(DialogInfos);
            dialogInfos.options = p_options;    
            this._ownedDialogData.Set(dialogInfos, true);
        }else{
            dialogInfos = p_options;
        }

        if(dialogInfos.origin){
            //TODO : Allow to push additional popup if they are emitted from the current one
            //and when closed, retrieve the "previous" one.
            //i.e store a LIFO stack of dialogs [A <-> B <-> C]
        }

        if(!this._dialogs.Add(dialogInfos)){
            throw Error(`DialogInfos already exists in stack. Are you trying to push the same dialogInfo multiple times ?`);
        }

        if(this._started){
            //Only process dialog requests once the service is started
            this._ProcessNext();
        }

        return dialogInfos;
    }

    _ProcessNext(){

        if(this._inDialog){return null;}

        var next = this._dialogs.Shift();

        if(!next){ 
            this._inDialog = false;
            return null; 
        }

        this._inDialog = true;
        next.Subscribe(DialogInfos.CONSUMED, this, this._OnDialogConsumed);

        Request.Emit( APP_REQUEST.DIALOG, 
            { data:next },
            this,
            this._OnRequestSuccess,
            this._OnRequestFail);

    }

    _OnRequestFail(p_request){
        var dialog = p_request.options.infos;
        throw new Error(`Unhandled dialog : ${dialog}`);
    }

    _OnRequestSuccess(p_request){ 
        //this._Success();
    }

    _OnDialogConsumed(p_dialog){

        var dialogInfos = p_dialog.data;

        this._dialogs.Remove(p_dialog);
        p_dialog.Release();

        if(this._ownedDialogData.Get(dialogInfos)){
            this._ownedDialogData.Remove(dialogInfos);
            dialogInfos.Release();
        }

        this._inDialog = false;
        this._ProcessNext();
    }



}

module.exports = DIALOG;
},{"./app-request.js":21,"./collections/@.js":22,"./data-app/dialog-infos.js":40,"./services/service-base.js":134,"./signals/request.js":143,"./util.js":244}],94:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const U = require(`./util.js`);
const SingletonEx = require(`./singleton-ex.js`);
const ServiceManager = require(`./services/services-manager.js`);
const PATH = require(`./path.js`);
const RELAY = require(`./relay.js`);
const INPUT = require(`./input.js`);

class ENV extends SingletonEx{
    
    constructor() { super(); }

    static get NODE(){ return ENV.instance.node; }
    static get APP(){ return ENV.instance.app; }
    static get PREFS(){ return ENV.instance.app.prefs; }

    _Init(){ 
        super._Init();
        INPUT.instance.Boot();
        ServiceManager.instance.Boot();

        this._app = null;
        this._infos = null;
    }

    get node(){return this._node; }
    set node(p_value){this._node = p_value; }

    set app(p_value){
        if(this._app && this._app != p_value){throw new Error(`Attempting to set env.app more than once`);}
        if(!p_value){throw new Error(`Cannot set core.app to a null value.`);}

        this._app = p_value;
        p_value._env = this;
        //Start listening to app signals ?
    }

    get app(){ return this._app; }

    get paths(){ return this._infos.paths; }

    SetEnvInfos(p_infos){
        
        this._infos = p_infos;

        if(this.node){
            console.log(`%c NODE : ENABLED `, 'background: #7ca500; color: #fff');
        }else{
            console.log(`%c NODE : DISABLED `, 'background: #ff6000; color: #fff');
        }
        
        var paths = p_infos.paths;
        if(paths){
            for(var member in paths){ PATH.SET(member, paths[member]); }
        }

        PATH.SET(`%ICON%`, `img/icons`);
        PATH.SET(`%PATTERN%`, `img/patterns`);

        RELAY.instance.InitializeAndStart();
        
        console.log(p_infos);
    }

}

module.exports = ENV;
},{"./input.js":104,"./path.js":121,"./relay.js":122,"./services/services-manager.js":135,"./singleton-ex.js":146,"./util.js":244}],95:[function(require,module,exports){
module.exports = {
    AssocManager : require(`./assoc-manager.js`),
    KitEvents : require(`./core-kit-event.js`),
    KitCatalog : require(`./kit-catalog.js`),
    KitManager : require(`./kit-manager.js`),
    Kit : require(`./kit.js`)
}
},{"./assoc-manager.js":96,"./core-kit-event.js":97,"./kit-catalog.js":99,"./kit-manager.js":100,"./kit.js":101}],96:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { DictionaryList, KDictionary } = require(`../collections/@.js`);

const SingletonEx = require(`../singleton-ex.js`);

class AssocManager extends SingletonEx{
    constructor() {super();}

    _Init(){
        super._Init();        

        this._squashedAssocs = new KDictionary();//Array of squashed associations (as kits get loaded and all)
        
        this._contextMap = new KDictionary();
        this._contextKeyLists = new DictionaryList();

        this._distanceMap = new KDictionary();

    }

    static Set( p_key, p_control, p_context ){
        AssocManager.instance._Set( p_key, p_control, p_context );
    }    

    static Get( p_key, p_context, p_fallback = null, p_broad = true ){
        p_key = typeof p_key == 'function' ? p_key : p_key.constructor;
        var result = AssocManager.instance._Get( p_key, p_context, p_broad );
        if(!result){return p_fallback;}
        return result;
    }

    /**
     * 
     * @param {*} p_key Target key
     * @param {*} p_control Control associated with the given `key`
     * @param {*} p_context Context in which the `key` is associated with the `control`
     */
    _Set( p_key, p_control, p_context ){
        //TODO : Check if a value is being squashed, and store it to restore it on kit concealing
        //console.log(`Set assoc ${p_context}=>${p_key}=${p_control}`);
        this._contextMap.Set(p_context, p_key, p_control);
        //console.log(`= ${this._contextMap.Get(p_context, p_key)}`);
        this._contextKeyLists.Set(p_context, p_key);
    }

    /**
     * 
     * @param {*} p_key 
     * @param {*} p_context 
     * @param {*} p_broad Whether or not to look for alternative matches
     */
    _Get( p_key, p_context, p_broad = true, p_eval = null ){
        
        var control = this._contextMap.Get(p_context, p_key);
        
        if(!control){if(p_broad){ //&& typeof p_context == 'function'
            //p_borad == true, look for other associations in this context that would fit
            //Ensure we're looking at a class context first
            var keyList = this._contextKeyLists.Get(p_context);

            if(!keyList){
                //console.warn(`No association found for key:${p_key.name}, context:${p_context.name ? p_context.name : p_context}`);
                return null;
            }

            var otherKey = null;
            var distance = -1;
            var closestDistance = Number.MAX_SAFE_INTEGER;
            var tResult = null;
            for(var i = 0, n = keyList.length; i < n; i++){
                otherKey = keyList[i];
                distance = this._distanceMap.Get( p_key, otherKey );
                if(U.Void(distance)){
                    distance = U.InheritanceDistance(p_key, otherKey);
                    this._distanceMap.Set(p_key, otherKey, distance);
                }
                if(distance == -1){continue;}
                if(distance < closestDistance){
                    tResult = this._contextMap.Get(p_context, otherKey);
                    if(tResult){
                        closestDistance = distance;
                        control = tResult;
                    }
                }
            }

            if(!control){
                //TODO : Lookup for alternative contexts that fits and repeat the process.
                //TODO : store evaluated p_contexts in p_eval to avoid infinite looping   
            }

        }}

        return control;

    }

    Remove( p_key, p_control, p_context ){
        AssocManager.instance._Remove( p_key, p_control, p_context );
    }
    _Remove( p_key, p_control, p_context ){
        this._contextMap.Remove(p_context, p_key, p_control);
        this._contextKeyLists.Remove(p_context, p_key);
        //TODO : Restore any squashed associations
    }

}

module.exports = AssocManager;

},{"../@.js":6,"../collections/@.js":22,"../singleton-ex.js":146}],97:[function(require,module,exports){
'use strict';

const _evt_deployed         = Symbol(`deployed`);
const _evt_concealed         = Symbol(`concealed`);

class KitEvents{
    constructor() {}

    static get DEPLOYED(){ return _evt_deployed; }
    static get CONCEALED(){ return _evt_concealed; }

}

module.exports = KitEvents;
},{}],98:[function(require,module,exports){

class DEFAULT_EDITOR{constructor(){}}
class DEFAULT_IP_EDITOR{constructor(){}}
class DEFAULT_FIELD_SETTING_CONTROL{constructor(){}}
class DEFAULT_FIELD_VALUE_CONTROL{constructor(){}}
class DEFAULT_INSPECTOR{constructor(){}}

module.exports = {
    DEFAULT_EDITOR : DEFAULT_EDITOR,
    DEFAULT_IP_EDITOR : DEFAULT_IP_EDITOR,
    DEFAULT_FIELD_SETTING_CONTROL : DEFAULT_FIELD_SETTING_CONTROL, //To edit the actual definition of a field
    DEFAULT_FIELD_VALUE_CONTROL : DEFAULT_FIELD_VALUE_CONTROL, //To control the value of a given field inside a model
    DEFAULT_INSPECTOR : DEFAULT_INSPECTOR
}
},{}],99:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { DisposableObjectEx, List, Catalog } = require(`../collections/@.js`);

const KitEvents = require(`./core-kit-event.js`);

class KitCatalog extends DisposableObjectEx{
    constructor() {super();}

    _Init(){
        
        super._Init();
        //List all per-ecosystem integrations

        this._ecosystem = null;
        this._kit = null;
        this._mockups = new List();

        this._cmds = {
            fields:[], 
            models:[],
            entries:[],
            ecosystem:[],
        };

    }

    get kit(){return this._kit;}
    set kit(p_value){this._kit = p_value;}

    get ecosystem(){ return this._ecosystem; }
    set ecosystem(p_value){this._ecosystem = p_value;}

    _CmdFields( p_cmd ){ this._cmds.fields.push(p_cmd); return p_cmd; }
    _CmdModel( p_cmd ){ this._cmds.models.push(p_cmd); return p_cmd; }
    _CmdEntries( p_cmd ){ this._cmds.entries.push(p_cmd); return p_cmd; }
    _CmdEcosystem( p_cmd ){ this._cmds.ecosystem.push(p_cmd); return p_cmd; }

    RegisterModelMock( p_mockup ){
        //TODO : Sanitize
        this._mockups.Add(p_mockup);
    }

    UnregisterModelMock( p_mockup ){
        this._mockups.Remove(p_mockup);
    }

    Deploy(){

        var e = this._ecosystem;

        var list = this._mockups;
        for(var i = 0, n = list.count; i < n; i++){
            this.DeployMockup(list.At(i));
        }
        
        var MID = this._kit._configMock.id;
        var model = e.models.Get(MID);
        var entries = e.entries; 

        // Attempt to retrieve the entry for this kit's configuration model
        var kitConfig = entries.Get(model, MID);
        
        if(!kitConfig){
            // Create one if none exists yet
            kitConfig = entries.CreateTemp(model);
            model._entryCreationAllowed = false;
            kitConfig.metadata.Set(`presentation.catalogPath`, `Configuration/Kits/`);
            kitConfig.metadata.Set(`presentation.iconPath`, `%ICON%/icon_settings.svg`);
            kitConfig = entries.Register(kitConfig, MID);
            var kitConfig = e.catalog.FindFirstDataHolder(kitConfig);
            kitConfig.secondaryCommand = entries._cmdEditEntry;
        }

        var list = this._cmds.fields;
        var fields = e.fields;
        for(var i = 0, n = list.length; i < n; i++){ fields.catalog.AddCommand(list[i]); }

        list = this._cmds.models;
        var models = e.models;
        for(var i = 0, n = list.length; i < n; i++){ models.catalog.AddCommand(list[i]); }

        list = this._cmds.ecosystem;
        for(var i = 0, n = list.length; i < n; i++){ e.catalog.AddCommand(list[i]); }

    }

    DeployMockup( p_mockup ){
        var model = p_mockup.RegisterTo(this._ecosystem);
    }

    Conceal(){
        throw new Error(`KitCatalog::Conceal is not implemented.`);
        //TODO : Unregister catalog commands etc
    }
    
    _CleanUp()
    {

        this._ecosystem = null;
        this._kit = null;
        this._mockups.Clear();
        super._CleanUp();
        
    }

}

module.exports = KitCatalog;
},{"../@.js":6,"../collections/@.js":22,"./core-kit-event.js":97}],100:[function(require,module,exports){
'use strict';

const { U, M } = require(`../@.js`);
const { Catalog } = require(`../collections/@.js`);

const SingletonEx = require(`../singleton-ex.js`);
const KitEvents = require(`./core-kit-event.js`);
const Kit = require(`./kit.js`);

class KitManager extends SingletonEx{
    constructor() {super();}

    _Init()
    {
        super._Init();
        this._kits = new Array(0);

        this._catalog = new Catalog();
        this._catalog.name = `Kits`;
        
    }

    Register(p_kitClass)
    {
        
        if(!U.IoF(p_kitClass, Kit)){
            throw new Error(`Cannot register a kit that isn't a Kit : ${p_kitClass.name}`);
        }

        var kit = new p_kitClass();

        kit.Subscribe(KitEvents.DEPLOYED, this, this._OnKitDeployed);
        kit.Subscribe(KitEvents.CONCEALED, this, this._OnKitConcealed);

        this._kits.push(kit);

        var kitMETA = M.ETA(p_kitClass);
        this._catalog.Register(
            {
                path:kitMETA.catalogPath,
                data:kit
            }
        );

        kit.DeployAppIntegration();

    }

    _OnKitDeployed(p_kit)
    {

    }

    _OnKitConcealed(p_kit)
    {

    }

    DeployEcosystemIntegration(p_ecosystem){
        for(var i = 0, n = this._kits.length; i < n; i++){
            this._kits[i].DeployEcosystemIntegration(p_ecosystem);
        }
    }

    ConcealEcosystemIntegration(p_ecosystem){
        for(var i = 0, n = this._kits.length; i < n; i++){
            this._kits[i].ConcealEcosystemIntegration(p_ecosystem);
        }
    }

}

module.exports = KitManager;

},{"../@.js":6,"../collections/@.js":22,"../singleton-ex.js":146,"./core-kit-event.js":97,"./kit.js":101}],101:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { POOL, DisposableObjectEx, List, Dictionary } = require(`../collections/@.js`);

const KitEvents = require(`./core-kit-event.js`);
const KitCatalog = require(`./kit-catalog.js`);
const KitSettingsModel = require(`./model-kit-settings.js`);
const ModelMockup = require(`../data-core/model-mockup.js`);
const AssocManager = require(`../environment/assoc-manager.js`);

class Kit extends DisposableObjectEx{
    constructor() {super();}

    static get _NFO_(){ return {
        icon:`%ICON%/icon_kit.svg`
    };}

    _Init(){
        
        super._Init();

        this._kitCatalogClass = U.Default(this._kitCatalogClass, KitCatalog);
        
        //List all fields, models, and UI elements to be registered on deploy
        this._fields = new Array(0);
        this._models = new Array(0);
        this._elements = new Array(0);
        this._associations = new Array(0);

        this._appIntegration = false;
        this._integratedEcosystems = new List();
        this._kitCatalogs = new Dictionary();

        var stringID = `${this.constructor.name}Settings`;
        var configMock = ModelMockup.CompleteMock({
            
        });
        configMock.modelClass = KitSettingsModel;
        configMock.NFO = {
            catalogPath:`Kit Configurations/${stringID}`
        };
        configMock.id = stringID;
        this.Model(configMock);

        this._configMock = configMock;

    }

    get name(){return this.constructor.name;}

    /**
     * Register a list of Field classes to be deployed per-ecosystem.
     * @param  {...Field Classes} args 
     */
    Field(...args){
        var list = this._fields;
        for(var i = 0, n = args.length; i < n; i++){list.push(args[i])}
    }

    /**
     * Register a list of Model mockups to be deployed per-ecosystem
     * @param  {...ModelMockup} args 
     */
    Model(...args){
        var list = this._models;
        for(var i = 0, n = args.length; i < n; i++){list.push(args[i])}
    }

    /**
     * Register a list of UI elements to be deployed at the app level
     * @param  {...DisplayObject Classes} args 
     */
    Element(...args){
        var list = this._elements;
        for(var i = 0, n = args.length; i < n; i++){list.push(args[i])}
    }

    _A(p_key, p_control, p_rel){
        return { key:p_key, ctrl:p_control, rel:p_rel };
    }

    /**
     * Register a list of associations of UI Elements & Fields or Models at the app level
     * @param  {...any} args 
     */
    Association(...args){
        var list = this._associations;
        var assoc = null;
        var rel = null;
        var kvp = null;
        for(var i = 0, n = args.length; i < n; i++){
            assoc = args[i];
            if(assoc.kvp){
                rel = assoc.rel;
                for(var j = 0, n2 = assoc.kvp.length; j < n2; j++){
                    kvp = assoc.kvp[j];
                    kvp.rel = rel;
                    list.push(kvp);
                }
            }else{
                list.push(assoc);
            }
        }
    }

    DeployAppIntegration(){

        if(this._appIntegration){return;}

        var list = this._elements;
        for(var i = 0, n = list.length; i < n; i++){ this._RegisterElement( list[i]); }

        list = this._associations;
        for(var i = 0, n = list.length; i < n; i++){ this._RegisterAssociation( list[i]); }

        this._appIntegration = true;

        this._OnAppIntegrationDeployed();
        this._Notify(KitEvents.DEPLOYED, this);

    }

    _OnAppIntegrationDeployed(p_ecosystem){

    }

    DeployEcosystemIntegration(p_ecosystem){


        if(this.IsEcosystemIntegrated(p_ecosystem)){ return; }

        var list = this._fields;
        for(var i = 0, n = list.length; i < n; i++){ this._RegisterField(p_ecosystem, list[i]); }

        //Create a unique Kit Catalog for that ecosystem
        var kitCatalog = POOL.Rent(this._kitCatalogClass);
        this._kitCatalogs.Set(p_ecosystem, kitCatalog);

        kitCatalog.kit = this;
        kitCatalog.ecosystem = p_ecosystem;

        list = this._models;
        for(var i = 0, n = list.length; i < n; i++){ kitCatalog.RegisterModelMock(list[i]); }

        kitCatalog.Deploy();

        this._RegisterEcosystemIntegration(p_ecosystem);

        this._OnEcosystemIntegrationDeployed(p_ecosystem);

    }

    _OnEcosystemIntegrationDeployed(p_ecosystem){

    }

    ConcealAppIntegration(){

        if(!this._appIntegration){return;}

        var list = this._elements;
        for(var i = 0, n = list.length; i < n; i++){ this._UnregisterElement(list[i]); }

        list = this._associations;
        for(var i = 0, n = list.length; i < n; i++){ this._UnregisterAssociation(list[i]); }

        this._OnAppIntegrationConcealed();
        this._appIntegration = false;

        this._Notify(KitEvents.CONCEALED, this);

    }

    _OnAppIntegrationConcealed(){

    }

    ConcealEcosystemIntegration(p_ecosystem){
    
        if(!this.IsEcosystemIntegrated(p_ecosystem)){ return; }

        var list = this._fields;
        for(var i = 0, n = list.length; i < n; i++){ this._UnregisterField(p_ecosystem, list[i]); }

        var kitCatalog = this._kitCatalogs.Get(p_ecosystem);

        list = this._models;
        for(var i = 0, n = list.length; i < n; i++){ kitCatalog.UnregisterModelMock(list[i]); }

        kitCatalog.Conceal();

        this._OnEcosystemIntegrationConcealed(p_ecosystem);
        this._UnregisterEcosystemIntegration(p_ecosystem);

    }

    _OnEcosystemIntegrationConcealed(p_ecosystem){

    }

    IsEcosystemIntegrated(p_ecosystem){
        return this._integratedEcosystems.Contains(p_ecosystem);
    }

    _RegisterEcosystemIntegration(p_ecosystem){
        this._integratedEcosystems.Add(p_ecosystem);
    }

    _UnregisterEcosystemIntegration(p_ecosystem){
        this._integratedEcosystems.Remove(p_ecosystem);
    }

    _OnEcosystemReleased(p_ecosystem){
        ConcealEcosystemIntegration(p_ecosystem);
    }

    _RegisterField(p_ecosystem, p_item){

        p_ecosystem.fields.Register(p_item);
    }

    _UnregisterField(p_ecosystem, p_item){

    }

    _RegisterModel(p_kitcat, p_item){
        p_kitkat.RegisterModelMock(p_item);
    }

    _UnregisterModel(p_kitcat, p_item){
        p_kitkat.UnregisterModelMock(p_item);
    }

    _RegisterElement(p_item){

    }

    _UnregisterElement(p_item){

    }

    _RegisterAssociation(p_item){
        AssocManager.Set( p_item.key, p_item.ctrl, p_item.rel );
    }

    _UnregisterAssociation(p_item){
        AssocManager.Remove( p_item.key, p_item.ctrl, p_item.rel );
    }

    

    _CleanUp()
    {
        super._CleanUp();
    }

}

module.exports = Kit;
},{"../@.js":6,"../collections/@.js":22,"../data-core/model-mockup.js":87,"../environment/assoc-manager.js":96,"./core-kit-event.js":97,"./kit-catalog.js":99,"./model-kit-settings.js":102}],102:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const SystemModel = require(`../data-core/model-system.js`);

class KitSettingsModel extends SystemModel{
    constructor() {super();}
}

module.exports = KitSettingsModel;
},{"../@.js":6,"../data-core/model-system.js":89}],103:[function(require,module,exports){
'use strict';

const _evt_releasing        = Symbol(`releasing`);
const _evt_released         = Symbol(`released`);

const _evt_updated          = Symbol(`updated`);

const _evt_renaming         = Symbol(`renaming`);
const _evt_renamed          = Symbol(`renamed`);

const _evt_stateChanged     = Symbol(`stateChanged`);

const _evt_started          = Symbol(`started`);
const _evt_stopped          = Symbol(`stopped`);

const _evt_progress         = Symbol(`progress`);
const _evt_complete         = Symbol(`complete`);
const _evt_fail             = Symbol(`fail`);

const _evt_canceled         = Symbol(`canceled`);

const _evt_ready            = Symbol(`ready`);

const _evt_tick             = Symbol(`tick`);

class EVENT{
    constructor() {}

    static get RELEASING(){ return _evt_releasing; }
    static get RELEASED(){ return _evt_released; }

    static get UPDATED(){ return _evt_updated; }
    
    static get RENAMING(){ return _evt_renaming; }
    static get RENAMED(){ return _evt_renamed; }

    static get STATE_CHANGED(){ return _evt_stateChanged; }

    static get STARTED(){ return _evt_started; }
    static get STOPPED(){ return _evt_stopped; }

    static get PROGRESS(){ return _evt_progress; }
    static get COMPLETE(){ return _evt_complete; }
    static get FAIL(){ return _evt_fail; }

    static get CANCELED(){ return _evt_canceled; }
    static get READY(){ return _evt_ready; }

    static get TICK(){ return _evt_tick; }

}

module.exports = EVENT;
},{}],104:[function(require,module,exports){
'use strict';

const { Dictionary } = require(`./collections/@.js`);
const SingletonEx = require(`./singleton-ex.js`);

const _type_MOUSE_MIDDLE = Symbol('middleButton');
const _type_MOUSE_RIGHT = Symbol('rightButton');
const _type_MOUSE_UP = Symbol('mouseUp');
const _type_MOUSE_DOWN = Symbol('mouseDown');

const _evt_KEY_UP = Symbol('keyUp');
const _evt_KEY_DOWN = Symbol('keyDown');
const _evt_KEY_REPEAT = Symbol('keyRepeat');

const _evt_DRAG_START = Symbol('dragStart');
const _evt_DRAG_DRAG_ENDED = Symbol('dragEnd');


let _dragLength = 0;
let _dragData = null;
let _dragTarget = null;

class INPUT extends SingletonEx{
    constructor() {super();}

    static get DRAG_STARTED(){return _evt_DRAG_START;}
    static get DRAG_ENDED(){return _evt_DRAG_DRAG_ENDED;}

    static get MOUSE_MIDDLE(){return _type_MOUSE_MIDDLE;}
    static get MOUSE_RIGHT(){return _type_MOUSE_RIGHT;}

    static get MOUSE_UP(){return _type_MOUSE_UP;}
    static get MOUSE_DOWN(){return _type_MOUSE_DOWN;}

    static get KEY_UP(){return _evt_KEY_UP;}
    static get KEY_DOWN(){return _evt_KEY_DOWN;}
    static get KEY_REPEAT(){return _evt_KEY_REPEAT;}

    static get MOUSE(){return INPUT.instance.mouse;}

    static get shift(){return INPUT.instance.shiftKey;}
    static get ctrl(){return INPUT.instance.ctrlKey;}
    static get alt(){return INPUT.instance.altKey;}

    static get DRAG_DATA(){return _dragData;}
    static set DRAG_DATA(p_data){_dragData = p_data;}

    static get DRAG_TARGET(){return _dragTarget;}
    static set DRAG_TARGET(p_target){_dragTarget = p_target;}

    static get dragLength(){return _dragLength;}
    static set dragLength(p_value){_dragLength = p_value;}

    static DragStarted(p_data, p_target){

        var dLength = 0;
        if(p_data){
            if(Array.isArray(p_data)){ 
                dLength = p_data.length; 
            }
        }

        INPUT.dragLength = dLength;

        INPUT.DRAG_DATA = p_data;
        INPUT.DRAG_TARGET = p_target;
        INPUT.instance._Notify(INPUT.DRAG_STARTED, p_data);     
    }

    static DragEnded(){
        INPUT.instance._Notify(INPUT.DRAG_ENDED);
        INPUT.DRAG_DATA = null;
        INPUT.DRAG_TARGET = null;
        INPUT.dragLength = 0;       
    }

    static LocalMouse(p_el){
        var rect = p_el.getBoundingClientRect();
        var m = INPUT.instance.mouse;
        var x = m.x - rect.left;
        var y = m.y - rect.top;  
        return { 
            x:x, 
            y:y, 
            normalized:{ 
                x:x / rect.width,
                y:y / rect.height
            } 
        }
    }

    static ONKeyUp(p_key, p_callback){ INPUT.ON(`U_${p_key}`, p_callback); }
    static OFFKeyUp(p_key, p_callback){ INPUT.OFF(`U_${p_key}`, p_callback); }

    static ONKeyDown(p_key, p_callback){ INPUT.ON(`D_${p_key}`, p_callback); }
    static OFFKeyDown(p_key, p_callback){ INPUT.OFF(`D_${p_key}`, p_callback); }

    static ONKeyRepeat(p_key, p_callback){ INPUT.ON(`R_${p_key}`, p_callback); }
    static OFFKeyRepeat(p_key, p_callback){ INPUT.OFF(`R_${p_key}`, p_callback); }

    _Init(){

        super._Init();

        this._down = new Dictionary();
        this._mouse = {x:0, y:0};

        this._Bind(this._KHandle);
        this._Bind(this._KBlur);
        this._Bind(this._mDown);
        this._Bind(this._mUp);
        this._Bind(this._mMove);

        this._shiftKey = false;
        this._ctrlKey = false;
        this._altKey = false;
        this._currentKeyEvent = null;

       

    }

    Boot(){

        window.onkeydown = this._KHandle;
        window.onkeyup = this._KHandle;
        window.onkeypress = this._KHandle;
        window.onmousemove = this._mMove;

        window.onblur = this._KBlur;
        
        document.addEventListener('mousedown', this._mDown);
        document.addEventListener('mouseup', this._mUp);

    }

    get currentKeyEvent(){ return this._currentKeyEvent; }

    get shiftKey(){return this._shiftKey;}
    get ctrlKey(){return this._ctrlKey;}
    get altKey(){return this._altKey;}

    get mouse(){return this._mouse;}
   

    _KHandle( p_evt ){
        //p_evt.preventDefault();

        this._currentKeyEvent = p_evt;

        this._shiftKey = p_evt.shiftKey;
        this._ctrlKey = p_evt.ctrlKey;
        this._altKey = p_evt.altKey;

        var type = p_evt.type;
        var key = p_evt.key;
        var code = p_evt.code;
        var which = p_evt.which;

        if(type == 'keydown'){
            if(p_evt.repeat){
                this._Notify(INPUT.KEY_REPEAT);
                this._Notify(`R_${which}`);
            }else{
                this._down.Set(which, true);
                this._Notify(INPUT.KEY_DOWN);
                this._Notify(`D_${which}`);
            }
        }else if(type == 'keyup'){
            this._down.Remove(which);
            this._Notify(INPUT.KEY_UP, which);
            this._Notify(`U_${which}`);
        }

        this._currentKeyEvent = null;
    }

    _KBlur( p_evt ){
        var keys = this._down.keys;

        // Dispatch up events for all keys currently down.
        for(var i = 0, n = keys.length; i < n; i++){
            this._Notify(INPUT.KEY_UP, null);
            this._Notify(`U_${keys[i]}`, null);
        }
        this._down.Clear();
    }

    _mDown(p_evt){
        //Prevents wheel click scrolling
        //mousewheel click can be listened to using auxclick instead.
        if(p_evt.which === 2 ){ p_evt.preventDefault(); return;}
        this._Notify(INPUT.MOUSE_DOWN, p_evt);
    }

    _mUp(p_evt){
        this._Notify(INPUT.MOUSE_UP, p_evt);
    }

    _mMove(p_evt){
        this._mouse.x = p_evt.clientX;
        this._mouse.y = p_evt.clientY;
    }



}

module.exports = INPUT;

},{"./collections/@.js":22,"./singleton-ex.js":146}],105:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { List } = require(`../collections/@.js`);
const Resource = require(`./resource.js`);

class Directory extends Resource{
    
    constructor() { super(); }

    _Init(){
        super._Init();

        this._requestRsc = null;

        this._directories = new List();
        this._resources = new List();

    }

    get isDir(){return true;}

    _OnPathUpdated(p_oldPath){
        //Update all sub items path corresponding to this directory's path.

    }

    Serialize(){
        //Nothing to serialize in a directory
    }

    Deserialize()
    {
        var rsc = null;
        for(var i = 0, n = this._raw.length; i < n; i++){
            rsc = this._requestRsc(`${this._path}/${this._raw[i]}`);
        }
    }

    Add(p_rsc){
        
        var added = false;
        if(p_rsc.isDir){
            added = this._directories.Add(p_rsc);
        }else{
            added = this._resources.Add(p_rsc);
        }

        if(added){
            //console.log(`${this._path} += ${p_rsc._path}`);
            p_rsc.Subscribe(EVENT.RELEASED, this, this._OnRscReleased);
            p_rsc.directory = this;
        }

    }

    Remove(p_rsc){

        var removed = false;
        if(p_rsc.isDir){
            removed = this._directories.Remove(p_rsc);
        }else{
            removed = this._resources.Remove(p_rsc);
        }

        if(removed){
            if(p_rsc.directory == this){ p_rsc.directory = null; }
            p_rsc.Unsubscribe(EVENT.RELEASED, this, this._OnRscReleased);
        }
    }

    ReleaseContent(){
        var arr = this._resources.internalArray;
        for(var i = 0, n = arr.length; i < n; i++){
            arr[arr.length-1].Release();
        }

        arr = this._directories.internalArray;
        var dir;
        for(var i = 0, n = arr.length; i < n; i++){
            dir = arr[arr.length-1];
            dir.ReleaseContent();
            dir.Release();
        }
    }

    ReleaseWithContent(){
        this.ReleaseContent();
        this.Release();
    }

    _OnRscReleased(p_rsc){
        this.Remove(p_rsc);
    }



}

module.exports = Directory;
},{"../@.js":6,"../collections/@.js":22,"./resource.js":117}],106:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);

const METADATA = require(`../data-core/metadata.js`);
const SingletonEx = require(`../singleton-ex.js`);
const MetaDocument = require(`./document-meta.js`);

class DocumentManager extends SingletonEx{
    
    constructor() { super(); }

    GetMetaDocument( p_path, p_metaClass = null ){
        //TODO : Store documents in a <rsc,document> map
        p_metaClass = U.Default(p_metaClass, METADATA);

        var metaDoc = POOL.Rent(MetaDocument);

        metaDoc.metaClass = p_metaClass;
        metaDoc.path = p_path;

        return metaDoc;
    }

}

module.exports = DocumentManager;
},{"../@.js":6,"../collections/@.js":22,"../data-core/metadata.js":86,"../singleton-ex.js":146,"./document-meta.js":107}],107:[function(require,module,exports){
'use strict';

const { U, PATH } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);

const Document = require(`./document.js`);
const JSONResource = require(`./resource-json.js`);
const { METADATA } = require(`../data-core/@.js`);
const { SERIALIZATION } = require(`../serialization/@.js`);
const { SERIALIZER_JSON } = require(`../serialization/keys.js`);

class MetaDocument extends Document{

    static get _NFO_(){ return U.Merge(Document._NFO_, {
        resourceType:JSONResource,
        serializer:SERIALIZER_JSON
    });}

    constructor() { super(); }

    _Init(){
        super._Init();
        this._metaClass = METADATA;
        this._data = null;
    }

    get metaClass(){ return this._metaClass; }
    set metaClass(p_value){
        p_value = U.Default(p_value, METADATA);
        this._metaClass = p_value;
        this.data = POOL.Rent(this._metaClass);
    }

    get data(){ return this._data; }
    set data( p_value ){this._data = p_value;}

    //Packs the data into a format the ressource can write down.
    //JSONResource expect the data to be packed as stringifyable json object.
    _Pack(){
        var serializer = SERIALIZATION.GetSerializer(this._serializationType);
        if(!serializer){ throw new Error(`Could not find main serializer for ${this._serializationType.name}`); }
        return serializer.Serialize(this._data);
    }

    //Unpack the data from the resource content.
    //JSONResource unpack to a javascript object.
    _Unpack(p_pack){
        var serializer = SERIALIZATION.GetSerializer(this._serializationType);
        if(!serializer){ throw new Error(`Could not find main de-serializer for ${this._serializationType.name}`); }
        if(this._data == null){ this._data = POOL.Rent(this._metaClass); }
        this._data = serializer.Deserialize(p_pack, { id : PATH.name(this._path) }, this._data);
        //this._data.CommitUpdate();
    }

    _CleanUp(){
        this.data = null;
        this._metaClass = METADATA;
        super._CleanUp();
    }

}

module.exports = MetaDocument;
},{"../@.js":6,"../collections/@.js":22,"../data-core/@.js":43,"../serialization/@.js":123,"../serialization/keys.js":130,"./document.js":108,"./resource-json.js":115}],108:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);

const ENCODING = require(`./encoding.js`);
const IO_EVENT = require(`../io/io-event.js`);
const RESOURCES = require(`./resources.js`);
const Resource = require(`./resource.js`);
const { Observer, Callbacks } = require(`../signals/@.js`);

// A document is a way to bind a resource to an actual data object.

class Document extends DisposableObjectEx{
    
    constructor() { super(); }

    static get _NFO_(){ return {
        icon:`%ICON%/icon_document.svg`
    };}

    _Init(){
        super._Init();

        var mData = this.meta;

        this._rscEncoding = U.Default(this._rscEncoding, ENCODING.UTF8);
        this._rscClass = U.Default(mData ? mData.resourceType : null, Resource);
        this._serializationType = U.Default(mData ? mData.serializer : null, null);

        this._rsc = null;
        
        var obs = new Observer();

        this._onLoadCallbacks = new Callbacks();
        this._onSaveCallbacks = new Callbacks();
        this._onRenameCallbacks = new Callbacks();

        obs.Hook(IO_EVENT.READ_START, this, this._OnRscReadStart);
        obs.Hook(IO_EVENT.READ_ERROR, this, this._OnRscReadError);
        obs.Hook(IO_EVENT.READ_PROGRESS, this, this._OnRscReadProgress);
        obs.Hook(IO_EVENT.READ_COMPLETE, this, this._OnRscReadComplete);

        obs.Hook(IO_EVENT.WRITE_START, this, this._OnRscWriteStart);
        obs.Hook(IO_EVENT.WRITE_ERROR, this, this._OnRscWriteError);
        obs.Hook(IO_EVENT.WRITE_PROGRESS, this, this._OnRscWriteProgress);
        obs.Hook(IO_EVENT.WRITE_COMPLETE, this, this._OnRscWriteComplete);

        //obs.Hook(IO_EVENT.RENAME_START, this, this._OnRscRenameStart);
        //obs.Hook(IO_EVENT.RENAME_ERROR, this, this._OnRscRenameError);
        //obs.Hook(IO_EVENT.RENAME_PROGRESS, this, this._OnRscRenameProgress);
        //obs.Hook(IO_EVENT.RENAME_COMPLETE, this, this._OnRscRenameComplete);

        //obs.Hook(EVENT.READY, this, this._OnRscReady);

        this._rscObserver = obs;

        this._path = null;
    }

    get path(){ return this._path; }
    set path(p_value){
        if(this._path == p_value){return;}
        this._path = p_value;
        if(!p_value){
            this.rsc = null;
        }else{
            this.rsc = RESOURCES.Get(p_value, this._rscEncoding, this._rscClass);
        }
    }

    get content(){return this._rsc ? this._rsc.content :  null;}
    set content(p_value){
        if(!this._rsc){
            throw new Error(`Cannot set document content with null resource.`);
        }
        this._rsc.content = p_value;
     }

    get rsc(){return this._rsc;}
    set rsc(p_value){

        if(this._rsc == p_value){return;}
        var oldValue = this._rsc;
        this._rsc = p_value;

        if(oldValue){

        }
        if(p_value){

        }

        this._rscObserver.observable = p_value;
        this._OnRscChanged(oldValue);

    }

    _OnRscChanged(p_oldValue){
        if(this._rsc){this.path = this._rsc.path;}
    }

    Load( p_options = null ){
        
        //If a path is set, it as priority
        this.path = U.Default(p_options ? p_options.path : null, this._path);
        var rsc = this._rsc;
        if(!rsc){
            throw new Error(`Cannot load a document with no rsc and no path set. Either provide a path or set the rsc beforehand.`);
        }

        this._onLoadCallbacks.Push(p_options);
        rsc.Read();
    }

    Save( p_options = null ){

        //If a path is set, it as priority
        this.path = U.Default(p_options ? p_options.path : null, this._path);
        var rsc = this._rsc;
        if(!rsc){
            throw new Error(`Cannot write a document with no rsc and no path set. Either provide a path or set the rsc beforehand.`);
        }

        this._onSaveCallbacks.Push(p_options);

        rsc.Write();

    }

    _Pack(){
        //Pack document into serializable data
    }

    _Unpack(p_content){
        //Unpack data to the document
    }
    
    //---> Read

    _OnRscReadStart(p_rsc){ 
        this._Notify(IO_EVENT.READ_START, this); 
    }

    _OnRscReadError(p_rsc, p_err){ 
        this._onLoadCallbacks.OnFailFlush(this, p_err); 
        this._Notify(IO_EVENT.READ_ERROR, this, p_err); 
    }

    _OnRscReadProgress(p_rsc, p_progress){ 
        this._Notify(IO_EVENT.READ_PROGRESS, this, p_progress); 
    }

    _OnRscReadComplete(p_rsc){ 
        this._Unpack(p_rsc.content);
        this._onLoadCallbacks.OnSuccessFlush(this);
        this._Notify(IO_EVENT.READ_COMPLETE, this); 
    }

    //---> Write

    _OnRscWriteStart(p_rsc){ 
        p_rsc.content = this._Pack(); 
        this._Notify(IO_EVENT.WRITE_START, this); 
    }

    _OnRscWriteError(p_rsc, p_err){ 
        this._onSaveCallbacks.OnFailFlush(this, p_err); 
        this._Notify(IO_EVENT.WRITE_ERROR, this, p_err); 
    }

    _OnRscWriteProgress(p_rsc, p_progress){ 
        this._Notify(IO_EVENT.WRITE_PROGRESS, this, p_progress); 
    }

    _OnRscWriteComplete(p_rsc){ 
        this._onSaveCallbacks.OnSuccessFlush(this); 
        this._Notify(IO_EVENT.WRITE_COMPLETE, this); 
    }

    Delete(){
        
    }

    _CleanUp(){

        this._onLoadCallbacks.Flush();
        this._onSaveCallbacks.Flush();
        this._onRenameCallbacks.Flush();

        this.rsc = null;
        super._CleanUp();
    }

}

module.exports = Document;
},{"../@.js":6,"../collections/@.js":22,"../io/io-event.js":110,"../signals/@.js":137,"./encoding.js":109,"./resource.js":117,"./resources.js":118}],109:[function(require,module,exports){
'use strict';

class ENCODING{
    constructor() {}

    static get UTF8(){ return 'utf8'; }
    static get UCS2(){ return 'ucs2'; }
    static get UTF16le(){ return 'utf16le'; }    
    static get LATIN1(){ return 'latin1'; }
    static get BINARY(){ return 'binary'; }
    static get BASE64(){ return 'base64'; }
    static get ASCII(){ return 'ascii'; }
    static get HEX(){ return 'hex'; }

}

},{}],110:[function(require,module,exports){
'use strict';

const _evt_rscRegistered = Symbol(`rscRegistered`);
const _evt_rscUnregistered = Symbol(`rscUnregistered`);

const _evt_readStart        = Symbol(`readStart`);
const _evt_readError        = Symbol(`readError`);
const _evt_readProgress        = Symbol(`readProgress`);
const _evt_readComplete        = Symbol(`readComplete`);

const _evt_writeStart        = Symbol(`writeStart`);
const _evt_writeError        = Symbol(`writeError`);
const _evt_writeProgress        = Symbol(`writeProgress`);
const _evt_writeComplete        = Symbol(`writeComplete`);

const _evt_renameStart        = Symbol(`renameStart`);
const _evt_renameError        = Symbol(`renameError`);
const _evt_renameProgress        = Symbol(`renameProgress`);
const _evt_renameComplete        = Symbol(`renameComplete`);

const _evt_renamed        = Symbol(`renamed`);

class IO_EVENT{
    constructor() {}

    static get RSC_REGISTERED(){ return _evt_rscRegistered; }
    static get RSC_UNREGISTERED(){ return _evt_rscUnregistered; }

    static get READ_START(){ return _evt_readStart; }
    static get READ_ERROR(){ return _evt_readError; }
    static get READ_PROGRESS(){ return _evt_readProgress; }
    static get READ_COMPLETE(){ return _evt_readComplete; }

    static get WRITE_START(){ return _evt_writeStart; }
    static get WRITE_ERROR(){ return _evt_writeError; }
    static get WRITE_PROGRESS(){ return _evt_writeProgress; }
    static get WRITE_COMPLETE(){ return _evt_writeComplete; }

    static get RENAME_START(){ return _evt_renameStart; }
    static get RENAME_ERROR(){ return _evt_renameError; }
    static get RENAME_PROGRESS(){ return _evt_renameProgress; }
    static get RENAME_COMPLETE(){ return _evt_renameComplete; }

    static get RENAMED(){ return _evt_renamed; }


}

module.exports = IO_EVENT;
},{}],111:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);

class IOProcess extends DisposableObjectEx{
    
    constructor() { super(); }

    _Init(){
        super._Init();
        this._rsc = null;
        this._running = false;
    }

    get running(){return this._running;}

    get rsc(){ return this._rsc; }
    set rsc(p_value){
        this._rsc = p_value;
    }

    Process(){
        throw new Error(`Process not implemented in io-process`);
    }

    Complete(){
        this._running = false;
        this._Notify(EVENT.COMPLETE, this);
        this.Release();
    }

    _CleanUp(){
        this._rsc = null;
        this._running = false;
        super._CleanUp();
    }

    toString(){
        return `[${this.constructor.name}::${this._rsc ? this._rsc.path : 'NO_PATH_SET'}]`;
    }
}

module.exports = IOProcess;
},{"../@.js":6,"../collections/@.js":22}],112:[function(require,module,exports){
'use strict';

const { U, PATH, EVENT } = require(`../@.js`);
const { DisposableObjectEx, List } = require(`../collections/@.js`);
const IOProcess = require(`./io-process.js`);
const Observer = require(`../signals/observer.js`);

class IOQueue extends DisposableObjectEx{

    
    constructor() { super(); }

    _Init(){
        super._Init();
        this._queue = new List();
        this._currentItem = null;
        this._running = false;

        this._itemObserver = new Observer();
        this._itemObserver.Hook(EVENT.FAIL, this, this._OnCurrentRscProcessingFailed);
        this._itemObserver.Hook(EVENT.COMPLETE, this, this._OnCurrentRscProcessingComplete);

    }

    get running(){ return this._running; }
    get empty(){ return this._queue.empty; }

    get currentItem(){return this._currentItem;}
    set currentItem(p_value){

        if(this._currentItem == p_value){return;}
        var oldValue = this._currentItem;
        this._currentItem = p_value;

        if(oldValue){

        }

        if(p_value){

        }

        this._itemObserver .observable = p_value;

    }

    Add(p_process)
    {
        if(p_process == this._currentItem){return;}
        this._queue.Add(p_process);
    }

    Remove(p_process)
    {
        if(p_process == this._currentItem){return;}
        this._queue.Remove(p_process);
    }

    ProcessNext()
    {

        if(this._running){return;}
        
        this._running = true;
        this._currentItem = this._queue.Shift();

        if(!this._currentItem){
            this._running = false;
            return;
        }

        this._currentItem.Subscribe(EVENT.COMPLETE, this, this._OnCurrentItemComplete);
        this._currentItem.Process();     

    }

    _OnCurrentItemComplete(p_item){
        this._running = false;
        this.ProcessNext();
    }

    _CleanUp(){
        this._queue.Clear();
        super._CleanUp();
    }

}

module.exports = IOQueue;
},{"../@.js":6,"../collections/@.js":22,"../signals/observer.js":142,"./io-process.js":111}],113:[function(require,module,exports){
'use strict';

const { U, PATH, EVENT } = require(`../@.js`);
const IOProcess = require(`./io-process.js`);

/**
 * Browser IO Reader
 */

class IOReader extends IOProcess{
    
    constructor() { super(); }

    _Init(){
        super._Init();
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = IOReader;
},{"../@.js":6,"./io-process.js":111}],114:[function(require,module,exports){
'use strict';

const { U, PATH, EVENT } = require(`../@.js`);
const IOProcess = require(`./io-process.js`);

/**
 * Browser IO Writer
 */

class IOWriter extends IOProcess{
    
    constructor() { super(); }

    _Init(){
        super._Init();
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = IOWriter;
},{"../@.js":6,"./io-process.js":111}],115:[function(require,module,exports){
'use strict';

const { U, PATH, EVENT } = require(`../@.js`);
const TextResource = require(`./resource-text.js`);

class JSONResource extends TextResource{
    
    constructor() { super(); }

    Serialize(){
        return this._content ? JSON.stringify(this._content, null, `     `) : `{}`;
    }

    Deserialize()
    {
        return JSON.parse(this._raw);
    }

}

module.exports = JSONResource;
},{"../@.js":6,"./resource-text.js":116}],116:[function(require,module,exports){
'use strict';

const { U, PATH, EVENT } = require(`../@.js`);
const Resource = require(`./resource.js`);

class TextResource extends Resource{
    
    constructor() { super(); }

    Serialize(){
        return this._content ? this._content : '';
    }

    Deserialize()
    {
        return this._raw;
    }

}

module.exports = TextResource;
},{"../@.js":6,"./resource.js":117}],117:[function(require,module,exports){
'use strict';

const { U, PATH, EVENT } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const IO_EVENT = require(`./io-event.js`);
const { Callbacks } = require(`../signals/@.js`);

const _NONE = Symbol(`none`);
const _READ_PENDING = Symbol(`readPending`);
const _READING = Symbol(`reading`);
const _WRITE_PENDING = Symbol(`writePending`);
const _WRITING = Symbol(`writing`);
const _RENAME_PENDING = Symbol(`renamePending`);
const _RENAMING = Symbol(`renaming`);
const _READY = Symbol(`ready`);

class Resource extends DisposableObjectEx{
    
    constructor() { super(); }

    static get NONE(){return _NONE;}
    static get READ_PENDING(){return _READ_PENDING;}
    static get READING(){return _READING;}
    static get WRITE_PENDING(){return _WRITE_PENDING;}
    static get WRITING(){return _WRITING;}
    static get RENAME_PENDING(){return _RENAME_PENDING;}
    static get RENAMING(){return _RENAMING;}
    static get READY(){return _READY;}

    _Init(){

        super._Init();
        
        this._name = null;
        this._path = null;

        this._raw = null;
        this._content = null;

        this._readFn = null;
        this._writeFn = null;
        this._deleteFn = null;
        this._renameFn = null;
        this._commitRnFn = null;

        this._encoding = null;

        this._url = null;
        this._stats = null;
        this._exists = false;

        this._stateRead = Resource.NONE;
        this._stateWrite = Resource.NONE;
        this._stateRename = Resource.NONE;

        this._directory = null;

        this._deserializeFn = null;
        this._serializeFn = null;

        this._onReadCallbacks = new Callbacks();
        this._onWriteCallbacks = new Callbacks();
        this._onDeleteCallbacks = new Callbacks();
        this._onRenameCallbacks = new Callbacks();

    }

    get loaded(){return this._loaded;}

    get directory(){ return this._directory; }
    set directory(p_value){
        if(this._directory == p_value){return;}
        var oldDir = this._directory;
        this._directory = p_value;
        this._OnDirectoryChanged(oldDir);
    }

    _OnDirectoryChanged(p_oldValue){
        if(p_oldValue){ p_oldValue.Remove(this); }
        if(this._directory){ this._directory.Add(this); }
    }

    get state(){return this._state;}
    set state(p_state){

        if(this._state == p_state){return;}
        var oldValue = this._state;
        this._state = p_state;

        if(oldValue){

        }
        if(p_state){

        }

        this._OnStateChanged(oldValue);

    }

    _OnStateChanged(p_oldState){
        this._Notify(EVENT.STATE_CHANGED, this._state, p_oldState);
        if(this._state == Resource.READY){
            this._Notify(EVENT.READY, this);
        }
    }

    get isDir(){return false;}

    get stats(){return this._stats;}
    set stats(p_value){
        this._stats = p_value;
    }

    get exists(){return this._exists;}
    set exists(p_value){
        this._exists = p_value;
    }

    get name(){return this._name;}

    get url(){return this._url;}

    get path(){ return this._path; }
    set path(p_value){
        if(this._path){
            throw new Error(`Attempting to change the already set path of an rsc.`);
        }
        this._path = p_value;
        this._UpdatePathInfos();
    }

    _UpdatePath(p_newPath){
        var oldPath = this._path;
        this._path = p_newPath;
        this._UpdatePathInfos();
        this._commitRnFn(this, oldPath);
        this._OnPathUpdated(oldPath);
        this._Notify(IO_EVENT.RENAMED, this, oldPath);
    }

    _OnPathUpdated(p_oldPath){

    }

    _UpdatePathInfos(){
        try{
            var url = new URL(PATH.EX(this._path));
            this._url = url;
            this._name = PATH.name(url.pathname);
        }catch(err){
            console.warn(err.message);
            this._url = null;
            this._name = PATH.name(this._path);
        }
    }

    get raw(){return this._raw;}
    set raw(p_value){ this._raw = p_value; }

    get content(){return this._content;}
    set content(p_value){ this._content = p_value; }

    get encoding(){return this._encoding;}
    set encoding(p_value){ this._encoding = p_value; }

    //---> READ

    Read( p_options = null ){
        if(U.Not(this._stateRead, Resource.NONE, Resource.READY)){
            console.warn(`Resource ${this} not currently in a state allowing reading.`);
            return false;
        }
        this._onReadCallbacks.Push(p_options);
        this._stateRead = Resource.READ_PENDING;
        this._readFn(this);
        return true;
    }

    ReadStart(){ 
        this._stateRead = Resource.READING; 
        this._Notify(IO_EVENT.READ_START, this); 
    }

    ReadError(p_err){
        this._stateRead = Resource.NONE;
        console.error(`READ ERROR : ${p_err.message}`);
        this._onReadCallbacks.OnFailFlush(this, p_err);
        this._Notify(IO_EVENT.READ_ERROR, this, p_err);
    }

    ReadProgress(p_progress){
        this._stateRead = Resource.READING;
        this._Notify(IO_EVENT.READ_PROGRESS, this, p_progress); 
    }

    ReadComplete(){
        this._content = this.Deserialize();
        this._stateRead = Resource.READY; 
        this._onReadCallbacks.OnSuccessFlush(this);
        this._Notify(IO_EVENT.READ_COMPLETE, this); 
        
    }
    
    //---> WRITE

    Write( p_options = null ){
        if(U.Not(this._stateWrite, Resource.NONE, Resource.READY)){
            console.warn(`Resource ${this} not currently in a state allowing writing.`);
            return false;
        }
        this._stateWrite = Resource.WRITE_PENDING;
        this._onWriteCallbacks.Push(p_options);
        this._writeFn(this);
        return true;
    }

    WriteStart(){
        this._stateWrite = Resource.WRITING; 
        this._Notify(IO_EVENT.WRITE_START, this); 
        this._raw = this.Serialize(); 
    }

    WriteError(p_err){
        this._stateWrite = Resource.NONE;  
        console.error(`WRITE ERROR : ${p_err.message}`);
        this._onWriteCallbacks.OnFailFlush(this, p_err);
        this._Notify(IO_EVENT.WRITE_ERROR, this, p_err);
    }

    WriteProgress(p_progress){ 
        this._stateWrite = Resource.WRITING; 
        this._Notify(IO_EVENT.WRITE_PROGRESS, this, p_progress); 
    }

    WriteComplete(){ 
        this._stateWrite = Resource.READY;
        this._onWriteCallbacks.OnSuccessFlush(this);
        this._Notify(IO_EVENT.WRITE_COMPLETE, this);
    }

    //---> RENAME

    Rename(p_newPath, p_options = null){
        if(U.Not(this._stateRename, Resource.NONE, Resource.READY)){
            console.warn(`Resource ${this} not currently in a state allowing renaming.`);
            return false;
        }
        this._onRenameCallbacks.Push(p_options);
        this._renameFn(this, p_newPath);
        return true;
    }    

    RenameStart(){
        this._stateRename = Resource.RENAMING; 
        this._Notify(IO_EVENT.RENAME_START, this); 
    }

    RenameError(p_err){
        this._stateRename = Resource.NONE;  
        console.error(`RENAME ERROR : ${p_err.message}`);
        this._onRenameCallbacks.OnFailFlush(this, p_err);
        this._Notify(IO_EVENT.RENAME_ERROR, this, p_err);
    }

    RenameProgress(p_progress){ 
        this._stateRename = Resource.RENAMING; 
        this._Notify(IO_EVENT.WRITE_PROGRESS, this, p_progress); 
    }

    RenameComplete(){ 
        this._stateRename = Resource.READY;
        this._onRenameCallbacks.OnSuccessFlush(this);
        this._Notify(IO_EVENT.RENAME_COMPLETE, this); 
    }

    Delete( p_options = null ){
        this._onDeleteCallbacks.Push(p_options);
        this._deleteFn(this);
    }

    _CleanUp(){

        this._deserializeFn = null;
        this._serializeFn = null;

        this._name = null;
        this._path = null;

        this._raw = null;
        this._content = null;

        this._readFn = null;
        this._writeFn = null;

        this._encoding = null;

        this._url = null;
        this._stats = null;
        this._exists = false;

        this._state = Resource.NONE;

        super._CleanUp();
    }

    /**
     * Serialize is called by the IO system in order to get a 'raw', 
     * writable version of the resource's content.
     */
    Serialize(){
        if(!this._serializeFn){
            throw new Error(`Serialize not implemented.\nIf you don't use a serializer, make sure to set Resource._serializeFn.`);
        }        
        this._content = this._serializeFn(this);
        return this._content;
        
    }

    /**
     * Deserialize is called by the IO system in order to get a readable 
     * version of the resource's content by the app.
     */
    Deserialize()
    {
        if(!this._deserializeFn){
            throw new Error(`Deserialize not implemented.\nIf you don't use a serializer, make sure to set Resource._deserializeFn.`);
        }
        return this._deserializeFn(this._raw, this);
    }

    toString(){
        return `[${this.constructor.name}::${this.path}]`
    }

}

module.exports = Resource;
},{"../@.js":6,"../collections/@.js":22,"../signals/@.js":137,"./io-event.js":110}],118:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const { U, EVENT } = require(`../@.js`);
const { POOL, Dictionary } = require(`../collections/@.js`);
const ENV = require(`../environment.js`);
const SingletonEx = require(`../singleton-ex.js`);

const IOReader = require(`./io-reader.js`);
const IOWriter = require(`./io-writer.js`);
const ENCODING = require(`./encoding.js`);
const Resource = require(`./resource.js`);
const Directory = require(`./directory.js`);

const NResources = require(`../../com-electron/io/resources.js`);

class RESOURCES extends NResources{
    
    static get instance(){
        //Replace this singleton instance with the electron's one if we are running in node.
        //otherwise, use the regular, browser-friendly one.
        if(!NResources._instance){ NResources._instance = ENV.NODE ? new NResources() : new RESOURCES(); }
        return NResources._instance;
    }

    constructor() { super(); }

    _Init(){ 
        super._Init();

        this._IOReadClass = IOReader;  
        this._IOWriteClass = IOWriter;
    }

    _Get( p_path, p_encoding = null, p_class = null ){
        super._Get(p_path, p_encoding, p_class);
    }

    _RequestRead(p_rsc){
        super._RequestRead(p_rsc);
    }

    _RequestWrite(p_rsc){
        super._RequestWrite(p_rsc);
    }

    _RequestDelete(p_rsc){
        super._RequestDelete(p_rsc);
    }

    _requestDiscovery(p_rsc, p_includeSubDirectories){
        console.error(`Directory discovery isn't supported in browser.`);
    }



}

module.exports = RESOURCES;
},{"../../com-electron/io/resources.js":5,"../@.js":6,"../collections/@.js":22,"../environment.js":94,"../singleton-ex.js":146,"./directory.js":105,"./encoding.js":109,"./io-reader.js":113,"./io-writer.js":114,"./resource.js":117}],119:[function(require,module,exports){
class KEYBOARD{
    constructor(){}
    
    static get _backspace(){ return 8;}
    static get _tab(){ return 9;}
    static get _enter(){ return 13;}
    static get _shift(){ return 16;}
    static get _ctrl(){ return 17;}
    static get _alt(){ return 18;}
    static get _pause(){ return 19;}
    static get _capsLock(){ return 20;}
    static get _escape(){ return 27;}
    static get _pageUp(){ return 33;}
    static get _space(){ return 32;}
    static get _pageDown(){ return 34;}
    static get _end(){ return 35;}
    static get _home(){ return 36;}
    static get _arrowLeft(){ return 37;}
    static get _arrowUp(){ return 38;}
    static get _arrowRight(){ return 39;}
    static get _arrowDown(){ return 40;}
    static get _printScreen(){ return 44;}
    static get _insert(){ return 45;}
    static get _delete(){ return 46;}
    static get _0(){ return 48;}
    static get _1(){ return 49;}
    static get _2(){ return 50;}
    static get _3(){ return 51;}
    static get _4(){ return 52;}
    static get _5(){ return 53;}
    static get _6(){ return 54;}
    static get _7(){ return 55;}
    static get _8(){ return 56;}
    static get _9(){ return 57;}
    static get _a(){ return 65;}
    static get _b(){ return 66;}
    static get _c(){ return 67;}
    static get _d(){ return 68;}
    static get _e(){ return 69;}
    static get _f(){ return 70;}
    static get _g(){ return 71;}
    static get _h(){ return 72;}
    static get _i(){ return 73;}
    static get _j(){ return 74;}
    static get _k(){ return 75;}
    static get _l(){ return 76;}
    static get _m(){ return 77;}
    static get _n(){ return 78;}
    static get _o(){ return 79;}
    static get _p(){ return 80;}
    static get _q(){ return 81;}
    static get _r(){ return 82;}
    static get _s(){ return 83;}
    static get _t(){ return 84;}
    static get _u(){ return 85;}
    static get _v(){ return 86;}
    static get _w(){ return 87;}
    static get _x(){ return 88;}
    static get _y(){ return 89;}
    static get _z(){ return 90;}
    static get _leftWindowKey(){ return 91;}
    static get _rightWindowKey(){ return 92;}
    static get _selectKey(){ return 93;}
    static get _numpad0(){ return 96;}
    static get _numpad1(){ return 97;}
    static get _numpad2(){ return 98;}
    static get _numpad3(){ return 99;}
    static get _numpad4(){ return 100;}
    static get _numpad5(){ return 101;}
    static get _numpad6(){ return 102;}
    static get _numpad7(){ return 103;}
    static get _numpad8(){ return 104;}
    static get _numpad9(){ return 105;}
    static get _multiply(){ return 106;}
    static get _add(){ return 107;}
    static get _subtract(){ return 109;}
    static get _decimalPoint(){ return 110;}
    static get _divide(){ return 111;}
    static get _f1(){ return 112;}
    static get _f2(){ return 113;}
    static get _f3(){ return 114;}
    static get _f4(){ return 115;}
    static get _f5(){ return 116;}
    static get _f6(){ return 117;}
    static get _f7(){ return 118;}
    static get _f8(){ return 119;}
    static get _f9(){ return 120;}
    static get _f10(){ return 121;}
    static get _f11(){ return 122;}
    static get _f12(){ return 123;}
    static get _numLock(){ return 144;}
    static get _scrollLock(){ return 145;}
    static get _myComputer(){ return 182;}
    static get _myCalculator(){ return 183;}
    static get _semiColon(){ return 186;}
    static get _equalSign(){ return 187;}
    static get _comma(){ return 188;}
    static get _dash(){ return 189;}
    static get _period(){ return 190;}
    static get _forwardSlash(){ return 191;}
    static get _openBracket(){ return 219;}
    static get _backSlash(){ return 220;}
    static get _closeBraket(){ return 221;}
    static get _singleQuote(){ return 222;}

}

module.exports = KEYBOARD;
},{}],120:[function(require,module,exports){
'use strict';

const U = require(`./util.js`);

let _METAS = new Map();
let _TEMPLATES = new Map();

class META{

    constructor() {}

    static ETA( p_obj ){

        if(U.Void(p_obj)){ return null; }
        
        // We can be provided with either a class or an object.

        var tof = typeof p_obj;
        var cstr = null;

        if(tof == 'object'){ // Need to get the object class

            // Prioritize object's own _NFO_ if any/non-null
            if(`_NFO_` in p_obj){
                var localNFO = null;
                if(typeof p_obj._NFO_ == 'function'){ localNFO = p_obj._NFO_(); }
                else{ localNFO = p_obj._NFO_; }
                if(!U.Void(localNFO)){ return localNFO; }
            }

            cstr = p_obj.constructor;
            
        }else if(tof == 'function'){ //Need to get the prototype
            cstr = p_obj.prototype.constructor;
        }

        // Check if cstr has an _NFO_ property
        if(`_NFO_` in cstr){
            var result = _METAS.get(cstr);
            if(!U.Void(result)){ return result; }

            // Register new NFO
            result = cstr._NFO_;
            _METAS.set(cstr, result);

            return result;
        }else{
            // Try to go up the __proto__ chain
            //console.log(cstr.constructor);

            // Fallback to assumed model relationship
            return META.ETA( p_obj.model );
        }

    }

    static _CSTR( p_obj ){

        if(!p_obj){ return p_obj; }

        var tof = typeof p_obj;
        var cstr = null;

        if( tof == `function` ){
            cstr = p_obj.prototype.constructor;
        }else if( tof == `object` ){
            cstr = p_obj.constructor;
        }

        return cstr;
    }

    static TEMPLATE( p_obj ){

        var tof = typeof p_obj;
        var ctnr = null;

        if( tof == `function` ){
            ctnr = p_obj.prototype.constructor;
        }else if( tof == `object` ){
            ctnr = p_obj.constructor;
        }

        if(!ctnr || !ctnr._templateNFO){
            return null;
        }
        
        var result = _TEMPLATES.get(ctnr);

        if(!result){
            result = ctnr._templateNFO();
            _TEMPLATES.set(ctnr, result);
        }

        return result;

    }
}

module.exports = META;

},{"./util.js":244}],121:[function(require,module,exports){
'use strict';

const U = require(`./util.js`);

const PATH_APP_CONTEXT = '%APP_CONTEXT%';
const PATH_APP_DATA = '%APP_DATA%';
const PATH_USER_DATA = '%USER_DATA%';
const PATH_HOME = '%HOME%';
const PATH_TEMP = '%TEMP%';
const PATH_DOCUMENTS = '%DOCUMENTS%';
const PATH_DESKTOP = '%DESKTOP%';
const PATH_LOGS = '%LOGS%';
const PATH_DOWNLOADS = '%DOWNLOADS%';
const PATH_VIDEOS = '%VIDEOS%';
const PATH_PICTURES = '%PICTURES%';
const PATH_MUSIC = '%MUSIC%';

let SYSTEM_MAP = [
    PATH_APP_DATA,
    PATH_USER_DATA,
    PATH_HOME,
    PATH_TEMP,
    PATH_DOCUMENTS,
    PATH_DESKTOP,
    PATH_LOGS,
    PATH_DOWNLOADS,
    PATH_VIDEOS,
    PATH_PICTURES,
    PATH_MUSIC,
];
let MAP = {};

class PATH{
    
    constructor() {}

    static get APP_CONTEXT(){return PATH_APP_CONTEXT;}
    static get APP_DATA(){return PATH_APP_DATA;}
    static get USER_DATA(){return PATH_USER_DATA;}
    static get HOME(){return PATH_HOME;}
    static get TEMP(){return PATH_TEMP;}
    static get DOCUMENTS(){return PATH_DOCUMENTS;}
    static get DESKTOP(){return PATH_DESKTOP;}
    static get LOGS(){return PATH_LOGS;}
    static get DOWNLOADS(){return PATH_DOWNLOADS;}
    static get VIDEOS(){return PATH_VIDEOS;}
    static get PICTURES(){return PATH_PICTURES;}
    static get MUSIC(){return PATH_MUSIC;}

    /**
     * Associate a shortcut to be used by SH & EX methods.
     * @param {String} p_envShortcut %SHORTCUT%
     * @param {String} p_path 
     */
    static SET(p_envShortcut, p_path){
        if(SYSTEM_MAP.includes(p_envShortcut) && MAP.hasOwnProperty(p_envShortcut)){
            throw new Error(`Cannot override system path (${p_envShortcut})`);
        }

        if(p_envShortcut.length < 3 
            || p_envShortcut.substr(0,1) != '%'
            || p_envShortcut.substr(p_envShortcut.length-1,1) != '%')
        {
            console.warn(`Did not register PATH shorthand "${p_envShortcut}" since it doesn't match the pattern %S%`);
            return;
        }

        MAP[p_envShortcut] = p_path;
        console.log(`%c${p_envShortcut} = ${p_path}`, 'color: #7f7f7f');
    }

    static UNSET(p_envShortcut){
        delete MAP[p_envShortcut];
    }

    static Sanitize(p_string){
        return p_string.split('\\').join('/');
    }

    /**
     * Shrink a path, replacing expanded environment path with their %PATH%
     * @param {String} p_path 
     */
    static SH( p_path ){
        p_path = PATH.Sanitize(p_path);
        for(var n in MAP){p_path = p_path.replace(MAP[n], n);}
        return p_path;
    }

    /**
     * Expand a path, replacing the %PATH% variables with their full, associated path
     * @param {String} p_path 
     */
    static EX( p_path ){
        for(var n in MAP){p_path = p_path.replace(n, MAP[n]);}
        return PATH.Sanitize(p_path);
    }

    static dir(p_path){
        var split = p_path.split('/');
        split.pop();
        return split.join('/');
    }

    static name(p_path){
        var splitBase = p_path.split('/');
        if(splitBase.length <= 1){ PATH.stripExt(splitEnd); }
        var splitEnd = splitBase.pop();
        while(splitEnd == `` && splitBase.length >= 1){splitEnd = splitBase.pop();}
        return PATH.stripExt(splitEnd);
    }

    static ext(p_path){
        
        if(p_path.includes('?'))
        {
            var preSplit = p_path.split('?');
            p_path = preSplit[0];
        }

        var splitDot = p_path.split('.');
        if(splitDot.length <= 1){ return p_path; }
        return splitDot[splitDot.length-1]; 
        
    }

    static stripExt(p_path){
        var splitDot = p_path.split('.');
        if(splitDot.length <= 1){ return p_path; }
        splitDot.pop();
        return splitDot.join('.'); 
    }

    /**
     * Return all registered paths that aren't SYSTEM ones.
     */
    static get extras(){
        var extras = {};
        for(var n in MAP){
            if(!SYSTEM_MAP.includes(n)){
                extras[n] = MAP[n];
            }
        }
        return extras;
    }

}

module.exports = PATH;
},{"./util.js":244}],122:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const U = require(`./util.js`);
const ServiceBase = require(`./services/service-base.js`);
const List = require(`./collections/list.js`);

class RELAY extends ServiceBase{
       

    static HandleRequest(p_request){   
        RELAY.instance.HandleRequest(p_request);
        console.log(`%c${p_request}`, 'color: #bebebe');
    }

    static Dispatch(p_evt, ...args){
        RELAY.instance._Notify(p_evt, ...args);
    }

    static Subscribe(p_evt, p_subscriber, p_fn){
        RELAY.instance.Subscribe(p_evt, p_subscriber, p_fn);
    }

    static Unsubscribe(p_evt, p_subscriber, p_fn){
        RELAY.instance.Unsubscribe(p_evt, p_subscriber, p_fn);
    }

    constructor() { super(); }
    
    _Init(){ 
        super._Init();
        this._requests = new List();
    }

    HandleRequest(p_request){
        this._requests.Add(p_request);
        this._Notify(p_request.requestType, p_request);
    }

    Tick(p_delta){
        super.Tick(p_delta);

        //Clear requests stack
        var list = this._requests;
        var request = null;
        var release = false;
        for(var i = 0; i < list.count; i++){

            release = true;
            request = list.At(i);
            if(!request.handled){
                if(request.life >= request.timeout){
                    //Unhandled request timeout
                    request.HandleFail(`timeout`);
                }else{
                    //Keep request alive
                    request.life += p_delta;
                    release = false;
                }
            }
            
            if(release){
                request.Release();
                list.RemoveAt(i);
                i--;
            }
        }
    }

}

module.exports = RELAY;
},{"./collections/list.js":36,"./services/service-base.js":134,"./util.js":244}],123:[function(require,module,exports){
module.exports = {
    SERIALIZATION : require(`./serialization.js`),
    Serializer : require(`./serializer.js`),
    JSONSerializer : require(`./serializer-json.js`)
}
},{"./serialization.js":131,"./serializer-json.js":132,"./serializer.js":133}],124:[function(require,module,exports){
module.exports = {
    METADATAJSONSerializer : require(`./json/metadata-json-serializer.js`),
    FieldSettingsJSONSerializer : require(`./json/field-settings-json-serializer.js`),
    DataBlockJSONSerializer : require(`./json/data-block-json-serializer.js`),
    DataEntryJSONSerializer : require(`./json/data-entry-json-serializer.js`),
    ModelJSONSerializer : require(`./json/model-json-serializer.js`),
}
},{"./json/data-block-json-serializer.js":125,"./json/data-entry-json-serializer.js":126,"./json/field-settings-json-serializer.js":127,"./json/metadata-json-serializer.js":128,"./json/model-json-serializer.js":129}],125:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { METADATA } = require(`../../data-core/@.js`);
const { Serializer } = require(`../@.js`);
const { AssocManager } = require(`../../environment/@.js`);
const { SERIALIZER_JSON } = require(`./../keys.js`);

class DataBlockJSONSerializer extends Serializer{
    constructor(){super();}

    /**
     * Return the target as a JSON Object
     * @param {*} p_target 
     * @param {*} p_options 
     */
    static Serialize( p_target, p_options = null ){
        var serializer = AssocManager.Get(p_target.metadata, SERIALIZER_JSON);
        return {
            metadata:serializer.Serialize(p_target.metadata, p_options)
        };
    }

    /**
     * Return an entry object from the provided serial
     * Or override available info in provided target.
     * @param {*} p_serial 
     * @param {*} p_options 
     * @param {*} p_target 
     */
    static Deserialize( p_serial, p_options = null, p_target = null ){
        if(!p_serial){ throw new Error(`Cannot unpack null data.`);}

        var serializer = AssocManager.Get(p_target.metadata, SERIALIZER_JSON);
        serializer.Deserialize(p_serial.metadata, p_options, p_target.metadata);

        return p_target;
    }

}

module.exports = DataBlockJSONSerializer;
},{"../../@.js":6,"../../data-core/@.js":43,"../../environment/@.js":95,"../@.js":123,"./../keys.js":130}],126:[function(require,module,exports){
const { U } = require(`../../@.js`);
const DataBlockJSONSerializer = require(`./data-block-json-serializer.js`);
const { AssocManager } = require(`../../environment/@.js`);
const { SERIALIZER_JSON } = require(`./../keys.js`);

class DataEntryJSONSerializer extends DataBlockJSONSerializer{
    constructor(){super();}

    /**
     * Return the target as a JSON Object
     * @param {*} p_target 
     * @param {*} p_options 
     */
    static Serialize( p_target, p_options = null ){
        var serial = DataBlockJSONSerializer.Serialize(p_target, p_options);



        return serial;
    }

    /**
     * Return an entry object from the provided serial
     * Or override available info in provided target.
     * @param {*} p_serial 
     * @param {*} p_options 
     * @param {*} p_target 
     */
    static Deserialize( p_serial, p_options = null, p_target = null ){
        var p_target = DataBlockJSONSerializer.Deserialize(p_serial, p_options, p_target);

        return p_target;
    }

}

module.exports = DataEntryJSONSerializer;
},{"../../@.js":6,"../../environment/@.js":95,"./../keys.js":130,"./data-block-json-serializer.js":125}],127:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { POOL } = require(`../../collections/@.js`);

const DataBlockJSONSerializer = require(`./data-block-json-serializer.js`);
const { AssocManager } = require(`../../environment/@.js`);
const { SERIALIZER_JSON } = require(`./../keys.js`);

class FieldSettingsJSONSerializer extends DataBlockJSONSerializer{
    constructor(){super();}

    /**
     * Return the target as a JSON Object
     * @param {*} p_target 
     * @param {*} p_options 
     */
    static Serialize( p_target, p_options = null ){
        var serial = DataBlockJSONSerializer.Serialize(p_target, p_options);
        serial.id = p_target.id.name;
        serial.instanceOf = p_target.fieldClass.name;

        //TODO : Make sure there is no reference that would be serialized as a whole
        serial.settings = U.Clone(p_target.settings);
        return serial;
    }

    /**
     * Return an entry object from the provided serial
     * Or override available info in provided target.
     * @param {*} p_serial 
     * @param {*} p_options 
     * @param {*} p_target 
     */
    static Deserialize( p_serial, p_options = null, p_target = null ){
        var p_target = DataBlockJSONSerializer.Deserialize(p_serial, p_options, p_target);

        var fieldClass = POOL.GetClass(p_serial.instanceOf);
        p_target.fieldClass = fieldClass;
        p_target.instance = POOL.Rent(fieldClass);
        p_target.settings = p_serial.settings;

        // Nullify serial settings
        // in case the serial gets garbage collected
        p_serial.settings = null;
        
        return p_target;
    }

}

module.exports = FieldSettingsJSONSerializer;
},{"../../@.js":6,"../../collections/@.js":22,"../../environment/@.js":95,"./../keys.js":130,"./data-block-json-serializer.js":125}],128:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { Serializer } = require(`../@.js`);
const { AssocManager } = require(`../../environment/@.js`);
const { SERIALIZER_JSON } = require(`./../keys.js`);

class METADATAJSONSerializer extends Serializer{
    constructor(){super();}

    /**
     * Return the target as a JSON Object
     * @param {*} p_target 
     * @param {*} p_options 
     */
    static Serialize( p_target, p_options = null ){
        return U.Clone(p_target._data);
    }

    /**
     * Return an entry object from the provided serial
     * Or override available info in provided target.
     * @param {*} p_serial 
     * @param {*} p_options 
     * @param {*} p_target 
     */
    static Deserialize( p_serial, p_options = null, p_target = null ){
        if(!p_serial){ throw new Error(`Cannot unpack null data.`); }
        if(!p_target){ throw new Error(`Cannot unpack metadata with a null target`); }
        U.Merge(p_target._data, p_serial); 
        return p_target;
    }

}

module.exports = METADATAJSONSerializer;
},{"../../@.js":6,"../../environment/@.js":95,"../@.js":123,"./../keys.js":130}],129:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { POOL } = require(`../../collections/@.js`);
const { FieldSettings } = require(`../../data-core/@.js`);

const DataBlockJSONSerializer = require(`./data-block-json-serializer.js`);
const { AssocManager } = require(`../../environment/@.js`);
const { SERIALIZER_JSON } = require(`./../keys.js`);

class ModelJSONSerializer extends DataBlockJSONSerializer{
    constructor(){super();}

    /**
     * Return the target as a JSON Object
     * @param {*} p_target 
     * @param {*} p_options 
     */
    static Serialize( p_target, p_options = null ){
        
        var serial = DataBlockJSONSerializer.Serialize(p_target, p_options);
        
        var definition = serial.definition;
        if(!definition){definition = {}; serial.definition = definition;}

        //Base Model ID
        if(p_target._base){ 
            definition.base = p_target._base.uri; 
        }

        //Fields
        var fields = {}; definition.fields = fields;

        var f = null;
        var fList = p_target._fieldRep.itemList;
        var serializer = null;
        for(var i = 0, n = fList.length; i < n; i++){
            f = fList[i];
            serializer = AssocManager.Get(f.constructor, SERIALIZER_JSON);
            fields[f.id.name] = serializer.Serialize(f, p_options);
        }

        return serial;
    }

    /**
     * Return an entry object from the provided serial
     * Or override available info in provided target.
     * @param {*} p_serial 
     * @param {*} p_options 
     * @param {*} p_target 
     */
    static Deserialize( p_serial, p_options = null, p_target = null ){
        
        var p_target = DataBlockJSONSerializer.Deserialize(p_serial, p_options, p_target);

        var definition = p_serial.definition;
        if(!definition){ return p_target; }

        var base = definition.base;
        if(base){ 
            var baseModel = p_target.ecosystem.Resolve(base);
            if(!baseModel){
                // Create a watch token in the ecosystem so the base reference
                // will be resolved as soon as it is registered
            }else{
                p_target.base = baseModel;
            }
        }

        var fields = definition.fields;
        if(fields){ 
            var f = null;
            var field = null;
            var serializer = null;
            for(var member in fields){
                f = fields[member];
                
                field = p_target.Get(member);
                
                if(!field){
                    field = POOL.Rent(FieldSettings);
                    p_target.Register(field, member);
                }

                serializer = AssocManager.Get(FieldSettings, SERIALIZER_JSON);
                serializer.Deserialize(f, p_options, field);
            }
        }

        return p_target;

    }

}

module.exports = ModelJSONSerializer;
},{"../../@.js":6,"../../collections/@.js":22,"../../data-core/@.js":43,"../../environment/@.js":95,"./../keys.js":130,"./data-block-json-serializer.js":125}],130:[function(require,module,exports){

class SERIALIZER_JSON{constructor(){}}

module.exports = {
    SERIALIZER_JSON : SERIALIZER_JSON,
}
},{}],131:[function(require,module,exports){
/**
 * This is the core facade for all system and apps.
 */
'use strict';

const { U, EVENT } = require(`../@.js`);
const { POOL, Dictionary } = require(`../collections/@.js`);
const SingletonEx = require(`../singleton-ex.js`);
const JSONSerializer = require(`./serializer-json.js`);
const { SERIALIZER_JSON } = require(`./keys.js`);

class SERIALIZATION extends SingletonEx{
    constructor() { super(); }

    _Init(){
        super._Init();
        this._serializerMap = new Dictionary();

        //Init JSON Serializer
        this._SetSerializer( SERIALIZER_JSON, JSONSerializer );
    }

    static SetSerializer( p_key, p_serializer ){
        return SERIALIZATION.instance._SetSerializer(p_key, p_serializer);
    }
    _SetSerializer( p_key, p_serializer ){
        this._serializerMap.Set(p_key, p_serializer); 
    }

    static GetSerializer( p_key ){ 
        return SERIALIZATION.instance._GetSerializer(p_key);
    }
    _GetSerializer( p_key ){ 
        return this._serializerMap.Get(p_key); 
    }

}

module.exports = SERIALIZATION;
},{"../@.js":6,"../collections/@.js":22,"../singleton-ex.js":146,"./keys.js":130,"./serializer-json.js":132}],132:[function(require,module,exports){
const { U } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);
const { AssocManager } = require(`../environment/@.js`);
const { SERIALIZER_JSON } = require(`./keys.js`);

const Model = require(`../data-core/model.js`);
const DataEntry = require(`../data-core/data-entry.js`);
const FieldSettings = require(`../data-core/field-settings.js`);

const Serializer = require(`./serializer.js`);


const type_entry = `entry`;
const type_model = `model`;
const type_field = `field`;
const type_default = `default`;

class JSONSerializer extends Serializer{
    constructor(){super();}

    static Serialize( p_target, p_options = null ){

        //Find suitable JSON Object serializer depending on target type.
        var serializer = AssocManager.Get( p_target.constructor, SERIALIZER_JSON, null );
        
        if(!serializer){ 
            throw new Error(`Could not find suitable serializer for target=${p_target}`); 
        }

        var serial = serializer.Serialize(p_target);
        
        var nfos = serial.__nfos__;
        if(!nfos){ nfos = {}; serial.__nfos__ = nfos; }

        var type = nfos.type;

        if(U.IoF(p_target, Model)){
            type = type_model;
        }else if(U.IoF(p_target, DataEntry)){
            type = type_entry;
        }else if(U.IoF(p_target, FieldSettings)){
            type = type_field;
        }else{
            type = type_default;
        }

        nfos.type = type;
        nfos.instanceOf = p_target.constructor.name;

        return serial;

    }

    static Deserialize( p_serial, p_options = null, p_target = null ){

        var cl = null;
        var serializer = null;

        if(p_target != null){

            cl = p_target.constructor;

        }else{

            var nfos = p_serial.__nfos__;
            if(!nfos){
                //There is no nfos in the serial.
                throw new Error(`Cannot unserialize without nfos`);
            }

            var type = nfos.type;
            var instanceOf = nfos.instanceOf;

            var cl = POOL.GetClass(instanceOf);
            
            if(!cl){
                throw new Error(`No class is registered with id = ${cl}`);
            }

            var ecosystem = p_options ? p_options.ecosystem : null;
            var id = p_options ? p_options.id : null;

            if(type == type_entry 
                || type == type_field 
                || type == type_model){
                if(!ecosystem || !id){ 
                    throw new Error(`Missing required infos for deserialization ecosystem=${ecosystem}, id=${id}`); }

                switch(type){
                    case type_entry :                    
                        p_target = ecosystem.entries.CreateTemp(null, cl);
                        ecosystem.entries.Register(p_target, id);
                    break;
                    case type_model :
                        p_target = ecosystem.models.CreateTemp(null, cl);
                        ecosystem.models.Register(p_target, id);
                    break;
                    case type_field :
                        throw new Error(`not implemented`);
                    break;
                }

            }else{
                p_target = POOL.Rent(cl);
            }

        }

        serializer = AssocManager.Get( cl, SERIALIZER_JSON, null );
                
        if(!serializer){ 
            throw new Error(`Could not find suitable de-serializer for target=${p_target}`); 
        }

        return serializer.Deserialize(p_serial, p_options, p_target);
    }

}

module.exports = JSONSerializer;
},{"../@.js":6,"../collections/@.js":22,"../data-core/data-entry.js":74,"../data-core/field-settings.js":81,"../data-core/model.js":90,"../environment/@.js":95,"./keys.js":130,"./serializer.js":133}],133:[function(require,module,exports){
const { DisposableObjectEx } = require(`../collections/@.js`);

class Serializer{
    constructor(){}

    static Serialize( p_target, p_options = null ){
        throw new Error(`not implemented`);
    }

    static Deserialize( p_serial, p_options = null, p_target = null ){
        throw new Error(`not implemented`);
    }

}

module.exports = Serializer;
},{"../collections/@.js":22}],134:[function(require,module,exports){
'use strict';

const SingletonEx = require(`../singleton-ex.js`);
const ServicesManager = require(`./services-manager.js`);

class ServiceBase extends SingletonEx{
    constructor() {super();}

    _Init()
    {
        super._Init();
        this._initialized = false;
        this._started = false;
        this._running = false;
    }

    Initialize(){
        if(this._initialized){return;}

        ServicesManager.instance.Register(this);
        this._initialized = true;
    }

    InitializeAndStart(){
        this.Initialize();
        this.Start();
    }

    
    get started(){ return this._started; }

    get running(){ return this._running; }

    Start(){
        if(!this._initialized){
            console.error(`Attempting to start a service (${this.constructor.name}) that hasn't been initialized yet.`);
            return false;
        }
        if(this._started){return false;}
        this._started = true;
        console.log(`%c STARTED :: ${this.constructor.name} `, 'background: #1aa039; color: #fff');
        return true;
    }

    Stop(){
        if(!this._started){return;}
        this._started = false;
        console.log(`%c STOPPED :: ${this.constructor.name} `, 'background: #ff6000; color: #fff');
    }

    Restart()
    {
        
    }

    Tick( p_delta )
    {
        
    }

}

module.exports = ServiceBase;
},{"../singleton-ex.js":146,"./services-manager.js":135}],135:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { List } = require(`../collections/@.js`);

const TIME = require(`../time.js`);
const SingletonEx = require(`../singleton-ex.js`)


class ServicesManager extends SingletonEx{
    constructor() {super();}

    _Init()
    {
        super._Init();
        this._services = new List();
        this._Bind(this._Tick);
    }

    _PostInit()
    {
        super._PostInit();
        TIME.ON(TIME.TICK, this._Tick);
    }

    Boot(){

    }

    Register( p_instance ) 
    {     
        this._services.Add(p_instance.constructor);
    }

    _Tick( p_delta )
    {
        var services = this._services;
        for(var i = 0; i < services.count; i++){
            services.At(i).instance.Tick(p_delta);
        }
    }

}

module.exports = ServicesManager;

},{"../@.js":6,"../collections/@.js":22,"../singleton-ex.js":146,"../time.js":148}],136:[function(require,module,exports){
class State{
    constructor(){}
}

module.exports = State;
},{}],137:[function(require,module,exports){
module.exports = {
    Observer : require(`./observer.js`),
    Callbacks : require(`./callbacks.js`)
    //DataObserver : require(`./observer-data.js`),
}
},{"./callbacks.js":139,"./observer.js":142}],138:[function(require,module,exports){
class Calllist{
    
    constructor(){
        this._list = new Array(0);
    }

    set call(p_value){
        if(!p_value){return;}
        this._Push(this._list, p_value); 
    }

    set remove(p_value){
        if(!p_value){return;}
        this._Remove(this._list, p_value);
    }

    Push(p_options){
        if(!p_options){return;}
        if(p_options.success){this.call = p_options.success;}
    }

    _Push(p_list, p_callback){
        if(!p_callback){return;}
        if(p_list.includes(p_callback)){return;}
        p_list.push(p_callback);
    }

    _Remove(p_list, p_callback){
        if(!p_callback){return;}
        var index = p_list.indexOf(p_callback);
        if(index == -1){return;}
        p_list.splice(index, -1);
    }

    Notify(...args){ this._Dispatch(this._list, ...args); }

    NotifyFlush(...args){ this.Notify(...args); this.Flush(); }

    _Dispatch(p_list, ...args){
        for(var i = 0, n = p_list.length; i < n; i++){
            p_list[i].apply(null, args);
        }
    }

    Flush(){
        this._list.length = 0;
    }

}

module.exports = Calllist;
},{}],139:[function(require,module,exports){
class Callbacks{
    
    constructor(){
        this._onSuccess = new Array(0);
        this._onFail = new Array(0);
    }

    set onSuccess(p_value){
        if(!p_value){return;}
        this._Push(this._onSuccess, p_value); 
    }
    set onFail(p_value){ 
        if(!p_value){return;}
        this._Push(this._onFail, p_value); 
    }

    Push(p_options){
        if(!p_options){return;}
        if(p_options.success){this.onSuccess = p_options.success;}
        if(p_options.fail){this.onFail = p_options.fail;}
    }

    _Push(p_list, p_callback){
        if(!p_callback){return;}
        if(p_list.includes(p_callback)){return;}
        p_list.push(p_callback);
    }

    OnSuccess(...args){ this._Dispatch(this._onSuccess, ...args); }
    OnFail(...args){ this._Dispatch(this._onFail, ...args); }

    OnSuccessFlush(...args){ this.OnSuccess(...args); this.Flush(); }
    OnFailFlush(...args){ this.OnFail(...args); this.Flush(); }

    _Dispatch(p_list, ...args){
        for(var i = 0, n = p_list.length; i < n; i++){
            p_list[i].apply(null, args);
        }
    }

    Flush(){
        this._onSuccess.length = 0;
        this._onFail.length = 0;
    }

}

module.exports = Callbacks;
},{}],140:[function(require,module,exports){
'use strict';

const TIME = require(`../time.js`);

class CallNext {
    constructor(p_callback = null) {
        this.Clear();
        if(p_callback){ this._callback = p_callback; }
    }

    get scheduled(){ return this._scheduled; }

    set callback(p_value){
        this.Cancel();
        this._callback = p_value; 
    }
    get callback(){ return this._callback; }
    
    Schedule(){
        if(this._scheduled || !this._callback){ return; }
        this._scheduled = true;
        TIME.NEXT_TICK = this._callback;        
    }

    Cancel(){
        if(this._scheduled && this._callback){
            TIME.instance._RemoveNextTick(this._callback); 
        }
    }

    Clear(){
        this.Cancel();
        this._scheduled = false;
        this._callback = null;
    }

}

module.exports = CallNext;
},{"../time.js":148}],141:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const Observer = require(`./observer.js`);
const { DataBlock } = require(`../data-core/@.js`);

class DataObserver extends Observer {
    constructor() {super();}

    get observable(){return this._observable;}
    set observable(p_value){
        
        if(p_value){
            if(!U.IoF(p_value, DataBlock)){
                if(U.IoF(p_value.data, DataBlock)){
                    p_value = p_value.data;
                }else{
                    p_value = null;
                }
            }
        }        
        
        super.observable = p_value;

    }

}

module.exports = DataObserver;
},{"../@.js":6,"../data-core/@.js":43,"./observer.js":142}],142:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const DisposableObjectEx = require(`../collections/disposable-object-ex.js`);

class Observer extends DisposableObjectEx {
    constructor() {super();}

    //---> Init

    _Init(){ 
        super._Init(); 
        this._observable = null;
        this._validData = false;
        this._owner = null;
        this._hooks = new Array(0);
    }

    Hook( p_evt, p_subscriber, p_fn ){
        this._hooks.push({ evt:p_evt, thisArg:p_subscriber, fn:p_fn });
        if(this._observable){
            this._observable.Subscribe(p_evt, p_subscriber, p_fn);
        }
    }

    Unhook( p_evt, p_subscriber, p_fn ){
        var hook = null;
        for(var i = 0, n = this._hooks.length; i < n; i++){
            hook = this._hooks[i];
            if(hook.evt == p_evt 
                && hook.thisArg == p_subscriber 
                && hook.fn == p_fn){
                    this._hooks.splice(i, 1);
                    i--; n--;
                    if(this._observable){
                        this._observable.Unsubscribe(p_evt, p_subscriber, p_fn);
                    }
                }
        }
    }

    get observable(){return this._observable;}
    set observable(p_value){
        
        if(this._observable == p_value){return;}

        var oldValue = this._observable;
        this._observable = p_value;
        
        var hook = null;
        var remove = !U.Void(oldValue);
        var add = !U.Void(p_value);

        for(var i = 0, n = this._hooks.length; i < n; i++){
            hook = this._hooks[i];
            if(remove){ oldValue.Unsubscribe(hook.evt, hook.thisArg, hook.fn); }
            if(add){ p_value.Subscribe(hook.evt, hook.thisArg, hook.fn); }
        }

        this._validData = add;

    }
    

    _CleanUp()
    {
        this.observable = null;
        super._CleanUp();
    }    

}

module.exports = Observer;
},{"../@.js":6,"../collections/disposable-object-ex.js":31}],143:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { POOL, DisposableObject } = require(`../collections/@.js`);
const RELAY = require(`../relay.js`);

class Request extends DisposableObject{
    constructor() {super();}

    static Emit(p_requestType, p_options = null, p_emitter = null, p_onSuccess = null, p_onFail = null, p_timeout = 0, p_requestClass = Request, p_global = true){
        var request = POOL.Rent(p_requestClass);
        request.requestType = p_requestType;
        request.emitter = p_emitter;

        request.onFail = p_onFail;
        request.onSuccess = p_onSuccess;
        request.timeout = p_timeout;

        request.options = p_options;

        if(p_global){
            RELAY.HandleRequest(request);
        }

        return request;
        
    }

    _Init(){
        super._Init();
        this._emitter = null;
        this._requestType = null;
        this._options = null;
        this._handled = false;
        this._handler = null;
        this._onFail = null;
        this._onSuccess = null;
        this._timeout = 0;
        this._life = 0;
        this._failReason = ``;
    }

    get requestType(){return this._requestType;}
    set requestType(p_value){this._requestType = p_value;}

    get emitter(){return this._emitter;}
    set emitter(p_value){this._emitter = p_value;}

    get onSuccess(){return this._onSuccess;}
    set onSuccess(p_value){this._onSuccess = p_value;}

    get onFail(){return this._onFail;}
    set onFail(p_value){this._onFail = p_value;}



    _Success(){
        if(this._onSuccess){
            this._onSuccess.call(this._emitter, this);
        }
    }

    _Fail(p_reason){
        this._failReason = p_reason ? p_reason : `undocumented`;
        if(this._onFail){
            this._onFail.call(this._emitter, this);
        }
    }

    get timeout(){return this._timeout;}
    set timeout(p_value){this._timeout = p_value;}

    get life(){return this._life;}
    set life(p_value){this._life = p_value;}

    get options(){return this._options;}
    set options(p_value){this._options = p_value;}

    get failReason(){return this._failReason;}

    GetOption(p_id, p_fallback = null){
        var opt = this._options;
        if(!opt || !opt.hasOwnProperty(p_id)){return p_fallback;}
        return opt[p_id];
    }

    get handled(){return this._handled;}

    HandleSuccess(p_handler){
        if(this._handled){
            throw new Error(`A request may not be handled twice.`);
        }
        this._handled = true;
        this._handler = p_handler;
        this._Success();
    }

    HandleFail(p_reason){
        this._Fail(p_reason);
    }

    _CleanUp()
    {

        this._emitter = null;
        this._requestType = null;
        this._options = null;
        this._handled = false;
        this._handler = null;
        this._onFail = null;
        this._onSuccess = null;
        this._timeout = 0;
        this._life = 0;

        super._CleanUp();
    }

    toString(){
        return `!${this.constructor.name}:${this._requestType},${this._emitter}`;
    }

}

module.exports = Request;
},{"../@.js":6,"../collections/@.js":22,"../relay.js":122}],144:[function(require,module,exports){
'use strict';

const POOL = require(`../collections/pool.js`);
const Dictionary = require(`../collections/dictionary.js`);
const Signal = require(`./signal.js`);

class SignalBox{
    
    constructor( p_observable ) {
        this._signals = new Dictionary();
        this._observable = p_observable;
        this._silent = false;
    }

    get silent(){ return this._silent; }
    set silent(p_value){
        this._silent = p_value;
    }

    isEmpty(p_evt){
        var s = this._signals;
        if(!s.Contains(p_evt)){
            return true;
        }else{
            return s.Get(p_evt).isEmpty;
        }
    }

    Dispatch( p_evt, ...args ){
        
        if(this._silent){return;}

        var signal = this._signals.Get(p_evt);
        if(!signal){return;}
        
        signal.Dispatch(...args);
    }

    Add( p_evt, p_suscriber, p_fn ){

        var signal = this._signals.Get(p_evt);
        if(!signal){
            signal = POOL.Rent(Signal);
            this._signals.Set(p_evt, signal);
            signal._observable = this._observable;
            
        }

        signal.Add(p_suscriber, p_fn);

    }

    Remove( p_evt, p_suscriber, p_fn ){

        var signal = this._signals.Get(p_evt);
        if(!signal){return;}

        signal.Remove(p_suscriber, p_fn);

        if(signal.isEmpty){
            this._signals.Remove(p_evt);
            signal.Release();
        }

    }

    RemoveAll( p_evt ){

        var signal = this._signals.Get(p_evt);
        if(!signal){return;}

        this._signals.Remove(p_evt);
        signal.Release();

    }

    Clear(){
        var signals = this._signals;
        var keys = signals.keys;
        var s = null;
        for(var i = 0, n = keys.length; i < n; i++){
            s = signals.Get(keys[i]);
            s.Release();            
        }
        signals.Clear();
    }

}

module.exports = SignalBox;
},{"../collections/dictionary.js":30,"../collections/pool.js":37,"./signal.js":145}],145:[function(require,module,exports){
'use strict';

const DictionaryList = require(`../collections/dictionary-list.js`);
const DisposableObject = require(`../collections/disposable-object.js`);

const _BLANK = Symbol(`none`);

class Signal extends DisposableObject{
    constructor() {super();}

    static get BLANK(){return _BLANK;}

    _Init(){
        super._Init();
        this._observable = null;
        this._dispatching = false;
        this._removeAll = false;
        this._slots = new DictionaryList();
        this._deprecatedKVP = new Array(0);
        this._queuedDispatch = new Array(0);
    }

    get isEmpty(){ return this._slots.count == 0; }

    get count(){ return this._slots.count; }

    /**
     * Register a suscriber
     * @param {*} p_suscriber 
     * @param {Function} p_fn 
     */
    Add( p_suscriber, p_fn ){

        var callbacks = null;

        if(!p_suscriber){ p_suscriber = _BLANK; }

        this._slots.Set(p_suscriber, p_fn);

    }

    /**
     * Unregister a suscriber
     * @param {*} p_suscriber 
     * @param {Function} p_fn 
     */
    Remove( p_suscriber, p_fn ){

        if(!p_suscriber){ p_suscriber = _BLANK; }
        if(!this._slots.Contains(p_suscriber)){return;}

        if(this._dispatching)
        {
            this._deprecatedKVP.push([p_suscriber, p_fn]);
            return;
        }

        this._slots.Remove(p_suscriber, p_fn);

    }

    /**
     * Remove all suscribers
     */
    RemoveAll(){
        if(this._dispatching){
            this._removeAll = true;
            return;
        }

        this._queuedDispatch.length = 0;
        this._slots.Clear();
        this._deprecatedKVP.length = 0;
        this._removeAll = false;
    }

    /**
     * Dispatch arguments to suscribers
     * @param  {...any} args
     */
    Dispatch( ...args ){

        if(this._dispatching)
        {
            //May cause chaos.
            this._queuedDispatch.push(args);
            console.warn(`Dispatching signal while already dispatching. Queueing.`);
            return;
        }

        this._dispatching = true;
        this._args = args;

        if(args == null || args == undefined){
            this._slots.internalMap.forEach( this._DispatchWithNoArgs, this );
        }else{
            this._slots.internalMap.forEach( this._DispatchWithArgs, this );
        }

        this._PostDispatch();   
            
    }

    _PostDispatch(){

        this._dispatching = false;

        if(this._removeAll){
            this.RemoveAll();
        }else{
            var kvp;

            for(var i = 0, n = this._deprecatedKVP.length; i < n; i++){
                kvp = this._deprecatedKVP[i];
                this._slots.Remove(kvp[0],kvp[1]);
            }
        }

        this._deprecatedKVP.length = 0;

        if(this._queuedDispatch.length != 0){
            this.Dispatch.apply(this, this._queuedDispatch.shift());
        }

    }

    _DispatchWithNoArgs( p_callbacks, p_key, p_map )
    {        
        var n = p_callbacks.length;
        if(p_key == _BLANK){
            for( var i = 0; i < n; i++){ 
                p_callbacks[i].apply(null); 
            }
        }else{
            for( var i = 0; i < n; i++){ 
                p_callbacks[i].apply(p_key); 
            }
        }
    }

    _DispatchWithArgs( p_callbacks, p_key, p_map )
    {
        var n = p_callbacks.length;
        if(p_key == _BLANK){
            for( var i = 0; i < n; i++){ 
                p_callbacks[i].apply(null, this._args); 
            }
        }else{
            for( var i = 0; i < n; i++){ 
                p_callbacks[i].apply(p_key, this._args); 
            }
        }
    }

    _CleanUp()
    {
        this.RemoveAll();        
        super._CleanUp();
    }


}

module.exports = Signal;
},{"../collections/dictionary-list.js":29,"../collections/disposable-object.js":32}],146:[function(require,module,exports){
'use strict';

const Singleton = require(`./singleton.js`);
const SignalBox = require(`./signals/signal-box.js`);

class SingletonEx extends Singleton{
    constructor() {super();}

    _Init()
    {
        super._Init();
        this._signalBox = new SignalBox();
    }

    _Notify( p_evt, ...args )
    {
        this._signalBox.Dispatch(p_evt, ...args);
    }

    static ON( p_evt, p_fn ){ this.instance.On(p_evt, p_fn); }
    On( p_evt, p_fn ){ this.Subscribe(p_evt, null, p_fn); }    
    Subscribe( p_evt, p_suscriber, p_fn){ 
        this._signalBox.Add(p_evt, p_suscriber, p_fn); 
    }
    
    static OFF( p_evt, p_fn ){ this.instance.Off(p_evt, p_fn); }
    Off( p_evt, p_fn ){ this.Unsubscribe(p_evt, null, p_fn); }
    Unsubscribe( p_evt, p_suscriber, p_fn ){ 
        this._signalBox.Remove(p_evt, p_suscriber, p_fn); 
    }

    



}

module.exports = SingletonEx;
},{"./signals/signal-box.js":144,"./singleton.js":147}],147:[function(require,module,exports){
'use strict';

class Singleton{

    constructor() {
        this._Init();
        this._PostInit();
    }

    static get instance(){
        if(!this._instance){
            this._instance = new this();
        }
        return this._instance;
    }

    _Bind(p_func) { return this[p_func.name] = p_func.bind(this); }

    _Init()
    {

    }

    _PostInit()
    {

    }

    

}

module.exports = Singleton;
},{}],148:[function(require,module,exports){
'use strict';

const SingletonEx = require(`./singleton-ex.js`);
const Calllist = require(`./signals/call-list.js`);
const _evt_TICK = Symbol(`tick`);

class TIME extends SingletonEx{
    constructor() {super();}

    static get TICK(){ return _evt_TICK; }
    static set NEXT_TICK(p_callback){ TIME.instance._nextTick.call = p_callback; }

    _Init()
    {
        super._Init();
        this._lastTick = null;
        this._deltaTime = 0;
        this._timeScale = 1;
        this._running = false;
        this._nextTick = new Calllist();

        this._Bind(this._Tick);
        
    }

    _PostInit()
    {
        super._PostInit();
        window.requestAnimationFrame(this._Tick);
    }

    Start(){
        this._running = true;
    }

    get deltaTime(){
        return this._deltaTime;
    }

    get timeScale(){return this._timeScale;}
    set timeScale(value){
        this._timeScale = value;
    }

    _RemoveNextTick(p_callback)
    {
        this._nextTick.remove = p_callback;
    }

    _Tick( p_timestamp )
    {

        if(this._lastTick == null){
            this._lastTick = p_timestamp;   
        }

        this._deltaTime = ( p_timestamp - this._lastTick ) * this._timeScale;
        this._lastTick = p_timestamp;

        this._nextTick.NotifyFlush(this._deltaTime);
        this._Notify(TIME.TICK, this._deltaTime);

        window.requestAnimationFrame(this._Tick);

    }

}

module.exports = TIME;

},{"./signals/call-list.js":138,"./singleton-ex.js":146}],149:[function(require,module,exports){
const { Drawer, DrawerControls } = require(`./drawer.js`);
const { WorkspaceCell, WorkspaceCellControls } = require(`./workspace-cell.js`);
const { SmallButton, SmallButtonOutline, LargeToolButton } = require(`./buttons.js`);

module.exports = {
    APP_UI_FLAGS : require(`./app-ui-flags.js`),
    APP_UI_EVENT : require(`./app-ui-event.js`),
    Breadcrum : require(`./breadcrum.js`),
    BreadcrumItem : require(`./breadcrum-item.js`),
    Button : require(`./button.js`),
    
    SmallButton : SmallButton,
    LargeToolButton : LargeToolButton,
    SmallButtonOutline: SmallButtonOutline,

    ButtonDragHandle : require(`./button-drag-handle.js`),
    ButtonEx : require(`./button-ex.js`),
    ToolButton : require(`./button-tool.js`),
    CatalogBuilder : require(`./catalog-builder.js`),
    Drawer : Drawer,
    DrawerControls : DrawerControls,
    Explorer : require(`./explorer.js`),
    TileExplorer : require(`./explorer-tile.js`),
    Facade : require(`./facade.js`),
    Group : require(`./group.js`),
    Icon : require(`./icon.js`),
    Shell : require(`./shell.js`),
    Tab : require(`./tab.js`),
    TitleBar : require(`./title-bar.js`),
    TitleBarEx : require(`./title-bar-ex.js`),
    Toolbar : require(`./toolbar.js`),
    TreeItemGroup : require(`./tree-item-group.js`),
    TreeItem : require(`./tree-item.js`),
    TreeRoot : require(`./tree-root.js`),
    WorkspaceCell : WorkspaceCell,
    WorkspaceCellControls : WorkspaceCellControls,
    RootWorkspace : require(`./workspace-root.js`),
    Workspace : require(`./workspace.js`),
    StickerBar : require(`./sticker-bar.js`),
    
}
},{"./app-ui-event.js":150,"./app-ui-flags.js":151,"./breadcrum-item.js":152,"./breadcrum.js":153,"./button-drag-handle.js":154,"./button-ex.js":155,"./button-tool.js":156,"./button.js":157,"./buttons.js":158,"./catalog-builder.js":159,"./drawer.js":166,"./explorer-tile.js":167,"./explorer.js":168,"./facade.js":169,"./group.js":171,"./icon.js":172,"./shell.js":177,"./sticker-bar.js":178,"./tab.js":179,"./title-bar-ex.js":181,"./title-bar.js":182,"./toolbar.js":183,"./tree-item-group.js":184,"./tree-item.js":185,"./tree-root.js":186,"./workspace-cell.js":187,"./workspace-root.js":188,"./workspace.js":189}],150:[function(require,module,exports){
'use strict';

const _evt_triggered        = Symbol(`triggered`);

class APP_UI_EVENT{
    constructor() {}

    static get TRIGGERED(){ return _evt_triggered; }
}

module.exports = APP_UI_EVENT;
},{}],151:[function(require,module,exports){
'use strict';

const _flag_noLabel         = `no-label`;
const _flag_noIcon          = `no-icon`;

const _flag_infos            = `infos`;
const _flag_warning          = `warning`;
const _flag_error            = `error`;

const _flag_fixedSize        = `fixed-size`;

class APP_UI_FLAGS{
    constructor() {}

    static get NO_LABEL(){ return _flag_noLabel; }
    static get NO_ICON(){ return _flag_noIcon; }

    static get INFOS(){ return _flag_infos; }
    static get WARNING(){ return _flag_warning; }
    static get ERROR(){ return _flag_error; }

    static get FIXED_SIZE(){ return _flag_fixedSize; }

}

module.exports = APP_UI_FLAGS;
},{}],152:[function(require,module,exports){
const { U, PATH } = require(`../@.js`);
const { UI } = require(`../@tools`);
const DataBlock = require(`../data-core/data-block.js`);
const { CatalogItem } = require(`../collections/@.js`);
const Button = require(`./button.js`);
const { FacadeLabel } = require(`./facades.js`);


class BreadcrumItem extends Button{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._alwaysDisplayCommand = true;
        this._facadeClass = FacadeLabel;
    }

    _PostInit(){
        super._PostInit();
        this.RegisterClassToggle(this, `delim`);
    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(0,0,0,0.2)`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(127,127,127,0.5)`,
            UI.sSELECT, `rgba(240,240,240,0.3)`,
            UI.sFS, `rgba(240,240,240,1)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'border-radius':`2px`,
                margin:`0px`,
                padding:`1px`,
                'border-radius':`2px`
            },
            '.facade':{
                opacity:1
            },
            ':host(.delim)':{
                'margin-left':`10px`,
            },
            ':host(.delim):before':{
                'pointer-events':`none`,
                content:`""`, height:`100%`, width:`10px`, position:`absolute`, left:`-10px`,
                //'background-color':`#ff0000`
                'background-size': `contain`,
                background:`url(${PATH.EX('%ICON%/icon_expand_arrow.svg')}) no-repeat center`
            }
        });
    }

    set arrow(p_value){ this.SetFlag(`delim`, p_value); }

    _OnCommandUpdated(p_command){
        //this.icon = p_command.icon;
        //this.text = p_command.name;
        //this.visible = p_command.enabled;
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);

        var d = this._data;
        if(U.IoF(d, CatalogItem)){d = d.data;}
        if(U.IoF(d, DataBlock)){
            this._facade.label.displayID = d.id;
        }else{
            this._facade.label.displayID = null;
        }
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
    }
}

module.exports = BreadcrumItem;
UI.Register(`breadcrum-item`, BreadcrumItem);
},{"../@.js":6,"../@tools":7,"../collections/@.js":22,"../data-core/data-block.js":73,"./button.js":157,"./facades.js":170}],153:[function(require,module,exports){
const { U } = require(`../@.js`);
const UI = require(`../ui.js`);
const { OrientedWidget } = require(`../ui-core/@.js`);
const BreadcrumItem = require(`./breadcrum-item.js`);

class Breadcrum extends OrientedWidget{
    constructor(){super();}

    _Init(){
        super._Init();
        this._pathItems = new Array(0);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`row nowrap`,
                'align-items':`flex-start`,
                'align-content':`flex-start`,

                'background-color':``,
            },
            '.handle':{
                'min-width':0
            }
        });
    }

    _Render(){
        
    }

    ClearHandles(){
        var path = this._pathItems;
        while(path.length != 0){
            path.pop().Release();
        }
    }

    CreateHandle( p_options, p_refreshArrow = true ){
        var handle = this.Add(BreadcrumItem, -1, this, `handle`);
        handle.options = p_options;
        this._pathItems.push(handle);
        if(p_refreshArrow){
            this._RefreshArrows();
        }
        return handle;
    }

    _RefreshArrows(){
        for(var i = 0, n = this._pathItems.length; i < n; i++){
            this._pathItems[i].arrow = !(i == 0);
        }
    }

}

module.exports = Breadcrum;
UI.Register('ui-breadcrum', Breadcrum);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242,"./breadcrum-item.js":152}],154:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const ToolButton = require(`./button-tool.js`);
const Icon = require(`./icon.js`);
const Textfield = require(`../ui-core/textfield.js`);


class ButtonDragHandle extends ToolButton {
    constructor() {super();}

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                //border:`1px solid #ff0000`
                cursor: `move`, /* fallback if grab cursor is unsupported */
                cursor:`grab`,
            },
            ':host(.focused)':{
                cursor: `move`, /* fallback if grab cursor is unsupported */
                cursor:`grab`,
            }
        });
    }

}

module.exports = ButtonDragHandle;
UI.Register(`ui-button-drag-handle`, ButtonDragHandle);
},{"../@.js":6,"../ui-core/@.js":223,"../ui-core/textfield.js":236,"../ui.js":242,"./button-tool.js":156,"./icon.js":172}],155:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const Button = require(`../ui-app/button.js`);
const Icon = require(`./icon.js`);
const Textfield = require(`../ui-core/textfield.js`);


class ButtonEx extends Button {
    constructor() {super();}
    

}

module.exports = ButtonEx;
UI.Register(`ui-button-ex`, ButtonEx);
},{"../@.js":6,"../ui-app/button.js":157,"../ui-core/@.js":223,"../ui-core/textfield.js":236,"../ui.js":242,"./icon.js":172}],156:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const Button = require(`./button.js`);
const Icon = require(`./icon.js`);

class ToolButton extends Button {
    constructor() {super();}

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        this._facade.text = ``; //Remove text after update
    }

    //---> Rendering

    _InitColors(){
        super._InitColors();
        var c = `127,127,127`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},0)`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(${c},0)`,
            UI.sSELECT, `rgba(${c},0.3)`,
            UI.sFS, `rgba(${c},0.3)`);
    }

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                transition: `all 0.15s ease`,
                padding:`0px`,
                margin:`-1px`,
                'border-radius': `2px`,
                filter: ``
                //outline:`1px rgba(255,255,255,0.1) solid`,
                //'outline-offset':`-1px`,
            },
            ':host(.focused)':{
                
            },
            ':host(.selected)':{
                
            },
            ':host(.selected.focused)':{
              
            },
            '.facade':{ 
                opacity:0.5,
                padding:`0px`
            }
        });
    }

    _Render()
    {        
        super._Render();
        this._facade.label.visible = false;
    }

    Select( p_toggle )
    {
        super.Select(p_toggle);
    }

    _CleanUp()
    {
        super._CleanUp();
    }

    

}

module.exports = ToolButton;
UI.Register(`ui-tool-button`, ToolButton);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242,"./button.js":157,"./icon.js":172}],157:[function(require,module,exports){
'use strict';

const { U, C, EVENT } = require(`../@.js`);
const { UI_EVENT, UI_FLAGS, Widget } = require(`../ui-core/@.js`);
const { Observer } = require(`../signals/@.js`);
const UI = require(`../ui.js`);
const APP_UI_EVENT = require(`./app-ui-event.js`);

const Facade = require(`./facade.js`);
const Request = require(`../signals/request.js`);
const COMMAND_EVENT = require(`../actions/command-event.js`);

class Button extends Widget {
    constructor() {super();}

    //---> Init

    _Init()
    {
        super._Init();

        this._alwaysDisplayCommand = U.Default(this._alwaysDisplayCommand, false);

        this._facadeClass = Facade;
        this._facade = null;

        this._command = null;
        this._isCommandTrigger = true;
        this._isCommandContext = true;

        this._commandObserver = new Observer();
        //this._commandObserver.Hook(COMMAND_EVENT.);

        this.RegisterClassToggle(this, C.UP, C.DOWN, C.LEFT, C.RIGHT, C.NOSCALE, UI_FLAGS.DISABLED);

    }

    set activable(p_value){
        super.activable = p_value;
        this.SetFlag(UI_FLAGS.DISABLED, !this._activable);
    }

    get facade(){return this._facade;}

    set uppercaseText(p_string){
        this._facade.label.uppercase = true;
        this._facade.text = p_string;
    }

    get text(){return this._facade.text;}
    set text(p_string){this._facade.text = p_string;}

    get icon(){return this._facade.icon;}
    set icon(p_path){this._facade.icon = p_path;}

    get isCommandTrigger(){ return this._isCommandTrigger; }
    set isCommandTrigger(p_value){ this._isCommandTrigger = p_value; }

    get isCommandContext(){ return this._isCommandContext; }
    set isCommandContext(p_value){ this._isCommandContext = p_value; }

    get alwaysDisplayCommand(){ return this._alwaysDisplayCommand;}
    set alwaysDisplayCommand(p_value){
        this._alwaysDisplayCommand = p_value;
        if(p_value && this._command){
            this.visible = true;
        }
    }

    _OnDataUpdated(p_data){
        this._facade.data = p_data;
    }

    //---> Rendering

    _InitColors(){
        super._InitColors();

        /*this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0.1)`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(127,127,127,0.5)`,
            UI.sSELECT, `rgba(127,127,127,0.3)`,
            UI.sFS, `rgba(127,127,127,1)`);*/

        var a = 0.8;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(50,50,50,${a})`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(78,78,78,${a})`,
            UI.sSELECT, `rgba(85,120,103,${a})`,
            UI.sFS, `rgba(109,153,131,${a})`);

    }

    _RenderStyle()
    {

        var s = 6;

        return {
            ':host':{
                position:`relative`,
                display:`flex`,
                transition: `all 0.05s ease`,
                padding:`11px`,
                margin:`6px`,
                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`center`,
                'justify-content':`center`,
                'background-color':this.GEC(UI.elBG, UI.sIDLE),
                'border-radius': `2px`,
                //'box-sizing':`border-box`,
                filter: `drop-shadow(0px 2px 1px rgba(0,0,0,0.1))`,
                border:`1px solid rgba(0,0,0,0)`
                //outline:`1px rgba(255,255,255,0.1) solid`,
                //'outline-offset':`-1px`,
            },
            ':host(.focused)':{
                'background-color':this.GEC(UI.elBG, UI.sFOCUS),
                filter: `drop-shadow(0px 2px 2px rgba(0,0,0,0.3))`,
                'cursor':`pointer`,
            },
            ':host(.selected)':{
                'background-color':this.GEC(UI.elBG, UI.sSELECT),
            },
            ':host(.selected.focused)':{
                'background-color':this.GEC(UI.elBG, UI.sFS),
            },

            ':host(.disabled)':{
                'background-color':this.GEC(UI.elBG, UI.sDISABLED),
            },

            '.facade':{
                position:`relative`,
                flex:`0 1 auto`,
                opacity:0.8,
                //'align-self':`center`
            },
            ':host(.selected) .facade, :host(.focused) .facade':{
                opacity:1,
            },
            //Separators
            ':host(.up):before, :host(.left):before, :host(.down):after, :host(.right):after':{
                content:`""`, position:`absolute`, 'background-color':`rgba(127,127,127,0.25)`,
                'pointer-events':'none'
            },
            ':host(.up):before, :host(.down):after':{ width:`50%`, height:`2px` },
            ':host(.left):before, :host(.right):after':{ width:`2px`, height:`50%` },
            ':host(.up):before':{ top:`-${s}px` },':host(.up)':{ 'margin-top':`${s}px` },
            ':host(.down):after':{ bottom:`${s}px` },':host(.down)':{ 'margin-bottom':`${s}px` },
            ':host(.left):before':{ left:`-${s+1}px` },':host(.left)':{ 'margin-left':`${s}px` },
            ':host(.right):after':{ right:`-${s}px` },':host(.right)':{ 'margin-right':`${s*2}px` },
        };
    }

    _Render()
    {        
        this.RegisterClassToggle(this, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED);

        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        if(this.HEC(UI.elTEXT, UI.sNONE)){
            this._facade.label.color = this.GEC(UI.elTEXT, UI.sNONE);
        }
        this.RegisterClassToggle(this._facade, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED);

        this._facade.label.ellipsis = true;

        this.focusArea = this;
    }

    //---> Options handling

    set options(p_value){

        if(!p_value){return;}

        this.data = U.Get(p_value, `data`, this._data );
        this.icon = U.Get(p_value, `icon`, ``);//this.icon );
        this.text = U.Get(p_value, `text`, this.text );
        this.htitle = U.Get(p_value, `htitle`, U.Default(this.htitle, this.text, ``));

        if(`uppercaseText` in p_value){
            this.uppercaseText = p_value.uppercaseText;
        }

        // Check if there is 'activation' options
        var trigger = U.Get(p_value, `trigger`, null);
        if(trigger){
            this.trigger = trigger;
        }

        // Check if there is request handling options
        var request = U.Get(p_value, `request`, null);
        if(request){
            this.request = request;
        }

        // Check if there is command handling options
        var command = U.Get(p_value, `command`, null);
        if(command){
            this.command = command;
        }

        this.isCommandTrigger = U.Get(p_value, `isCommandTrigger`, this._isCommandTrigger);
        this.isCommandContext = U.Get(p_value, `isCommandContext`, this._isCommandContext);
        this.alwaysDisplayCommand = U.Get(p_value, `alwaysVisible`, this._alwaysDisplayCommand);

        this.SetFlag(C.NOSCALE, p_value.noscale ? p_value.noscale : false);

    }

    get command(){return this._command;}
    set command( p_command ){
        
        this._commandObserver.observable = p_command;

        if(this._command == p_command){return;}
        var oldValue = this._command;
        this._command = p_command;
        if(oldValue){
            oldValue.Unsubscribe(EVENT.UPDATED, this, this._OnCommandUpdated);
        }
        if(p_command){
            p_command.Subscribe(EVENT.UPDATED, this, this._OnCommandUpdated);
            this._OnCommandUpdated(p_command);
            this.htitle = p_command.name;
            this.order = p_command.order;
        }else{
            this.order = 0;
        }

    }

    _OnCommandUpdated(p_command){
        this.icon = p_command.icon;
        this.text = p_command.name;
        this.visible = this._alwaysDisplayCommand ? true : p_command.enabled;
    }

    get trigger(){ return this._trigger; }
    set trigger( p_options ){
        if(!p_options){
            this._trigger = null;
            return;
        }

        this._trigger = p_options;

    }

    get request(){ return this._request; }
    set request( p_options ){
        if(!p_options){
            this._request = null;
            return;
        }

        this._request = p_options;

    }

    Activate(p_alt = false){

        var b = super.Activate(p_alt);
        if(!b){return b;}

        if(this._isCommandTrigger && this._command){
            this._command.emitter = this;
            if(this._isCommandContext){
                this._command.Execute(this);
            }else{
                this._command.Execute();
            }
        }

        var opts = this._trigger;
        if(opts){

            var thisArg = U.Get(opts, `thisArg`, null);
            if(opts.argArray){
                opts.fn.apply(thisArg, opts.argArray);
            }else if(opts.arg){
                opts.fn.apply(thisArg, [opts.arg]);
            }else{
                opts.fn.apply(thisArg);
            }
            
        }

        opts = this._request;
        if(opts){
            if(!opts.type){
                throw new Error(`Cannot generate request of type 'null'`);
            }

            var requestEmitter = U.Get(opts, `emitter`, this);

            var options = U.Get(opts, `options`);

            // Override options value if a proxy has been set
            var proxy = U.Get(opts, `proxy`, null);
            if(proxy){
                var thisArg = U.Get(proxy, `thisArg`, null);
                if(proxy.argArray){
                    options = proxy.fn.apply(thisArg, proxy.argArray);
                }else if(proxy.arg){
                    options = proxy.fn.call(thisArg, proxy.arg);
                }else{
                    options = proxy.fn.call(thisArg);
                }
            }

            requestEmitter._EmitLocalRequest(
                U.Get(opts, `type`),
                options,
                U.Get(opts, `onSuccess`, null),
                U.Get(opts, `onFail`, null),
                U.Get(opts, `timeout`, 0),
                U.Get(opts, `cl`, Request)
            );
        }

        this._Notify(APP_UI_EVENT.TRIGGERED, this);

    }

    _CleanUp()
    {
        this.command = null;
        this._isCommandTrigger = true;
        this._isCommandContext = true;
        this.trigger = null;
        this.request = null;
        this.text = ``;
        this.icon = null;
        this.activable = true;

        this.SetFlag(C.NOSCALE, false);
        
        super._CleanUp();
    }

    

}

module.exports = Button;
UI.Register(`ui-button`, Button);
},{"../@.js":6,"../actions/command-event.js":16,"../signals/@.js":137,"../signals/request.js":143,"../ui-core/@.js":223,"../ui.js":242,"./app-ui-event.js":150,"./facade.js":169}],158:[function(require,module,exports){
'use strict';

const { U, C } = require(`../@.js`);
const UI = require(`../ui.js`);
const Button = require(`./button.js`);
const ToolButton = require(`./button-tool.js`);

//----> Button

class Button_HA extends Button { // High afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = C.COLORS.main;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);
    }

}

class Button_LA extends Button { // Low affordance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = `0,0,0`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);
    }

}

class Button_WARN extends Button { // Warning afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();
        console.log(`duh`);
        var a = 0.8;
        var c = C.COLORS.warning;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);

        this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.black},1)`);

    }

}

class Button_ERR extends Button { // Error afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = C.COLORS.error;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);

        this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.white},1)`);
    }

}

//----> SmallButton

class SmallButton extends Button {
    constructor() {super();}

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(),{
            ':host':{
                padding:`2px`,
                margin:`0px`,
                'border-radius': `2px`,
                'min-height':`24px`,
            }
            
        });
    }

}

class SmallButton_HA extends SmallButton { // High afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.5;
        var c = C.COLORS.main;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);
        
        //this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.black},1)`);
    }

}

class SmallButton_LA extends SmallButton { // Low affordance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = `0,0,0`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);
    }

}

class SmallButton_WARN extends SmallButton { // Warning afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();
        console.log(`duh`);
        var a = 0.8;
        var c = C.COLORS.warning;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);

        this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.black},1)`);

    }

}

class SmallButton_ERR extends SmallButton { // Error afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = C.COLORS.error;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);

        this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.white},1)`);
    }

}

//----> SmallButtonOutline

class SmallButtonOutline extends Button {
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(0,0,0,${a})`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(0,0,0,${a})`,
            UI.sSELECT, `rgba(0,0,0,${a})`,
            UI.sFS, `rgba(0,0,0,${a})`);

        this.SEC(UI.elBGO,
            UI.sIDLE, `rgba(${C.COLORS.mid},0.2)`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(${C.COLORS.main},0.8)`,
            UI.sSELECT, `rgba(${C.COLORS.main},0.8)`,
            UI.sFS, `rgba(${C.COLORS.main},1)`);

    }

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(),{
            ':host':{
                padding:`2px`,
                margin:`0px`,
                'border-radius': `2px`,
                'min-height':`24px`,
                border:`1px solid ${this.GEC(UI.elBGO, UI.sIDLE)}`
            },
            ':host(.focused)':{
                border:`1px solid ${this.GEC(UI.elBGO, UI.sFOCUS)}`
            },
            ':host(.selected)':{
                border:`1px solid ${this.GEC(UI.elBGO, UI.sSELECT)}`
            },
            ':host(.selected.focused)':{
                border:`1px solid ${this.GEC(UI.elBGO, UI.sFS)}`
            },
            
        });
    }

}

class SmallButtonOutline_HA extends SmallButtonOutline { // High afforfance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.5;
        var c = C.COLORS.main;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);

        //this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.black},1)`);
    }

}

class SmallButtonOutline_LA extends SmallButtonOutline { // Low affordance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = `0,0,0`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);
    }

}

//----> LargeToolButton

class LargeToolButton extends ToolButton {
    constructor() {super();}

    _InitColors(){
        super._InitColors();
        var c = `127,127,127`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},0)`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(${c},0.1)`,
            UI.sSELECT, `rgba(${c},0.0)`,
            UI.sFS, `rgba(${c},0.0)`);
    }

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'min-width':`50px`,
                'min-height':`50px`,
                'border-radius':`0px`,
                margin:`0px`
            }
        });
    }

    _Render(){
        super._Render();
        this._facade._icon.size = 32;
    }

}

class LargeToolButton_HA extends LargeToolButton { // Low affordance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.5;
        var c = `0,0,0`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);

        this.SEC(UI.elTEXT, UI.sNONE, `rgba(${C.COLORS.black},1)`);
    }

}

class LargeToolButton_LA extends LargeToolButton { // Low affordance
    constructor() {super();}

    _InitColors(){
        super._InitColors();

        var a = 0.8;
        var c = `0,0,0`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},${a})`,
            UI.sDISABLED, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},${a})`,
            UI.sSELECT, `rgba(${c},${a})`,
            UI.sFS, `rgba(${c},${a})`);
    }

}

module.exports = {
    Button_WARN : Button_WARN,
    Button_ERR : Button_ERR,
    Button_HA : Button_HA,
    Button_LA : Button_LA,

    SmallButton : SmallButton,
    SmallButton_WARN : SmallButton_WARN,
    SmallButton_ERR : SmallButton_ERR,
    SmallButton_HA : SmallButton_HA,
    SmallButton_LA : SmallButton_LA,

    SmallButtonOutline: SmallButtonOutline,
    SmallButtonOutline_HA: SmallButtonOutline_HA,
    SmallButtonOutline_LA: SmallButtonOutline_LA,

    LargeToolButton : LargeToolButton,
    LargeToolButton_HA : LargeToolButton_HA,
    LargeToolButton_LA : LargeToolButton_LA,
};

UI.RegisterGroup({
    'ui-button-ha' : Button_HA,
    'ui-button-la' : Button_LA,
    'ui-button-warn' : Button_WARN,
    'ui-button-err' : Button_ERR,
    
    'ui-button-small' : SmallButton,
    'ui-button-small-ha' : SmallButton_HA,
    'ui-button-small-la' : SmallButton_LA,
    'ui-button-small-warn' : SmallButton_WARN,
    'ui-button-small-err' : SmallButton_ERR,

    'ui-button-small-outline' : SmallButtonOutline,
    'ui-button-small-outline-ha' : SmallButtonOutline_HA,
    'ui-button-small-outline-la' : SmallButtonOutline_LA,

    'large-tool-button' : LargeToolButton,
    'large-tool-button-ha' : LargeToolButton_HA,
    'large-tool-button-la' : LargeToolButton_LA
});
},{"../@.js":6,"../ui.js":242,"./button-tool.js":156,"./button.js":157}],159:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);
const Observer = require(`../signals/observer.js`);

const { DisposableObjectEx, Dictionary, Catalog, COLLECTION_EVENT, CATALOG_EVENT } = require(`../collections/@.js`);

class CatalogBuilder extends DisposableObjectEx {
    constructor() {super();}

    _Init()
    {
        super._Init();
        this._defaultItemClass = null;
        this._defaultGroupClass = null;
        
        this._owner = null;
        this._itemWrapper = null;
        this._catalog = null;
        
        this._dict = new Dictionary();
        this._items = new Array(0);
        this._enabled = true;

        this._catalogObserver = new Observer();
        this._catalogObserver.Hook(COLLECTION_EVENT.ITEM_ADDED, this, this._OnCatalogItemAdded);
        this._catalogObserver.Hook(COLLECTION_EVENT.ITEM_REMOVED, this, this._OnCatalogItemRemoved);
        this._catalogObserver.Hook(CATALOG_EVENT.SORTED, this, this._OnCatalogSorted);
        
    }    

    get owner(){return this._owner;}
    set owner(p_value){this._owner = p_value;}

    get itemWrapper(){return this._itemWrapper;}
    set itemWrapper(p_value){this._itemWrapper = p_value;}

    get enabled(){return this._enabled;}
    set enabled(p_value){
        if(this._enabled == p_value){return;}
        this._enabled = p_value;
        if(!p_value){this.Clear();}
    }

    get catalog(){return this._catalog;}
    set catalog(p_value){ 
        if(this._catalog == p_value){return;}
        var oldValue = this._catalog;

        if(oldValue){
            this.Clear();
        }
        
        this._catalog = p_value;

        if(p_value){
            
        }

        this._catalogObserver.observable = p_value;
        this._OnCatalogChanged(oldValue);
    }

    _OnCatalogChanged(p_oldValue){
        //console.log(`Builder : _OnCatalogChanged(${this._catalog})`);
    }

    _OnCatalogItemAdded(p_catalog, p_item){
        if(!this._enabled){return;}
        this._BuildData(p_item);
    }

    _OnCatalogItemRemoved(p_catalog, p_item){
        if(!this._enabled){return;}
        this._ClearData(p_item);
    }
  
    _OnCatalogSorted(p_catalog){
        var item;
        for(var i = 0, n = this._items.length; i < n; i++ ){
            item = this._items[i];
            item.order = p_catalog._items.indexOf(item.data);
        }
    }

    Clear(){
        var list = this._items;
        var item = null;
        while(list.length != 0){
            item = list.pop();
            this._Notify(COLLECTION_EVENT.ITEM_REMOVED, this, item);
            item.Release();
        }
        this._dict.Clear();
    }

    Build(){
        this.Clear();
        var list = this._catalog._items;
        for(var i = 0, n = list.length; i < n; i++){
            this._BuildData(list[i]);            
        }
    }

    _BuildData( p_itemData ){
        
        var item = null;

        if(U.IoF(p_itemData, Catalog)){
            item = this._owner.Add(this._defaultGroupClass, -1, this._itemWrapper);
        }else{
            item = this._owner.Add(this._defaultItemClass, -1, this._itemWrapper);
        }
        
        this._items.push(item);
        this._dict.Set(p_itemData, item);
        item.data = p_itemData;
        this._Notify(COLLECTION_EVENT.ITEM_ADDED, this, item);
    }
    

    _ClearData( p_itemData ){
        var item = this._dict.Get(p_itemData);
        var index = this._items.indexOf(item);
        this._items.splice(index, 1);
        this._Notify(COLLECTION_EVENT.ITEM_REMOVED, this, item);
        item.Release();
    }

    _CleanUp()
    {

        this.Clear();

        this._defaultItemClass = null;
        this._defaultGroupClass = null;
        
        this._owner = null;
        this._itemWrapper = null;
        this._catalog = null;
        
        this._dict.Clear();
        this._items.length = 0;

        this._enabled = true;

        super._CleanUp();

    }

    

}

module.exports = CatalogBuilder;
},{"../@.js":6,"../collections/@.js":22,"../signals/observer.js":142,"../ui-core/@.js":223,"../ui.js":242}],160:[function(require,module,exports){
module.exports = {
    AutoUpdateDialogBox : require(`./dialog-box-auto-update.js`),
    DialogBox : require(`./dialog-box.js`),
    DialogLayer : require(`./dialog-layer.js`),
    DialogManager : require(`./dialog-manager.js`),
    DialogToolbar : require(`./dialog-toolbar.js`),
}
},{"./dialog-box-auto-update.js":161,"./dialog-box.js":162,"./dialog-layer.js":163,"./dialog-manager.js":164,"./dialog-toolbar.js":165}],161:[function(require,module,exports){
//Auto update dialog
'use strict';

const { U } = require(`../../@.js`);
const UI = require(`../../ui.js`);
const DialogBox = require(`./dialog-box.js`);
const APP_MESSAGES = require(`../../app-messages.js`);
const ENV = require('../../environment.js');

class AutoUpdateDialogBox extends DialogBox{
    constructor(){super();}

    _Init(){
        super._Init();
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        var d = this._data;
        if(d && ENV.NODE){
            //Start the process of checking of update, yada yada yada            
            var { ipcRenderer } = require('electron');

            ipcRenderer.on(APP_MESSAGES.AU_ERROR, this._Bind(this._OnAUError));
            ipcRenderer.on(APP_MESSAGES.AU_CHECKING_FOR_UPDATE, this._Bind(this._OnAUCheckingForUpdate));
            ipcRenderer.on(APP_MESSAGES.AU_UPDATE_AVAILABLE, this._Bind(this._OnAUUpdateAvailable));
            ipcRenderer.on(APP_MESSAGES.AU_UPDATE_NOT_AVAILABLE, this._Bind(this._OnAUUpdateNotAvailable));
            ipcRenderer.on(APP_MESSAGES.AU_UPDATE_DOWNLOADED, this._Bind(this._OnAUUpdateDownloaded));

            ipcRenderer.on(APP_MESSAGES.AU_CHECK_REQUEST_HANDLED, this._Bind(this._OnAURequestHandled));

            ipcRenderer.send(APP_MESSAGES.AU_CHECK_REQUEST);
        }
    }

    //---> Event handling

    _OnAURequestHandled(p_evt, p_arg, p_err){
        if(p_arg == APP_MESSAGES.AU_NO_SERVER){
            this._Close();
            return;
        }
    }

    //Error !
    _OnAUError(p_evt, p_arg){
        this._title.text = `Oops !`;
        this._bodyContent.text = `Encountered a bumper while auto-updating : ${p_arg}`;
        this._ClearHandles();
        this.CreateHandle({text:`Well then.`, trigger:{ fn:this._Close}});
    }

    //Emitted when checking if an update has started.
    _OnAUCheckingForUpdate(p_evt, p_arg){
        this._title.text = `Checking for update`;
        this._bodyContent.text = `Stand still.`;
    }

    //Emitted when there is an available update. 
    //The update is downloaded automatically.
    _OnAUUpdateAvailable(p_evt, p_arg){
        this._title.text = `Great !`;
        this._bodyContent.text = `An update was found, it is already downloading in the background.\nYou can either wait for the download to finish or carry on.`;
        this.CreateHandle({text:`Install now !`, trigger:{ fn:this._Close}});
        this.CreateHandle({text:`Continue working.`, trigger:{ fn:this._Close}});
    }

    //Emitted when there is no available update.
    _OnAUUpdateNotAvailable(p_evt, p_arg){
        //Just close the popup
        this._title.text = `You're all set !`;
        this._bodyContent.text = `No need for update.`;
        this._ClearHandles();
        this.CreateHandle({text:`Well then.`, trigger:{ fn:this._Close}});
    }

    //Emitted when an update has been downloaded.
    _OnAUUpdateDownloaded(p_evt, p_arg){
        //Change handles to "install now" / "later"
        this._title.text = `Ray-day`;
        this._bodyContent.text = `Update has been downloaded and is ready to be installed.`;
        this._ClearHandles();
        this.CreateHandle({text:`Install now !`, trigger:{ fn:this._Close}});
        this.CreateHandle({text:`Later.`, trigger:{ fn:this._Close}});
    }

    //--->

    _Clear(){        
        super._Clear();
    }

    _CleanUp(){
        super._CleanUp();
    }
}

module.exports = AutoUpdateDialogBox;
UI.Register('ui-auto-update-dialog-box', AutoUpdateDialogBox);
},{"../../@.js":6,"../../app-messages.js":20,"../../environment.js":94,"../../ui.js":242,"./dialog-box.js":162,"electron":359}],162:[function(require,module,exports){
'use strict';

const { U } = require(`../../@.js`);
const { Widget, Textfield } = require(`../../ui-core/@.js`);
const Input = require(`../../ui-controls/input.js`);
const UI = require(`../../ui.js`);
const DialogInfos = require(`../../data-app/dialog-infos.js`);
const { Dictionary, List } = require(`../../collections/@.js`);

const APP_UI_EVENT = require(`../app-ui-event.js`);
const INPUT_EVENT = require(`../../ui-controls/input-event.js`);

const DialogToolbar = require(`./dialog-toolbar.js`);
const { H2 } = require(`../textfields.js`);
const Icon = require(`../icon.js`);
const InputFormHandler = require(`../../ui-controls/input-form-handler.js`);

class DialogBox extends Widget{
    constructor(){super();}

    _Init(){
        super._Init();

        this._formHandler = new InputFormHandler();
        this._formHandler.Subscribe(INPUT_EVENT.FORM_INVALID, this, this._OnFormInvalid);
        this._formHandler.Subscribe(INPUT_EVENT.FORM_READY, this, this._OnFormReady);

        this._titleClass = H2;
        this._title = null;

        this._icon = null;
        this._header = null;
        this._body = null;
        this._footer = null;

        this._hasInput = false;

        this._handles = new Array(0);
        this._contents = new Array(0);
        this._submitMap = new Dictionary();
        this._submitList = new List();

        this._toolbarClass = DialogToolbar;
        this._toolbar = null;

        this._Bind(this._Close);
        this._Bind(this._Submit);

    }

    _InitColors(){
        super._InitColors();
        //var c = `rgba(215,215,215,1)`;
        var c = `rgba(44,44,44,1)`;
        this.SEC(UI.elBG,
            UI.sIDLE, c,
            UI.sDISABLED, c,
            UI.sFOCUS, c,
            UI.sSELECT, c,
            UI.sFS, c);
    }

    _RenderStyle(){
        var br = 5;
        return U.Merge(super._RenderStyle(),{
            ':host':{
                display:`flex`,
                'flex-flow':`column`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'justify-content':`center`,
                'border-radius':`${br}px`,
                filter: `drop-shadow(0px 5px 5px rgba(0,0,0,0.2))`,
                overflow:'hidden'
            },
            '.group':{
                padding:`20px`,
            },
            '.header':{
                flex:`0 0 auto`,
                'z-index':50,
                //'background-color':`rgba(0,0,0,0.1)`
            },
            '.footer':{
                display:`flex`,
                'flex-flow':`column`,
                'align-content':`flex-end`,
                'align-items':`flex-end`,

                flex:`0 0 auto`,

                'padding-top':`10px`,
                'padding-bottom':`10px`,

                'border-top':`1px solid rgba(127,127,127,0.2)`,
                'background-color':`rgba(0,0,0,0.2)`,
                //'box-shadow' : `inset 0px -50px 50px rgba(0,0,0,0.2)`,
                'border-bottom-left-radius':`${br}px`,
                'border-bottom-right-radius':`${br}px`,
            },
            '.toolbar':{
                flex:`0 0 auto`,
            },
            '.body':{
                //'overflow-y':`overlay`,
                flex:`1 1 auto`,
                padding:`20px`,
                'padding-top':`0px`,
                //'box-shadow':`inset 0px 11px ${shadowSize}px -10px ${shadowColor}, inset 0px -11px ${shadowSize}px -10px ${shadowColor}`,
            },
            '.item':{
                'margin-top':`5px`,
                'margin-bottom':`5px`
            },
            '.icon':{
                position:`absolute`,
                right:`20px`,
                top:`20px`,
                opacity:0.5
            },

            '.body::-webkit-scrollbar-track':{
                'background-color':`rgba(127,127,127,0.05)`,
            },
            '.body::-webkit-scrollbar':{
                width: `2px`,
                height: `2px`,
                'background-color': `rgba(127,127,127,0.05)`
            },
            '.body::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.05)',
            },
            '.body:hover::-webkit-scrollbar':{
                width: `4px`,
                height: `4px`,
            },
            '.body:hover::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.15)',
            }
        });
    }

    _Render(){
        //this._background = U.Element(`div`, {class:`bg`}, this._host);
        this._icon = this.Add(Icon, -1, this._host, `icon`);
        this._header = U.Element(`div`, {class:`group header`}, this._host);
        this._body = U.Element(`div`, {class:`group body`}, this._host);
        this._footer = U.Element(`div`, {class:`group footer`}, this._host);
        this._toolbar = this.Add(this._toolbarClass, -1, this._footer, `toolbar`);

        this._title = this.Add(this._titleClass, -1, this._header, `title`);
        //this._title.color = `#6f6f6f`;
        this._icon.Set(`%ICON%/icon_error.svg`);
        this._icon.scale = 5;
        this._icon.rotation = 15;
    }

    _OnDataUpdated(p_data){


        /* DATA FORMAT

        {
            //Dialog title
            title:`Dialog title`, 

            //Dialog message
            message:`Dialog message` //Optional

            //Dialog icon
            icon:`%ICON%/icon_info.svg`, //Optional

            //Dialog actions
            //displayed at the bottom of the dialog.
            actions:[
                {
                    //Regular button options goes here 
                    //Extra parameter stating whether the button closes the popup or not
                    close:true,
                    //Extra submit callback definition to retrieve form values, if any
                    submit:{ fn:func, thisArg:context }
                }
            ]

            //Dialog content
            //Will create widgets in order.
            content:[
                {
                    //Regular item
                    cl:ItemClass
                },
                {
                    //Input item
                    cl:ItemClass,
                    inputId:`inputId`,
                    validations:[
                        { fn:func, thisArg:context }
                    ]
                }
            ]

        }

        */


        this._Clear();

        var nfos = this._data;

        if(!nfos){ return; }

        if(!U.IoF(nfos, DialogInfos)){
            throw new Error(`DialogLayer expect data of type DialogInfos, got ${this._data.constructor.name} instead.`);
        }

        this._title.text = nfos.title;

        //Build controls

        var actions = nfos.actions;
        var opts = null;

        if(actions){
            var handle = null;
            for(var i =0, n = nfos.actions.length; i < n; i++){
                opts = nfos.actions[i];
                handle = this.CreateHandle(opts, U.Get(opts, `cl`, null));
            }
        }

        //Build content

        //Is there a message ?
        if(nfos.message){
            var msg = this.Add( Textfield, -1, this._body, 'item message' );
            msg.text = nfos.message;
            this._contents.push(msg);
        }

        //Is there a list of things to build ?
        var contentList = nfos.content;
        
        if(contentList){

            if(!Array.isArray(contentList)){ 
                throw new Error(`Cannot build dialog content list out of ${contentList}`); }
            
            var itemNfos;
            var itemClass;
            var itemData;

            for(var i = 0, n = contentList.length; i < n; i++){

                itemNfos = contentList[i];
                itemClass = itemNfos.cl;
                itemData = itemNfos.data;

                if(!itemClass){ 
                    throw new Error(`Cannot create item with unspecified class.`); }

                var item = this.Add(itemClass, -1, this._body, `item`);
                
                if(U.IoF(itemClass, Input)){
                    
                    item.inputId = itemNfos.inputId;
                    
                    if(itemNfos.value){ 
                        item.currentValue = itemNfos.value; 
                    }

                    var validations = itemNfos.validations;
                    if(validations){
                        for(var i = 0, n = validations.length; i < n; i++){
                            item.AddValidation(validations[i]);
                        }
                    }
                    this._formHandler.Register(item);                    
                }
    
                if(itemData){ item.data = itemData; }

                this._contents.push(item);
            }

        }

        this._hasInput = ( this._formHandler._inputList.count > 0 );
        
        if(this._hasInput){
            this._formHandler.ValidateForm();
        }

        if(!actions){
            //If no action is set, create a close button by default.
            this.CreateHandle({text:`Close`});
        }

        this._icon.Set(nfos.GetOption(`icon`, `%ICON%/icon_info.svg`));

        
    }

    //----> Toolbox handles

    _ClearHandles(){
        var handles = this._handles;        
        while(handles.length != 0){
            handles.pop().Release();
        }
    }

    CreateHandle( p_options, p_class = null ){

        var handle = this._toolbar.CreateHandle(p_options, p_class);
        this._handles.push(handle);

        if(U.Get(p_options, `submit`, false)){
            //TODO : Need to add a generic 'triggered' activation event
            //to close the dialog box. Otherwise, close by default.
            this._submitMap.Set(handle, p_options.submit);
            this._submitList.Add(handle);
            handle.On(APP_UI_EVENT.TRIGGERED, this._Submit);
        }

        if(U.Get(p_options, `close`, true)){
            //TODO : Need to add a generic 'triggered' activation event
            //to close the dialog box. Otherwise, close by default.
            handle.On(APP_UI_EVENT.TRIGGERED, this._Close);
        }

        return handle;

    }

    //---> Form handling

    _OnFormInvalid(p_handler){
        this._submitList.ForEach((p_item)=>{ p_item.activable = false; });
    }

    _OnFormReady(p_handler){
        this._submitList.ForEach((p_item)=>{ p_item.activable = true; });
    }

    //--->

    _Close(){
        this._data.Consume();
    }

    _Submit(p_source){
        var cb = this._submitMap.Get(p_source);
        cb.fn.call(cb.thisArg, this._formHandler.inputValues);
    }

    _Clear(){        

        this._submitMap.Clear();
        this._submitList.Clear();
        this._formHandler.Clear();
        this._ClearHandles();

        for(var i = 0, n = this._contents.length; i < n; i++){
            this._contents[i].Release();
        }

        this._hasInput = false;
        this._contents.length = 0;

    }

    _CleanUp(){
        this._Clear();
        super._CleanUp();
    }
}

module.exports = DialogBox;
UI.Register('ui-dialog-box', DialogBox);
},{"../../@.js":6,"../../collections/@.js":22,"../../data-app/dialog-infos.js":40,"../../ui-controls/input-event.js":199,"../../ui-controls/input-form-handler.js":201,"../../ui-controls/input.js":203,"../../ui-core/@.js":223,"../../ui.js":242,"../app-ui-event.js":150,"../icon.js":172,"../textfields.js":180,"./dialog-toolbar.js":165}],163:[function(require,module,exports){
'use strict';

const { U } = require(`../../@.js`);
const { Layer } = require(`../../ui-core/@.js`);
const UI = require(`../../ui.js`);
const DialogInfos = require(`../../data-app/dialog-infos.js`);
const DialogBox = require(`./dialog-box.js`);

class DialogLayer extends Layer{
    constructor(){super();}

    _Init(){
        super._Init();

        this._background = null;
        this._msgBox = null;

    }
    
    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                display:`flex`,
                'flex-flow':`row`,
                'align-content':`center`,
                'align-items':`center`,
                'justify-content':`center`,
            },
            '.bg':{
                position:`absolute`,
                top:`0px`,
                left:`0px`,
                width:`100%`,
                height:`100%`,
                'background-color':`rgba(23,23,23,0.3)`,
                'backdrop-filter': `blur(5px)`,
            },
            '.box':{
                flex:`1 1 auto`,
                'max-width':`500px`,
            }
        });
    }

    _Render(){
        this._background = U.Element(`div`, {class:`bg`}, this._host);
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);
        //TODO : Check if DialogInfos has a preferred dialogBox class set
        if(this._msgBox){
            this._msgBox.Release();
            this._msgBox = null;
        }

        if(!this._data){ return; }

        var nfos = this._data;

        if(!U.IoF(nfos, DialogInfos)){
            throw new Error(`DialogLayer expect data of type DialogInfos, got ${this._data.constructor.name} instead.`);
        }

        var boxClass = U.Default(nfos.dialogClass, DialogBox);
        this._msgBox = this.Add(boxClass, -1, this._host, 'box');
        this._msgBox.data = nfos;

    }

}

module.exports = DialogLayer;
UI.Register('ui-dialog-view', DialogLayer);
},{"../../@.js":6,"../../data-app/dialog-infos.js":40,"../../ui-core/@.js":223,"../../ui.js":242,"./dialog-box.js":162}],164:[function(require,module,exports){
const UI = require(`../../ui.js`);
const { U } = require(`../../@.js`);
const { Dictionary } = require(`../../collections/@.js`);
const DialogInfos = require(`../../data-app/dialog-infos.js`);
const LayerContainer = require(`../../ui-core/layer-container.js`);
const APP_REQUEST = require(`../../app-request.js`);
const DialogLayer = require(`./dialog-layer.js`);

class DialogManager extends LayerContainer{
    constructor(){super();}

    _Init(){
        super._Init();
        this._RegisterLocalRequestHandler(APP_REQUEST.DIALOG, this.HandleDialogRequest);
        this._layerMap = new Dictionary();
    }

    _PostInit(){
        super._PostInit();
        this.visible = false;
    }

    _RenderStyle(){
        var s = U.Merge(super._RenderStyle(),{
            ':host':{
                'pointer-events':'none',
            },
            '.layer':{
                'pointer-events':'auto',
            }
        });
        s[this._layerClassName]['pointer-events'] = 'auto';
        return s;
    }

    HandleDialogRequest(p_request){

        this.BringToFront();

        this.visible = true;

        var dialogInfos = p_request.GetOption(`data`, null);

        if(!dialogInfos){
            throw new Error(`Cannot build dialog from empty DialogInfos`);
        }

        var newLayer = this.Add(DialogLayer, -1);
        newLayer.data = dialogInfos;        

        dialogInfos.Subscribe(DialogInfos.CONSUMED, this, this._OnDialogConsumed);
        this._layerMap.Set(dialogInfos, newLayer);

        p_request.HandleSuccess(this);

    }

    _OnDialogConsumed(p_infos){
        var layer = this._layerMap.Get(p_infos);
        this._layerMap.Remove(p_infos);
        layer.Release();
    }

    _CleanUp(){
        super._CleanUp();
        this.visible = false;
    }

}

module.exports = DialogManager;
UI.Register(`ui-dialog-manager`, DialogManager);
},{"../../@.js":6,"../../app-request.js":21,"../../collections/@.js":22,"../../data-app/dialog-infos.js":40,"../../ui-core/layer-container.js":234,"../../ui.js":242,"./dialog-layer.js":163}],165:[function(require,module,exports){
'use strict';

const { U } = require(`../../@.js`);
const UI = require(`../../ui.js`);

const Toolbar = require(`../toolbar.js`);
const Button = require(`../button.js`);

class DialogToolbar extends Toolbar {
    constructor() {super();}

    //---> Init

    _Init()
    {
        super._Init();
        this._defaultButtonClass = Button;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                padding:`0px`,
            }
        });
    }

}

module.exports = DialogToolbar;
UI.Register(`ui-dialog-toolbar`, DialogToolbar);
},{"../../@.js":6,"../../ui.js":242,"../button.js":157,"../toolbar.js":183}],166:[function(require,module,exports){
'use strict';

const { U, C } = require(`../@.js`);

const { POOL } = require(`../collections/@.js`);
const { UI_EVENT, UI_FLAGS, OrientedWidget, View } = require(`../ui-core/@.js`);
const { COLLECTION_EVENT, Dictionary, CatalogHandler } = require(`../collections/@.js`);

const UI = require(`../ui.js`);

const APP_UI_FLAGS = require(`./app-ui-flags.js`);
const ToolButton = require(`./button-tool.js`);
const Toolbar = require(`./toolbar.js`);


const _evt_contronActivated       = Symbol(`controlActivated`);

class DrawerControls extends OrientedWidget {
    constructor() {super();}

    static get CONTROL_ACTIVATED(){ return _evt_contronActivated; }

    //---> Init

    _Init(){

        super._Init();

        this._controlsMap = new Dictionary();
        this._controlsCtnr = null;

        this._defaultControlClass = ToolButton;
        this._currentControl = null;

        this._currentView = null;

        this._toolbarClass = Toolbar;
        this._toolbar = null;

        this._hScrollEnabled = true;
        this._orientation = C.VERTICAL;

    }

    //---> Orientation
    
    _OnOrientationChanged(){
        super._OnOrientationChanged();
        this._toolbar.orientation = this._orientation;
    }

    get currentHandle(){ return this._currentControl; }

    //---> Rendering

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0)`,
            UI.sFOCUS, `rgba(127,127,127,0.2)`,
            UI.sSELECT, `rgba(127,127,127,0.3)`,
            UI.sFS, `rgba(127,127,127,0.5)`);
    }
    
    _RenderStyle(){

        var ss = 5;
        var shadowColor = `rgba(0,0,0,0.5)`;

        return {
            ':host':{
                position:`relative`,
                display: `flex`,
                
                'align-content':`flex-start`,
                'align-items':`center`,

            },
                ':host(.vertical)':{
                    'flex-flow':`column`,
                },
                ':host(.horizontal)':{
                    'flex-flow':`row nowrap`,
                },

            '.control-ctnr':{
                position:`relative`,
                display: `flex`,
                'align-content':`flex-start`,
                'align-items':`flex-start`,

                flex:`1 1 auto`,
                
            },
                '.control-ctnr.vertical':{
                    'overflow-x':`hidden`,
                    'overflow-y':`overlay`,

                    'flex-flow':`row wrap`,
                    'justify-content':`center`,

                    'width':`100%`,
                    'box-shadow':`inset 0px ${ss}px ${ss}px -${ss}px ${shadowColor}, 
                    inset 0px -${ss}px ${ss}px -${ss}px ${shadowColor}`,
                },
                
                '.control-ctnr.horizontal':{
                    'overflow-x':`overlay`,
                    'overflow-y':`hidden`,

                    'flex-flow':`column wrap`,
                    'justify-content':`flex-start`,

                    'height':`100%`,
                    'box-shadow':`inset ${ss}px 0px ${ss}px -${ss}px ${shadowColor}, 
                    inset -${ss}px 0px ${ss}px -${ss}px ${shadowColor}`,
                },


            '.control':{
                position:`relative`,
                flex:`0 0 auto`,
                overflow:`hidden`
            },

            '.control:after':{
                transition: `all 0.15s ease`,
                content:`""`, position:`absolute`, width:`2px`, height:`2px`,
                'background-color':`rgba(${C.COLORS.main}, 1)`, opacity:0
            },
            '.control:hover:after':{
                width:`4px`, height:`4px`,
                opacity:0.2
            },
            '.control.selected:after':{
                opacity:0.5
            },
            ':host(.horizontal) .control:after':{
                width:`100%`, 
                bottom:`0px`
            },
            ':host(.vertical) .control:after':{
                height:`100%`, 
                right:`0px`
            },

            '.toolbar':{
                position:`relative`,
                flex:`0 0 auto`,
            },
                '.toolbar.vertical':{
                    width:`100%`,
                },
                '.toolbar.horizontal':{
                    height:`100%`,
                },

            '.control-ctnr::-webkit-scrollbar-track':{
                'background-color':`rgba(127,127,127,0.05)`,
            },
            '.control-ctnr::-webkit-scrollbar':{
                width: `2px`,
                height: `2px`,
                'background-color': `rgba(127,127,127,0.05)`
            },
            '.control-ctnr::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.05)',
            },
            '.control-ctnr:hover::-webkit-scrollbar':{
                width: `4px`,
                height: `4px`,
            },
            '.control-ctnr:hover::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.15)',
            }
        };

    }

    _Render(){
        
        this._controlsCtnr = U.Element(`div`, {class:`control-ctnr`}, this._host);
        this.RegisterClassToggle(this._controlsCtnr, C.HORIZONTAL, C.VERTICAL);        

        this._toolbar = this.Add(this._toolbarClass, -1, this, `toolbar`);
        this._toolbar.orientation = this._orientation;
        this._toolbar._defaultControlClass = this._defaultControlClass;

        this.RegisterClassToggle(this._toolbar, C.HORIZONTAL, C.VERTICAL);

        this._wrapper = this._controlsCtnr;

    }

    //---> Catalog Items handling

    GetControl(p_item){
        return this._controlsMap.Get(p_item);
    }

    RequestControl(p_item, p_index = -1){

        var handle = this.GetControl(p_item);
        if(handle){return handle;}
        
        handle = this.Add(p_item.GetOption('handleClass', this._defaultControlClass), p_index, null, `control`);
        handle.data = p_item;
        handle.htitle = p_item.name;
        this._controlsMap.Set(p_item, handle);
        handle.Subscribe(UI_EVENT.ACTIVATED, this, this._OnControlActivated);

        return handle;

    }

    RemoveControl(p_item){

        var handle = this._controlsMap.Get(p_item);

        if(!handle){return;}

        this._controlsMap.Remove(p_item);
        //this.Remove(handle);
        handle.Release();

        return handle;

    }

    _OnControlActivated(p_handle){
        this._Notify(DrawerControls.CONTROL_ACTIVATED, this, p_handle);
    }
   

    //---> Pooling

    _CleanUp(){
        this._controlsMap.Clear();
        super._CleanUp();
    }

}
const _evt_viewCreated       = Symbol(`viewCreated`);
const _evt_empty       = Symbol(`empty`);

class Drawer extends View {
    constructor() {super();}

    static get VIEW_CREATED(){ return _evt_viewCreated; }
    static get EMPTY(){ return _evt_empty; }

    //---> Init

    _Init(){
        super._Init();

        this._empty = true;
        this._emptyViewClass = null;
        this._emptyView = null;

        this._orientation = C.VERTICAL;

        var cHandler = new CatalogHandler();
        cHandler.Subscribe(COLLECTION_EVENT.ITEM_ADDED, this, this._OnCatalogItemAdded);
        cHandler.Subscribe(COLLECTION_EVENT.ITEM_REMOVED, this, this._OnCatalogItemRemoved);

        this._catalogHandler = cHandler;

        this._controlsClass = U.Default(this._controlsClass, DrawerControls);
        this._controls = null;
        this._viewCtnr = null;

        this._currentControl = null;

        this.RegisterClassToggle(this, APP_UI_FLAGS.FIXED_SIZE);

    }

    _PostInit(){
        super._PostInit();
        this._controls.Subscribe(DrawerControls.CONTROL_ACTIVATED, this, this._OnControlActivated);

        if(this._emptyViewClass){
            this._emptyView = this.Add(this._emptyViewClass, -1, this._viewCtnr, `view`);
            this.currentView = this._emptyView;
        }

    }

    //---> Orientation

    _OnOrientationChanged(){
        super._OnOrientationChanged();
        this._controls.orientation = this._orientation;
    }

    //---> Rendering

    _RenderStyle(){

        return {
            ':host':{
                position:`relative`,
                flex:`1 1 auto`,
                //margin:`1px`,

                display:`flex`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'background-color':`rgba(0,0,0,0.1)`,

                'min-width': 0,                
            },
                ':host(.vertical)':{
                    'flex-direction':`row`,
                },
                ':host(.horizontal)':{
                    'flex-direction':`column`,
                },

            '.controls':{
                position:`relative`,
                flex:`0 0 auto`,
                'background-color':`rgba(127,127,127,0.1)`,
            },
                '.controls.vertical':{
                    width:`50px`,
                    height:`100%`,
                },
                '.controls.horizontal':{
                    height:`50px`,
                    width:`100%`
                },

            '.view-ctnr':{
                position:`relative`,
                flex:`1 1 auto`,
                'background-color':`rgba(0,0,0,0.1)`,

                display:`flex`,
                'align-content':`stretch`,
                'align-items':`stretch`,

                overflow:`hidden`
            },
            '.view':{
                position:`relative`,
                flex:`1 1 auto`
                //outline:`1px rgba(255,0,0,0.5) solid`,
                //'outline-offset':`-1px`
            }
        };
    }

    _Render(){
        super._Render();
        this._controls = this.Add(this._controlsClass, -1, this, `controls`);
        this._viewCtnr = U.Element(`div`, {class:`view-ctnr`}, this._host);
    }

    get currentControl(){ return this._currentControl; }
    set currentControl(p_value){

        if(this._currentControl == p_value){return;}
        var oldValue = this._currentControl;
        this._currentControl = p_value;

        if(oldValue){
            oldValue.Select(false);
        }
        if(p_value){
            p_value.Select(true);
        }

        this._OnCurrentControlChanged(oldValue);

    }

    _OnCurrentControlChanged(p_oldTab){
        
        var d = this._currentControl ? this._currentControl.data : null;

        if(!d){return;}

        var view = d.GetOption(`view`, null);
        
        if(!view){return;}

        if(this.currentView != view){
            view.RequestFocus();
        }

    }

    get currentView(){ return this._currentView; }
    set currentView(p_value){

        if(this._currentView == p_value){return;}
        var oldValue = this._currentView;
        this._currentView = p_value;

        if(oldValue){
            oldValue.visible = false;
        }
        if(p_value){
            p_value.visible = true;
        }

        this._OnCurrentViewChanged(oldValue);

    }

    GetViewItem(p_view){
        var c = this._catalogHandler;
        var view = null;

        for(var i = 0, n = c.count; i < n; i++){
            view =c.GetBindingAt(i);
            if(view == p_view){
                return c.At(i);
            }
        }

        return null;
    }

    GetItemView(p_item){
        return this._catalogHandler.GetBinding(p_item);
    }

    _OnCurrentViewChanged(p_oldTab){
        var view = this._currentView;
        if(!view){
            this.currentControl = null;
        }else{
            this.currentControl = this._controls.GetControl(this.GetViewItem(view));
            if(U.IoF(view, View)){ view.FocusGranted(); }
        }
    }

    _OnControlActivated(p_nav, p_control){
        var binding = this._catalogHandler.GetBinding(p_control.data);
        if(!binding || !(`RequestFocus` in binding)){return;}

        binding.RequestFocus();
    }


    //---> Catalog Management

    get catalog(){return this._catalogHandler.catalog;}
    set catalog(p_value){
        this._catalogHandler.catalog = p_value;
    }
    
    
    
    _OnCatalogItemAdded(p_catalogHandler, p_item){
        
        var control = this._controls.RequestControl(p_item);
        var view = p_item.GetOption(`view`, null);

        if(!view){
            //If no view exists, create one
            var viewClass = p_item.GetOption(`viewClass`, null);
            if(!viewClass){ throw new Error(`Drawer's item has no viewClass set.`); }
            view = this.Add(viewClass, -1, this._viewCtnr, `view` );
        }else{
            this.Add(view, -1, this._viewCtnr, `view` );
        }
        
        view.visible = false;    
        p_item.SetOption(`view`, view);    
        p_catalogHandler.BindItem(p_item, view);

        this._OnViewCreated(p_item, control, view);
        this._Notify(Drawer.VIEW_CREATED, this, view, control );

    }

    _OnViewCreated(p_item, p_control, p_view){

        
        if(this._empty){
            this._OnDrawerNonEmpty();
            this._OnViewRequestFocus(p_view);
        }

        p_view.Subscribe(UI_EVENT.FOCUS_REQUESTED, this, this._OnViewRequestFocus);
        
        //Assign data to newly created view
        var data = p_item.data;
        if(!data){return;}
        p_view.data = data;

    }

    _OnCatalogItemRemoved(p_catalogHandler, p_item, p_binding){

        var control = this._controls.RemoveControl(p_item);
        if(p_binding){ 
            this._OnViewRemoved(p_item, control, p_binding);
            if(p_binding.parent == this){
                p_binding.Release();
            }
        }

    }

    _OnViewRemoved(p_item, p_control, p_view){

        p_view.Unsubscribe(UI_EVENT.FOCUS_REQUESTED, this, this._OnViewRequestFocus);

        if(p_view == this.currentView || p_control == this.currentControl){
            this.currentControl = null;
            this.currentView = null;

            var cat = this._catalogHandler.catalog;
            if(cat.count == 0){
                this._OnDrawerEmpty();
            }else{
                p_control = this._controls.GetControl(cat.At(0));
                this.currentControl = p_control;
            }
        }
        
    }

    _OnDrawerEmpty(){
        this._empty = true;
        this._Notify(Drawer.EMPTY, this);
        console.log(this._emptyView);
        this.currentView = this._emptyView;
    }

    _OnDrawerNonEmpty(p_view){
        this._empty = false;
    }

    _OnViewRequestFocus(p_view){
        this.currentView = p_view;
    }



    //---> Pooling

    _CleanUp()
    {
        super._CleanUp();
    }

    

}

module.exports = {
    DrawerControls : DrawerControls,
    Drawer : Drawer
};

UI.RegisterGroup({
    'ui-drawer-controls':DrawerControls,
    'ui-drawer':Drawer
});

},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./app-ui-flags.js":151,"./button-tool.js":156,"./toolbar.js":183}],167:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const Explorer = require(`./explorer.js`);
const UI = require(`../ui.js`);

class TileExplorer extends Explorer{
    constructor(){super();}

    //---> Rendering

    _RenderStyle(){

        return U.Merge(super._RenderStyle(),{
            '.body':{
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,
            },
            '.group':{
                position:`relative`,
                flex:`1 1 auto`,
            },
            'tile-ctnr':{
                position:`relative`,
                flex:`1 1 auto`,
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-content':`flex-start`,
                'align-items':`flex-start`,
            }
        });
    }
}

module.exports = TileExplorer;
UI.Register('ui-tile-explorer', TileExplorer);
},{"../@.js":6,"../ui.js":242,"./explorer.js":168}],168:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { View } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

class Explorer extends View{
    constructor(){super();}

    _Init(){
        super._Init();

        this._header = null;
        this._body = null;
        this._footer = null;        
    }

    get header(){return this._header;}
    get body(){ return this._body; }
    get footer(){return this._footer;}

    //---> Rendering

    _RenderStyle(){

        var shadowSize = 5;
        var shadowColor = `rgba(0,0,0,0.5)`;
        return {
            ':host':{
                position:`relative`,
                flex:`1 1 auto`,
                'min-width': 0,
                
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'background-color':`rgba(1,1,1,0.1)`,
            },
            '.group':{
                position:`relative`,
                flex:`1 0 auto`,
            },
            '.header':{
                flex:`0 0 auto`,
            },
            '.footer':{
                flex:`0 0 auto`,
            },

            '.highlight':{
                'background-color':`#ff0000`
            },
            '.body':{
                'overflow-y':`overlay`,
                'min-width': 0,
                flex:`1 1 1px`,
                'box-shadow':`inset 0px 11px ${shadowSize}px -10px ${shadowColor}, inset 0px -11px ${shadowSize}px -10px ${shadowColor}`,
            },
            '.body::-webkit-scrollbar-track':{
                'background-color':`rgba(127,127,127,0.05)`,
            },
            '.body::-webkit-scrollbar':{
                width: `2px`,
                height: `2px`,
                'background-color': `rgba(127,127,127,0.05)`
            },
            '.body::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.05)',
            },
            '.body:hover::-webkit-scrollbar':{
                width: `4px`,
                height: `4px`,
            },
            '.body:hover::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.15)',
            }
        };
    }

    _Render(){
        this._header = U.Element(`div`, {class:`header group`}, this._host);
        this._body = U.Element(`div`, {class:`body group`}, this._host);
        this._footer = U.Element(`div`, {class:`footer group`}, this._host);
        this._wrapper = this._body;
    }

}

module.exports = Explorer;
UI.Register('ui-explorer', Explorer);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242}],169:[function(require,module,exports){
'use strict';

const { U, APP_REQUEST } = require(`../@.js`);
const { UI_FLAGS, DisplayObjectContainer, Textfield } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const APP_UI_FLAGS = require(`./app-ui-flags.js`);
const Icon = require(`./icon.js`);


/**
 * 
 *  *--------------------------------*
 *  | [] Item Name            [][][] |
 *  *--------------------------------*
 * 
 */

class Facade extends DisplayObjectContainer {
    constructor() {super();}

    //---> Init

    _Init()
    {

        super._Init();  

        this._textfieldClass = Textfield;
        this._textfield = null;

        this._iconClass = Icon;
        this._iconSize = 20;
        this._icon = null;

    }
    
    //---> Rendering

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0)`,
            UI.sFOCUS, `rgba(127,127,127,0)`,
            UI.sSELECT, `rgba(127,127,127,0)`,
            UI.sFS, `rgba(127,127,127,0)`);
    }

    _RenderStyle()
    {
        return {
            ':host':{
                transition: `all 0.15s ease`,
                position:`relative`,

                display:`flex`,
                'flex-flow':`row nowrap`,
                'align-items':`center`,
                'align-content':`flex-start`,

                
                padding:`2px`,
                'padding-left':`4px`,
                'padding-right':`4px`,
                'min-width': 0,
            },

            '.icon':{
                'margin-right':`5px`,
                flex:`0 0 auto`
            },
            '.icon.no-icon':{ display:`none` },
            ':host(.no-label) .icon':{ 'margin-right':`0px`, },

            '.tf':{
                flex:`0 1 auto`,
                'min-width': 0,
                'margin-right':`3px`
            },
            '.tf.no-label':{ display:`none` },


            ':host(.focused)':{

            },
            ':host(.focused) .toolbar':{

            },
            ':host(.selected)':{

            },
            ':host(.selected.focused)':{
                
            }
        };
    }

    _Render()
    {        

        this.RegisterClassToggle(this, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED, APP_UI_FLAGS.NO_ICON, APP_UI_FLAGS.NO_LABEL);
        
        this._icon = this.Add(this._iconClass, -1, this, `icon`);
        this._icon.size = this._iconSize;
        this.RegisterClassToggle(this._icon, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED, APP_UI_FLAGS.NO_ICON);

        this._textfield = this.Add(this._textfieldClass, -1, this, `tf`);
        this._textfield.ellipsis = true;
        this.RegisterClassToggle(this._textfield, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED, APP_UI_FLAGS.NO_LABEL);

    }

    set data(p_value){
        this.icon = U.Get(p_value, `icon`, ``);
        if(!this.label.displayID){
            this.text = U.Get(p_value, `name`, ``);
        }
    }

    get icon(){return this._icon;}
    set icon(p_iconPath){
        if(typeof p_iconPath != 'string' && p_iconPath != null){
            console.warn(p_iconPath);
        }
        this.SetFlag(APP_UI_FLAGS.NO_ICON, U.Empty(p_iconPath));
        this._icon.Set(p_iconPath);
    }

    get label(){return this._textfield;}

    set text(p_string){
        
        if(this._textfield.visible){
            this.SetFlag(APP_UI_FLAGS.NO_LABEL, U.Empty(p_string));    
        }else{
            this.SetFlag(APP_UI_FLAGS.NO_LABEL, true);    
        }
        
        this._textfield.text = p_string;

    }
    get text(){return this._textfield.text;}

    //---> Pooling

    _CleanUp()
    {
        this.text = ``;
        this.icon = null;
        super._CleanUp();
    }

    

}

module.exports = Facade;
UI.Register(`ui-facade`, Facade);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242,"./app-ui-flags.js":151,"./icon.js":172}],170:[function(require,module,exports){
'use strict';

const UI = require(`../ui.js`);
const { H1, H2, H3, H4, Label } = require(`./textfields.js`);
const Facade = require(`./facade.js`);

class FacadeH1 extends Facade { constructor() {super();}
    _Init(){super._Init();
        this._textfieldClass = H1;
        this._iconSize = 30;
    }
}

class FacadeH2 extends Facade { constructor() {super();}
    _Init(){super._Init();
        this._textfieldClass = H2;
        this._iconSize = 30;
    }
}

class FacadeH3 extends Facade { constructor() {super();}
    _Init(){super._Init();
        this._textfieldClass = H3;
        this._iconSize = 24;
    }
}

class FacadeH4 extends Facade { constructor() {super();}
    _Init(){super._Init();
        this._textfieldClass = H4;
        this._iconSize = 24;
    }
}

class FacadeLabel extends Facade { constructor() {super();}
    _Init(){super._Init();
        this._textfieldClass = Label;
        this._iconSize = 24;
    }
}


module.exports = { 
    FacadeLabel : FacadeLabel,
    FacadeH1 : FacadeH1,
    FacadeH2 : FacadeH2,
    FacadeH3 : FacadeH3,
    FacadeH4 : FacadeH4
};

UI.RegisterGroup({
    'facade-label':FacadeLabel,
    'facade-h1':FacadeH1,
    'facade-h2':FacadeH2,
    'facade-h3':FacadeH3,
    'facade-h4':FacadeH4
});
},{"../ui.js":242,"./facade.js":169,"./textfields.js":180}],171:[function(require,module,exports){
const { U, C } = require(`../@.js`);
const { POOL, Dictionary } = require(`../collections/@.js`);
const { OrientedWidget } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const _evt_groupCreated       = Symbol(`groupCreated`);

class Group extends OrientedWidget{
    constructor(){super();}

    static get GROUP_CREATED(){ return _evt_groupCreated; }

    _Init(){
        super._Init();
        this._header = null;
        this._footer = null;

        this._groupMap = new Dictionary();
        this._groupList = new Array(0);

    }

    get header(){return this._header;}
    get body(){ return this._wrapper; }
    get footer(){return this._footer;}

    _RenderStyle(){
        return {
            ':host':{
                position:`relative`,
                display:`flex`,
                flex:`1 1 auto`,
                'margin-bottom':`20px`
            },
            '.header':{
                position:`relative`,
                flex:`0 0 auto`
            },
            '.footer':{
                position:`relative`,
                flex:`0 0 auto`
            },
            '.body':{
                position:`relative`,
                display:`flex`,
                flex:`1 1 auto`,
            },
            ':host(.horizontal) .body':{
                'flex-flow':`row wrap`,
                'align-content':`flex-start`,
                'align-items':`flex-start`,
            },
            ':host(.vertical) .body':{
                'flex-flow':`column nowrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,
            }
            
        }
    }

    _Render(){
        this._header = U.Element(`div`, {class:`header`}, this._host);
        this._wrapper = U.Element(`div`, {class:`body`}, this._host);
        this._footer = U.Element(`div`, {class:`footer`}, this._host);
    }

    _GetOrCreateGroup(p_key, p_flags = null, p_class = null){
        p_class = U.Default(p_class, Group);
        var group = this._groupMap.Get(p_key);
        if(!group){
            
            group = this.Add(p_class, -1, this._viewport.wrapper, `group tile-ctnr`);
            this._groupMap.Set(p_key, group);
            this._groupList.push(group);

            if(p_flags){
                for(var member in p_flags){
                    group.SetFlag(member, p_flags[member]);
                }
            }

            this._OnGroupCreated(p_key, group);
            this._Notify(Group.GROUP_CREATED, this, group);
        }        
        return group;
    }

    _OnGroupCreated(p_key, p_group){

    }

    _ClearGroup(p_key){
        var group = this._groupMap.Get(p_key);
        if(group){
            var index = this._groupList.indexOf(group);
            this._groupList.splice(index, 1);
            this._groupMap.Remove(p_key);
            group.Release();
        }   
    }

    _ClearAllGroups(){
        this._groupMap.Clear();
        var list = this._groupList;
        for(var i = 0, n = list.length; i < n; i++){
            list[i].Release();
        }
        list.length = 0;
    }

    _CleanUp(){
        super._CleanUp();
        this._ClearAllGroups();
    }
    
}

module.exports = Group;
UI.Register('ui-group', Group);
},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242}],172:[function(require,module,exports){
'use strict';

const { U, PATH } = require(`../@.js`);
const { UI_FLAGS, DisplayObject } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

class Icon extends DisplayObject {
    constructor() {super();}

    //---> Init

    //---> Rendering

    _RenderStyle()
    {
        return {
            ':host':{
                transition: `all 0.15s ease`,
                position:`relative`,
                width:`20px`,
                height:`20px`,
                //'filter': `drop-shadow(0px 1px 1px #000000)`
                //outline:`1px rgba(255,255,255,0.1) solid`,
                //'outline-offset':`-1px`,
            }
        };
    }

    _Render()
    {        
        
    }

    Select( p_toggle )
    {
        super.Select(p_toggle);
    }

    Set(p_path){
        if(U.Empty(p_path)){
            this.style[`background-image`] = `url()`;
        }else{
            this.style[`background-image`] = `url(${PATH.EX(p_path)})`;
        }
    }


    //---> Pooling

    _CleanUp()
    {
        this.size = ``;
        super._CleanUp();
    }

    

}

module.exports = Icon;
UI.Register(`ui-icon`, Icon);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242}],173:[function(require,module,exports){
module.exports = {
    BlockingOverlay : require(`./blocking-overlay.js`),
    OverlayManager : require(`./overlay-manager.js`),
    Overlay : require(`./overlay.js`),
}
},{"./blocking-overlay.js":174,"./overlay-manager.js":175,"./overlay.js":176}],174:[function(require,module,exports){
const UI = require(`../../ui.js`);
const { U } = require(`../../@.js`);
const { TIME } = require(`../../@tools.js`);
const { Layer } = require(`../../ui-core/@.js`);
const Overlay = require(`./overlay.js`);

//Overlay is for interactive items on top of everything.
//they can have a clickable background that kills the overlay when clicked (think drop down menu or right click menu)
//use https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent to forward click event data post-release.

class BlockingOverlay extends Overlay{
    constructor(){super();}

    _Init(){
        super._Init();
    }

    _PostInit(){
        super._PostInit();
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                display:`flex`,
                'flex-flow':`row nowrap`,
                'align-items':`center`,
                'align-content':`center`,
                'justify-content':`center`,
                padding:`50px`,
                
            },
            '.bg':{

            },
            '.content':{
                //'pointer-events':'auto',
                flex:`1 1 auto`,
            }
        });
    }

    _Render(){
        super._Render();
    }


    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = BlockingOverlay;
UI.Register(`ui-blocking-overlay`, BlockingOverlay);
},{"../../@.js":6,"../../@tools.js":7,"../../ui-core/@.js":223,"../../ui.js":242,"./overlay.js":176}],175:[function(require,module,exports){
const UI = require(`../../ui.js`);
const { U } = require(`../../@.js`);
const { Dictionary } = require(`../../collections/@.js`);
const DialogInfos = require(`../../data-app/dialog-infos.js`);
const LayerContainer = require(`../../ui-core/layer-container.js`);
const APP_REQUEST = require(`../../app-request.js`);
const DialogLayer = require(`../dialogs/dialog-layer.js`);
const Overlay = require(`./overlay.js`);

class OverlayManager extends LayerContainer{
    constructor(){super();}

    _Init(){
        super._Init();
    }

    _PostInit(){
        super._PostInit();
    }

    _RenderStyle(){
        var s = U.Merge(super._RenderStyle(),{
            ':host':{
                'pointer-events':'none',
                'z-index':`${Number.MAX_SAFE_INTEGER}`
            }
        });
        s[this._layerClassName] = {
            //Layer CSS
        };
        return s;
    }

    /**
    * Request an item to be added as an overlay
    * @param {*} p_displayObject 
    * @param {*} p_index 
    * @param {*} p_container 
    * @param {*} p_class 
    */
    RequestOverlay( p_displayObject, p_anchor = null ){
        var overlay = this.Add(Overlay, -1, this._host, this._layerClassName);
        overlay.content = p_displayObject;
        overlay.contentAnchor = p_anchor;
        return overlay.content;
    }

    _OnChildAdded( p_displayObject, p_index )
    {
        this.BringToFront();
        super._OnChildAdded(p_displayObject, p_index);
    }

}

module.exports = OverlayManager;
UI.Register(`ui-overlay-manager`, OverlayManager);
},{"../../@.js":6,"../../app-request.js":21,"../../collections/@.js":22,"../../data-app/dialog-infos.js":40,"../../ui-core/layer-container.js":234,"../../ui.js":242,"../dialogs/dialog-layer.js":163,"./overlay.js":176}],176:[function(require,module,exports){
const UI = require(`../../ui.js`);
const { U } = require(`../../@.js`);
const { TIME } = require(`../../@tools.js`);
const { Layer } = require(`../../ui-core/@.js`);

//Overlay is for interactive items on top of everything.
//they can have a clickable background that kills the overlay when clicked (think drop down menu or right click menu)
//use https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent to forward click event data post-release.

class Overlay extends Layer{
    constructor(){super();}

    _Init(){
        super._Init();
        this._releaseOnMDown = U.Default(this._releaseOnMDown, true);
        this._bg = null;
        this._staticContent = U.Default(this._staticContent, false);
        this._content = null;
        this._contentAnchor = null;
        this._dynamicAnchor = false;

        this._Bind(this._Tick);
    }

    _PostInit(){
        super._PostInit();
    }

    get content(){return this._content;}
    set content(p_value){
        if(p_value == this._content){return;}
        var oldContent = this._content;

        if(p_value){
            this._content = this.Add(p_value, -1, this._host, `content`);
        }else{
            this._content = null;
        }

        this._OnContentChanged(oldContent);
        
        if(oldContent){
            oldContent.Release();
        }
    }

    _OnContentChanged(p_oldContent){

    }

    get contentAnchor(){return this._contentAnchor;}
    set contentAnchor(p_value){
        if(p_value == this._contentAnchor){return;}
        var oldAnchor = this._contentAnchor;
        this._contentAnchor = p_value;
        this._OnContentAnchorChanged(oldAnchor);
    }

    _OnContentAnchorChanged(p_oldValue){
        
        var dyn = false;
        var anchor = this._contentAnchor;

        if(anchor){
            if(U.IoF(anchor, HTMLElement)){
                //if anchor is an HTMLElement, then consider it dynamic
                dyn = true;
            }else{
                //otherwise, nope ! Check if it is a coordinate.
            }
        }

        this._dynamicAnchor = dyn;

        if(this._dynamicAnchor){
            TIME.ON(TIME.TICK, this._Tick);
        }else{
            TIME.OFF(TIME.TICK, this._Tick);
        }

    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{

            },
            '.bg':{
                position:`absolute`,
                width:`100%`,
                height:`100%`,
                top:`0px`,
                left:`0px`,
            },
            '.content':{
                //'pointer-events':'auto',
            }
        });
    }

    _Render(){
        super._Render();
        this._bg = U.Element(`div`, {class:`bg`}, this._host);
        this.focusArea = this._bg;
    }

    _mDown(p_evt){
        //TODO : Add checks as to how to handle the event.
        //Redispatch it ?
        if(this._releaseOnMDown){
            this.Release();
        }
    }

    _Tick(p_delta){
        //Update content position toward anchor
        var viewportOffset = this._contentAnchor.getBoundingClientRect();
        var top = viewportOffset.top;
        var left = viewportOffset.left; //yey
    }

    _CleanUp(){
        if(!this._staticContent){
            this.content = null;
        }
        this._contentAnchor = null;
        super._CleanUp();
    }

}

module.exports = Overlay;
UI.Register(`ui-overlay`, Overlay);
},{"../../@.js":6,"../../@tools.js":7,"../../ui-core/@.js":223,"../../ui.js":242}],177:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { LayerContainer } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

class Shell extends LayerContainer{
    
    constructor() {
        super();        
    }

    

    _Init(){
        super._Init();
    }
    
}

module.exports = Shell;
UI.Register(`ui-shell`, Shell);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242}],178:[function(require,module,exports){
'use strict';

const { U, C, EVENT } = require(`../@.js`);
const { UI_FLAGS, Widget } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const Icon = require(`./icon.js`);
const Textfield = require(`../ui-core/textfield.js`);
const APP_UI_FLAGS = require(`./app-ui-flags.js`);

class StickerBar extends Widget {
    constructor() {super();}

    //---> Init

    _Init()
    {
        super._Init();
        this._icon = null;
        this._text = null;
    }

    _PostInit(){
        super._PostInit();
        this.RegisterClassToggle(this, 
            APP_UI_FLAGS.INFOS, 
            APP_UI_FLAGS.WARNING, 
            APP_UI_FLAGS.ERROR);

        this.flag = APP_UI_FLAGS.INFOS;
    }

    //---> Rendering

    _RenderStyle()
    {

        var info = C.COLORS[APP_UI_FLAGS.INFOS];
        var warning = C.COLORS[APP_UI_FLAGS.WARNING];
        var error = C.COLORS[APP_UI_FLAGS.ERROR];

        return {
            ':host':{
                position:`relative`,
                display:`flex`,

                transition: `all 0.1s ease`,
                padding:`5px`,

                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`stretch`,

                'border-radius':`2px`
            },
            '.icon':{
                flex:`0 0 auto`,
                'margin-right':`5px`
            },
            ':host(.infos)':{ 
                'background-color':`rgba(${info},0.1)`, 
                'color':`rgba(${info})`
                //'border-top':`solid 1px rgba(${info},1)`,
            },
            ':host(.warning)':{ 
                'background-color':`rgba(${warning},0.1)`, 
                'color':`rgba(${warning})`
                //'border-top':`solid 1px rgba(${warning},1)`,
            },
            ':host(.error)':{ 
                'background-color':`rgba(${error},0.1)`, 
                'color':`rgba(${error})`
                //'border-top':`solid 1px rgba(${error},1)`,
            },
            
        };
    }

    _Render()
    {        
        this._icon = this.Add(Icon, -1, this, `icon`);
        this._text = this.Add(Textfield, -1, this, `text` );
    }

    set text(p_value){ this._text.text = p_value; }
    set flag(p_value){

        this.SetFlag(APP_UI_FLAGS.INFOS, p_value == APP_UI_FLAGS.INFOS );
        this.SetFlag(APP_UI_FLAGS.WARNING, p_value == APP_UI_FLAGS.WARNING );
        this.SetFlag(APP_UI_FLAGS.ERROR, p_value == APP_UI_FLAGS.ERROR );

        var icon = `%ICON%/icon_info.svg`;
        switch(p_value){
            case APP_UI_FLAGS.INFOS : icon = `%ICON%/icon_info.svg`; break;
            case APP_UI_FLAGS.WARNING : icon = `%ICON%/icon_warning.svg`; break;
            case APP_UI_FLAGS.ERROR : icon = `%ICON%/icon_error.svg`; break;
        }

        this._icon.Set(icon);

    }

    set options(p_value){        
        this.flag = U.Get(p_value, `flag`, APP_UI_FLAGS.INFOS);
        this.text = U.Get(p_value, `msg`, `message`);
    }

    _CleanUp()
    {
        super._CleanUp();
    }

}

module.exports = StickerBar;
UI.Register(`ui-sticker-bar`, StickerBar);
},{"../@.js":6,"../ui-core/@.js":223,"../ui-core/textfield.js":236,"../ui.js":242,"./app-ui-flags.js":151,"./icon.js":172}],179:[function(require,module,exports){
'use strict';

const { U, C, EVENT, APP_REQUEST } = require(`../@.js`);
const { UI_FLAGS, Widget } = require(`../ui-core/@.js`);
const DataObserver = require(`../signals/observer-data.js`);
const { UI, INPUT } = require(`../@tools.js`);
const { DATA_EVENT } = require(`../data-core/@.js`);

const Facade = require(`./facade.js`);
const Toolbar = require(`./toolbar.js`);
const APP_UI_FLAGS = require(`./app-ui-flags.js`);

class Tab extends Widget {
    constructor() {super();}

    //---> Init

    _Init()
    {

        super._Init();  

        this._facadeClass = Facade;
        this._facade = null;

        this._toolbarClass = Toolbar;
        this._toolbar = null;

        this._closeBtn = null;

        this._dataObserver = new DataObserver();
        this._dataObserver.Hook(DATA_EVENT.DIRTY, this, this._OnItemDataDirty);
        this._dataObserver.Hook(DATA_EVENT.CLEANED, this, this._OnItemDataCleaned);
        this._dataObserver.Hook(EVENT.UPDATED, this, this._OnItemDataUpdated);

        this.RegisterClassToggle(this, APP_UI_FLAGS.INFOS, APP_UI_FLAGS.WARNING, APP_UI_FLAGS.ERROR);

    }

    _PostInit()
    {
        if(!U.IoF(this._toolbarClass, Toolbar)){ throw new Error(`ToolbarClass (${this._toolbarClass.name}) doesn't inherit Toolbar`); }
        if(!U.IoF(this._facadeClass, Facade)){ throw new Error(`FacadeClass (${this._facadeClass.name}) doesn't inherit Facade`); }
        super._PostInit();
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);

        this._dataObserver.observable = this._data;
        var d = this._dataObserver.observable;
        if(d){
            this._OnItemDataUpdated(d);
        }else{
            this._facade.label.displayID = null;
        }
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        this._facade.data = p_data;
    }

    _OnItemDataDirty(p_data){ this.SetFlag(APP_UI_FLAGS.WARNING, true); }
    _OnItemDataCleaned(p_data){ this.SetFlag(APP_UI_FLAGS.WARNING, false); }

    _OnItemDataUpdated(p_data){
        this.SetFlag(APP_UI_FLAGS.WARNING, p_data.dirty);
        this._facade.label.displayID = p_data.id;
    }
    
    //---> Rendering

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0.05)`,
            UI.sFOCUS, `rgba(127,127,127,0.2)`,
            UI.sSELECT, `rgba(127,127,127,0.3)`,
            UI.sFS, `rgba(127,127,127,0.4)`);

    }

    _RenderStyle()
    {

        var info = C.COLORS[APP_UI_FLAGS.INFOS];
        var warning = C.COLORS[APP_UI_FLAGS.WARNING];
        var error = C.COLORS[APP_UI_FLAGS.ERROR];

        var br = 3;

        return U.Merge(super._RenderStyle(),{
            ':host':{
                transition: `all 0.0s ease`,
                position:`relative`,
                display:`flex`,
                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`stretch`,
                height:`100%`,
                'border-top-left-radius':`${br}px`,
                'border-top-right-radius':`${br}px`,
            },
            '.facade':{
                'margin-left':`4px`,
                'margin-right':`4px`,
                flex:`1 1 auto`,
            },
            '.toolbar':{
                transition: `all 0.0s ease`,
                'margin-right':`4px`,
                flex:`0 0 auto`,
                opacity:0,
            },
            
            ':host(.focused) .toolbar, :host(.selected) .toolbar':{
                opacity:1,
            },

            ':host:before':{
                content:`""`, position:`absolute`, width:`100%`, height:`0px`, bottom:`0px`,
                'background-color':`rgba(127,127,127,1)`,
            },
            ':host(.selected):before':{
                height:`6px`
            },
            ':host(.infos):after, :host(.warning):after, :host(.error):after':{
                content:`""`, position:`absolute`, width:`100%`, height:`3px`, bottom:`0px`,
            },
            ':host(.infos):after':{ 'background-color':`rgba(${info},1)` },
            ':host(.warning):after':{ 'background-color':`rgba(${warning},1)` },
            ':host(.error):after':{ 'background-color':`rgba(${error},1)` },
            ':host:after':{ opacity:0.5 },
            ':host(.selected):after':{ opacity:1 }

            
        });
    }

    _Render()
    {   
        this.RegisterClassToggle(this, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED);
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        this._toolbar = this.Add(this._toolbarClass, -1, this, `toolbar`);
        this.focusArea = this;

        //Request CLOSE button from toolbar
        this._closeBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_close.svg`, text:`Close`,
            trigger:{ thisArg:this, fn:this._CloseRequest},
            //request:{}
        });
    }

    Activate(p_alt = false){
        if(this._toolbar.focused){return false;}
        return super.Activate(p_alt);
    }

    AuxActivate(p_type){
        if(!super.AuxActivate(p_type)){return false;}
        if(p_type == INPUT.MOUSE_MIDDLE){
            this._CloseRequest();
        }
        return true;
    }

    _CloseRequest(){
        //Remove item from it's parent catalog
        this.data.parent.Remove(this.data);
    }




    //---> Pooling

    _CleanUp()
    {
        this._toolbar.Focus(false);
        super._CleanUp();
    }

    

}

module.exports = Tab;
UI.Register(`ui-tab`, Tab);
},{"../@.js":6,"../@tools.js":7,"../data-core/@.js":43,"../signals/observer-data.js":141,"../ui-core/@.js":223,"./app-ui-flags.js":151,"./facade.js":169,"./toolbar.js":183}],180:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const Textfield = require(`../ui-core/textfield.js`);
const UI = require(`../ui.js`);

class Label extends Textfield {
    constructor(){super();}

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'font-size':`0.95em`,
            },
        });
    }
}

class H1 extends Textfield {
    constructor(){super();}

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'font-size':`3em`,
            },
            span:{
                color:`white`,
                'font-family': `Condensed, sans-serif`,
                //'font-variant': `small-caps slashed-zero`,
                'text-transform':`uppercase`,
                'text-shadow': `0 1px 0 #535353, 0 2px 0 #535353, 0 5px 2px rgba(0,0,0,0.5)`
            }
        });
    }
}

class H2 extends Textfield {
    constructor(){super();}

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'font-size':`2em`,
            },
            span:{
                color:`white`,
                'font-family': `Condensed, sans-serif`,
                //'font-variant': `small-caps slashed-zero`,
                'text-transform':`uppercase`,
                'text-shadow': `0 1px 0 #535353, 0 2px 0 #535353, 0 2px 2px rgba(0,0,0,0.5)`
            }
        });
    }
}

class H3 extends Textfield {
    constructor(){super();}

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'font-size':`1.51em`,
            },
            span:{
                color:`#c7c7c7`,
                'font-family': `Condensed, sans-serif`,
                //'font-variant': `small-caps slashed-zero`,
                'text-transform':`uppercase`,
                'text-shadow': `0 1px 1px rgba(0,0,0,0.5)`
            }
        });
    }
}

class H4 extends Textfield {
    constructor(){super();}

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'font-size':`1.4em`,
            },
            span:{
                color:`#c7c7c7`,
                'font-family': `Condensed, sans-serif`,
                'text-shadow': `0 1px 1px rgba(0,0,0,0.5)`
            }
        });
    }
}

module.exports = { 
    Label : Label,
    H1 : H1,
    H2 : H2,
    H3 : H3,
    H4 : H4
};

UI.RegisterGroup({
    'text-label':Label,
    'text-h1':H1,
    'text-h2':H2,
    'text-h3':H3,
    'text-h4':H4
});
},{"../@.js":6,"../ui-core/textfield.js":236,"../ui.js":242}],181:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { Label } = require(`./textfields.js`);
const TitleBar = require(`./title-bar.js`);
const UI = require(`../ui.js`);

const Icon = require(`./icon.js`);
const Toolbar = require(`./toolbar.js`);
const Facade = require(`./facade.js`);

class TitleBarEx extends TitleBar{
    constructor(){super();}

    _Init(){
        super._Init();
        this._subtitle = null;
    }

    get subtitle(){return this._subtitle;}
    set subtitle(p_value){this._subtitle.text = p_value; }

    //---> Rendering

    _RenderStyle()
    {
        return {
            ':host':{
                transition: `all 0.0s ease`,
                position:`relative`,
                display:`flex`,
                //padding:`2px`,
                //'padding-left':`4px`,
                //'padding-right':`4px`,
                transition: `all 0.15s ease`,
                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`stretch`,
                height:`50px`,
                //outline:`1px rgba(255,255,255,0.1) solid`,
                //'outline-offset':`-1px`,
            },
            '.facade':{
                //position:`relative`,
                'margin-left':`4px`,
                'margin-right':`4px`,
                flex:`1 1 auto`,
            },
            '.toolbar':{
                transition: `all 0.0s ease`,
                //position:`relative`,
                'margin-right':`4px`,
                flex:`0 0 auto`,
                visibility:`hidden`,
            },
            '.subtitle':{
                position:`absolute`,
                left:`8px`,
                top:`2px`,
                opacity:0.5,
                'transform-origin':`0% 50%`,
                transform:`scale(0.8,0.8)`
            }
        };
    }

    _Render()
    {
        super._Render();
        this._subtitle = this.Add(Label, -1, this, `subtitle`);
    }

}

module.exports = TitleBarEx;
UI.Register('ui-title-bar-ex', TitleBarEx);
},{"../@.js":6,"../ui.js":242,"./facade.js":169,"./icon.js":172,"./textfields.js":180,"./title-bar.js":182,"./toolbar.js":183}],182:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { Widget, Textfield } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);

const Icon = require(`./icon.js`);
const Toolbar = require(`./toolbar.js`);
const Facade = require(`./facade.js`);

class TitleBar extends Widget{
    constructor(){super();}

    _Init(){
        super._Init();

        this._facadeClass = Facade;
        this._facade = null;
        
        this._toolbarClass = Toolbar;
        this._toolbar = null;

    }

    get facade(){return this._facade;}
    

    //---> Rendering

    _RenderStyle()
    {
        return {
            ':host':{
                transition: `all 0.0s ease`,
                position:`relative`,
                display:`flex`,
                //padding:`2px`,
                //'padding-left':`4px`,
                //'padding-right':`4px`,
                transition: `all 0.15s ease`,
                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`stretch`,
                height:`50px`,
                //outline:`1px rgba(255,255,255,0.1) solid`,
                //'outline-offset':`-1px`,
            },
            '.facade':{
                //position:`relative`,
                'margin-left':`4px`,
                'margin-right':`4px`,
                flex:`1 1 auto`,
            },
            '.toolbar':{
                transition: `all 0.0s ease`,
                //position:`relative`,
                'margin-right':`4px`,
                flex:`0 0 auto`,
                visibility:`hidden`,
            }
        };
    }

    _Render()
    {
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        this._toolbar = this.Add(this._toolbarClass, -1, this, `toolbar`);
        this._facade.label.uppercase = true;
    }

}

module.exports = TitleBar;
UI.Register('ui-title-bar', TitleBar);
},{"../@.js":6,"../ui-core/@.js":223,"../ui.js":242,"./facade.js":169,"./icon.js":172,"./toolbar.js":183}],183:[function(require,module,exports){
'use strict';

const { U, C, EVENT, APP_REQUEST } = require(`../@.js`);
const { UI_EVENT, UI_FLAGS, OrientedWidget } = require(`../ui-core/@.js`);
const { Dictionary } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const ToolButton = require(`./button-tool.js`);
const Button = require(`./button.js`);
/**
 * 
 *  *--------------------------------*
 *  | [] Item Name            [][][] |
 *  *--------------------------------*
 * 
 */

const _flag_STRETCH = `stretch`;
const _flag_STRETCH_SAME = `stretch-same`;

class Toolbar extends OrientedWidget {
    constructor() {super();}

    //---> Init
    static get FLAG_STRETCH(){ return _flag_STRETCH; }
    static get FLAG_STRETCH_SAME(){ return _flag_STRETCH_SAME; }

    _Init()
    {
        super._Init();
        this._defaultButtonClass = ToolButton;
        this._optionsMap = new Dictionary();
        this._handles = new Array(0);

        this.RegisterClassToggle(this, Toolbar.FLAG_STRETCH, Toolbar.FLAG_STRETCH_SAME);
        
    }

    //---> Rendering

    _RenderStyle()
    {
        var s = {
            ':host':{
                transition: `all 0.0s ease`,
                position:`relative`,
                display:`flex`,
                'align-items':`center`,
                padding:`2px`,
            },
                ':host(.vertical)':{
                    'flex-flow':`column`,
                    'align-content':`flex-start`,
                },
                ':host(.horizontal)':{
                    'flex-flow':`row`,
                    'align-content':`flex-start`,
                },
            
                ':host(.horizontal) .item':{
                    'margin-right':`4px`,
                },
                ':host(.horizontal.stretch) .item:last-child, :host(.horizontal.stretch-same) .item:last-child':{
                    'margin-right':`0px`,
                },

            ':host(.focused)':{

            },
            ':host(.selected)':{
                
            },
            ':host(.selected.focused)':{
                
            },
            '.item':{
                position:`relative`,
                flex:`0 0 auto`,
            },
            ':host(.stretch), :host(.stretch-same)':{
                'align-items':`stretch`,
                'align-content':`stretch`,
                flex:`1 1 auto`
            },
            ':host(.stretch) .item':{
                flex:`1 1 auto`,
            },
            ':host(.stretch-same) .item':{
                flex:`1 1 1px`,
            }
        };
        
        s[`:host(.stretch) .item.${C.NOSCALE}`] = {
            flex:`0 0 auto`
        }

        return s;
    }

    set stretch(p_value){ 
        this.SetFlag(Toolbar.FLAG_STRETCH, p_value); 
        this.SetFlag(Toolbar.FLAG_STRETCH_SAME, !p_value); 
    }
    set stretchSame(p_value){ 
        this.SetFlag(Toolbar.FLAG_STRETCH, !p_value); 
        this.SetFlag(Toolbar.FLAG_STRETCH_SAME, p_value); 
    }

    _Render(){
        this.focusArea = this;
    }

    Select( p_toggle ){
        super.Select(p_toggle);
    }


    //---> Handle management

    CreateHandle(p_options, p_class = null){
        
        p_class = U.Default(p_class, this._defaultButtonClass);
        var handle = this.Add(p_class, -1, this, `item`);
        this._optionsMap.Set(handle, p_options);
        handle.Subscribe(EVENT.RELEASED, this, this._OnHandleReleased);
        if(U.IoF(handle, Button)){
            handle.options = p_options;
        }        

        this._handles.push(handle);
        return handle;
    }

    _OnHandleReleased(p_handle){

        p_handle.classList.remove(`item`);
        this._optionsMap.Remove(p_handle);
        var index = this._handles.indexOf(p_handle);

        if(index != -1){this._handles.splice(index, 1);}
    }

    Clear(){
        while(this._handles.length != 0){
            this._handles[this._handles.length-1].Release();
        }
    }

    //---> Pooling

    _CleanUp()
    {
        this._optionsMap.Clear();
        super._CleanUp();
    }

    

}

module.exports = Toolbar;
UI.Register(`ui-toolbar`, Toolbar);
},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./button-tool.js":156,"./button.js":157}],184:[function(require,module,exports){
'use strict';

const { C, U } = require(`../@.js`);
const { UI_FLAGS, UI_EVENT, ExtExpand } = require(`../ui-core/@.js`);
const { POOL, COLLECTION_EVENT, Dictionary } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const Icon = require(`./icon.js`);
const TreeItem = require(`./tree-item.js`);
const CatalogBuilder = require(`./catalog-builder.js`);
const ToolButton = require(`./button-tool.js`);

/**
 * 
 *  *--------------------------------*
 *  | + [] Item Name          [][][] |
 *  *--------------------------------*
 * 
 */

class TreeItemGroup extends TreeItem {
    constructor() {super();}

    //---> Init

    _Init(){
        
        super._Init();
        this._extExpand = POOL.Rent(ExtExpand);
        this._extExpand._toggled = false;
        this._extExpand.Subscribe(UI_EVENT.EXPANDED, this, this._Expand);
        this._extExpand.Subscribe(UI_EVENT.COLLAPSED, this, this._Collapse);

        this._defaultControllerClass = TreeItem;
        
        this._dict = new Dictionary();
        this._items = new Array(0);

        this._builderClass = CatalogBuilder;
        this._builder = null;

        this._itemWrapper = null;
        this._expandIcon = null;
    }

    _PostInit(){
        this._SetupBuilder();
        super._PostInit();
        this._extDrag.Setup(this._body, null, this);
        this._extExpand.Setup( this, this._itemWrapper, this );
        this.order = 0;
    }

    

    _SetupBuilder(){
        this._builder = POOL.Rent(this._builderClass);
        this._builder.owner = this;
        this._builder._defaultItemClass = TreeItem;
        this._builder._defaultGroupClass = TreeItemGroup;
        this._builder.Subscribe(COLLECTION_EVENT.ITEM_ADDED, this, this._OnBuilderItemAdded);
        this._builder.Subscribe(COLLECTION_EVENT.ITEM_REMOVED, this, this._OnBuilderItemRemoved);
    }

    //---> Rendering

    _RenderStyle(){
        var rh = `rgba(${C.COLORS.main},1)`; //C.COLORS.main //255,255,255
        return {  
            ':host':{
                position:`relative`,
                display:`flex`,
                transition: `all 0.15s ease`,
                'flex-direction':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
            },

            '.body':{
                position:`relative`,
                display:`flex`,
                padding:`2px`,
                'padding-left':`4px`,
                'padding-right':`4px`,
                transition: `all 0.15s ease`,
                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`stretch`,
                'border-radius': `2px`,
                'background-color':this.GEC(UI.elBG,UI.sIDLE),
                'min-width':0,
                border:`1px solid rgba(0,0,0,0)`
            },
            ':host(.dragged) .body':{
                border:`1px dashed ${rh}`
            },
            '.toggle':{
                flex:`0 0 auto`,
            },
            '.facade':{
                //position:`relative`,
                'margin-left':`-2px`,
                flex:`1 1 auto`,
            },
            '.toolbar':{
                //position:`relative`,
                flex:`0 0 auto`,
                //display:`none`,
                opacity:0
            },
            '.body.focused':{
                'background-color':this.GEC(UI.elBG,UI.sFOCUS),
                'cursor':`pointer`,
            },
            '.focused .toolbar':{
                display:`flex`,
                opacity:1
            },
            '.body.selected':{
                'background-color':this.GEC(UI.elBG,UI.sSELECT)
            },
            '.body.selected.focused':{
                'background-color':this.GEC(UI.elBG,UI.sFS)
            },

            '.item':{
                flex:`1 1 auto`,
            },
            '.content':{
                transition: `all 0.15s ease`,
                'padding-left':`6px`, //'padding-left':`4px`,
                position:`relative`,
                'flex-direction':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
            },
            '.content:before':{
                content:`""`, height:`calc( 100% - 12px )`, width:`1px`, position:`absolute`,
                left:`0px`, top:`6px`, 'background-color':`#fff`,
                'z-index':-1, opacity:0.1,
            },
            '.content:hover:before':{
                opacity:0.25,
            },
            '.expanded.content':{
                display:`flex`
            },
            '.collapsed.content':{
                display:`none`,
                padding:'0px',
                margin:'0px',
            }
        };
    }

    _Render(){

        this.classList.remove(`body`);
        var body = U.Element(`div`, {class:`body`}, this._host);
        this.RegisterClassToggle(body, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED);
        this._expandIcon = this.Add(Icon, -1, body, `toggle`);
        this._expandIcon.Set('%ICON%/icon_expand_arrow.svg');
        this._expandIcon.size = 12;

        //Change wrapper prior to render regular explorer-item elements
        this._wrapper = body;        
        super._Render();

        this._wrapper = this._host;
        this.focusArea = body;

        var itemWrapper = U.Element(`div`, {class:`content`}, this._host);

        this._itemWrapper = itemWrapper;
        this._builder.itemWrapper = itemWrapper;

        this._body = body;
    }

    Activate(p_alt = false){
        if(this._toolbar.focused){return;}
        super.Activate(p_alt);
    }

    Expand(){ this._extExpand.Expand(); }
    _Expand(){
        if(this._data){
            this._data.expanded = true;
            this._BuildContent();
        }
        this._expandIcon.rotation = 90;
    }

    Collapse(){ this._extExpand.Collapse(); }
    _Collapse(){
        if(this._data){
            this._data.expanded = false;
        }
        this._ClearContent();
        this._expandIcon.rotation = 0;
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);

        //Ensure content is cleared before updating builder's data
        this._ClearContent();
        this._builder.catalog = this._data;

        if(this._data){
            if(this._extExpand.toggled){
                this._data.expanded = true;
                this._BuildContent();
            }else if(this._data.expanded){
                this._extExpand.Expand();
            }
        }else{
            this._extExpand.Collapse();
        }

    }

    _ClearContent(){
        this._builder.Clear();
    }

    _BuildContent(){
        this._builder.Build();
    }


    //---> Item Management

    _OnBuilderItemAdded(p_builder, p_item){
        p_item.classList.add(`item`);
        //Re-order items ?
    }

    _OnBuilderItemRemoved(p_builder, p_item){
        p_item.classList.remove(`item`);
    }

    //---> Pooling

    _CleanUp(){
        super._CleanUp();
        this.Collapse();
        this._extExpand.activator = this;
    }

    

}

module.exports = TreeItemGroup;
UI.Register(`ui-tree-item-group`, TreeItemGroup);
},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./button-tool.js":156,"./catalog-builder.js":159,"./icon.js":172,"./tree-item.js":185}],185:[function(require,module,exports){
'use strict';

const { C, U, APP_REQUEST } = require(`../@.js`);
const { UI_FLAGS, Widget, ExtDrag } = require(`../ui-core/@.js`);
const { Dictionary, CatalogItem, ID } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const Facade = require(`./facade.js`);
const Toolbar = require(`./toolbar.js`);

/**
 * 
 *  *--------------------------------*
 *  | [] Item Name            [][][] |
 *  *--------------------------------*
 * 
 */

class TreeItem extends Widget {
    constructor() {super();}

    //---> Init

    _Init()
    {

        this.default_SelectOnActivation = U.Default(this.default_SelectOnActivation, true);

        super._Init();  

        this._notifiesSelectionStack = true;

        this._facadeClass = Facade;
        this._facade = null;

        this._toolbarClass = Toolbar;
        this._toolbar = null;

        this._commandList = new Array(0);
        this._commandMap = new Dictionary();

        this._extDrag = new ExtDrag();
        this._extDrag.grabDataCallback = this._Bind(this._GrabDragData);

    }

    _PostInit()
    {
        super._PostInit();
        this.order = 1;
        this._extDrag.Setup(this, null, this);
    }

    _Wake(){
        super._Wake();
        this._extDrag.owner = this;
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);
        var oldCmds = this._commandList;
        
        if(!this._data){
            this._facade.text = ``;
            this._facade.icon = ``;
            this._facade.label.displayID = null;
        }

    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        this._facade.text = p_data.name;
        this._facade.icon = p_data.icon;

        var nestedData = p_data.data;
        var id = null;
        if(nestedData){if(U.IoF(nestedData.id, ID)){
            id = nestedData.id;
        }}
            
        this._facade.label.displayID = id;
        
    }

    _GrabDragData(){
        return this._data;
    }

    //---> Command updates

    /**
     * Create command handles in the toolbar
     * according to the content of `this._data.commandList`
     */
    _BuildCommandHandles(){
        this._ClearCommandHandles();
        if(!this._data){return;}
        if(!this._data.commandList){return;}
        var list = this._data.commandList;
        var handle = null;
        var cmd = null;
        for(var i = 0, n = list.length; i < n; i++){
            cmd = list[i];
            this._commandList.push(cmd);
            handle = this._toolbar.CreateHandle({
                command:cmd, isCommandTrigger:false,
                trigger:{ thisArg:this, fn:this._CommandExecutionRequest, arg:cmd }
                });
            this._commandMap.Set(cmd, handle);
        }
    }

    /**
     * Clear any command handles created through `_BuildCommandHandles`
     */
    _ClearCommandHandles(){
        var list = this._commandList;
        for(var i = 0, n = list.length; i < n; i++){ this._commandMap.Get(list[i]).Release(); }
        list.length = 0;
        this._commandMap.Clear();
    }

    /**
     * Callback for the command handles when triggered.
     * @param {Command} p_cmd 
     */
    _CommandExecutionRequest(p_cmd){
        p_cmd.emitter = this;
        p_cmd.Execute(this._data);
    }

    //---> Rendering
    
    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0)`,
            UI.sFOCUS, `rgba(127,127,127,0.2)`,
            UI.sSELECT, `rgba(127,127,127,0.3)`,
            UI.sFS, `rgba(127,127,127,0.5)`);
    }

    _RenderStyle()
    {
        var rh = `rgba(${C.COLORS.main},1)`; //C.COLORS.main //255,255,255
        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`relative`,
                display:`flex`,
                padding:`2px`,
                'padding-left':`4px`,
                'padding-right':`4px`,
                transition: `all 0.15s ease`,
                'flex-direction':`row`,
                'align-items':`center`,
                'align-content':`stretch`,
                'border-radius': `2px`,
                'min-width':0,
                border:`1px solid rgba(0,0,0,0)`
            },
            ':host(.dragged)':{
                border:`1px dashed ${rh}`
            },
            '.facade':{
                flex:`1 1 auto`,
                opacity:0.8
            },
            '.toolbar':{
                flex:`0 0 auto`,
                display:`none`,
            },
            ':host(.focused)':{
                'cursor':`pointer`,
            },
            ':host(.focused) .toolbar, :host(.selected) .toolbar':{
                display:`flex`,
            },
        });
    }

    _Render()
    {   
        this.RegisterClassToggle(this, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED);
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        this._toolbar = this.Add(this._toolbarClass, -1, this, `toolbar`);
        this.focusArea = this;
    }

    
    _FocusGain(){
        super._FocusGain();
        this._BuildCommandHandles();
        var list = this._commandList;
        for(var i = 0, n = list.length; i < n; i++){
            this._commandList[i].context = this;
        }
        //TODO : Check if we're not drag and dropping something first.
        if(this._data.primaryCommand){ this._data.primaryCommand.context = this; }
        if(this._data.secondaryCommand){ this._data.secondaryCommand.context = this; }
    }

    _FocusLost(){
        super._FocusLost();
        this._ClearCommandHandles();
    }    

    Activate(p_alt = false){
        if(!super.Activate(p_alt)){return false;}
        if(p_alt){
            if(this._data.secondaryCommand){
                this._data.secondaryCommand.Execute();
            }
            //this._EmitLocalRequest(APP_REQUEST.EDIT,{ data:this._data });
        }
        return true;
    }
    


    //---> Pooling

    _CleanUp()
    {
        this._toolbar.Focus(false);
        super._CleanUp();
    }

    

}

module.exports = TreeItem;
UI.Register(`ui-tree-item`, TreeItem);
},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./facade.js":169,"./toolbar.js":183}],186:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const { POOL } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const TreeItemGroup = require(`./tree-item-group.js`);


class TreeRoot extends TreeItemGroup {
    constructor() {super();}

    //---> Init

    _Init()
    {
        this.default_SelectOnActivation = false;

        super._Init();
        this._selectOnActivation = false;
        this._searchBtn = null;
        this._InitSelectionStack();
    }

    _PostInit()
    {
        super._PostInit();

        this._searchBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_search.svg`, text:`Find...`,
            trigger:{ thisArg:this, fn:this._OpenFind},
            //request:{}
        });
        this._searchBtn.order = 99;
    }

    _OpenFind(){

    }

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            '.body':{
                'height':`50px`,
                'padding-top':`0px`,
                'padding-bottom':`0px`,
                'background-color':`rgba(127,127,127,0.1)`,
                'border-radius': `0px`,
            },
            '.content':{
                padding:'6px',
                'border-bottom':`1px solid rgba(255,255,255,0.1)`,
                
                'overflow-x':`hidden`,
            },
            '.content:before':{
                display:`none`
            },
            ':host(:hover) .toolbar':{
                opacity:1
            }
        });
    }


    //---> Pooling

    _CleanUp()
    {
        super._CleanUp();
    }

    

}

module.exports = TreeRoot;
UI.Register(`ui-tree-root`, TreeRoot);
},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./tree-item-group.js":184}],187:[function(require,module,exports){
'use strict';

const { U, C } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const { Catalog, CatalogItem } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const Tab = require(`./tab.js`);
const { Drawer, DrawerControls } = require(`./drawer.js`);

class WorkspaceCellControls extends DrawerControls {
    constructor() {super();}

    //---> Init

    _Init()
    {
        super._Init();
        this._defaultControlClass = Tab;
        this._cellOptionsBtn = null;

    }


    //---> Rendering
    
    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            '.control':{
                'margin-right':`1px`,
            },
            '.control.selected:after':{
                display:`none`
            }
        });
    }

    _Render(){
        super._Render();

        this._cellOptionsBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_more.svg`, text:`More Actions...`,
            trigger:{ thisArg:this, fn:this._OpenSettings},
            //request:{}
        });

        /*
        for( var i = 0; i < 3; i++){this._toolbar.CreateHandle({
            text:`Fake ${i}`,
            trigger:{ thisArg:this, fn:this._OpenSettings}});
        }
        */
    }

    _OpenSettings(){

    }

    //---> Pooling

    _CleanUp(){
        super._CleanUp();
    }

}


class WorkspaceCell extends Drawer{
    constructor(){super();}

    _Init(){
        super._Init();

        this._catalogHandler.releaseItemAlongData = true;
        this._controlsClass = WorkspaceCellControls;
        this._orientation = C.HORIZONTAL;
    }
    
    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            
        });
    }

    _OnCatalogItemAdded(p_catalogHandler, p_item){
        if(!U.IoF(p_item, CatalogItem)){
            throw new Error(`non-catalog item added to workspace cell catalog.`);
        }else if(U.IoF(p_item, Catalog)){
            throw new Error(`Full catalog item added to workspace cell catalog.`);
        }
        super._OnCatalogItemAdded(p_catalogHandler, p_item);
    }

    _OnViewCreated(p_item, p_control, p_view){

        super._OnViewCreated(p_item, p_control, p_view);
        p_view.RequestFocus();

    }

}

module.exports = {
    WorkspaceCell : WorkspaceCell,
    WorkspaceCellControls : WorkspaceCellControls
};

UI.RegisterGroup({
    'workspace-cell':WorkspaceCell,
    'workspace-cell-controls':WorkspaceCellControls
});
},{"../@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./drawer.js":166,"./tab.js":179}],188:[function(require,module,exports){
'use strict';

const { U, APP_REQUEST } = require(`../@.js`);
const { Catalog } = require(`../collections/@.js`);
const { CSS } = require(`../ui-core/@.js`);
const { DEFAULT_EDITOR, DEFAULT_IP_EDITOR } = require(`../environment/keys.js`);
const AssocManager = require(`../environment/assoc-manager.js`);
const UI = require(`../ui.js`);
const RELAY = require(`../relay.js`);

const Workspace = require(`./workspace.js`);

class RootWorkspace extends Workspace{
    
    constructor() {super(); }

    //---> Init

    _Init(){
        super._Init();
        
        var cat = new Catalog();
        cat.GetOrCreateCatalog({ name:'RootCell' });

        this._rootCatalog = cat;
    }

    _PostInit(){

        super._PostInit();

        RELAY.Subscribe(APP_REQUEST.EDIT, this, this._HandleEditRequest);
        RELAY.Subscribe(APP_REQUEST.OPEN, this, this._HandleOpenRequest);
        RELAY.Subscribe(APP_REQUEST.CREATE, this, this._HandleCreateRequest);

        this.catalog = this._rootCatalog;

    }

    get rootCatalog(){ return this._rootCatalog; }
    
    //---> Rendering

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(),{
            ':host':{
                position:`relative`,
                width:`1px`, //!important dirty fix
                //height:`100%`,
                flex:`1 1 auto`,
                display: `flex`,
            },
        });
    }
    
    //---> Request handling

    _HandleEditRequest(p_request){


        if(p_request.handled){return;}

        var editTarget = p_request.GetOption(`data`, null);
        if(!editTarget){
            p_request.HandleFail(`Editing request has no data.`);
        }

        //TODO : Check if the edit target is already being edited
        //TODO : Check if an editor class or reference is specified in the request
        var editorClass = p_request.GetOption(`editor`, null);

        if(editorClass){
            editorClass = AssocManager.Get(editTarget, editorClass, editorClass);
        }else{
            editorClass = AssocManager.Get(editTarget, DEFAULT_EDITOR);
        }

        if(!editorClass){
            p_request.HandleFail(`Could not find editor association for ${editTarget}.`);
            return;
        }

        console.log(`Editing request for ${editTarget} will be handled using ${editorClass.name}`);
        this.Host({
            data:editTarget,
            viewClass:editorClass,
            name:editTarget.id.name
        });

        p_request.HandleSuccess(this);

        //TODO : Check if there is an editor specified
        //if not : 
        //find the list of available editor for the request's data
        //if there are multiple editor available, open the workbench
        //If specified :
        //find the list of available editors
        //if there are multiple editor available, open the workbench and then open the desired editor
    }

    _HandleOpenRequest(p_request){
        //Same as Edit.
    }

    _HandleCreateRequest(p_request){

        if(p_request.handled){return;}

        var editTarget = p_request.GetOption(`data`, null);
        if(!editTarget){
            p_request.HandleFail(`Editing request has no data.`);
        }

        //TODO : Check if the edit target is already being edited
        //TODO : Check if an editor class or reference is specified in the request
        var editorClass = p_request.GetOption(`editor`, null);

        if(editorClass){
            editorClass = AssocManager.Get(editTarget, editorClass, editorClass);
        }else{
            editorClass = AssocManager.Get(editTarget, DEFAULT_EDITOR);
        }

        if(!editorClass){
            p_request.HandleFail(`Could not find editor association for ${editTarget}.`);
            return;
        }

        console.log(`Editing request for ${editTarget} will be handled using ${editorClass.name}`);
        this.Host({
            data:editTarget,
            viewClass:editorClass,
            name:editTarget.id.name
        });

        p_request.HandleSuccess(this);
        
    }

}

module.exports = RootWorkspace;
UI.Register(`ui-root-workspace`, RootWorkspace);
},{"../@.js":6,"../collections/@.js":22,"../environment/assoc-manager.js":96,"../environment/keys.js":98,"../relay.js":122,"../ui-core/@.js":223,"../ui.js":242,"./workspace.js":189}],189:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../../com/@.js`);
const { UI_EVENT, View } = require(`../ui-core/@.js`);
const { POOL, COLLECTION_EVENT, List, CatalogHandler, Catalog, CatalogItem } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const { WorkspaceCell } = require(`./workspace-cell.js`);

class Workspace extends View{
    constructor(){super();}

    _Init(){

        super._Init();

        this._cellDefaultClass = WorkspaceCell;
        this._cells = new List();

        var cHandler = new CatalogHandler();
        cHandler.Subscribe(COLLECTION_EVENT.ITEM_ADDED, this, this._OnCatalogItemAdded);
        cHandler.Subscribe(COLLECTION_EVENT.ITEM_REMOVED, this, this._OnCatalogItemRemoved);

        this._catalogHandler = cHandler;

    }

    get catalog(){return this._catalogHandler.catalog;}
    set catalog(p_value){
        this._catalogHandler.catalog = p_value;
    }

    //---> Rendering
    
    _RenderStyle(){

        return {
            ':host':{
                position:`relative`,
                //width:`100%`,
                //height:`100%`,
                display: `flex`,
                //outline:`1px rgba(0,255,0,0.5) solid`,
                //'outline-offset':`-1px`,
            },
            '.control':{
                position:`relative`,
                flex:`1 1 auto`,
                outline:`1px rgba(0,255,0,0.5) solid`,
                'outline-offset':`-1px`,
            },
            '.cell':{
                position:`relative`
            }
        };

    }

    _Render(){
        super._Render();
    }
    
    _OnCatalogItemAdded(p_catalogHandler, p_item){
        
        if(!U.IoF(p_item, Catalog)){
            throw new Error(`non-catalog item added to workspace catalog : ${p_item}.`);
        }

        var cell = null;
        var cellClass = p_item.GetOption(`cellClass`, this._cellDefaultClass);

        cell = this.Add(cellClass, -1, this, `cell`);
        
        p_catalogHandler.BindItem(p_item, cell);

        if(p_item.data)
        {
            p_item.data.Subscribe(EVENT.RELEASED, this, this._OnItemDataReleased);
        }
        //TODO : Listen to the data in case of release
        //if the data is released, then close associated catalog items

        this._OnCellCreated(p_item, cell);

    }

    _OnCellCreated(p_item, p_cell){
        this._cells.Add(p_item);
        p_cell.Subscribe(UI_EVENT.FOCUS_REQUESTED, this, this._OnCellRequestFocus);
        p_cell.catalog = p_item;
    }

    _OnItemDataReleased(p_data)
    {
        var localCatalog = this.catalog;

        if(!localCatalog){return;}

        var dataHolders = localCatalog.FindDataHolders( p_item.data );
        for(var i = 0, n = dataHolders.length; i < n; i++){
            dataHolders[i].Release();
        }
    }

    _OnCatalogItemRemoved(p_catalogHandler, p_item, p_binding){

        if(p_item.data){ p_item.data.Unsubscribe(EVENT.RELEASED, this, this._OnItemDataReleased); }

        if(p_binding){ 
            this._OnCellRemoved(p_item, p_binding);
            if(p_binding.parent == this){
                // Only release if the workspace is still the parent. 
                p_binding.Release(); 
            }
        }
    }

    _OnCellRemoved(p_item, p_cell){
        this._cells.Remove(p_item);
        p_cell.Unubscribe(UI_EVENT.FOCUS_REQUESTED, this, this._OnCellRequestFocus);
    }

    _OnCellRequestFocus(p_view){
        
    }

    /**
     * 
     * @param {*} p_options
     */
    Host( p_item ){
        
        var localCatalog = this._FetchCatalog();

        
        if(U.IoF(p_item, CatalogItem)){
            // Attempting to host an existing catalog item.
            localCatalog.Add(p_item);
            return;
        }

        // Need to create a new item from `p_item` as options
        var view = null;
        var viewClass = p_item.viewClass;
        var dataHolders = localCatalog.FindDataHolders( p_item.data );
        for(var i = 0, n = dataHolders.length; i < n; i++){
            var view = dataHolders[i].GetOption(`view`, null);
            if(view && U.IoF(view, viewClass)){
                view.RequestFocus();
                return;
            }
        }

        var item = localCatalog.Register( p_item );
        // TODO : Find cell associated to catalog and request focus on newly created view
//        var view = this._catalogHandler.GetBinding(item);
//        view.RequestFocus();

    }

    _FetchCatalog()
    {

        // Fetch cell catalog

        var localCatalog = this.catalog;

        if(!localCatalog){
            // No local catalog exists for this workspace. Create one.
            var wCat = POOL.Rent(Catalog);
            localCatalog = wCat.GetOrCreateCatalog({ name:'RootCell' });
            this.catalog = wCat;
        }else{
            // TODO : Find the active cell's catalog
            // For now just grab the first available catalog.
            var cat = null;
            var n = localCatalog.count;
            var i = 0;
            while( cat == null || i < n ){
                cat = localCatalog.At(i);
                if(!U.IoF(cat, Catalog)){ cat = null; } // Get rid of non-catalog items
                i++;
            }
            if(!cat){
                localCatalog = localCatalog.GetOrCreateCatalog({ name:'RootCell' });
            }else{
                localCatalog = cat;
            }
        }

        return localCatalog;

    }

    //---> Pooling

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = Workspace;
UI.Register('ui-workspace', Workspace);
},{"../../com/@.js":6,"../collections/@.js":22,"../ui-core/@.js":223,"../ui.js":242,"./workspace-cell.js":187}],190:[function(require,module,exports){
module.exports = {
    CONTROL_EVENT : require(`./control-event.js`),
    FieldSettingsControl : require(`./control-field-settings.js`),
    FieldValueControl : require(`./control-field-value.js`),
    FieldValueOverlay : require(`./control-field-overlay.js`),
    Control : require(`./control.js`),
    INPUT_EVENT : require(`./input-event.js`),    
    Editor : require(`./editor.js`),
    EditorEx : require(`./editor-ex.js`),
    InputField : require(`./input-field.js`),
    InputGroup : require(`./input-group.js`),
    Input : require(`./input.js`),
    InspectorGroup : require(`./inspector-group.js`),
    InspectorItem : require(`./inspector-item.js`),
    InspectorView : require(`./inspector-view.js`),
    Inspector : require(`./inspector.js`),
    MetaControlGroup : require(`./meta-control-group.js`),
    MetaControlItem : require(`./meta-control-item.js`),
}
},{"./control-event.js":191,"./control-field-overlay.js":192,"./control-field-settings.js":193,"./control-field-value.js":194,"./control.js":195,"./editor-ex.js":197,"./editor.js":198,"./input-event.js":199,"./input-field.js":200,"./input-group.js":202,"./input.js":203,"./inspector-group.js":215,"./inspector-item.js":216,"./inspector-view.js":217,"./inspector.js":218,"./meta-control-group.js":221,"./meta-control-item.js":222}],191:[function(require,module,exports){
'use strict';

const _evt_valueChanged       = Symbol(`valueChanged`);
const _evt_valueCommitted       = Symbol(`valueCommitted`);


class CONTROL_EVENT{
    constructor() {}

    static get VALUE_CHANGED(){ return _evt_valueChanged; }
    static get VALUE_COMMITTED(){ return _evt_valueCommitted; }
}

module.exports = CONTROL_EVENT;
},{}],192:[function(require,module,exports){
const { U, C, M } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const { TitleBar } = require(`../ui-app/@.js`);
const UI = require(`../ui.js`);
const Control = require(`./control.js`);

class FieldValueOverlay extends Control{
    constructor(){super();}
    
    _Init(){
        super._Init();
    }

    _RenderStyle(){
        var m = 15;
        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`absolute`,
                width:`100%`,
                height:`100%`,
                display:`flex`,
                'flex-flow':`row nowrap`,
                'align-items':`stretch`,
                'align-content':`stretch`,
                //border:`1px solid #fff`
            },
            '.body':{
                flex:`1 1 auto`,
                margin:`2px`,
                padding:`5px`,
                'background-color':`rgba(0,0,0,0.2)`,
            }
        });
    }

    _Render(){
        this._wrapper = U.Element(`div`, {class:`body`}, this._host);
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = FieldValueOverlay;
UI.Register(`ui-field-value-overlay`, FieldValueOverlay);
},{"../@.js":6,"../collections/@.js":22,"../ui-app/@.js":149,"../ui.js":242,"./control.js":195}],193:[function(require,module,exports){
'use strict'

const { U, C, M, EVENT } = require(`../@.js`);
const { INPUT } = require(`../@tools.js`);
const { CatalogItem } = require(`../collections/@.js`);
const { TitleBar, ButtonDragHandle } = require(`../ui-app/@.js`);
const { ExtDrag, ExtDrop } = require(`../ui-core/@.js`);
const { FacadeH4 } = require(`../ui-app/facades.js`);
const UI = require(`../ui.js`);
const { ActionModelReorderField } = require(`../data-core/actions/@model.js`);
const FieldSettings = require(`../data-core/field-settings.js`);

const DATA_EVENT = require(`../data-core/core-data-event.js`);

const InspectorGroup = require(`./inspector-group.js`);
const _flag_allowDropUp = 'allow-drop-up';
const _flag_allowDropDown = 'allow-drop-down';
const _flag_allowDropNone = 'allow-drop-none';

class FieldSettingsControl extends InspectorGroup{
    constructor(){super();}

    _Init(){
        super._Init();

        //this._facadeClass = FacadeH4;
        this._notifiesSelectionStack = true;

        this._dragHandle = null;
        this._handleWidth = 25;
        this._extDrag = new ExtDrag();
        this._extDrag.grabDataCallback = this._Bind(this._GrabDragData);

        this.RegisterClassToggle(this, _flag_allowDropUp, _flag_allowDropDown, _flag_allowDropNone);

        this._extDrop = new ExtDrop();
        this._extDrop.Setup(this, this);
        this._extDrop.Hook({ 
            check:this._Bind(this._AllowReorderDrop), 
            drag:this._Bind(this._ReorderDrag),
            drop:this._Bind(this._ReorderDrop),
            leave:this._Bind(this._ReorderLeave),
        });

    }

    _PostInit(){
        super._PostInit();
        this._extDrag.Setup(this, this._dragHandle, this);
    }

    _Wake(){
        super._Wake();
        this._extDrag.owner = this;
    }

    _RenderStyle(){
        var h = 2;
        var rh = `rgba(${C.COLORS.main},1)`; //C.COLORS.main //255,255,255
        return U.Merge(super._RenderStyle(), {
            ':host':{
                margin:`4px`,
                'margin-top':`2px`,
                'margin-bottom':`2px`,
                'padding-left':`${this._handleWidth +10}px`,
                border:`1px solid rgba(0,0,0,0)`,
            },
            ':host(.allow-drop)':{
                border:`1px solid rgba(${C.COLORS.main},1)`
            },
            '.drag-handle':{
                position:`absolute`,
                width:`${this._handleWidth}px`,
                height:`calc( 100% - 6px )`,
                left:`6px`,//`-${this._handleWidth * 0.8}px`,
                top:`3px`,
                'box-sizing':`border-box`,
                opacity:0.5
            },
            '.header':{
                'justify-content':`center`,
                padding:`6px`
            },
            '.facade':{ flex:`1 1 auto` },

            ':host(.allow-drop-up):before':{
                content:`""`, position:`absolute`, width:`calc(100% + ${h*2}px)`, height:`${h}px`, top:`-${h*2}px`, left:`-${h}px`,// 'pointer-events':`none`,
                'background-color':`${rh}`, 'z-index':999
            },
            ':host(.allow-drop-down):after':{
                content:`""`, position:`absolute`, width:`calc(100% + ${h*2}px)`, height:`${h}px`, bottom:`-${h*2}px`, left:`-${h}px`,// 'pointer-events':`none`,
                'background-color':`${rh}`, 'z-index':999
            },
            ':host(.allow-drop-none)':{
                border:`1px solid rgba(0,0,0,1)`
            },
            ':host(.dragged)':{
                border:`1px dashed ${rh}`
            }
        });
    }

    _Render(){
        this._dragHandle = this.Add(ButtonDragHandle,-1, this._host, `drag-handle`);
        this._dragHandle.icon = `%ICON%/icon_nine.svg`
        this._dragHandle.text = ``;
        this._dragHandle.htitle = `Drag to re-order`;
        super._Render();
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        if(this._data){
            this._facade.label.displayID = this._data.id;
            this._facade.label.italic = !U.Void(this._data.base);
        }else{
            this._facade.label.displayID = null;
        }  
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        var metaInfos = M.ETA(p_data.fieldClass);
        if(metaInfos){
            this._facade.icon = U.Get(metaInfos, `icon`, `%ICON%/icon_field.svg` );
        }
        this.order = p_data.fieldIndex;
    }

    _GrabDragData(){
        return this._data;
    }

    // --->

    _AllowReorderDrop(p_data){
        if(U.IoF(p_data, CatalogItem)){p_data = p_data.data;}
        if(!U.IoF(p_data, FieldSettings)){ return false; }
        return (p_data.model == this._data.model && p_data != this._data);
    }

    _ReorderDrag(p_data){
        if(U.IoF(p_data, CatalogItem)){p_data = p_data.data;}

        var mouse = INPUT.LocalMouse(this).normalized;

        var offset = mouse.y > 0.5 ? 1 : 0;
        this._reorderIndex = this._data.fieldIndex + offset;

        var up = false;
        var down = false;
        var none = true;// false;

        if(this._reorderIndex == p_data.fieldIndex){
            //none = true;
        }else if(offset == 0 && this._reorderIndex-1 == p_data.fieldIndex){
            //none = true;
        }else if(offset > 0){
            down = true;
        }else{
            up = true;
        }

        this.SetFlag(_flag_allowDropNone, none);
        this.SetFlag(_flag_allowDropUp, up);
        this.SetFlag(_flag_allowDropDown, down);

    }

    _ReorderLeave(p_data){
        this.SetFlag(_flag_allowDropNone, false);
        this.SetFlag(_flag_allowDropUp, false);
        this.SetFlag(_flag_allowDropDown, false);
    }

    _ReorderDrop(p_data){
        if(U.IoF(p_data, CatalogItem)){p_data = p_data.data;}
        this._Do(ActionModelReorderField,{
            target:p_data,
            index:this._reorderIndex
        });
    }    

}

module.exports = FieldSettingsControl;
UI.Register(`ui-field-setting-control`, FieldSettingsControl);
},{"../@.js":6,"../@tools.js":7,"../collections/@.js":22,"../data-core/actions/@model.js":44,"../data-core/core-data-event.js":71,"../data-core/field-settings.js":81,"../ui-app/@.js":149,"../ui-app/facades.js":170,"../ui-core/@.js":223,"../ui.js":242,"./inspector-group.js":215}],194:[function(require,module,exports){
const { U, C, M } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const { TitleBar } = require(`../ui-app/@.js`);
const UI = require(`../ui.js`);
const Control = require(`./control.js`);
const FieldValueOverlay = require(`./control-field-overlay.js`);

const INHERITED_VALUE = `inherited`;
const DEFAULTED_VALUE = `defaulted`;

class FieldValueControl extends Control{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._entry = null;
        this._fieldData = null;
        this.RegisterClassToggle(this, INHERITED_VALUE, DEFAULTED_VALUE);

        this._overlayClass = FieldValueOverlay;
        this._overlay = null;

    }

    get entry(){return this._entry;}
    set entry(p_value){this._entry = p_value;}

    get isInheritedValue(){return this._isInheritedValue;}
    set isInheritedValue(p_value){
        if(this._isInheritedValue == p_value){return;}
        this._isInheritedValue = p_value;
        this.SetFlag(INHERITED_VALUE, p_value);
    }

    get isDefaultValue(){return this._isDefaultValue;}
    set isDefaultValue(p_value){
        if(this._isDefaultValue == p_value){return;}
        this._isDefaultValue = p_value;
        this.SetFlag(DEFAULTED_VALUE, p_value);
    }

    get fieldData(){return this._fieldData;}
    set fieldData(p_value){ 
        if(this._fieldData == p_value){return;}
        this._fieldData = p_value;
        this._OnFieldDataChanged();
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                //'margin':`5px`
                'justify-content':`center`,
                'min-height':`50px`
            },
            ':host(.defaulted)':{
            },
            '.overlay':{
                display:`none`,
                'align-self':`center`,
                flex:`1 1 auto`
            },
            ':host(.inherited) .overlay':{
                display:`flex`
            }
        });
    }

    _PostRender(){
        super._PostRender();
        this._overlay = this.Add(this._overlayClass, -1, this._host, `overlay`);
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);

        var fieldID = p_data.id;
        // Try to get the 'raw' value
        var fData = this._entry.GetFieldData(fieldID, true);

        if(U.Void(fData)){
            // Get the inherited value and flag controller
            fData = this._entry.GetBaseFieldData(fieldID);
            this.isInheritedValue = true;
        }else{
            this.isInheritedValue = false;
        }

        this.fieldData = fData;

        //TODO : Need to check whether or not the value is inherited.
        this.isDefaultValue = fData == C.DEFAULT;

    }

    _OnFieldDataChanged(){
        var fieldData = this._fieldData;
        if(U.Void(fieldData)){ return false; }
        return true;
    }

    _CleanUp(){
        
        this.isInheritedValue = false;
        this.isDefaultValue = false;

        super._CleanUp();

        this.entry = null;
        this._fieldData = null;
    }

}

module.exports = FieldValueControl;
UI.Register(`ui-field-value-control`, FieldValueControl);
},{"../@.js":6,"../collections/@.js":22,"../ui-app/@.js":149,"../ui.js":242,"./control-field-overlay.js":192,"./control.js":195}],195:[function(require,module,exports){
'use strict';

const { U, C, EVENT } = require(`../@.js`);
const UI = require(`../ui.js`);
const { OrientedWidget } = require(`../ui-core/@.js`);
const { DATA_EVENT, DataBlock, MetadataObserver } = require(`../data-core/@.js`);
const CommandAction = require(`../actions/command-action.js`);
const Editor = require(`./editor.js`);


class Control extends OrientedWidget{
    constructor(){super();}

    _Init(){
        super._Init();
        this.RegisterClassToggle(this, C.UP, C.DOWN, C.LEFT, C.RIGHT);

        this._metadataObserver = new MetadataObserver();

        this._observer.Hook(DATA_EVENT.DIRTY, this, this._OnDataDirty);
        this._observer.Hook(EVENT.UPDATED, this, this._OnDataUpdated);
    }

    set context(p_value){
        if(this._context == p_value){ return; }
        var oldValue = this._context;
        this._context = p_value;
        this._OnContextChanged(oldValue);
    }
    get context(){ return this._context; }

    _OnContextChanged( p_oldValue ){

    }

    get editor(){
        var p = this._parent;
        while(p != null){
            if(U.IoF(p, Editor)){return p;}
            p = p._parent; 
        }
        return null;
    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(240,240,240,0.1)`,
            UI.sSELECT, `rgba(240,240,240,0.15)`,
            UI.sFS, `rgba(240,240,240,0.2)`);
    }

    _RenderStyle(){

        var s = 6;

        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`relative`,
                display:`flex`,
                flex:`0 1 auto`,
                'min-width': 0,
                'border-radius':`2px`,
            },
            //Separators
            ':host(.up):before, :host(.left):before, :host(.down):after, :host(.right):after':{
                content:`""`, position:`absolute`, 'background-color':`rgba(127,127,127,0.25)`,
                'pointer-events':'none'
            },
            ':host(.up):before, :host(.down):after':{ width:`50%`, height:`2px` },
            ':host(.left):before, :host(.right):after':{ width:`2px`, height:`50%` },
            ':host(.up):before':{ top:`${s}px` },':host(.up)':{ 'margin-top':`${s}px` },
            ':host(.down):after':{ bottom:`-${s}px` },':host(.down)':{ 'margin-bottom':`${s}px` },
            ':host(.left):before':{ left:`-${s}px` },':host(.left)':{ 'margin-left':`${s}px` },
            ':host(.right):after':{ right:`${s}px` },':host(.right)':{ 'margin-right':`${s}px` },
        });
    }

    //--->

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);

        if(U.IoF(this._data, DataBlock)){
            this._metadataObserver.observable = this._data.metadata;
        }else{
            this._metadataObserver.observable = null;
        }

    }

    _OnDataDirty(p_data){
        this._OnDataUpdated(p_data);
    }

    _CleanUp(){
        this.context = null;
        super._CleanUp();
    }

    _Do(p_actionClass, p_operation){
        CommandAction.Do(this, p_actionClass, p_operation);
    }

}

module.exports = Control;
UI.Register(`ui-control`, Control);

},{"../@.js":6,"../actions/command-action.js":13,"../data-core/@.js":43,"../ui-core/@.js":223,"../ui.js":242,"./editor.js":198}],196:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { CSS, Widget } = require(`../ui-core/@.js`);
const { DrawerControls, Drawer, LargeToolButton } = require(`../ui-app/@.js`);
const UI = require(`../ui.js`);

class EditorDrawerControls extends DrawerControls{
    constructor() {super();}

    _Init(){
        super._Init();
        this._defaultControlClass = LargeToolButton;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {

        });
    }

    _OpenSettings(){
        console.log(`Open Settings`);
    }

} 

class EditorDrawer extends Drawer {
    constructor() {super();}

    _Init(){
        super._Init();
        this._controlsClass = EditorDrawerControls;
    }

    _PostInit(){
        super._PostInit();
        //this._controls.order = 2; 
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                width:`354px`,
                flex:`0 0 auto`,
                'background-color':`rgba(127,127,127,0.1)`,
                //'border-left':`1px dashed rgba(127,127,127,0.2)`
            },
            '.controls':{
                'background-color':`rgba(127,127,127,0.0)`,
            }
        });
    }

}

module.exports = {
    EditorDrawerControls : EditorDrawerControls,
    EditorDrawer : EditorDrawer
};

UI.RegisterGroup({
    'editor-drawer-controls':EditorDrawerControls,
    'editor-drawer':EditorDrawer,
});
},{"../@.js":6,"../ui-app/@.js":149,"../ui-core/@.js":223,"../ui.js":242}],197:[function(require,module,exports){
'use strict';

const { U, C, EVENT } = require(`../@.js`);
const { ActionStack } = require(`../actions/@.js`);
const UI = require(`../ui.js`);
const { POOL, List, Dictionary, Catalog } = require(`../collections/@.js`);
const { View } = require(`../ui-core/@.js`);
const { DATA_EVENT } = require(`../data-core/@.js`);
const { APP_UI_FLAGS, StickerBar } = require(`../ui-app/@.js`);
const { Command } = require(`../actions/@.js`);

const InspectorView = require(`./inspector-view.js`);
const { HistoryInspectorView } = require(`./inspectors/@.js`);

const { EditorDrawer } = require(`./editor-drawer.js`);
const Editor = require(`./editor.js`);

class EditorEx extends Editor{
    constructor(){super();}

    _Init(){

        super._Init();

        this._drawerClass = EditorDrawer;
        this._drawer = null;
        this._drawerCatalog = new Catalog(false);

        this._inspectorClass = InspectorView;
        this._inspector = null;

        this._historyClass = HistoryInspectorView;
        this._history = null;

        this._header = null;
        this._body = null;
        this._footer = null;

        this._topStatus = null;
        this._bottomStatus = null;

        this._viewportClass = View;
        this._viewport = null;

    }

    _PostInit(){

        super._PostInit();
        var confs = new Array(0);
        this._InitDrawerCatalog(confs);
        this._drawer.catalog = this._drawerCatalog;

        var conf = null;
        var item = null;
        var view = null;
        var assign = null;

        for(var i = 0, n = confs.length; i < n; i++){
            
            conf = confs[i];
            item = this._drawerCatalog.Register(conf);

            view = item.GetOption('view', null);
            assign = U.Get(conf, `assign`, null);

            console.log(`${assign} >> ${view}`);

            if(view && assign){ 
                this[assign] = view; 
            }

        }

    }

    _InitDrawerCatalog(p_configList){
        p_configList.push(
            { 
                name:`Inspector`,
                icon:`%ICON%/icon_parameters.svg`, //icon:`%ICON%/icon_more.svg`,
                viewClass:this._inspectorClass,
                assign:`_inspector`
            }
        );
    }

    // TODO : An editor offer streamlined way to 'edit' a datablock and
    // store/retrieve metadata into it that are unrelated to actual
    // data but instead are only related to editor values (i.e node placement in a graph, etc)

    //---> Rendering

    _RenderStyle(){
        return U.Merge( super._RenderStyle(),{
            ':host':{
                position:`relative`,
                display: `flex`,                
                'align-items':`stretch`,
                'align-content':`stretch`,
                'min-width': 0,
            },
                ':host(.vertical)':{
                    'flex-flow':`row`,
                },
                ':host(.horizontal)':{
                    'flex-flow':`column`,
                },    

                ':host(.vertical).fs':{
                    //height:`100%`
                },
                ':host(.horizontal).fs':{
                    //width:`100%`
                }, 

            '.fs':{
                flex:`0 0 auto`
            },
            '.body':{
                position:`relative`,
                display: `flex`,                
                'align-items':`stretch`,
                'align-content':`stretch`,

                flex:`1 1 auto` 
            },
            '.viewport':{
                position:`relative`,   
                display: `flex`,             
                flex:`1 1 auto`,
            },
            '.drawer':{
                position:`relative`,   
                display: `flex`,
                flex:`0 0 auto`,
            },
            '.topstatus':{
                position:`absolute`,
                width:`100%`
            }
            


        });
    }

    _Render(){

        this._topStatus = this.Add(StickerBar, -1, this, `topstatus fs`);
        this._header = U.Element(`div`, {class:`header fs`}, this._host);
        this._body = U.Element(`div`, {class:`body`}, this._host);
        this._footer = U.Element(`div`, {class:`footer fs`}, this._host);
        this._bottomStatus = this.Add(StickerBar, -1, this, `fs`);

        this._viewport = this.Add(this._viewportClass, -1, this._body, `viewport`);
        this._drawer = this.Add(this._drawerClass, -1, this._body, `drawer`);
        this._drawer.orientation = C.HORIZONTAL;
        //this._inspector = this.Add(this._inspectorClass, -1, this._body, `inspector`);
        
        this._topStatus.visible = false;
        this._bottomStatus.visible = false;

    }

    //---> Data management

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);
        this._inspector.data = this._data;
        this._inspector.context = this._data;
    }

    _OnDataDirty(p_data){
        super._OnDataDirty(p_data);
        this._ToggleWarning(true);
    }

    _OnDataCleaned(p_data){
        super._OnDataCleaned(p_data);
        this._ToggleWarning(false);
    }

    _ToggleWarning(p_toggle){
        var bar = this._topStatus;
        if(p_toggle){
            this.SetFlag(APP_UI_FLAGS.WARNING, true);
            bar.flag = APP_UI_FLAGS.WARNING;
            bar.text = `There are unsaved modifications.`;
            bar.htitle = `Unsaved modifications are only affect the ecosystem once applied.`;
            bar.visible = true;
        }else{
            this.SetFlag(APP_UI_FLAGS.WARNING, false);
            bar.visible = false;
        }
    }

    _OnOrientationChanged(){
        super._OnOrientationChanged();
        this._inspector.orientation = this._orientation;
    }

    //--->

    Inspect(p_data){
        super.Inspect(p_data);
        this._inspector.RequestFocus();
    }

    _OnInspectedDataChanged(p_oldData)
    {
        super._OnInspectedDataChanged(p_oldData);
        
        if(this._inspectedData)
        {
            this._inspector.data = this._inspectedData;
        }
        else
        {
            this._inspector.data = this._data;
        }
    }

}

module.exports = EditorEx;
UI.Register('ui-editor-ex', EditorEx);
},{"../@.js":6,"../actions/@.js":8,"../collections/@.js":22,"../data-core/@.js":43,"../ui-app/@.js":149,"../ui-core/@.js":223,"../ui.js":242,"./editor-drawer.js":196,"./editor.js":198,"./inspector-view.js":217,"./inspectors/@.js":219}],198:[function(require,module,exports){
'use strict';

const { U, C, EVENT } = require(`../@.js`);
const { INPUT } = require(`../@tools.js`);
const { ActionStack } = require(`../actions/@.js`);
const UI = require(`../ui.js`);
const { POOL, List, Dictionary, Catalog } = require(`../collections/@.js`);
const { View } = require(`../ui-core/@.js`);
const { DATA_EVENT } = require(`../data-core/@.js`);
const { APP_UI_FLAGS, StickerBar } = require(`../ui-app/@.js`);
const { Command } = require(`../actions/@.js`);
const { Observer } = require(`../signals/@.js`);

const InspectorView = require(`./inspector-view.js`);
const { HistoryInspectorView } = require(`./inspectors/@.js`);

const { EditorDrawer } = require(`./editor-drawer.js`);

class Editor extends View{
    constructor(){super();}

    _Init(){

        super._Init();

        //TODO : Find a way to invalidate action stacks
        this._actionStack = new ActionStack();

        this._observer.Hook(DATA_EVENT.DIRTY, this, this._OnDataDirty);
        this._observer.Hook(DATA_EVENT.CLEANED, this, this._OnDataCleaned);

        this._inspectedData = null;
        this._inspectedObserver = new Observer();
        this._inspectedObserver.Hook(EVENT.RELEASED, this, this._OnInspectedDataReleased);

        this.RegisterClassToggle(this, APP_UI_FLAGS.WARNING);

        this._Bind(this.Inspect);

    }

    //---> Data management

    _OnDataChanged(p_oldData){

        this._actionStack.Clear();
        this._commands.context = this._data;

        super._OnDataChanged(p_oldData);

        if(!this._data)
        {
            this._inspectedData = null;
            this._inspectedObserver.observable = null;
        }

    }

    _OnDataUpdated(p_data)
    {
        super._OnDataUpdated(p_data);
    }

    _PostDataChanged(p_oldData){
        super._PostDataChanged(p_oldData);
        if(!this._data){

        }else{
            if(this._data.dirty){ 
                this._OnDataDirty(this._data); 
            }else{
                this._OnDataCleaned(this._data);
            }
        }
    }

    _OnDataDirty(p_data){

    }

    _OnDataCleaned(p_data){

    }

    //--->

    //---> Data

    get inspectedData(){ return this._inspectedData; }
    set inspectedData(p_value){

        
        if(this._inspectedData == p_value){return;}

        var oldValue = this._inspectedData;
        this._inspectedData = p_value;
        this._inspectedObserver.observable = p_value;

        this._OnInspectedDataChanged(oldValue);

        //this._Notify( UI_EVENT.DATA_CHANGED, this, p_value, oldValue );

    }

    _OnInspectedDataChanged(p_oldData){
        
    }

    _OnInspectedDataReleased(){
        this.inspectedData = null;
    }

    Inspect(p_data)
    {
        this.inspectedData = p_data;
    }

    //---> Actions

    Do(p_actionClass, p_options){
        //Group drag-related actions
        this._actionStack.ToggleGrouping( INPUT.dragLength > 1 );
        this._actionStack.Do( p_actionClass, p_options ); 
    }
    Undo(){ this._actionStack.Undo(); }
    Redo(){ this._actionStack.Redo(); }

}

module.exports = Editor;
UI.Register('ui-editor', Editor);
},{"../@.js":6,"../@tools.js":7,"../actions/@.js":8,"../collections/@.js":22,"../data-core/@.js":43,"../signals/@.js":137,"../ui-app/@.js":149,"../ui-core/@.js":223,"../ui.js":242,"./editor-drawer.js":196,"./inspector-view.js":217,"./inspectors/@.js":219}],199:[function(require,module,exports){
'use strict';

const _evt_valueChanged       = Symbol(`valueChanged`);
const _evt_valueCommitted       = Symbol(`valueCommitted`);
const _evt_inputError       = Symbol(`inputError`);
const _evt_formReady       = Symbol(`formReady`);
const _evt_formInvalid       = Symbol(`formInvalid`);

class INPUT_EVENT{
    constructor() {}

    static get VALUE_CHANGED(){ return _evt_valueChanged; }
    static get VALUE_SUBMITTED(){ return _evt_valueCommitted; }
    static get INPUT_ERROR(){ return _evt_inputError; }

    static get FORM_READY(){ return _evt_formReady; }
    static get FORM_INVALID(){ return _evt_formInvalid; }

}

module.exports = INPUT_EVENT;
},{}],200:[function(require,module,exports){
//implement this : https://javascript.info/events-change-input

const { U, C, PATH, K } = require(`../../com/@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const UI = require(`../ui.js`);
const INPUT = require(`../input.js`);
const INPUT_EVENT = require(`./input-event.js`);
const Input = require(`./input.js`);

class InputField extends Input{
    constructor(){super();}

    _Init(){
        super._Init();
        this._inputField = null;

        this._Bind(this._onInput);
        this._Bind(this._onChange);
        this._Bind(this._onFocusIn);
        this._Bind(this._onFocusOut);
        this._Bind(this._FOut);
        this._Bind(this._FIn);
    }

    _PostInit(){
        super._PostInit();
        this._inputField.addEventListener('focus', this._onFocusIn);
        this._inputField.addEventListener('focusout', this._onFocusOut);
        this._inputField.addEventListener(`input`, this._onInput );
        this._inputField.addEventListener(`change`, this._onChange );
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`relative`,
                'background-color':`rgba(0,0,0,0)`,
                display:`flex`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'min-width':`50px`,
                'border-radius':`3px`,
            },
            '.field':{
                'font-family': `Regular, sans-serif`,
                flex:`1 1 auto`,
                'min-width':0,//needed for flexbox to drive input's width
                width:0,//needed for flexbox to drive input's width
                outline: `none`,
                color:`rgba(200,200,200,1)`,
                'border-radius':`0px`,
                border:`1px solid rgba(0,0,0,0.1)`, 
                'background-color':`rgba(0,0,0,0.2)`,
                padding:`5px`,
                'border-radius':`3px`,
                color:`#fff`
            },
            '.field::placeholder':{
                'font-style': `italic`
            },
            '.field::-webkit-search-cancel-button':{
                position:`relative`,
                right:`-5px`,            
                '-webkit-appearance': `none`,
                height: `20px`,
                width: `20px`,
                'border-radius':`10px`,
                background: `url(${PATH.EX('%ICON%/icon_delete.svg')}) no-repeat center`
            },
            '.field:focus':{
                'border-color':`rgba(${C.COLORS.main},1)`,
            },

            ':host(.infos) .field':{
                'border-color':`rgba(${C.COLORS.infos},1)`,
            },
            ':host(.warning) .field':{
                'border-color':`rgba(${C.COLORS.warning},1)`,
            },
            ':host(.error) .field':{
                'border-color':`rgba(${C.COLORS.error},1)`,
            }
        });

    }

    _Render(){
        this._inputField = U.Element(`input`, {class:'field'}, this._host); //, type:'search'
    }

    set placeholderValue(p_value){
        this._inputField.setAttribute(`placeholder`, p_value);
    }

    _onInput(p_evt){
        this.changedValue = this._GrabValue();
    }

    _onChange(p_evt){
        this.changedValue = this._GrabValue();
    }

    _GrabValue(){
        return this._inputField.value;
    }

    _FIn(){
        this._inputField.focus();
    }

    _FOut(p_evt){
        if(INPUT.shift){ return; }

        if(p_evt){ p_evt.preventDefault(); }
        this._inputField.blur();
    }

    _onFocusIn(p_evt){
        INPUT.ONKeyDown(K._enter, this._FOut);
    }

    _onFocusOut(p_evt){
        INPUT.OFFKeyDown(K._enter, this._FOut);
        this.SubmitValue();
        this.SoftReset();
    }

    _UpdatePreview(){
        this._inputField.value = this._currentValue;
    }

}

module.exports = InputField;
UI.Register(`ui-input-field`, InputField);
},{"../../com/@.js":6,"../collections/@.js":22,"../input.js":104,"../ui.js":242,"./input-event.js":199,"./input.js":203}],201:[function(require,module,exports){
/**
 * For manipulating a group of input as a single input.
 * Abstract handler.
 */
const { U } = require(`../@.js`);
const { DisposableObjectEx, Dictionary, List } = require(`../collections/@.js`);
const INPUT_EVENT = require(`./input-event.js`);
const UI = require(`../ui.js`);
const Input = require(`./input.js`);

class InputFormHandler extends DisposableObjectEx{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputList = new List();
        this._inputValues = {};
        this._errorCount = 0;
        this._invalidForm = false;
    }

    get inputValues(){ return this._inputValues; }

    get invalidForm(){ return this._invalidForm; }

    Register(p_input){

        if(!U.IoF(p_input, Input)){ throw new Error(`InputFormHandler cannot register non-input items.`); }
        if(!this._inputList.Add(p_input)){ return; }

        this._inputValues[p_input.inputId] = p_input.currentValue;
        p_input._internalValidateChangedValue();

        if(p_input.invalidInput){
            this._invalidForm = true;
            this._Notify(INPUT_EVENT.FORM_INVALID, this);
        }else if(!this._invalidForm){
            this._Notify(INPUT_EVENT.FORM_READY, this);
        }

        p_input.Subscribe(INPUT_EVENT.VALUE_SUBMITTED, this, this._OnInputSubmit);
        p_input.Subscribe(INPUT_EVENT.VALUE_CHANGED, this, this._OnInputChanged);
        p_input.Subscribe(INPUT_EVENT.INPUT_ERROR, this, this._OnInputError);

    }

    Unregister(p_input){

        if(!this._inputList.Remove(p_input)){ return; }

        delete this._inputValues[p_input.inputId];

        p_input.Unsubscribe(INPUT_EVENT.VALUE_SUBMITTED, this, this._OnInputSubmit);
        p_input.Unsubscribe(INPUT_EVENT.VALUE_CHANGED, this, this._OnInputChanged);
        p_input.Unsubscribe(INPUT_EVENT.INPUT_ERROR, this, this._OnInputError);

    }

    ValidateForm(){
        var was = this._invalidForm;
        this._invalidForm = false;
        this._errorCount = 0;
        this._inputList.ForEach(this._CheckInput, this);

        if(this._invalidForm != was)
        {
            if(this._invalidForm){
                // Form is now invalid
                this._Notify(INPUT_EVENT.FORM_INVALID, this);
            }else{
                // For is now valid
                this._Notify(INPUT_EVENT.FORM_READY, this);
            }
        }

        return this._invalidForm;
    }

    _CheckInput(p_input)
    {
        if(p_input.invalidInput){
            this._invalidForm = true;
            this._errorCount += p_input._inputErrors.length;
        }
    }

    Clear(){
        for(var i = 0, n = this._inputList.count; i < n; i++){
            this.Unregister(this._inputList.last);
        }
    }

    _OnInputSubmit(p_input, p_newValue){
        this.ValidateForm();
        this._inputValues[p_input.inputId] = p_newValue;
    }

    _OnInputChanged(p_input, p_newValue){
        this.ValidateForm();
        this._inputValues[p_input.inputId] = p_newValue;
    }

    _OnInputError(p_input, p_errors){
        this.ValidateForm();
    }

}

module.exports = InputFormHandler;
},{"../@.js":6,"../collections/@.js":22,"../ui.js":242,"./input-event.js":199,"./input.js":203}],202:[function(require,module,exports){
/**
 * For manipulating multi-dimensional values (i.e a curve with handles)
 */
const { DisposableObjectEx } = require(`../collections/@.js`);
const UI = require(`../ui.js`);
const Input = require(`./input.js`);

class InputGroup extends Input{
    constructor(){super();}
    
}

module.exports = InputGroup;
UI.Register(`ui-input-group`, InputGroup);
},{"../collections/@.js":22,"../ui.js":242,"./input.js":203}],203:[function(require,module,exports){
/**
 * Input are abstract data manipulator.
 * They don't know what they are manipulating, or why.
 */
const { U, C } = require(`../../com/util.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const { Widget } = require(`../ui-core/@.js`);
const { APP_UI_FLAGS } = require(`../ui-app/@.js`);
const UI = require(`../ui.js`);
const INPUT_EVENT = require(`./input-event.js`);

class Input extends Widget{
    constructor(){super();}
    

    //---> Init

    _Init(){
        super._Init();
        this._currentValue = null;
        this._changedValue = null;

        this._invalidInput = false;
        this._inputErrors = new Array(0);
        this._externalValidationStack = new Array(0);
        this._externalSanitizationStack = new Array(0);
        this._errorFeedbacks = new Array(0);
        
        this._updatePreviewOnChange = true;
        this._submitOnChange = true;        

        this._inputId = ``;
        
        this.RegisterClassToggle(this, APP_UI_FLAGS.INFOS, APP_UI_FLAGS.WARNING, APP_UI_FLAGS.ERROR);
    }

    //---> Current value

    get submitOnChange(){ return this._submitOnChange; }
    set submitOnChange(p_value){ this._submitOnChange = p_value; }

    get currentValue(){return this._currentValue;}
    set currentValue(p_value){
        if(this._currentValue == p_value){
            this.changedValue = p_value;
            return;
        }
        var oldValue = this._currentValue;
        this._currentValue = p_value;
        this._changedValue = p_value; //Setting current value override the edited value.
        this._OnCurrentValueChanged(oldValue);
    }

    get invalidInput(){return this._invalidInput;}

    get inputId(){return this._inputId;}
    set inputId(p_value){this._inputId = p_value;}

    _OnCurrentValueChanged(p_oldValue){
        this._UpdatePreview();
    }

    //---> Edited value

    get changedValue(){return this._changedValue;}
    set changedValue(p_value){
        if(this._changedValue == p_value){return;}
        var oldValue = this._changedValue;
        this._changedValue = p_value;
        this._OnValueChanged(oldValue);
    }

    _OnValueChanged(p_oldValue){
        this._internalValidateChangedValue();
        this._Notify(INPUT_EVENT.VALUE_CHANGED, this, this._changedValue);
        if(this._updatePreviewOnChange){ this._UpdatePreview(); }
        if(this._submitOnChange){ this.SubmitValue(); }
    }

    _IsValueChanged(){
        return this._currentValue != this._changedValue;
    }

    _SelectionLost(){
        super._SelectionLost();
        this.SubmitValue(); //Auto-commit on selection lost
        this.SoftReset();
    }

    _SanitizeValue( p_value )
    {
        //Check external validation callbacks
        var check = null;
        for(var i = 0, n = this._externalSanitizationStack.length; i < n; i++)
        {
            check = this._externalSanitizationStack[i];
            p_value = check.fn.call( check.thisArg, p_value);
        }

        return p_value;
    }

    _ValidateChangedValue(p_value)
    {

    }

    _ClearErrors(){
        this._ClearFeedbacks();
        this._invalidInput = false;
        this._inputErrors.length = 0;
    }

    /**
     * Validate whether the current 'changedValue' is valid or not
     * and generate an error report in the form { type:'', message:'' }
     * Make your life easier : store preset messages.
     */
    _internalValidateChangedValue(){

        this._ClearErrors();
        this._ValidateChangedValue(this._changedValue);

        //Check external validation callbacks
        var result = null;
        var check = null;
        for(var i = 0, n = this._externalValidationStack.length; i < n; i++)
        {
            check = this._externalValidationStack[i];
            result = check.fn.call( check.thisArg, this._changedValue);
            if(result){ this._PushError(result); }
        }

        this._invalidInput = ( this._inputErrors.length > 0 );
        if(this._invalidInput){ this._internalOnInputError(); }

        return !this._invalidInput;

    }

    /**
     * Add a sanitization callback
     * @param {*} p_fn 
     * @param {*} p_thisArg 
     */
    AddSanitization(p_fn, p_thisArg = null)
    {
        var item = null;
        if((typeof p_fn) == 'object'){
            item = p_fn;
        }else{
            item = { fn:p_fn, thisArg:p_thisArg };
        }
        this._externalSanitizationStack.push(item);
    }

    /**
     * Add a validation callback
     * @param {*} p_fn 
     * @param {*} p_thisArg 
     */
    AddValidation(p_fn, p_thisArg = null)
    {
        var item = null;
        if((typeof p_fn) == 'object'){
            item = p_fn;
        }else{
            item = { fn:p_fn, thisArg:p_thisArg };
        }
        this._externalValidationStack.push(item);
    }

    _PushError(p_err)
    {
        if((typeof p_err) == 'string'){ p_err = { type:APP_UI_FLAGS.ERROR, message:p_err }; }

        if(this._inputErrors.includes(p_err)){return;}

        this._inputErrors.push(p_err);
        this._invalidInput = true;
    }

    _internalOnInputError(){
        this._OnInputErrors();
        this._Notify(INPUT_EVENT.INPUT_ERROR, this, this._inputErrors);
    }

    _OnInputErrors(){

        var err;
        for(var i = 0, n = this._inputErrors.length; i < n; i++ )
        {
            err = this._inputErrors[i];
            this.SetFlag(err.type, true);
            var feedback = this._AddFeedback(err);
            if(feedback){this._errorFeedbacks.push(feedback);}
        }

    }

    _UpdatePreview(){
        
    }

    _AddFeedback(p_err){
        return null;
    }

    /**
     * Concat all error messages associated with a given flag.
     * @param {*} p_flag 
     */
    _ConcatErrors(p_flag, p_break = '<br/>')
    {
        var str = ``;
        var obj;
        for(var i = 0, n = this._inputErrors.length, nMinus = n-1; i < n; i++){
            obj = this._inputErrors[i];
            if(obj.type != p_flag){continue;}
            str += obj.message;
            if(i != nMinus){
                str += p_break;
            }
        }
        return str;
    }

    _ClearFeedbacks(){

        this.SetFlag(APP_UI_FLAGS.INFOS, false);
        this.SetFlag(APP_UI_FLAGS.WARNING, false);
        this.SetFlag(APP_UI_FLAGS.ERROR, false);

        for(var i = 0, n = this._errorFeedbacks.length; i < n; i++){
            this._errorFeedbacks[i].Release();
        }

        this._errorFeedbacks.length = 0;

    }

    //----> Submit
    
    SubmitValue(){

        // Silently sanitize value right before submit
        // This way it does not intrudes with user input while input happens
        this.changedValue = this._SanitizeValue(this.changedValue);

        // Ignore submit if value is left unchanged
        if(!this._IsValueChanged()){return;}
        if(!this._internalValidateChangedValue()){ 
            this.changedValue = this._currentValue;
            return; 
        }

        this._Notify(INPUT_EVENT.VALUE_SUBMITTED, this, this._changedValue);
        this._UpdatePreview();

    }

    //-----> Soft reset input

    /**
     * Soft reset input : revert input value back to the stored one, clears feedbacks etc.
     */
    SoftReset(){
        this.changedValue = this.currentValue;
        this._ClearErrors();
        this._UpdatePreview();
    }

    //---> Pooling

    _CleanUp(){
        super._CleanUp();        
        this._ClearErrors();
        this._externalValidationStack.length = 0;
        this._inputId = ``;
        this._currentValue = null;
        this._changedValue = null;
    }

}

module.exports = Input;
UI.Register(`ui-input`, Input);
},{"../../com/util.js":244,"../collections/@.js":22,"../ui-app/@.js":149,"../ui-core/@.js":223,"../ui.js":242,"./input-event.js":199}],204:[function(require,module,exports){
module.exports = {
    InputBoolean : require(`./input-boolean.js`),
    InputColor : require(`./input-color.js`),
    InputList : require(`./input-list.js`),
    InputNumber : require(`./input-number.js`),
    InputText : require(`./input-text.js`),
    InputTextarea : require(`./input-textarea.js`),
    InputIdentifier : require(`./input-identifier.js`),
    InputPath : require(`./input-path.js`),
    InputFile : require(`./input-file.js`),
    InputDirectory : require(`./input-directory.js`),
}
},{"./input-boolean.js":205,"./input-color.js":206,"./input-directory.js":207,"./input-file.js":208,"./input-identifier.js":209,"./input-list.js":210,"./input-number.js":211,"./input-path.js":212,"./input-text.js":213,"./input-textarea.js":214}],205:[function(require,module,exports){
const { U, C } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const InputField = require(`../input-field.js`);

const _flag_CHECKED = `checked`;

class InputBoolean extends InputField{
    constructor(){super();}

    _Init(){
        super._Init();
        this.RegisterClassToggle(this, _flag_CHECKED);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'border-radius':`3px`,
                //'width':`40px`,
                'min-width':`32px`,
                'height':`20px`
            },
            '.field':{
                position:`absolute`,
                width:`100%`,
                height:`100%`,
                opacity:0
            },
            '.body':{
                transition: `all 0.15s ease`,
                position:`absolute`,
                width:`100%`,
                height:`100%`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`flex-start`,
                'align-content':`flex-start`,
                'background-color':`black`,
                'border-radius':`10px`,
            },
            '.handle':{
                'pointer-events':`none`,
                position:`relative`,
                width:`50%`, //`20px`,
                height:`20px`,
                'background-color':`rgba(127,127,127,1)`,
                'border-radius':`10px`,
                left:`0px`,
                transform:`scale(0.5,0.5)`,
                flex:`0 0 auto`,
                'transform-origin': `10px 50%`,
            },
            '.handle:after, .handle:before':{
                content:`""`, height:`20px`, position:`absolute`, 'pointer-events':`none`, //opacity:0.5,
                'font-size':`2.5em`, top:`-12px`, 'font-family': `Condensed, sans-serif`
            },
            '.handle:after':{
                //content:`"NO"`, color:`rgba(127,127,127,1)`, right:`-40px`,
            },
            ':host(.checked) .body':{
                'align-items':`flex-end`,
                'align-content':`flex-end`,
                //'background-color':`rgba(${C.COLORS.main},1)`,
            },
            ':host(.checked) .handle':{
                'transform-origin': `calc(100% - 10px) 50%`,
                'background-color':`white`,
                'align-items':`flex-end`,
                'align-content':`flex-end`
            },
            ':host(.checked) .handle:after':{
                content:`""`
            },
            ':host(.checked) .handle:before':{
                //content:`"YES"`, color:`#fff`, left:`-40px`,  
            },
        });

    }
    
    _Render(){
        var body = U.Element(`div`, {class:`body`}, this._host);
        this._handle = U.Element(`div`, {class:`handle`}, body);
        this._inputField = U.Element(`input`, {class:'field', type:'checkbox'}, this._host);
    }

    _GrabValue(){
        return this._inputField.checked;
    }

    _UpdatePreview(){
        this._inputField.checked = this._changedValue;
        this.SetFlag(_flag_CHECKED, this._changedValue);
    }

}

module.exports = InputBoolean;
UI.Register(`ui-input-boolean`, InputBoolean);
},{"../../@.js":6,"../../@tools.js":7,"../input-field.js":200}],206:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const InputField = require(`../input-field.js`);

class InputColor extends InputField{
    constructor(){super();}

    _Init(){
        super._Init();
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'border-radius':`3px`
            },
            '.field':{
                padding:`0px`,
                opacity:0,
            }
        });

    }

    _Render(){
        this._inputField = U.Element(`input`, {class:'field', type:'color'}, this._host);
    }
    
    _UpdatePreview(){
        super._UpdatePreview();
        this.style['background-color'] = this._changedValue;
    }

}

module.exports = InputColor;
UI.Register(`ui-input-color`, InputColor);
},{"../../@.js":6,"../../@tools.js":7,"../input-field.js":200}],207:[function(require,module,exports){
const { U, PATH } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const APP_UI_FLAGS = require(`../../ui-app/app-ui-flags.js`);
const Textfield = require(`../../ui-core/textfield.js`);
const InputField = require(`../input-field.js`);
const InputFile = require(`./input-file.js`);

class InputDirectory extends InputFile{
    constructor(){super();}

    _Init(){
        super._Init();
        this._openType = 'openDirectory';
    }

}

module.exports = InputDirectory;
UI.Register(`ui-input-directory`, InputDirectory);
},{"../../@.js":6,"../../@tools.js":7,"../../ui-app/app-ui-flags.js":151,"../../ui-core/textfield.js":236,"../input-field.js":200,"./input-file.js":208}],208:[function(require,module,exports){
const { U, PATH } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const APP_UI_FLAGS = require(`../../ui-app/app-ui-flags.js`);
const Textfield = require(`../../ui-core/textfield.js`);
const InputField = require(`../input-field.js`);
const InputPath = require(`./input-path.js`);
const ToolButton = require(`../../ui-app/button-tool.js`);
const ENV = require('../../environment.js');

class InputFile extends InputPath{
    constructor(){super();}

    _Init(){
        super._Init();
        this._Bind(this._onPickerChange);
        this._Bind(this._Picked);

        this._openType = 'openFile';
        this._picker = null;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            '.input-btn':{
                flex:`1 1 30px`,
                'max-width':`30px`
            }
        });
        /*
        //This is for the default file picker
        return U.Merge(super._RenderStyle(), {
            '.input-btn':{
                flex:`1 0 30px`,
                'max-width':`30px`
            },
            '.input-btn::-webkit-file-upload-button': {
                visibility: `hidden`
            },
            '.input-btn::before': {
                content: '"..."',
                'box-sizing':`border-box`, 
                display: `inline-block`,
                'border-radius': `3px`,
                padding: `5px 10px`,
                outline: `none`,
                'white-space': `nowrap`,
                '-webkit-user-select': `none`,
                cursor: `pointer`,
                'height':`100%`,
                'width':`30px`,
                'background-color':this.GEC(UI.elBG, UI.sIDLE)
            },
            '.input-btn:hover::before':{
                'background-color':this.GEC(UI.elBG, UI.sFOCUS)
            },
            '.input-btn:active::before':{
                'background-color':this.GEC(UI.elBG, UI.sSELECT)
            }
        });
        */
    }

    _Render(){
        super._Render();
        this._picker = this.Add(ToolButton, -1, this._host, `input-btn`);
        this._picker.options = { 
            icon:`%ICON%/icon_more.svg`,
            trigger:{fn:this._Pick, thisArg:this} 
        };
        
        /*
        this._picker = U.Element(`input`, {class:'input-btn', type:'file'}, this._host);
        this._picker.addEventListener(`change`, this._onPickerChange );
        */
    }

    _Pick(){
        if(ENV.NODE){
            var {dialog} = require('electron').remote;

            var path = dialog.showOpenDialog({
                defaultPath : this._currentValue,
                properties: [this._openType]
            }).then(this._Picked);
        }
    }

    _Picked(p_value){
        var val = p_value.filePaths[0];
        if(val == undefined){return;}
        this.changedValue = p_value.filePaths[0];
    }

    _onPickerChange(p_evt){
        console.log(this._picker.value);
        console.log(p_evt);
    }

}

module.exports = InputFile;
UI.Register(`ui-input-file`, InputFile);
},{"../../@.js":6,"../../@tools.js":7,"../../environment.js":94,"../../ui-app/app-ui-flags.js":151,"../../ui-app/button-tool.js":156,"../../ui-core/textfield.js":236,"../input-field.js":200,"./input-path.js":212,"electron":359}],209:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const APP_UI_FLAGS = require(`../../ui-app/app-ui-flags.js`);
const Textfield = require(`../../ui-core/textfield.js`);
const InputField = require(`../input-field.js`);


const ERR_SPACE = { type:APP_UI_FLAGS.ERROR, message:`No space allowed.` };
const ERR_NUM = { type:APP_UI_FLAGS.ERROR, message:`Must starts with <strong>A-Z, a-z</strong> or <strong>_</strong>` };
const ERR_EMPTY = { type:APP_UI_FLAGS.ERROR, message:`Cannot be empty` };
const ERR_ILLEGAL_CHARS = { type:APP_UI_FLAGS.ERROR, message:`Can only contains the following characters : <strong>A-Z, a-z, _, 0-9</strong>` };

class InputIdentifier extends InputField{
    constructor(){super();}

    _Init(){
        super._Init();
        this._issues = new Array(0);
        this._updatePreviewOnChange = false;
        this._submitOnChange = false;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                display: `flex`,          
                'flex-flow':`column nowrap`,      
                'align-items':`stretch`,
                'align-content':`stretch`,
            },
            '.field':{
                flex:`1 1 auto`,
                width:`auto`
            }
        });
    }

    _Render(){
        this._inputField = U.Element(`input`, {class:'field', type:'search'}, this._host);
        this._tf = this.Add(Textfield);
    }

    _OnInputErrors(){
        super._OnInputErrors();
        this._tf.text = this._ConcatErrors(APP_UI_FLAGS.ERROR, '<br/>');
    }

    _ClearFeedbacks(){
        super._ClearFeedbacks();
        this._tf.text = ``;
    }

    _ValidateChangedValue(p_value){
        super._ValidateChangedValue(p_value);
        var e = false;
        if(!U.ValidIdentifier(p_value)){
            if(U.Empty(p_value)){ 
                this._PushError(ERR_EMPTY);
            }else{
                if(U.StartWithNumber(p_value)){
                    this._PushError(ERR_NUM); e = true;}

                if(U.ContainsAnySpace(p_value)){
                    this._PushError(ERR_SPACE); e = true;}

                if(!e){ //If none of the above, assume illegal chars.
                    this._PushError(ERR_ILLEGAL_CHARS); }
            }
        }
    }

}

module.exports = InputIdentifier;
UI.Register(`ui-input-identifier`, InputIdentifier);
},{"../../@.js":6,"../../@tools.js":7,"../../ui-app/app-ui-flags.js":151,"../../ui-core/textfield.js":236,"../input-field.js":200}],210:[function(require,module,exports){
/**
 * Select a choice amongst a list of available options.
 * Actually this is merely a popup trigger and data forwarder.
 * Leverage tree item browser or create a browser that only display one folder at a time with a breadcrum
 */

const { U } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const Input = require(`../input.js`);

class InputList extends Input{
    constructor(){super();}

    _Init(){
        super._Init();
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            '.field':{
            }
        });
    }

    _Render(){

    }

}

module.exports = InputList;
UI.Register(`ui-input-list`, InputList);
},{"../../@.js":6,"../../@tools.js":7,"../input.js":203}],211:[function(require,module,exports){
const { U, C } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const InputField = require(`../input-field.js`);

class InputNumber extends InputField{
    constructor(){super();}

    _Init(){
        super._Init();
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            '.field': {
                '-webkit-appearance': `none`,
                margin:`0px`,
            },
            '.field.slider:before': {
                content:`""`,
                '-webkit-appearance': `none`,
                position:`absolute`,
                width:`calc(100% - 12px)`,
                height:`1px`,
                'background-color': `rgba(127,127,127,0.5)`,
                top:`50%`,
            },
            '.field:focus':{
                'box-shadow': ``,
            },
            '.field.slider:focus:before':{
                //'background-color': `rgba(${C.COLORS.main},1)`,
            },
            '.field::-webkit-slider-thumb': {
                '-webkit-appearance': `none`,
                width: `3px`,
                height: `15.5px`,
                background: `rgba(127,127,127,1)`,
                cursor: `pointer`,
                'border-radius':`3px`
            },
        });
    }

    SetSliderData(m_min = 0, m_max = 0, m_step = null){
        if(m_min != m_max){
            if(!m_step){ m_step = ( m_max - m_min ) / 100; }
            this._inputField.setAttribute('type', `range`);
            this._inputField.setAttribute('min', m_min);
            this._inputField.setAttribute('max', m_max);
            this._inputField.setAttribute('step', m_step);
            this.SetFlag(`slider`, true);
        }else{
            this._inputField.setAttribute('type', `number`);
            this._inputField.removeAttribute('min');
            this._inputField.removeAttribute('max');
            this._inputField.removeAttribute('step');
            this.SetFlag(`slider`, false);
        }
    }

    _Render(){
        this._inputField = U.Element(`input`, {class:'field', type:'number' }, this._host);
        this.RegisterClassToggle(this._inputField, `slider`);
        //this.SetSliderData(0,1,0.01);
    }

    _GrabValue(){
        var n = Number(this._inputField.value);
        return Number.isNaN(n) ? 0 : n;
    }

    _CleanUp(){
        this.SetSliderData();
        super._CleanUp();
    }

}

module.exports = InputNumber;
UI.Register(`ui-input-number`, InputNumber);
},{"../../@.js":6,"../../@tools.js":7,"../input-field.js":200}],212:[function(require,module,exports){
const { U, PATH } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const APP_UI_FLAGS = require(`../../ui-app/app-ui-flags.js`);
const Textfield = require(`../../ui-core/textfield.js`);
const InputField = require(`../input-field.js`);

class InputPath extends InputField{
    constructor(){super();}

    _SanitizeValue(p_value){
        return PATH.Sanitize(super._SanitizeValue(p_value));
    }

}

module.exports = InputPath;
UI.Register(`ui-input-path`, InputPath);
},{"../../@.js":6,"../../@tools.js":7,"../../ui-app/app-ui-flags.js":151,"../../ui-core/textfield.js":236,"../input-field.js":200}],213:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const InputField = require(`../input-field.js`);

class InputText extends InputField{
    constructor(){super();}

    _Init(){
        super._Init();
        this._updatePreviewOnChange = false;
        this._submitOnChange = false;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            '.field':{
                resize:'vertical'
            }
        });
    }

    _Render(){
        this._inputField = U.Element(`input`, {class:'field', type:'search'}, this._host);
    }

}

module.exports = InputText;
UI.Register(`ui-input-text`, InputText);
},{"../../@.js":6,"../../@tools.js":7,"../input-field.js":200}],214:[function(require,module,exports){
const { U } = require(`../../@.js`);
const { UI } = require(`../../@tools.js`);
const InputField = require(`../input-field.js`);

class InputTextarea extends InputField{
    constructor(){super();}

    _Init(){
        super._Init();
        this._updatePreviewOnChange = false;
        this._submitOnChange = false;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            '.field':{
                resize:'vertical',
                'font-family': `Regular, sans-serif`
            },
            '.field::-webkit-scrollbar-track':{
                'background-color':`rgba(127,127,127,0.05)`,
            },
            '.field::-webkit-scrollbar':{
                width: `2px`,
                height: `2px`,
                'background-color': `rgba(127,127,127,0.05)`
            },
            '.field::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.05)',
            },
            '.field:hover::-webkit-scrollbar':{
                width: `4px`,
                height: `4px`,
            },
            '.field:hover::-webkit-scrollbar-thumb':{
                'background-color': 'rgba(255,255,255,0.15)',
            }
        });
    }

    _Render(){
        this._inputField = U.Element(`textarea`, {class:'field', rows:2}, this._host);
    }

}

module.exports = InputTextarea;
UI.Register(`ui-input-textarea`, InputTextarea);
},{"../../@.js":6,"../../@tools.js":7,"../input-field.js":200}],215:[function(require,module,exports){
const { U } = require(`../@.js`);
const { UI_EVENT, UI_FLAGS, ExtExpand } = require(`../ui-core/@.js`);
const { Toolbar, ToolButton, Facade } = require(`../ui-app/@.js`);
const UI = require(`../ui.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);

const InspectorItem = require(`./inspector-item.js`);


class InspectorGroup extends InspectorItem{
    constructor(){super(); this._staticContentDefault = this._staticContent;}

    _Init(){
        super._Init();
        
        this._extExpand = new ExtExpand();
        this._extExpand._toggled = false;
        this._extExpand.Subscribe(UI_EVENT.EXPANDED, this, this._Expand);
        this._extExpand.Subscribe(UI_EVENT.COLLAPSED, this, this._Collapse);
        
        this._header = null;
        this._expandOnHeaderAltActivation = U.Default(this._expandOnHeaderAltActivation , true);

        this._useGroupExpand = U.Default(this._useGroupExpand, true);

        this._expandBtnClass = ToolButton;
        this._expandBtn = null;

        this._facadeClass = Facade;
        this._facade = null;

        this._toolbarClass = Toolbar;
        this._toolbar = null;
       
        this._footer = null;

        this._staticContent = true; //Always build controllers
        this._alwaysExpanded = false; //Keep group expanded after release (static content only)

    }

    _PostInit(){
        super._PostInit();
        this._extExpand.Setup( this, this._wrapper, this._expandBtn );
    }

    get staticContent(){return this._staticContent;}
    set staticContent(p_value){this._staticContent = p_value;}

    get header(){return this._header;}
    get body(){ return this._wrapper; }
    get footer(){return this._footer;}

    _InitColors(){
        super._InitColors();
        var c = `127,127,127`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},0.1)`,
            UI.sFOCUS, `rgba(${c},0.2)`,
            UI.sSELECT, `rgba(${c},0.3)`,
            UI.sFS, `rgba(${c},0.4)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                //TODO : Implement orientation in styling
                position:`relative`,
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'margin':`5px`,
                'min-width':0,
            },
            '.header':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`row nowrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'justify-content':`space-between`,

                flex:`1 1 auto`,
                padding:`12px`,
            },
            '.expandIcon':{ flex:`0 0 auto` },
            '.facade':{ 
                flex:`0 1 auto`,
            },
            '.toolbar':{ 
                transition: `all 0.3s ease`,
                flex:`0 0 auto`,
                opacity:0,
            },
            ':host(.focused) .toolbar':{
                opacity:1
            },
            '.body':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,

                flex:`1 1 auto`,
            },
            '.group':{
                'min-width':0,
            },
            ':host(.collapsed) .body':{
                display:`none`,
            },
            ':host(.expanded) .body':{
                display:`flex`,
            },
        });
    }

    _Render(){

        this._header = U.Element(`div`, {class:`header`}, this._host);

        this._expandBtn = this.Add(this._expandBtnClass, -1, this._header, `expandIcon`);
        this._expandBtn.scale = 0.75;

        this._facade = this.Add(this._facadeClass, -1, this._header, `facade`);
        this._toolbar = this.Add(this._toolbarClass, -1, this._header, `toolbar`);

        this._wrapper = U.Element(`div`, {class:`body`}, this._host);
        this._footer = U.Element(`div`, {class:`footer`}, this._host);

        this._expandBtn.options = {
            icon:`%ICON%/icon_expand_arrow.svg`, text:`Expand`
        };

        if(this._useGroupExpand)
        {

            this._expandAllBtn = this._toolbar.CreateHandle({
                icon:`%ICON%/icon_expand_all.svg`, text:`Expand All`,
                trigger:{ thisArg:this, fn:this.ExpandAll},
            });

            this._collapseAllBtn = this._toolbar.CreateHandle({
                icon:`%ICON%/icon_collapse_all.svg`, text:`Collapse All`,
                trigger:{ thisArg:this, fn:this.CollapseAll},
            });

        }

        this.focusArea = this._header;

    }
    
    Activate(p_alt){
        if(this._toolbar.focused){return false;}
        if(p_alt && this._expandOnHeaderAltActivation){
            this._extExpand.Toggle();
            return;
        }
        super.Activate(p_alt);
    }

    Expand(){ this._extExpand.Expand(); }
    _Expand(){
        
        if(this._data && !this._staticContent ){
            this._BuildContent();
        }

        this._expandBtn.rotation = 90;
        this._toolbar.hidden = false;
    }

    Collapse(){ this._extExpand.Collapse(); }
    _Collapse(){

        if(this._data && !this._staticContent ){
            this._ClearContent();
        }

        this._expandBtn.rotation = 0;
        this._toolbar.hidden = true;
    }

    ExpandAll(){
        this.Expand();
        var list = this._displayObjects;
        var child = null;
        for(var i = 0, n = list.length; i < n; i++){
            child = list[i];
            if(`Expand` in child){ child.Expand(); }
        }
    }

    CollapseAll(){
        var list = this._displayObjects;
        var child = null;
        for(var i = 0, n = list.length; i < n; i++){
            child = list[i];
            if(`Collapse` in child){ child.Collapse(); }
        }
    }

    _OnContextChanged(){
        var context = this._context;
        var list = this._displayObjects;
        var child = null;
        for(var i = 0, n = list.length; i < n; i++){
            child = list[i];
            if(`context` in child){ child.context = context; }
        }
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        this._ClearContent();
        
        if(this._data){
            if(this._staticContent){
                this._BuildContent();
            }else{
                if(this._extExpand.toggled){
                    this._BuildContent();
                }else if(this._data.expanded){
                    this._extExpand.Expand();
                }
            }
            if(this._alwaysExpanded){ this._extExpand.Expand(false); }
        }else{
            if(!this._alwaysExpanded){ this._extExpand.Collapse(); }
        }
    }

    _BuildContent(){

    }

    _ClearContent(){

    }

    _CleanUp(){
        this._toolbar.Focus(false);
        super._CleanUp();

        if(!this._alwaysExpanded){ this._extExpand.Collapse(); }

        this._extExpand.activator = this._expandBtn;
        this._staticContent = this._staticContentDefault;
    }
    
}

module.exports = InspectorGroup;
UI.Register(`ui-inspector-group`, InspectorGroup);
},{"../@.js":6,"../collections/@.js":22,"../ui-app/@.js":149,"../ui-core/@.js":223,"../ui.js":242,"./inspector-item.js":216}],216:[function(require,module,exports){
const { U } = require(`../@.js`);
const { UI_FLAGS } = require(`../ui-core/@.js`);
const UI = require(`../ui.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const { DATA_EVENT } = require(`../data-core/@.js`);


const Control = require(`./control.js`);


class InspectorItem extends Control{
    constructor(){super();}

    _Init(){
        this._ignoreMetaStyle = U.Default(this._ignoreMetaStyle, false);
        this.default_SelectOnActivation = U.Default(this.default_SelectOnActivation, true);
        super._Init();

        if(!this._ignoreMetaStyle){
            this._metadataObserver.Hook(
                DATA_EVENT.META_MID_UPDATE, 
                `presentation`, 
                this, 
                this._OnMetaPresentationChanged);
        }
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        if(this._data){
            if(this._data.metadata && !this._ignoreMetaStyle){ this._UpdateMetaPresentation(); }
        }
    }

    _OnMetaPresentationChanged(p_meta, p_path){
        this._UpdateMetaPresentation();
    }    

    _UpdateMetaPresentation(){
        var color = U.HexToRGBAString(
            this._data.metadata.Get(`presentation.color`, `#000000`), 
            this._data.metadata.Get(`presentation.weight`, 0.1));
        this.style['box-shadow'] = `inset 1px 0px 0px ${color}`;
    }

}

module.exports = InspectorItem;
UI.Register(`ui-inspector-item`, InspectorItem);
},{"../@.js":6,"../collections/@.js":22,"../data-core/@.js":43,"../ui-core/@.js":223,"../ui.js":242,"./control.js":195}],217:[function(require,module,exports){
/**
 * Inspector role is :
 * - list the content of a data-block
 * - provide a single controls for each exposed data-block element
 * It's very basic implementation of a controller
 * It's supposed to offer editing capability for an active selection inside an editor.
 */
'use strict';

const { U, M } = require(`../@.js`);
const UI = require(`../ui.js`);
const { APP_UI_FLAGS, Explorer, TitleBarEx } = require(`../ui-app/@.js`);
const { AssocManager } = require(`../environment/@.js`);
const { DEFAULT_INSPECTOR } = require(`../environment/keys.js`);

class InspectorView extends Explorer{
    constructor(){super();}

    _Init(){
        super._Init();
        
        this._titleClass = TitleBarEx;
        this._title = null;

        this._context = null;
        this._inspector = null;
        this.RegisterClassToggle(this, APP_UI_FLAGS.FIXED_SIZE);
        this.SetFlag(APP_UI_FLAGS.FIXED_SIZE, true);
    }

    //Context data when inspector is given selection to work with.
    //The context is always the data bound to the editor in which the
    //inspector is displayed, if any.
    get context(){ return this._context; }
    set context(p_value){
        if(this._context == p_value){return;}
        var oldValue = this._context;
        this._context = p_value;
        this._OnContextDataChanged(oldValue);
    }

    _OnContextDataChanged(p_oldValue){
        if(this._inspector){this._inspector.context = this._context;}
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                display:`flex`,
                'flex-flow':`column`,
                flex:`1 1 auto`,
                'background-color':`rgba(0,0,0,0.25)`,
            },
            ':host(.fixed-size)':{
                width:`350px`,
                flex:`0 0 auto`,
            },
            '.body':{
                'background-color':`rgba(0,0,0,0.1)`,
            },
            '.title':{
                position:`relative`,
                flex:`0 1 auto`,
                'margin-top':`7px`,
                'margin-bottom':`-7px`
            },
            '.inspector, .view':{
                position:`relative`,
                flex:`1 1 auto`
            },
            '.inspector':{
                'height':`auto`,
                'min-height':`100%`
            }
        });
    }

    _Render(){
        super._Render();
        this._title = this.Add(this._titleClass, -1, this._header, `title`);
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);

        this._title.facade.label.displayID = null;

        if(this._inspector){
            this._inspector.Release();
            this._inspector = null;
        }

        if(!this._data){ 
            this._title.subtitle = `---`;
            this._title.facade.text = `(NO_REF)`;
            return; 
        }

        this._title.facade.label.displayID = this._data.id;

        var ctr = this._data.constructor;
        var meta = M.ETA(this._data);
        if(meta){
            this._title.subtitle.visible = true;
            this._title.subtitle = U.Default(meta.id);
            this._title.facade.icon = meta.icon;
        }else{
            //this._title.subtitle.visible = false;
            this._title.subtitle = ctr.name;
            this._title.facade.icon = null;
        }

        var cl = AssocManager.Get( ctr, DEFAULT_INSPECTOR );

        if(!cl){return;}

        this._inspector = this.Add(cl, -1, this._body, `inspector`);
        this._inspector.context = this._context;
        this._inspector.data = this._data;

    }

}

module.exports = InspectorView;
UI.Register('ui-inspector-view', InspectorView);
},{"../@.js":6,"../environment/@.js":95,"../environment/keys.js":98,"../ui-app/@.js":149,"../ui.js":242}],218:[function(require,module,exports){
/**
 * Inspector role is :
 * - list the content of a data-block
 * - provide a single controls for each exposed data-block element
 * It's very basic implementation of a controller
 * It's supposed to offer editing capability for an active selection inside an editor.
 */
'use strict';

const { U, EVENT } = require(`../@.js`);
const UI = require(`../ui.js`);
const { TitleBar } = require(`../ui-app/@.js`);
const Control = require(`./control.js`);

class Inspector extends Control{
    constructor(){super();}

    _Init(){
        super._Init();
        this._subInspectors = new Array(0);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`column`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'background-color':`rgba(0,0,0,0.0)`, //'background-color':`rgba(0,0,0,0.1)`,
            },
        });
    }

    AddInspector(p_cl, p_CSSclass = null){
        return this._RegisterSubInspector(this.Add(p_cl, -1, this, p_CSSclass ? `group ${p_CSSclass}` : `group`));
    }

    _RegisterSubInspector(p_subInspector){
        this._subInspectors.push(p_subInspector);
        return p_subInspector;
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);
        var sub;
        for(var i = 0, n = this._subInspectors.length; i < n; i++){
            sub = this._subInspectors[i];
            sub.context = this._context;
            sub.data = this._data;
        }

        if(!this._data && !U.Void(this._context))
        {
            this.data = this._context;
        }

    }
    
    

}

module.exports = Inspector;
UI.Register('ui-inspector', Inspector);
},{"../@.js":6,"../ui-app/@.js":149,"../ui.js":242,"./control.js":195}],219:[function(require,module,exports){
module.exports = {
    HistoryInspectorView : require(`./history-inspector-view.js`)
}
},{"./history-inspector-view.js":220}],220:[function(require,module,exports){
'use strict'

const { C, U, M, EVENT } = require(`../../@.js`);
const UI = require(`../../ui.js`);

const InspectorView = require(`../inspector-view.js`);

class HistoryInspectorView extends InspectorView{
    constructor(){super();}
    
    _Init(){
        super._Init();
    }

    _PostInit(){
        super._PostInit();
        this._title.facade.icon = ``;
        this._title.facade.text = `HISTORY`;
        this._title.subtitle = `Editor`;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                //'background-color':`#f5f5f5`
            },
            '.facade':{ 
            },
            '.control':{
                
            }
        });
    }

    _Render(){
        super._Render();
    }


}

module.exports = HistoryInspectorView;
UI.Register(`history-inspector-view`, HistoryInspectorView);
},{"../../@.js":6,"../../ui.js":242,"../inspector-view.js":217}],221:[function(require,module,exports){
const { U, C, M } = require(`../@.js`);
const { AssocManager } = require(`../environment/@.js`);
const { Dictionary, DisposableObjectEx } = require(`../collections/@.js`);
const { TitleBar } = require(`../ui-app/@.js`);
const UI = require(`../ui.js`);

const InspectorGroup = require(`./inspector-group.js`);
const MetaControlItem = require(`./meta-control-item.js`);


let _expandedMetaPaths = new Dictionary();

class MetaControlGroup extends InspectorGroup{
    constructor(){super();}
    
    static TogglePathExpansion(p_path, p_toggle){
        if(p_toggle){
            _expandedMetaPaths.Set(p_path, true);
        }else{
            _expandedMetaPaths.Remove(p_path);
        }
    }

    static IsPathExpanded(p_path){
        return _expandedMetaPaths.Get(p_path);
    }

    _Init(){
        this._ignoreMetaStyle = true;
        this.default_SelectOnActivation = false;
        super._Init();
        this._staticContent = false;
        this._metaPath = '';
        this._metaID = '';
        this._subCtrls = new Array(0);
    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0.1)`,
            UI.sFOCUS, `rgba(240,240,240,0.1)`,
            UI.sSELECT, `rgba(240,240,240,0.1)`,
            UI.sFS, `rgba(240,240,240,0.1)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                margin:`5px`
            },
            '.header':{
                'justify-content':`center`,
                padding:`6px`
            },
            '.facade':{ flex:`1 1 auto` },
        });
    }

    _Render(){
        super._Render();
        this._facade.label.capitalizeFirstLetter = true;
        this._facade.icon = ``;
    }

    get metaPath(){return this._metaPath;}
    set metaPath(p_value){
        this._metaPath = p_value;
    }

    get _metaKey(){ return this._data ? `@${this._data.constructor}${this._metaPath}` : `@${this._metaPath}`; }

    get metaID(){return this._metaID;}
    set metaID(p_value){
        this._metaID = p_value;
        this._facade.text = p_value;
    }

    _Expand(){
        super._Expand();
        MetaControlGroup.TogglePathExpansion(this._metaKey, true);
    }

    _Collapse(){
        if(this._data){
            MetaControlGroup.TogglePathExpansion(this._metaKey, false);
        }
        super._Collapse();
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        if(this._data){
            var result = MetaControlGroup.IsPathExpanded(this._metaKey);
            if(result)
            {
                this.Expand();
            }
        }
    }

    _BuildContent(){
        super._BuildContent();

        var mData = this._data.metadata;
        var obj = U.Empty(this._metaPath) ? mData._data : mData.Get(this._metaPath, null);

        if(obj){
            var tof = typeof obj;
            if(tof == 'object'){
                var mPath = null;
                var value = null;
                var ctrl = null;
                var ctrlClass = null;
                for(var member in obj){

                    mPath = U.Empty(this._metaPath) ? `${member}` : `${this._metaPath}.${member}`;
                    value = obj[member];
                    tof = typeof value;

                    ctrlClass = AssocManager.Get(
                        this._data.constructor, 
                        `${C.METAPREFIX}${mPath}`, 
                        (tof == 'object') ? MetaControlGroup : MetaControlItem );

                    ctrl = this.Add(ctrlClass, -1, this, `group`);

                    //if(!ctrl){continue;}

                    ctrl.metaID = member;
                    ctrl.metaPath = mPath;
                    ctrl.context = this._context;
                    ctrl.data = this._data;
                    this._subCtrls.push(ctrl);

                }
            }else{
                //This should not happen
            }
        }else{
            //Object is null
        }
    }

    _ClearContent(){
        while(this._subCtrls.length != 0){
            this._subCtrls.pop().Release();
        }
    }

    _CleanUp(){
        this._metaPath = '';
        super._CleanUp();
    }

}

module.exports = MetaControlGroup;
UI.Register(`ui-meta-control-group`, MetaControlGroup);
},{"../@.js":6,"../collections/@.js":22,"../environment/@.js":95,"../ui-app/@.js":149,"../ui.js":242,"./inspector-group.js":215,"./meta-control-item.js":222}],222:[function(require,module,exports){
const { U, M } = require(`../@.js`);
const { DisposableObjectEx } = require(`../collections/@.js`);
const { Facade } = require(`../ui-app/@.js`);
const INPUT_EVENT = require(`./input-event.js`);
const UI = require(`../ui.js`);
const METADATA = require(`../data-core/metadata.js`);

const InspectorItem = require(`./inspector-item.js`);
const InputField = require(`./input-field.js`);

const ActionMetadataSet = require(`../data-core/actions/action-metadata-set.js`);

class MetaControlItem extends InspectorItem{
    constructor(){super();}
    
    _Init(){

        this.default_SelectOnActivation = false;
        this._ignoreMetaStyle = true;

        super._Init();

        this._facadeClass = Facade;
        this._facade = null;

        this._inputClass = InputField;
        this._input = null;

        this._metaPath = '';
        this._metaID = '';
        this._subCtrls = new Array(0);

    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0.1)`,
            UI.sFOCUS, `rgba(240,240,240,0.1)`,
            UI.sSELECT, `rgba(240,240,240,0.1)`,
            UI.sFS, `rgba(240,240,240,0.1)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                margin:`5px`,
                padding:`6px`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
            },
            '.facade':{ 
                flex:`1 1 auto`,
                'margin-top':`-5px`,
                'margin-bottom':`0px`
            },
            '.control':{
                flex:`1 1 auto`,
            }
        });
    }

    _Render(){
        super._Render();
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        this._facade.icon = '';
        this._facade.label.capitalizeFirstLetter = true;
    }

    get metaPath(){return this._metaPath;}
    set metaPath(p_value){
        this._metaPath = p_value;
    }

    get metaID(){return this._metaID;}
    set metaID(p_value){
        this._metaID = p_value;
        this._facade.text = p_value;
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);

        if(this._input){
            this._input.Release();
            this._input = null;
        }

        if(!this._data){ return; }

        var mData = U.IoF(this._data, METADATA) ? this._data : this._data.metadata;
        var obj = mData.Get(this._metaPath, null);
        
        if(U.Void(obj)){ return; }

        this._input = this.Add(this._inputClass, -1, this, `control`);
        this._OnInputCreated(this._input);
        this._input.Subscribe(INPUT_EVENT.VALUE_SUBMITTED, this, this._OnInputValueCommited);
        this._input.currentValue = obj;
        this._input.sub

    }

    _OnInputCreated(p_input){

    }

    _OnInputValueCommited(p_input, p_changedValue){

        var mData = U.IoF(this._data, METADATA) ? this._data : this._data.metadata;
        var mPath = this._metaPath;

        this._Do( ActionMetadataSet, {
            target : mData,
            path : mPath,
            value : p_changedValue
        });
        
        this._input.currentValue = mData.Get(mPath, undefined);

    }

    _CleanUp(){
        this._metaPath = '';
        super._CleanUp();
    }

}

module.exports = MetaControlItem;
UI.Register(`ui-meta-control-item`, MetaControlItem);
},{"../@.js":6,"../collections/@.js":22,"../data-core/actions/action-metadata-set.js":45,"../data-core/metadata.js":86,"../ui-app/@.js":149,"../ui.js":242,"./input-event.js":199,"./input-field.js":200,"./inspector-item.js":216}],223:[function(require,module,exports){
module.exports = {

    UI_EVENT : require(`./core-ui-event.js`),
    UI_FLAGS : require(`./core-ui-flags.js`),
    CSSCache : require(`./css-cache.js`),
    CSS : require(`./css.js`),
    DisposableHTMLElement : require(`./disposable-htmlelement.js`),
    ExtDrag : require(`./ext-drag.js`),
    ExtDrop : require(`./ext-drop.js`),
    ExtExpand : require(`./ext-expand.js`),
    DisplayObjectContainer : require(`./display-object-container.js`),
    DisplayObject : require(`./display-object.js`),
    LayerContainer : require(`./layer-container.js`),
    Layer : require(`./layer.js`),
    Textfield : require(`./textfield.js`),
    UIState : require(`./ui-state.js`),
    View : require(`./view.js`),
    OrientedWidget : require(`./widget-oriented.js`),
    WidgetSelection : require(`./widget-selection.js`),
    Widget : require(`./widget.js`)

}
},{"./core-ui-event.js":224,"./core-ui-flags.js":225,"./css-cache.js":226,"./css.js":227,"./display-object-container.js":228,"./display-object.js":229,"./disposable-htmlelement.js":230,"./ext-drag.js":231,"./ext-drop.js":232,"./ext-expand.js":233,"./layer-container.js":234,"./layer.js":235,"./textfield.js":236,"./ui-state.js":237,"./view.js":238,"./widget-oriented.js":239,"./widget-selection.js":240,"./widget.js":241}],224:[function(require,module,exports){
'use strict';

const _evt_childAdded       = Symbol(`childAdded`);
const _evt_childMoved       = Symbol(`childMoved`);
const _evt_childRemoved     = Symbol(`childRemoved`);

const _evt_selectionGain    = Symbol(`selectionGain`);
const _evt_selectionLost    = Symbol(`selectionLost`);
const _evt_focusGain        = Symbol(`focusGain`);
const _evt_focusLost        = Symbol(`focusLost`);

const _evt_activated        = Symbol(`activated`);
const _evt_altActivated     = Symbol(`altActivated`);

const _evt_dataChanged      = Symbol(`dataChanged`);

const _evt_focusRequested   = Symbol(`focusRequested`);

const _evt_expanded         = Symbol(`expanded`);
const _evt_collapsed        = Symbol(`collapsed`);

const _evt_dragStarted      = Symbol(`dragStarted`);
const _evt_dragged          = Symbol(`dragged`);
const _evt_dragEnded      = Symbol(`dragEnded`);
const _evt_dropped          = Symbol(`dropped`);

class UI_EVENT{
    constructor() {}

    static get CHILD_ADDED(){ return _evt_childAdded; }
    static get CHILD_MOVED(){ return _evt_childMoved; }
    static get CHILD_REMOVED(){ return _evt_childRemoved; }

    static get SELECTION_GAIN(){ return _evt_selectionGain; }
    static get SELECTION_LOST(){ return _evt_selectionLost; }
    static get FOCUS_GAIN(){ return _evt_focusGain; }
    static get FOCUS_LOST(){ return _evt_focusLost; }
    
    static get ACTIVATED(){ return _evt_activated; }
    static get ALT_ACTIVATED(){ return _evt_altActivated; }

    static get DATA_CHANGED(){ return _evt_dataChanged; }

    static get FOCUS_REQUESTED(){ return _evt_focusRequested; }

    static get EXPANDED(){ return _evt_expanded; }
    static get COLLAPSED(){ return _evt_collapsed; }

    static get DRAG_STARTED(){ return _evt_dragStarted; }
    static get DRAGGED(){ return _evt_dragged; }
    static get DRAG_ENDED(){ return _evt_dragEnded; }
    static get DROPPED(){ return _evt_dropped; }

}

module.exports = UI_EVENT;
},{}],225:[function(require,module,exports){
'use strict';

class UI_FLAGS{
    constructor() {}

    static get NONE(){ return `none`; }
    static get DISABLED(){ return `disabled`; }
    static get IDLE(){ return `idle`; }
    static get FOCUSED(){ return `focused`; }
    static get SELECTED(){ return `selected`; }
    static get EXPANDED(){ return `expanded`; }
    static get COLLAPSED(){ return `collapsed`; }
    static get DRAGGED(){ return `dragged`; }
    static get ALLOW_DROP(){ return `allow-drop`; }
    
}

module.exports = UI_FLAGS;
},{}],226:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { Dictionary, DictionaryList } = require(`../collections/@.js`);

const SingletonEx = require(`../singleton-ex.js`);
const DisposableHTMLElement = require(`./disposable-htmlelement.js`);
const CSS = require(`./css.js`);

class CSSCache extends SingletonEx{
    constructor() {super();}

    _Init()
    {
        super._Init();
        this._stringPool = new Dictionary();
        this._colorPool = new Dictionary();
    }

    Has(p_class){
        return this._stringPool.Contains(p_class);
    }

    Set( p_class, p_style ) {

        var css = ``;
        
        if(p_style != null && p_style != undefined){
            for(var att in p_style){
                css += CSS.CSS(att, p_style[att]);
            }
        }

        this._stringPool.Set(p_class, css);
        return css;
    }

    Get( p_class ){
        return this._stringPool.Get(p_class);
    }

    SetColorGroup(p_class, p_colors){
        this._colorPool.Set(p_class, p_colors)
    }

    GetColorGroup(p_class){
        return this._colorPool.Get(p_class);
    }

}

module.exports = CSSCache;

},{"../@.js":6,"../collections/@.js":22,"../singleton-ex.js":146,"./css.js":227,"./disposable-htmlelement.js":230}],227:[function(require,module,exports){
'use strict';

const { U, C } = require(`../@.js`);

class CSS{
    constructor() {}

    /**
     * Return an HTMLElement formatted as
     * <style> import url("path") </style>
     * @param {*} p_import_path 
     */
    static CSSImport( p_import_path )
    {

        var element = U.Element(`style`, {type:`text/css`});
        element.innerText = `@import url("${p_import_path}")`; 
        
        return element;

    }

    /**
     * Return a CSS style element formatted as
     * <style> id{ prop:value; } </style>
     * @param {object or string} p_properties 
     */
    static Style( p_properties )
    {
        var element = U.Element(`style`);

        var css = null;
        if(U.IsString(p_properties)){
            css = p_properties;
        }else{
            css = ``;
            if(p_properties != null && p_properties != undefined){
                for(var att in p_properties){
                    css += CSS.CSS(att, p_properties[att]);
                }
            }
        }
        
        element.innerText = css;
        return element;
    }

    /**
     * Return a CSS string formatted as
     * id{ prop:value; }
     * @param {String} p_id 
     * @param {object} p_properties 
     */
    static CSS( p_id, p_properties )
    {
        return `${p_id} { ${CSS.InlineCSS(p_properties)} } `;
    }

    /**
     * Return an inline CSS string formatted as
     * prop:value;
     * @param {String} p_id 
     * @param {object} p_properties 
     */
    static InlineCSS( p_properties )
    {

        var css = ``;

        if(p_properties != null && p_properties != undefined){
            for(var att in p_properties){
                css += `${att}:${p_properties[att]};`;
            }
        }

        return css;

    }

    static T_W(p_text){ return CSS.T_S(p_text, C.COLORS.warning); }
    static T_E(p_text){ return CSS.T_S(p_text, C.COLORS.error); }
    static T_I(p_text){ return CSS.T_S(p_text, C.COLORS.infos); }

    static T_C(p_text, p_color = `255,255,255`){
        return `<span style='color:rgb(${p_color});'>${p_text}</span>`
    }

    static T_S(p_text, p_color = `255,255,255`){
        return `<span style='color:rgb(${p_color});'><strong>${p_text}</strong></span>`
    }

}

module.exports = CSS;

},{"../@.js":6}],228:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);

const UI = require(`../ui.js`);

const DisplayObject = require(`./display-object.js`);
const UI_EVENT = require(`./core-ui-event.js`);

class DisplayObjectContainer extends DisplayObject {
    constructor() {super();}

    //---> Init

    _Init()
    {
        
        super._Init();        
        this._displayObjects = new Array(0);        
        this._wrapper = null;

    }

    _PostInit()
    {

        super._PostInit();

        var r_wrapper = this._BuildWrapper();

        if(r_wrapper){
            this._wrapper = r_wrapper;
        }else{
            this._wrapper = this._host;
        }

    }

    _BuildHost()
    {
        super._BuildHost();
        this._wrapper = this._host;
    }
    

    //---> Wrapper Management

    get wrapper(){
        return this._wrapper;
    }

    /**
     * Return default wrapper value, in case it is built along
     * with the display object`s body.
     */
    _BuildWrapper()
    {
        return this._wrapper;
    }
    

    //---> Child Management
    
    get count(){
        return this._displayObjects.length;
    }

    /**
     * Return the display object at the given index.
     * @param {number} p_index 
     */
    At(p_index)
    {
        return this._displayObjects[p_index];
    }

    /**
     * 
     * @param {*} p_displayObject 
     * @param {*} p_index 
     * @param {*} p_container 
     * @param {*} p_class 
     */
    Add( p_displayObject, p_index = -1, p_container = null, p_class = null )
    {

        if(U.Void(p_index)){
            p_index = -1;
        }else if(p_index >= this._displayObjects.length || p_index < 0){
            p_index = -1;
        }

        var tof = typeof p_displayObject;
        if(tof == `function` && U.IoF(p_displayObject, DisplayObject)){
            p_displayObject = UI.Rent(p_displayObject);
        }

        if(!p_displayObject){throw new Error(`Cannot Add an empty display object.`);}

        if(this._displayObjects.includes(p_displayObject)){
            if(p_index == -1){return p_displayObject;}
            this.Move(p_displayObject, p_index);
            return p_displayObject;
        }

        if(!p_container || p_container == this ){
            p_container = this._wrapper;
        }else if(U.IoF(p_container, DisplayObjectContainer)){
            p_container = p_container.wrapper;
        }

        if(p_index == -1){
            this._displayObjects.push(p_displayObject);
            p_index = this._displayObjects.length-1;

            try{p_container.appendChild(p_displayObject);}catch(err){
                console.log(this.displayPath);
                console.log(p_displayObject);
                throw err;
            }
        }
        else{
            this._displayObjects.splice(p_index, 0, p_displayObject);
            p_container.insertBefore(p_displayObject, this._displayObjects[p_index]);
        }

        p_displayObject.parent = this;
        
        if(p_class){
            if(p_class.includes(' ')){
                var classes = p_class.split(' ');
                for(var i = 0, n = classes.length; i < n; i++){
                    p_displayObject.classList.add(classes[i]);    
                }
            }else{
                p_displayObject.classList.add(p_class);
            }
        }

        this._OnChildAdded(p_displayObject, p_index);

        return p_displayObject;

    }

    Move( p_displayObject, p_index )
    {
        if(!this._displayObjects.includes(p_displayObject)){return;}
        //TODO : Implement Move
        console.error("DisplayObejct.Move is not implemented.");
        this._OnChildMoved(p_displayObject, p_index, p_index);
    }

    /**
     * 
     * @param {DisplayObject} p_displayObject 
     */
    Remove( p_displayObject )
    {

        var index = this._displayObjects.indexOf(p_displayObject);

        if(index == -1){return p_displayObject;}

        return this.RemoveAt(index);

    }

    RemoveAt( p_index )
    {

        if(p_index < 0 || p_index >= this._displayObjects.length){return null;}
        
        var removedDisplayObject = this._displayObjects[p_index];
        
        this._displayObjects.splice(p_index, 1);
        
        if(removedDisplayObject.parent == this){
            removedDisplayObject.parent = null;
        }

        this._OnChildRemoved(removedDisplayObject, p_index);

        return removedDisplayObject;

    }

    _OnChildAdded( p_displayObject, p_index )
    {
        this._Notify(UI_EVENT.CHILD_ADDED, this, p_displayObject, p_index);
    }

    _OnChildMoved( p_displayObject, p_index, p_oldIndex )
    {
        this._Notify(UI_EVENT.CHILD_MOVED, this, p_displayObject, p_index, p_oldIndex);
    }

    _OnChildRemoved( p_displayObject, p_index )
    {
        this._Notify(UI_EVENT.CHILD_ADDED, this, p_displayObject, p_index);
    }
    

    //---> Pooling

    _CleanUp()
    {
        super._CleanUp();
    }

    

}

module.exports = DisplayObjectContainer;
UI.Register(`ui-display-object-container`, DisplayObjectContainer);
},{"../@.js":6,"../ui.js":242,"./core-ui-event.js":224,"./display-object.js":229}],229:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { Dictionary, List } = require(`../collections/@.js`);
const UI_FLAGS = require(`./core-ui-flags.js`);
const SignalBox = require(`../signals/signal-box.js`);

const UI = require(`../ui.js`);
const RELAY = require(`../relay.js`);
const Request = require(`../signals/request.js`);

const CSSCache = require(`./css-cache.js`);
const CSS = require(`./css.js`);
const DisposableHTMLElement = require(`./disposable-htmlelement.js`);

class DisplayObject extends DisposableHTMLElement {
    constructor() {super();}

    //---> Init

    _Init(){

        super._Init();

        this._colors = CSSCache.instance.GetColorGroup(this.constructor);

        if(!this._colors){
            this._colors = {};
            this._InitColors();
            CSSCache.instance.SetColorGroup(this.constructor, this._colors);
        }

        this._dirty = false;
        this._transforms = {};

        this._parent = null;

        this._host = null;
        this._shadowConfig = { mode:`open` };

        this._style = null;
        this._visible = true;

        this._cssClassToggleMap = null;
        this._flags = new Dictionary();

        this._requestSignalBox = null;

        this._order = null;

    }

    _PostInit(){

        super._PostInit();

        this._BuildHost();
        this._wrapper = this._host;

        var r_style = null;
        var s_c = this.constructor;

        if(CSSCache.instance.Has(s_c)){
            r_style = CSSCache.instance.Get(s_c);
        }else{
            r_style = CSSCache.instance.Set(s_c, this._RenderStyle());
        }

        if(r_style){
            this._style = CSS.Style(r_style);
            this._host.appendChild(this._style);
        }
        
        this._Render();
        this._PostRender();

    }

    //--->
    
    get order(){return this._order;}
    set order(p_value){
        this._order = p_value;
        this.style.order = `${p_value == null ? '' : p_value }`;
    }

    get host(){return this._host;}

    _BuildHost()
    {
        this._host = this.attachShadow(this._shadowConfig);
    }
    

    //---> Style Management

    _RenderStyle()
    {
        return null;
    }
    

    //---> Rendering

    get host(){ return this._host; }

    _InitColors(){

        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0.1)`,
            UI.sDISABLED, `rgba(0,0,0,0.1)`,
            UI.sFOCUS, `rgba(127,127,127,0.3)`,
            UI.sSELECT, `rgba(127,127,127,0.4)`,
            UI.sFS, `rgba(127,127,127,0.5)`);

    }

    GEC(p_element, p_id){
        if(!p_id){ p_id = UI.sNONE; }
        var cols = this._colors;
        var el = cols[p_element];
        if(!el){ el = cols[p_element] = {}; }
        var c = el[p_id];
        if(!c){ el[p_id] = `rgba(255,0,255,1)`;}
        return c;
    }

    HEC(p_element, p_id){
        if(!p_id){ return false; }
        var cols = this._colors;
        var el = cols[p_element];
        if(!el){return false;}
        var c = el[p_id];
        if(!c){return false;}
        return true;
    }

    SEC(p_element, ...args){
        var el = this._colors[p_element];
        if(!el){el = {}; this._colors[p_element] = el;}
        for(var i = 0, n = args.length; i < n; i+=2){
            el[args[i]] = args[i+1];
        }
    }

    _Render()
    {
        
    }

    _PostRender()
    {

    }

    BringToFront(){
        if(this.parentNode){
            this.parentNode.appendChild(this);
        }
    }
    

    //---> Hierarchy

    set parent(p_value){

        if(this._parent == p_value){
            return;
        }

        var oldParent = this._parent;
        this._parent = p_value;

        if(oldParent != null){
            oldParent.Remove(this);
        }

        if(this._parent != null){
            this._parent.Add(this);
        }

        this._OnParentChanged(oldParent);

    }

    get parent(){
        return this._parent;
    }

    /**
     * Called when the parent of this display object has changed. 
     * @param {*} p_oldParent 
     */
    _OnParentChanged(p_oldParent)
    {

    }


    //---> Rendering

    set visible(p_value){
        if(this._visible == p_value){return;}
        this._visible = p_value;

        if(p_value){
            this.style.display = ``;
        }else{
            this.style.display = `none`;
        }
        
        
    }

    get visible(){
        return this._visible;
    }
    

    //---> Flags

    SetFlag( p_flag, p_toggle ){

        if(p_toggle){
            this._flags.Set(p_flag, true);
            this.ToggleCSSFlag(p_flag, true);
        }else{
            this._flags.Set(p_flag, false);
            this.ToggleCSSFlag(p_flag, false);
        }

    }

    GetFlag(p_flag){
        var flag = this._flags.Get(p_flag);
        if(!flag){return false;}
        return flag;
    }
    

    //---> Class toggles

    RegisterClassToggle(p_element, ...args)
    {
        var d = this._cssClassToggleMap;

        if(!d){ d = this._cssClassToggleMap = new Dictionary(); }

        //TODO : Check whether the flag is already active or not and apply it.

        var list = null;
        for(var i = 0, n = args.length; i < n; i++){
            list = d.Get(args[i]);
            if(!list){
                list = new List();
                d.Set(args[i], list);
            }
            list.Add(p_element);
        }
    }

    UnregisterClassToggle(p_element, ...args)
    {

        var d = this._cssClassToggleMap;

        if(!d){ return; }

        var list = null;
        for(var i = 0, n = args.length; i < n; i++){
            list = d.Get(args[i]);
            if(!list){continue;}
            list.Remove(p_element);
        }

    }

    ToggleCSSFlag(p_flag, p_toggle){

        var d = this._cssClassToggleMap;

        if(!d){ return; }

        var list = d.Get(p_flag);

        if(!list){ return; }

        list = list.internalArray;
        var n = list.length;
        var e = null;

        if(p_toggle){
            for(var i = 0; i < n; i++){
                e = list[i];
                e.classList.add(p_flag);
            }
        }else{
            for(var i = 0; i < n; i++){
                e = list[i];
                e.classList.remove(p_flag);
            }
        }
    }
    

    //---> Request Handling

    _EmitLocalRequest(p_requestType, p_options = null, p_onSuccess = null, p_onFail = null, p_timeout = 0, p_requestClass = Request){
        this._HandleLocalRequest(Request.Emit(
            p_requestType,
            p_options,
            this,
            p_onSuccess,
            p_onFail,
            p_timeout,
            p_requestClass,
            false));
    }

    _HandleLocalRequest(p_request){
        if(p_request.emitter != this && this._requestSignalBox){
            this._requestSignalBox.Dispatch(p_request.requestType, p_request);
        }

        if(this._parent){
            this._parent._HandleLocalRequest(p_request);
        }else{
            RELAY.HandleRequest(p_request);
        }
    }

    _RegisterLocalRequestHandler(p_requestType, p_fn){
        if(!this._requestSignalBox){
            this._requestSignalBox = new SignalBox();
        }
        this._requestSignalBox.Add(p_requestType, this, p_fn);
    }

    _UnregisterLocalRequestHandler(p_requestType, p_fn){
        if(!this._requestSignalBox){return;}
        this._requestSignalBox.Remove(p_requestType, this, p_fn);
    }
    
    //---> Transform

    get transforms(){return this._transforms;}
    set transforms(p_value){
        if(this._transforms == p_value){return;}
        this._transforms = p_value;
        this.dirty = true;
    }

    get dirty(){return this._dirty;}
    set dirty(p_value){
        if(this._dirty == p_value){return;}
        this._dirty = p_value;
        if(p_value){
            UI.AddDirty(this);
        }
    }

    set x(p_value){ if(this._transforms.x != p_value){ this._transforms.x = p_value; this.dirty = true; } }
    get x(){return U.Get(this._transforms, 'x', 0);}

    set y(p_value){ if(this._transforms.y != p_value){ this._transforms.y = p_value; this.dirty = true; } }
    get y(){return U.Get(this._transforms, 'y', 0);}

    set z(p_value){ if(this._transforms.z != p_value){ this._transforms.z = p_value; this.dirty = true; } }
    get z(){return U.Get(this._transforms, 'z', 0);}

    set rotation(p_value){ if(this._transforms.rotation != p_value){ this._transforms.rotation = p_value; this.dirty = true; } }
    get rotation(){return U.Get(this._transforms, 'rotation', 0);}

    set rotationX(p_value){ if(this._transforms.rotationX != p_value){ this._transforms.rotationX = p_value; this.dirty = true; } }
    get rotationX(){return U.Get(this._transforms, 'rotationX', 0);}

    set rotationY(p_value){ if(this._transforms.rotationY != p_value){ this._transforms.rotationY = p_value; this.dirty = true; } }
    get rotationY(){return U.Get(this._transforms, 'rotationY', 0);}

    set rotationZ(p_value){ if(this._transforms.rotationZ != p_value){ this._transforms.rotationZ = p_value; this.dirty = true; } }
    get rotationZ(){return U.Get(this._transforms, 'rotationZ', 0);}

    set scale(p_value){ if(this._transforms.scale != p_value){ this._transforms.scale = p_value; this.dirty = true; } }
    get scale(){return U.Get(this._transforms, 'scale', 0);}

    set scaleX(p_value){ if(this._transforms.scaleX != p_value){ this._transforms.scaleX = p_value; this.dirty = true; } }
    get scaleX(){return U.Get(this._transforms, 'scaleX', 0);}

    set scaleY(p_value){ if(this._transforms.scaleY != p_value){ this._transforms.scaleY = p_value; this.dirty = true; } }
    get scaleY(){return U.Get(this._transforms, 'scaleY', 0);}

    set scaleZ(p_value){ if(this._transforms.scaleZ != p_value){ this._transforms.scaleZ = p_value; this.dirty = true; } }
    get scaleZ(){return U.Get(this._transforms, 'scaleZ', 0);}

    ApplyTransforms(){
        //Update host's inline style according to stored transforms
        var t = this._transforms;

        if(!t){
            this.style.transform = ``;    
            return;
        }

        //TODO : Optimize this

        var rr = U.Get(t, 'rotation', 0);
        var rx = U.Get(t, 'rotationX', 0);
        var ry = U.Get(t, 'rotationY', 0);
        var rz = U.Get(t, 'rotationZ', 0);
        var r = `${rr==0?``:`rotate(${rr}deg)`}${rx==0?``:`rotateX(${rx}deg)`}${ry==0?``:`rotateX(${ry}deg)`}${rz==0?``:`rotateZ(${rz}deg)`}`;
        
        var tx = U.Get(t, 'x', 0);
        var ty = U.Get(t, 'y', 0);
        var tz = U.Get(t, 'z', 0);
        var tt = `${tx==0?``:`translateX(${tx}px)`}${ty==0?``:`translateY(${ty}px)`}${tz==0?``:`translateZ(${tz}px)`}`;

        var ss = U.Get(t, 'scale', 1);
        var sx = U.Get(t, 'scaleX', 1);
        var sy = U.Get(t, 'scaleY', 1);
        var sz = U.Get(t, 'scaleZ', 1);
        var s = `${ss==1?``:`scale(${ss},${ss})`}${sx==1?``:`scaleX(${sx})`}${sy==1?``:`scaleX(${sy})`}${sz==1?``:`scaleZ(${sz})`}`;

        this.style.transform = `${tt}${r}${s}`;
        this._dirty = false;

    }

    set size(p_value){
        this.width = p_value;
        this.height = p_value;      
    }

    set width(p_value){this.style.width = U.Empty(p_value) ? `` : `${p_value}px`;}
    set height(p_value){this.style.height = U.Empty(p_value) ? `` : `${p_value}px`;}

    set sizeRel(p_value){
        this.widthRel = p_value;
        this.heightRel = p_value;      
    }

    set widthRel(p_value){this.style.width = U.Empty(p_value) ? `` : `${p_value}%`;}
    set heightRel(p_value){this.style.height = U.Empty(p_value) ? `` : `${p_value}%`;}

    //---> Pooling

    _CleanUp()
    {
        this.visible = true;
        this.parent = null;
        
        this.order = null;

        this._transforms = {};
        this.style.transform = ``;

        super._CleanUp();

        //Workaround shadow dom leaving webcomponents floating around.
        UI.GRAVEYARD.appendChild(this);

    }

    get displayPath(){
        var arr = new Array(0);
        var p = this._parent;
        while(p != null){
            arr.push(p.constructor.name);
            p = p.parent;
        }
        arr.reverse();
        arr.push(this.constructor.name);
        return arr.join('.');
    }

    

}

module.exports = DisplayObject;
UI.Register(`ui-display-object`, DisplayObject);
},{"../@.js":6,"../collections/@.js":22,"../relay.js":122,"../signals/request.js":143,"../signals/signal-box.js":144,"../ui.js":242,"./core-ui-flags.js":225,"./css-cache.js":226,"./css.js":227,"./disposable-htmlelement.js":230}],230:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const SignalBox = require(`../signals/signal-box.js`);

let uinc = 0;

class DisposableHTMLElement extends HTMLElement {
    constructor() {
        super();
        this._Init();
        this._PostInit();
    }

    _Init()
    {
        this._uinc = uinc++;
        this._returnFn = null;
        this._releasing = false;
        this._releasePrevented = false;
        this._signalBox = new SignalBox();
        this._signalBox._observable = this;   
        this._released = false;     
    }

    _PostInit()
    {

    }

    _Bind(p_func) { return this[p_func.name] = p_func.bind(this); }


    //---> Signals

    _Notify( p_evt, ...args )
    {
        this._signalBox.Dispatch(p_evt, ...args);
        //this._signalBox.Dispatch.apply(this._signalBox, args);
    }

    On( p_evt, p_fn ){ this.Subscribe(p_evt, null, p_fn); }    
    Subscribe( p_evt, p_suscriber, p_fn){ 
        this._signalBox.Add(p_evt, p_suscriber, p_fn); 
    }
    
    Off( p_evt, p_fn ){ this.Unsubscribe(p_evt, null, p_fn); }
    Unsubscribe( p_evt, p_suscriber, p_fn ){ 
        this._signalBox.Remove(p_evt, p_suscriber, p_fn); 
    }
    

    //---> Pooling

    set returnFunc(value){
        this._returnFn = value;
    }

    set returnContext(value){
        this._returnContext = value;
    }

    PreventRelease()
    {
        this._releasePrevented = true;
    }

    /**
     * Releases the object and pool it.
     */
    Release()
    {

        if(this._releasing){return;}        
        this._releasing = true;

        this._Notify(EVENT.RELEASING, this);

        if(this._releasePrevented){
            this._releasing = false;
            this._releasePrevented = false;
            return;
        }

        this._released = true;
        this._Notify(EVENT.RELEASED, this);
        this._CleanUp();

        if(this.parentElement != undefined && this.parentElement != null){
            this.parentElement.removeChild(this);
        }

        if(this._returnFn != undefined){ this._returnFn(this); }
        this._releasing = false;

    }

    _CleanUp()
    {
        this._releasePrevented = false;
        this._signalBox.Clear();
    }

    Wake(){
        this._released = false;
        this._Wake();
        this._PostWake();
    }
    
    _Wake(){

    }

    _PostWake(){

    }

    toString(){
            return `<${this.constructor.name}>`;
    }
}

module.exports = DisposableHTMLElement;
},{"../@.js":6,"../signals/signal-box.js":144}],231:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { INPUT } = require(`../@tools.js`);
const { POOL, COLLECTION_EVENT, DisposableObjectEx } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const DisplayObject = require(`./display-object.js`);
const UI_FLAGS = require(`./core-ui-flags.js`);
const UI_EVENT = require(`./core-ui-event.js`);
const Observer = require(`../signals/observer.js`);

const _evt_dragEnd = Symbol(`dragend`);
let _drag_data = null;
let _drag_current = null;
let _dragDataContent = new Array(0);

class ExtDrag extends DisposableObjectEx {
    constructor() {
        super();
    }

    //---> Init

    _Init(){
        super._Init();
        this._enabled = true;
        this._target = null;
        this._activator = null;
        this._feedbackTarget = null;
        this._grabDataCallback = null;

        this._ownerObserver = new Observer();
        this._ownerObserver.Hook(UI_EVENT.DRAG_STARTED, this, this._OnOwnerDragStarted);
        this._ownerObserver.Hook(UI_EVENT.DRAG_ENDED, this, this._OnOwnerDragEnded);
        this._ownerObserver.Hook(EVENT.RELEASED, this, this._OnOwnerReleased);

        this._Bind(this._mUp);
        this._Bind(this._mDown);
        this._Bind(this._mDragStart);
        this._Bind(this._mDrag);
        this._Bind(this._mDragEnd);
        
        //The trick is not to add the draggable attribute until the drag handle gets the mousedown event.
    }

    _OnOwnerReleased(p_was){
        this.owner = null;
    }

    get enabled(){return this._enabled;}
    set enabled(p_value){ this._enabled = p_value;}

    get grabDataCallback(){return this._grabDataCallback;}
    set grabDataCallback(p_value){ this._grabDataCallback = p_value;}

    get activator(){return this._activator;}
    set activator(p_value){
        if(this._activator == p_value){return;}
        var oldValue = this._activator;
        this._activator = p_value;
        if(oldValue){
            oldValue.removeEventListener(`mousedown`, this._mDown );            
        }
        if(p_value){
            p_value.addEventListener(`mousedown`, this._mDown );
        }
    }

    get owner(){return this._owner;}
    set owner(p_value){
        this._owner = p_value;
        this._ownerObserver.observable = p_value;
    }
    
    Setup( p_target, p_activator = null, p_feedback = null ){
        
        if(!p_activator){ p_activator = p_target; }
        
        this._target = p_target;
        this.activator = p_activator;

        if(this._feedbackTarget){
            this._feedbackTarget.UnregisterClassToggle(this._feedbackTarget, UI_FLAGS.DRAGGED);
        }
        this._feedbackTarget = p_feedback;
        if(this._feedbackTarget){
            this._feedbackTarget.RegisterClassToggle(this._feedbackTarget, UI_FLAGS.DRAGGED);
        }
    }

    _mDown(p_evt){
        if(!this._enabled){return;}
        this._target.setAttribute(`draggable`, true);
        this._target.addEventListener(`dragstart`, this._mDragStart ); 
        INPUT.ON(INPUT.MOUSE_UP, this._mUp);
    }

    _mUp(p_evt){
        INPUT.OFF(INPUT.MOUSE_UP, this._mUp);
        this._EndDrag();
    }

    _mDragStart(p_evt){

        INPUT.OFF(INPUT.MOUSE_UP, this._mUp);

        this._target.addEventListener(`dragend`, this._mDragEnd );
        this._target.addEventListener(`drag`, this._mDrag );

        _dragDataContent.length = 0;
        this._NotifyOwner(UI_EVENT.DRAG_STARTED);
        INPUT.DragStarted(_dragDataContent, this._target);
        
    }

    _mDrag(p_evt){
        //Keep mouse position up-to-date in INPUT
        //mousemove being muted on drag :/
        INPUT.instance._mMove(p_evt);
        this._NotifyOwner(UI_EVENT.DRAGGED);
    }

    _mDragEnd(p_evt){
        this._EndDrag();
        this._NotifyOwner(UI_EVENT.DRAG_ENDED);
        INPUT.DragEnded();
    }

    _GrabData(){
        return this._grabDataCallback();
    }

    _EndDrag(){
        this._target.removeAttribute(`draggable`);
        this._target.removeEventListener(`dragstart`, this._mDragStart);
        this._target.removeEventListener(`dragend`, this._mDragEnd);
        this._target.removeEventListener(`drag`, this._mDrag ); 
    }

    //---> Generic event handling

    _NotifyOwner(p_evt){
        this._owner._Notify(p_evt, this._owner);
    }

    _OnOwnerDragStarted(p_target){
        if(!this._enabled){return;}
        _dragDataContent.push(this._GrabData());
        if(this._feedbackTarget){this._feedbackTarget.SetFlag( UI_FLAGS.DRAGGED, true );}
    }

    _OnOwnerDragEnded(p_target){
        if(!this._enabled){return;}
        if(this._feedbackTarget){this._feedbackTarget.SetFlag( UI_FLAGS.DRAGGED, false );}
    }

    //---> Pooling

    _CleanUp(){
        this._EndDrag();
        super._CleanUp();
    }



    

}

module.exports = ExtDrag;
},{"../@.js":6,"../@tools.js":7,"../collections/@.js":22,"../signals/observer.js":142,"../ui.js":242,"./core-ui-event.js":224,"./core-ui-flags.js":225,"./display-object.js":229}],232:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { INPUT } = require(`../@tools.js`);
const { POOL, COLLECTION_EVENT, DisposableObjectEx, List } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const UI_FLAGS = require(`./core-ui-flags.js`);
const UI_EVENT = require(`./core-ui-event.js`);

const ExtDrag = require(`./ext-drag.js`);

let _activeTarget = null;

class ExtDrop extends DisposableObjectEx {
    constructor() {super();}

    //---> Init

    static get ACTIVE_TARGET(){ return _activeTarget; }
    static set ACTIVE_TARGET(p_value){
        var oldTarget = _activeTarget;
        _activeTarget = p_value;
        if(oldTarget){ oldTarget._Activate(false); }
        if(_activeTarget){ _activeTarget._Activate(true); }
    }

    _Init(){

        super._Init();
        this._activator = null;
        this._feedbackTarget = null;

        //TODO : Gotta emulate dragenter/leave
        //in order to neatly handle nested drop handlers

        this._callbacks = new Array(0);
        this._allowedCallbacks = new Array(0);
        this._dragCallbacks = new Array(0);
        this._leaveCallbacks = new Array(0);
        this._allowedData = new Array(0);

        this._currentExt = null;
        this._acceptsDrop = false;
        this._active = false;

        this._Bind(this._mDragEnter);
        this._Bind(this._mDragLeave);
        this._Bind(this._mDragOver);
        this._Bind(this._mDrop);

        //TODO : Add event callbacks to handle differently different types of drop
        //check if a drop is acceptable etc
    }

    get activator(){return this._activator;}
    set activator(p_value){
        if(this._activator == p_value){return;}
        var oldValue = this._activator;
        this._activator = p_value;
        if(oldValue){
            oldValue.removeEventListener(`dragenter`, this._mDragEnter );            
        }
        if(p_value){
            p_value.addEventListener(`dragenter`, this._mDragEnter );
        }
    }
    
    Setup( p_activator, p_feedbackTarget = null ){
        
        this.activator = p_activator;
        if(this._feedbackTarget){
            this._feedbackTarget.UnregisterClassToggle(this._feedbackTarget, UI_FLAGS.ALLOW_DROP);
        }
        this._feedbackTarget = p_feedbackTarget;
        if(this._feedbackTarget){
            this._feedbackTarget.RegisterClassToggle(this._feedbackTarget, UI_FLAGS.ALLOW_DROP);
        }
    }

    _mDragEnter(p_evt){

        this._allowedCallbacks.length = 0;
        this._dragCallbacks.length = 0;
        this._leaveCallbacks.length = 0;

        var list = this._callbacks;
        var dragList = INPUT.DRAG_DATA;
        var dragData = null;
        var opts = null;
        var pass = false;

        outerloop:
        for(var i = 0, n = list.length; i < n; i++){

            opts = list[i];

            pass = false;

            innerloop :
            for(var d = 0, n2 = dragList.length; d < n2; d++){
                dragData = dragList[d];
                if(opts.checkThis){
                    pass = opts.check.apply(opts.checkThis, dragData);
                }else{
                    pass = opts.check(dragData);
                }
                if(pass){ break innerloop; }
            }

            if(pass){ 
                this._allowedCallbacks.push(opts); 
                if(opts.drag){this._dragCallbacks.push(opts);}
                if(opts.leave){this._leaveCallbacks.push(opts);}
            }
            
        }
         

        if(this._allowedCallbacks.length == 0){
            this._acceptsDrop = false;
            this._Clear();
        }else{
            this._acceptsDrop = true;
            this._activator.addEventListener(`dragleave`, this._mDragLeave );
            this._activator.addEventListener(`dragover`, this._mDragOver );
        }

    }

    _dragEnd(p_extDrag){
        this._Clear();
    }

    _mDragLeave(p_evt){
        this._Clear();
    }

    _mDragOver(p_evt){     

        if(p_evt.defaultPrevented){
            this._Activate(false);
            return;
        }

        if(this._acceptsDrop){
            p_evt.preventDefault();
            this._Activate(true);

            var list = this._dragCallbacks;
            var dragData = INPUT.DRAG_DATA;
            var opts = null;
            for(var i = 0, n = list.length; i < n; i++){
                opts = list[i];
                if(opts.dragThis){ opts.drag.apply(opts.dragThis, dragData); }else{ opts.drag(dragData); }
            }
        }

    }

    _mDrop(p_evt){

        var list = this._allowedCallbacks;
        var dragList = INPUT.DRAG_DATA;
        var dragData = null;
        var opts = null;
        var pass = false;

        for(var d = 0, n = dragList.length; d < n; d++){
            dragData = dragList[d];
            for(var i = 0, n2 = list.length; i < n2; i++){
                opts = list[i];
                if(opts.checkThis){
                    pass = opts.check.apply(opts.checkThis, dragData);
                }else{
                    pass = opts.check(dragData);
                }
                if(!pass){continue;}
                if(opts.dropThis){ opts.drop.apply(opts.dropThis, dragData); }else{ opts.drop(dragData); }
            }
        }

        INPUT.DRAG_TARGET._Notify(UI_EVENT.DROPPED, INPUT.DRAG_TARGET);
        
        this._Clear();
        
    }

    _Activate(p_toggle){
        
        if(this._active == p_toggle){return;}
        this._active = p_toggle;
        
        if(this._feedbackTarget){
            this._feedbackTarget.SetFlag( UI_FLAGS.ALLOW_DROP, p_toggle );

            var list = this._allowedCallbacks;
            var opts = null;
            var flags = null;
            for(var i = 0, n = list.length; i < n; i++){
                opts = list[i];
                flags = opts.flag;
                if(!flags){ continue; }
                if(Array.isArray(flags)){
                    for(var i = 0, n2 = flags.length; i < n2; i++){
                        this._feedbackTarget.SetFlag( flags[i], p_toggle );
                    }
                }else{
                    this._feedbackTarget.SetFlag( flags, p_toggle );
                }
            }

        }

        if(p_toggle){
            //Becomes the main drop target        
            ExtDrop.ACTIVE_TARGET = this;
            this._activator.addEventListener(`drop`, this._mDrop );
            INPUT.instance.Unsubscribe(INPUT.DRAG_ENDED, this, this._dragEnd);
        }else{
            //Stops being the main drop target
            if(ExtDrop.ACTIVE_TARGET == this){ ExtDrop.ACTIVE_TARGET = null; }
            this._activator.removeEventListener(`drop`, this._mDrop );
            INPUT.instance.Subscribe(INPUT.DRAG_ENDED, this, this._dragEnd);
        }

    }

    _Clear(){

        var list = this._leaveCallbacks;
        var dragData = INPUT.DRAG_DATA;
        var opts = null;

        for(var i = 0, n = list.length; i < n; i++){
            opts = list[i];
            if(opts.leaveThis){ opts.leave.apply(opts.leaveThis, dragData); }else{ opts.leave(dragData); }
        }

        this._activator.removeEventListener(`dragleave`, this._mDragLeave );
        this._activator.removeEventListener(`dragover`, this._mDragOver );
        this._Activate(false);
        
    }

    //---> Check

    //{ checkThis:any, check:any, dropThis:any, drop:any }
    Hook( p_hookOptions ){
        this._callbacks.push(p_hookOptions);
    }

    //---> Pooling

    _CleanUp(){
        this._callbacks.length = 0;
        super._CleanUp();
    }

}

module.exports = ExtDrop;
},{"../@.js":6,"../@tools.js":7,"../collections/@.js":22,"../ui.js":242,"./core-ui-event.js":224,"./core-ui-flags.js":225,"./ext-drag.js":231}],233:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { POOL, COLLECTION_EVENT, DisposableObjectEx } = require(`../collections/@.js`);
const UI = require(`../ui.js`);

const UI_FLAGS = require(`./core-ui-flags.js`);
const UI_EVENT = require(`./core-ui-event.js`);

/**
 * 
 *  *--------------------------------*
 *  | + [] Item Name          [][][] |
 *  *--------------------------------*
 * 
 */

class ExtExpand extends DisposableObjectEx {
    constructor() {super();}

    //---> Init

    _Init(){
        super._Init();
        this._target = null;
        this._wrapper = null;
        this._toggled = false;
        this._activator = null;
        this._activateOnAlt = false;
    }

    get toggled(){ return this._toggled; }

    get activateOnAlt(){ return this._activateOnAlt; }
    set activateOnAlt(p_value){ this._activateOnAlt = p_value; }
    

    get activator(){return this._activator;}
    set activator(p_value){
        //if(this._activator == p_value){return;}
        var oldValue = this._activator;
        this._activator = p_value;
        if(oldValue){
            oldValue.Unsubscribe(UI_EVENT.ACTIVATED, this, this._OnWidgetActivated);
        }
        if(p_value){
            p_value.Subscribe(UI_EVENT.ACTIVATED, this, this._OnWidgetActivated);
        }
    }
    

    Setup( p_target, p_wrapper, p_activator = null, p_activateOnAlt = false ){
        
        this._target = p_target;
        this._wrapper = p_wrapper;

        if(!p_target){return;}

        p_target.RegisterClassToggle(p_target, UI_FLAGS.EXPANDED, UI_FLAGS.COLLAPSED);
        if(p_wrapper){
            p_target.RegisterClassToggle(p_wrapper, UI_FLAGS.EXPANDED, UI_FLAGS.COLLAPSED);
        }
        
        this._UpdateFlags();
        this._Notify(this._toggled ? UI_EVENT.EXPANDED : UI_EVENT.COLLAPSED);

        if(p_activator){ 
            this.activator = p_activator; 
            this._activateOnAlt = p_activateOnAlt; 
        }

    }

    _OnWidgetActivated(p_widget, p_alt){
        if(p_alt && !this._activateOnAlt){ return; }
        this.Toggle();
    }

    Toggle(){
        if(this._toggled){
            this.Collapse();
        }else{
            this.Expand();
        }
    }

    Expand(p_scrollTo = true){
        if(this._toggled){return;}
        this._toggled = true;
        this._UpdateFlags();
        if(p_scrollTo)
        {
            this._target.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'start' });
        }
        this._Notify(UI_EVENT.EXPANDED);
    }

    Collapse(){
        if(!this._toggled){return;}
        this._toggled = false;
        this._UpdateFlags();
        this._Notify(UI_EVENT.COLLAPSED);
    }

    _UpdateFlags(){
        this._target.SetFlag(UI_FLAGS.EXPANDED, this._toggled);
        this._target.SetFlag(UI_FLAGS.COLLAPSED, !this._toggled);
    }

    //---> Pooling

    _CleanUp(){
        this._target = null;
        super._CleanUp();
    }



    

}

module.exports = ExtExpand;
},{"../@.js":6,"../collections/@.js":22,"../ui.js":242,"./core-ui-event.js":224,"./core-ui-flags.js":225}],234:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const UI = require(`../ui.js`);
const Layer = require(`./layer.js`);

class LayerContainer extends Layer {
    constructor() {super();}

    //---> Init

    _Init()
    {
        this._layerClassName = `layer`;
        super._Init();
    }    
    
    //---> Rendering

    _RenderStyle(){
        var s = U.Merge(super._RenderStyle(),{
            ':host':{
                //position:`relative`,
            }
        });

        s[this._layerClassName] = {
            position:`absolute`,
            top:`0px`,
            left:`0px`,
            width:`100%`,
            height:`100%`
        }

        return s;
    }


    _Render()
    {

    }

    _OnChildAdded(p_displayObject, p_index){
        super._OnChildAdded(p_displayObject, p_index);
        p_displayObject.classList.add(this._layerClassName);
    }

    _OnChildRemoved(p_displayObject, p_index){
        super._OnChildRemoved(p_displayObject, p_index);
        p_displayObject.classList.remove(this._layerClassName);
    }

    
    //---> Pooling

    _CleanUp()
    {
        super._CleanUp();
    }

    

}

module.exports = LayerContainer;
UI.Register(`ui-layer-container`, LayerContainer);
},{"../@.js":6,"../ui.js":242,"./layer.js":235}],235:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const UI = require(`../ui.js`);
const View = require(`./view.js`);

class Layer extends View {
    constructor() {super();}

    //---> Init

    _Init()
    {
        super._Init();
    }
    
    //---> Rendering

    _RenderStyle(){
        return{
            ':host':{
                position:`absolute`,
                top:`0px`,
                left:`0px`,
                width:`100%`,
                height:`100%`,
                'box-sizing':`border-box`
            }
        }
    }

    _Render()
    {
        
    }
    

    //---> Pooling

    _CleanUp()
    {
        super._CleanUp();
    }

    

}

module.exports = Layer;
UI.Register(`ui-layer`, Layer);
},{"../@.js":6,"../ui.js":242,"./view.js":238}],236:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const UI = require(`../ui.js`);
const DisplayObject = require(`./display-object.js`);
const Observer = require(`../signals/observer.js`);

class Textfield extends DisplayObject {
    constructor() {super();}

    //---> Init

    _Init(){
        super._Init();
        this._span = null;
        this._displayID = null;
        
        this._idObserver = new Observer();
        this._idObserver.Hook(EVENT.RENAMED, this, this._OnDisplayIDRenamed);

        this._displayIDPrefix = ``;
        this._displayIDSuffix = ``;

    }
    
    //---> Rendering

    get text(){ return this._span.innerHTML; }
    set text( p_value ){
        this._span.innerHTML = p_value;
    }

    set uppercase(p_value){ this.SetFlag(`uppercase`, p_value); }
    set ellipsis(p_value){ this.SetFlag(`ellipsis`, p_value); }
    set selectable(p_value){ this.SetFlag(`selectable`, p_value); }
    set capitalizeFirstLetter(p_value){ this.SetFlag(`capFirst`, p_value); }
    set striked(p_value){ this.SetFlag(`striked`, p_value); }
    set center(p_value){ this.SetFlag(`center`, p_value); }
    set bold(p_value){ this.SetFlag(`bold`, p_value); }
    set italic(p_value){ this.SetFlag(`italic`, p_value); }

    get displayIDPrefix(){ return this._displayIDPrefix; }
    set displayIDPrefix(p_value){
        this._displayIDPrefix = p_value;
        if(this._displayID){this._OnDisplayIDRenamed(this._displayID, ``);}
    }

    get displayIDSuffix(){ return this._displayIDSuffix; }
    set displayIDSuffix(p_value){
        this._displayIDSuffix = p_value;
        if(this._displayID){this._OnDisplayIDRenamed(this._displayID, ``);}
    }

    get displayID(){ return this._displayID; }
    set displayID(p_value){
        if(this._displayID == p_value){
            if(p_value){this._OnDisplayIDRenamed(p_value);}
            return;
        }
        this._displayID = p_value;
        this._idObserver.observable = p_value;
        if(p_value){ this._OnDisplayIDRenamed(p_value); }
    }

    _OnDisplayIDRenamed(p_id, p_oldName){
        if(!p_id){ 
            this.text = `${this._displayIDPrefix}[]${this._displayIDSuffix}`; 
        }else{
            var id = U.Empty(p_id.name) ? `(unidentified)` : U.CamelSplit(p_id.name);
            this.text =`${this._displayIDPrefix}${id}${this._displayIDSuffix}`;
        }        
    }

    _RenderStyle()
    {
        return {
            ':host':{
                position:`relative`,
                'min-width': 0,
                'font-size':`1.1em`,
                overflow:`hidden`,
                'font-family': `Regular, sans-serif`,
            },
            span:{
                //display:`block`,
                'font-family': `Regular, sans-serif`,
                'user-select':`none`,//'font-size':`0.85em`,
                'text-shadow': `0px 2px 2px rgba(0,0,0,0.5)`,
            },

            ':host(.ellipsis)':{
                'min-width': 0,
            },
            ':host(.ellipsis) .text-ctnr':{
                display:`block`,
                'width':`100%`,
                'white-space': `nowrap`,
                'overflow':`hidden`,
                'text-overflow':`ellipsis`,
            },

            '.striked':{
                'text-decoration': `line-through`
            },
            '.uppercase':{
                'text-transform':`uppercase`
            },
            '.selectable':{
                'user-select':`text`
            },
            '.capFirst::first-letter':{
                'text-transform':`uppercase`
            },
            ':host(.center), .center':{                
                margin: `0 auto`,
                'text-align': `center`
            },
            '.bold':{
               'font-weight': `bolder`,
               // 'font-weight': 900
            },
            '.italic':{
                'font-style': `italic`
            }
        };
    }

    set color( p_value ){
        this._span.style.color = p_value;
    }

    _Render()
    {
        this._span = U.Element(`span`, {class:`text-ctnr`}, this._host);
        this.RegisterClassToggle(this, `ellipsis`, `center`);
        this.RegisterClassToggle(this._span, `uppercase`, `selectable`, `capFirst`, `striked`, `center`, `bold`, `italic`);
    }
    

    //---> Pooling

    _CleanUp()
    {
        this.uppercase = false;
        this.striked = false;
        this.ellipsis = false;
        this.color = ``;
        this._displayIDPrefix = ``;
        this._displayIDSuffix = ``;
        this.displayID = null;
        super._CleanUp();
    }

    

}

module.exports = Textfield;
UI.Register(`ui-textfield`, Textfield);
},{"../@.js":6,"../signals/observer.js":142,"../ui.js":242,"./display-object.js":229}],237:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const { List } = require(`../collections/@.js`);

const State = require(`../services/state.js`);

class UIState extends State{

    constructor(p_flagOn = null, p_flagOff = null) {
        super();
        
        this._flagOn = new List();
        this._flagOff = new List();

        if(p_flagOn){
            for(var i = 0, n = p_flagOn.length; i < n; i++){
                this._flagOn.Add(p_flagOn[i]);
            }
        }

        if(p_flagOff){
            for(var i = 0, n = p_flagOff.length; i < n; i++){
                this._flagOff.Add(p_flagOff[i]);
            }
        }
    }

    Apply(p_displayObject){

        if(!p_displayObject){return;}

        var OFF = this._flagOff.internalArray;
        for(var i = 0, n = OFF.length; i < n; i++){ p_displayObject.SetFlag(OFF[i], false); }

        var ON = this._flagOn.internalArray;
        for(var i = 0, n = ON.length; i < n; i++){ p_displayObject.SetFlag(ON[i], true); }

    }


}

module.exports = UIState;
},{"../@.js":6,"../collections/@.js":22,"../services/state.js":136}],238:[function(require,module,exports){
'use strict';

const { U } = require(`../@.js`);
const UI = require(`../ui.js`);
const UI_EVENT = require(`./core-ui-event.js`);
const OrientedWidget = require(`./widget-oriented.js`);
const CommandCluster = require(`../actions/command-cluster.js`);
const { List } = require(`../collections/@.js`);

class View extends OrientedWidget{
    constructor(){super();}

    _Init(){
        super._Init();        
        this._commands = new CommandCluster(this._Bind(this._OnCmdRegister));
    }

    _InitColors(){

        var z = `rgba(0,0,0,0.0)`;
        this.SEC(UI.elBG,
            UI.sIDLE, z,
            UI.sDISABLED, z,
            UI.sFOCUS, z,
            UI.sSELECT, z,
            UI.sFS, z);

    }

    RequestFocus()
    {
        this._Notify(UI_EVENT.FOCUS_REQUESTED, this);
        //Handle notifications bubbles & warnings the same way.
    }
    
    /**
     * Callback when RequestFocus has been handled.
     */
    FocusGranted()
    {

    }

    _OnCmdRegister(p_cmd){

    }

}

module.exports = View;
UI.Register('ui-view', View);
},{"../@.js":6,"../actions/command-cluster.js":15,"../collections/@.js":22,"../ui.js":242,"./core-ui-event.js":224,"./widget-oriented.js":239}],239:[function(require,module,exports){
'use strict';

const { U, C } = require(`../@.js`);
const { POOL } = require(`../collections/@.js`);

const UI = require(`../ui.js`);

const UI_FLAGS = require(`../ui-core/core-ui-flags.js`);
const Widget = require(`../ui-core/widget.js`);

const _evt_contronActivated       = Symbol(`controlActivated`);

class OrientedWidget extends Widget {
    constructor() {
        super();
        this.orientation = this._orientation;
    }

    static get CONTROL_ACTIVATED(){ return _evt_contronActivated; }

    //---> Init

    _Init(){
        super._Init();
        this._hScrollEnabled = false;
        this._orientation = C.HORIZONTAL;
    }

    _PostInit(){
        super._PostInit();
        this.RegisterClassToggle(this, C.HORIZONTAL, C.VERTICAL);
        if(this._hScrollEnabled){
            this._Bind(this._HScroll);
        }
    }

    //---> Orientation
    
    get orientation(){return this._orientation;}
    set orientation(p_value){
        this._orientation = p_value;
        this.SetFlag(C.VERTICAL, p_value == C.VERTICAL);
        this.SetFlag(C.HORIZONTAL, p_value == C.HORIZONTAL);
        
        if(this._hScrollEnabled){
            if(this._orientation == C.VERTICAL){
                this._wrapper.removeEventListener('wheel', this._HScroll);
            }else{
                this._wrapper.addEventListener('wheel', this._HScroll);
            }
        }

        this._OnOrientationChanged();

    }

    _OnOrientationChanged(){

    }

    //---> Rendering

    _HScroll(p_evt){
        const delta = Math.sign(p_evt.deltaY);
        this._wrapper.scrollLeft += (delta * 120);
        p_evt.preventDefault();
    }

}

module.exports = OrientedWidget;
UI.Register(`ui-widget-oriented`, OrientedWidget);
},{"../@.js":6,"../collections/@.js":22,"../ui-core/core-ui-flags.js":225,"../ui-core/widget.js":241,"../ui.js":242}],240:[function(require,module,exports){
'use strict';

const { EVENT } = require(`../@.js`);
const { INPUT } = require(`../@tools.js`);
const { DisposableObjectEx, List, COLLECTION_EVENT } = require(`../collections/@.js`);
const UI_EVENT = require(`./core-ui-event.js`);

class WidgetSelection extends DisposableObjectEx{
    constructor() { super(); }

    //---> Init

    _Init(){
        super._Init();
        this._stack = new List();
        this._shareEvents = true;
        this._allowMultiple = true;
        this._clearing = false;
        this._sharingEvent = false;
    }

    get shareEvents(){ return this._shareEvents;}
    set shareEvents(p_value){ this._shareEvents = p_value;}

    get allowMultiple(){ return this._allowMultiple; }
    set allowMultiple(p_value){
        this._allowMultiple = p_value;
        if(!p_value){
            this.Clear();
        }
    }

    Add( p_item ){
        var stack = this._stack;
        
        if(stack.Contains(p_item)){return;}
        if(!this._allowMultiple || !INPUT.ctrl){
            this.Clear();
        }

        stack.Add(p_item);
        
        p_item.Subscribe(UI_EVENT.SELECTION_LOST, this, this._OnItemSelectionLost);
        p_item.Subscribe(UI_EVENT.DRAG_STARTED, this, this._OnItemDragStarted);
        p_item.Subscribe(UI_EVENT.DRAG_ENDED, this, this._OnItemDragEnded);

        p_item.Subscribe(EVENT.RELEASED, this, this._OnItemReleased);

        p_item.Select(true);
        this._Notify(COLLECTION_EVENT.ITEM_ADDED, p_item);
    }

    Remove( p_item ){
        if(this._stack.Remove(p_item)){
            p_item.Select(false);

            p_item.Unsubscribe(UI_EVENT.SELECTION_LOST, this, this._OnItemSelectionLost);
            p_item.Unsubscribe(UI_EVENT.DRAG_STARTED, this, this._OnItemDragStarted);
            p_item.Unsubscribe(UI_EVENT.DRAG_ENDED, this, this._OnItemDragEnded);

            p_item.Unsubscribe(EVENT.RELEASED, this, this._OnItemReleased);

            this._Notify(COLLECTION_EVENT.ITEM_REMOVED, p_item);
        }
    }

    _OnItemSelectionLost(p_item){
        this.Remove(p_item);
    }

    _OnItemReleased(p_item){
        this.Remove(p_item);
    }

    _OnItemDragStarted(p_item){
        this._ShareEvent(UI_EVENT.DRAG_STARTED, p_item);
    }

    _OnItemDragEnded(p_item){
        this._ShareEvent(UI_EVENT.DRAG_ENDED, p_item);
    }

    _ShareEvent(p_evt, p_emitter){
        if(!this._shareEvents 
        || this._sharingEvent){
            return;
        }

        this._sharingEvent = true;

        var list = this._stack.internalArray;
        var item = null;
        for(var i = 0, n = list.length; i < n; i++){
            item = list[i];
            if(item != p_emitter){
                item._Notify(p_evt, item);
            }
        }

        this._sharingEvent = false;
    }

    /**
     * Clear all item in the stack
     */
    Clear()
    {
        var stack = this._stack;
        while(!stack.empty){
            this.Remove(stack.last);
        }
    }

}

module.exports = WidgetSelection;
},{"../@.js":6,"../@tools.js":7,"../collections/@.js":22,"./core-ui-event.js":224}],241:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`../@.js`);
const { Observer } = require(`../signals/@.js`);
const { COLLECTION_EVENT } = require(`../collections/@.js`);
//const UI = require(`../ui.js`);
const { UI, INPUT } = require(`../@tools.js`);

const DisplayObjectContainer = require(`./display-object-container.js`);
const UI_EVENT = require(`./core-ui-event.js`);
const UI_FLAGS = require(`./core-ui-flags.js`);
const WidgetSelection = require(`./widget-selection.js`);

class Widget extends DisplayObjectContainer {
    constructor() {super();}

    //---> Init

    _Init()
    {

        super._Init();
        this._data = null;

        this._notifiesSelectionStack = false;
        this._selectable = true;
        this._selected = false;

        this._focusable = true;
        this._focused = false;

        this._activable = true;

        this._focusArea = null;

        this._Bind(this._mOver);
        this._Bind(this._mOut);
        this._Bind(this._mDown);
        this._Bind(this._mUp);
        this._Bind(this._mClick);
        this._Bind(this._mDBClick);
        this._Bind(this._mAuxClick);
        this._Bind(this._mUpOutside);

        this._mouseOver = false;
        this._mouseDown = false;

        this._observer = new Observer();
        this._observer.Hook(EVENT.UPDATED, this, this._OnDataUpdated);

        this.RegisterClassToggle(this, UI_FLAGS.SELECTED, UI_FLAGS.FOCUSED);
        
        this.default_SelectOnActivation = U.Default(this.default_SelectOnActivation, false);
        this._selectOnActivation = this.default_SelectOnActivation;


    }

    get notifiesSelectionStack(){ return this._notifiesSelectionStack; }
    set notifiesSelectionStack(p_value){ this._notifiesSelectionStack = p_value; }

    set htitle(p_value){ this.setAttribute(`title`, p_value);}
    get htitle(){ this.getAttribute(`title`); }

    _RenderStyle(){
        return {
            ':host':{
                transition: `all 0.15s ease`,
                transition: `order 0s ease`,
                'background-color':this.GEC(UI.elBG,UI.sIDLE)
            },
            ':host(.disabled)':{ 
                'background-color':this.GEC(UI.elBG,UI.sDISABLED)
            },
            ':host(.focused)':{ 
                'background-color':this.GEC(UI.elBG,UI.sFOCUS)
            },
            ':host(.selected)':{
                'background-color':this.GEC(UI.elBG,UI.sSELECT)
            },
            ':host(.selected.focused)':{
                'background-color':this.GEC(UI.elBG,UI.sFS),
            }
        }
    }

    //---> MouseEvents

    get focusArea(){return this._focusArea;}
    set focusArea(p_value)
    {
        if(this._focusArea == p_value){return;}
        var oldValue = this._focusArea;
        this._focusArea = p_value;

        if(oldValue){
            oldValue.removeEventListener(`mouseenter`, this._mOver );
            //oldValue.removeEventListener(`click`, this._mClick );
        }
        if(p_value){
            p_value.addEventListener(`mouseenter`, this._mOver );
            //p_value.addEventListener(`click`, this._mClick );
        }

        this._OnFocusAreaChanged(oldValue);
    }

    _mOver(p_evt){
        this.Focus(true);

        this._mouseOver = true;

        this._focusArea.addEventListener(`mousedown`, this._mDown );        

        this._focusArea.addEventListener(`click`, this._mClick );
        this._focusArea.addEventListener(`auxclick`, this._mAuxClick );
        this._focusArea.addEventListener(`dblclick`, this._mDBClick );        
        this._focusArea.addEventListener(`mouseleave`, this._mOut );

        if(this._mouseDown){ 
            INPUT.OFF(INPUT.MOUSE_UP, this._mUpOutside); 
        }
    }

    _mOut(p_evt){

        this._mouseOver = false;
        
        this._focusArea.removeEventListener(`mousedown`, this._mDown );        

        this._focusArea.removeEventListener(`click`, this._mClick );
        this._focusArea.removeEventListener(`auxclick`, this._mAuxClick );
        this._focusArea.removeEventListener(`dblclick`, this._mDBClick );
        this._focusArea.removeEventListener(`mouseleave`, this._mOut );

        if(this._mouseDown){
            INPUT.ON(INPUT.MOUSE_UP, this._mUpOutside);
        }else{
            this.Focus(false);
        }
    }

    _mDown(p_evt){
        
        if(p_evt.button != 0){return;}

        this._focusArea.addEventListener(`mouseup`, this._mUp );
        this._mouseDown = true;
        INPUT.ON(INPUT.DRAG_ENDED, this._mUpOutside); 
    }

    _mUp(p_evt){
        this._mRelease(true);
    }

    _mUpOutside(){
        this._mRelease(false);
    }

    _mRelease(p_inside = false){
        this._focusArea.removeEventListener(`mouseup`, this._mUp );
        if(this._mouseDown){ 
            INPUT.OFF(INPUT.MOUSE_UP, this._mUpOutside); 
        }

        INPUT.OFF(INPUT.DRAG_ENDED, this._mUpOutside);
        this._mouseDown = false;

        if(p_inside){
            if(!this._released){this.Activate(false);}
        }else{
            this.Focus(false);
        }
    }

    _mClick(p_evt){
        if(p_evt.detail > 1){return false;}//Prevent second click of dbclick
        //this.Select(!this._selected);
        //this.Activate(false);
    }

    _mAuxClick(p_evt){
        if(p_evt.which == 2){
            this.AuxActivate(INPUT.MOUSE_MIDDLE);
        }else if(p_evt.which == 3){
            this.AuxActivate(INPUT.MOUSE_RIGHT);
        }        
    }

    _mDBClick(p_evt){
        //this.Select(!this._selected);
        this.Activate(true);
    }

    _OnFocusAreaChanged(p_oldArea)
    {

    }


    //---> Selection
    
    get selectOnActivation(){return this._selectOnActivation;}
    set selectOnActivation(p_value){this._selectOnActivation = p_value;}

    _InitSelectionStack(){
        if(this._selectionStack){return;}
        
        var sStack = new WidgetSelection();
        sStack.Subscribe(COLLECTION_EVENT.ITEM_ADDED, this, this._OnSelectionStackAdd);
        sStack.Subscribe(COLLECTION_EVENT.ITEM_REMOVED, this, this._OnSelectionStackRemove);

        this._selectionStack = sStack;
    }

    _OnSelectionStackAdd(p_item){

    }

    _OnSelectionStackRemove(p_item){
        
    }

    get selectable(){return this._selectable;}
    set selectable(p_value){
        if(this._selectable == p_value){return;}
        this._selectable = p_value;
        if(!p_value){
            this.Select(false);
        }
    }

    get selected(){return this._selected;}

    get selectionStack(){ 
        if(this._selectionStack){
            return this._selectionStack; 
        }else{
            if(!this._parent){
                return null;
            }else{
                return this._parent.selectionStack;
            }
        }        
    }

    Select( p_toggle )
    {

        if(!this._selectable){return;}
        if(this._selected == p_toggle){return;}

        this._selected = p_toggle;
        this.SetFlag(UI_FLAGS.SELECTED, p_toggle);

        var sStack = this._notifiesSelectionStack ? this._parent ? this._parent.selectionStack : null : null;

        if(p_toggle){
            this._SelectionGain();
            this._Notify(UI_EVENT.SELECTION_GAIN, this);
            if(sStack){sStack.Add(this);}
        }else{
            this._SelectionLost();
            this._Notify(UI_EVENT.SELECTION_LOST, this);
            if(sStack){sStack.Remove(this);}
        }

    }

    _SelectionGain()
    {

    }

    _SelectionLost()
    {
        
    }

    //---> Focus

    get focusable(){return this._focusable;}
    set focusable(p_value){
        if(this._focusable == p_value){return;}
        this._focusable = p_value;
        if(!p_value){
            this.Focus(false);
            this.style[`pointer-events`] = `none`;
        }else{
            delete this.style.removeProperty(`pointer-events`);
        }

    }

    get focused(){return this._focused;}

    Focus( p_toggle )
    {

        if(!this._focusable){return;}

        if(p_toggle && !this._focusable){p_toggle = false;}
        if(this._focused == p_toggle){return;}

        this._focused = p_toggle;

        this.SetFlag(UI_FLAGS.FOCUSED, p_toggle);

        if(p_toggle){
            this._FocusGain();
        }else{
            this._FocusLost();
        }

    }

    _FocusGain()
    {

    }

    _FocusLost()
    {

    }
    

    //---> Activation

    get activable(){return this._activable;}
    set activable(p_value){
        if(this._activable == p_value){return;}
        this._activable = p_value;
    }

    Activate(p_alt = false)
    {
        if(!this._activable){return false;}
        this._Notify( UI_EVENT.ACTIVATED, this, p_alt );

        if(this._selectOnActivation){
            if(this._selectable){
                this.Select(INPUT.ctrl ? !this._selected : true);
            }
        }
        return true;
    }

    /**
     * 
     * @param {*} p_type 2 = middlemouse, 3 = rightclick
     */
    AuxActivate(p_type){
        if(!this._activable){return false;}
        return true;
    }

    //---> Data

    get data(){ return this._data; }
    set data(p_value){

        if('_PreprocessData' in this){ p_value = this._PreprocessData(p_value); }
        
        if(this._data == p_value){return;}

        var oldValue = this._data;
        this._data = p_value;
        this._observer.observable = p_value;

        this._OnDataChanged(oldValue);
        this._PostDataChanged(oldValue);

        if(p_value){
            this._OnDataUpdated(p_value);
        }

        this._Notify( UI_EVENT.DATA_CHANGED, this, p_value, oldValue );

    }

    _OnDataChanged(p_oldData){
        
    }

    _PostDataChanged(p_oldData){
        
    }

    _OnDataUpdated(p_data){

    }
    

    //---> Pooling

    _CleanUp()
    {

        if(this._selectionStack){
            this._selectionStack.Clear();
        }
        this.data = null;
        this._selectOnActivation = this.default_SelectOnActivation;
        this.removeAttribute(`title`);

        if(this._mouseOver){ 
            this._mOut(null);
            if(this._mouseDown){
                this._mUp(null);
            }
        }else if(this._mouseDown){
            this._mUpOutside(null);
        }

        this.Select(false);
        this.Focus(false);

        super._CleanUp();
    }

    

    toString(){
        if(!this._data){
            return `<${this.constructor.name}|${this._uinc}>`;
        }else{
            return `<${this.constructor.name}|${this._uinc}:{${this._data}}>`;
        }    
    }

}

module.exports = Widget;
UI.Register(`ui-widget`, Widget);
},{"../@.js":6,"../@tools.js":7,"../collections/@.js":22,"../signals/@.js":137,"./core-ui-event.js":224,"./core-ui-flags.js":225,"./display-object-container.js":228,"./widget-selection.js":240}],242:[function(require,module,exports){
'use strict';

const { U, EVENT } = require(`./@.js`);
const { Dictionary, DictionaryList } = require(`./collections/@.js`);

const SingletonEx = require(`./singleton-ex.js`);
const DisposableHTMLElement = require(`./ui-core/disposable-htmlelement.js`);

const TIME = require(`./time.js`);

const _elBG = `bg`;
const _elBGO = `bgo`;
const _elTEXT = `text`;
const _sNone = `none`;
const _sIdle = `idle`;
const _sDisabled = `disabled`;
const _sFocused = `focused`;
const _sSelected = `selected`;
const _sFocuselected = `focused+selected`;


class UI extends SingletonEx{
    constructor() {super();}

    //---> Constants

    static get elBG(){ return _elBG; }
    static get elBGO(){ return _elBGO; }
    static get elTEXT(){ return _elTEXT; }
    
    static get sNONE(){ return _sNone; }
    static get sIDLE(){ return _sIdle; }
    static get sDISABLED(){ return _sDisabled; }
    static get sFOCUS(){ return _sFocused; }
    static get sSELECT(){ return _sSelected; }
    static get sFS(){ return _sFocuselected; }

    static get GRAVEYARD(){return UI.instance._uiPoolContainer;}
    //---> Init

    _Init(){

        super._Init();
        
        this._uiPoolContainer = U.Element(`div`, {}, document.body);
        this._uiPoolContainer.style.display = `none`;

        this._uiPool = new DictionaryList();
        this._uiTypes = new Dictionary();

        this._Bind(this._Return);
        this._Bind(this._UpdateDirty);

        this._dirtyElements = new Array(0);

    }

    static Register( p_id, p_class, p_extends = null ){
        UI.instance._Register(p_id, p_class, p_extends);
    }

    /**
     * Register custom element
     * @param {String} p_id 
     * @param {DisposableHTMLElement} p_class 
     */
    _Register( p_id, p_class, p_extends = null ) {

        if(typeof p_class != `function`){
            console.error(`Register used with invalid class : ${p_class}`);
            var err = new Error();
            console.log(err.stack);
            return;
        }

        if(!p_extends){p_extends = `div`;}

        this._uiTypes.Set(p_class.name, p_class);
        customElements.define(p_id, p_class);//, { extends: p_extends });npm run bun
        //#LOG console.log(`%c+ ${p_class.name} %c<${p_id}>`, 'color: #9000ff', 'color: #b4b4b4');

    }

    static RegisterGroup(p_group){
        for(var member in p_group){
            UI.instance._Register(member, p_group[member]);
        }
    }

    //---> Pooling

    /**
     * Return a deprecated DisposableHTMLElement to be re-used later.
     * @param {DisposableHTMLElement} p_displayObject 
     */
    _Return( p_displayObject ){

        if(typeof p_displayObject != `object`
        || !U.IoF(p_displayObject, DisposableHTMLElement)){
            console.error(`Return used with invalid object : ${p_displayObject}`);
            return;
        }

        var keyName = p_displayObject.constructor.name;

        if(!this._uiTypes.Contains(keyName)){
            console.error(`Return used with a never-registered object type : ${keyName}`);
            return;
        }

        this._uiPool.Set(keyName, p_displayObject);

    }

    static Rent(p_class, p_parent = null ){
        return UI.instance._Rent(p_class, p_parent);
    }

    /**
     * 
     * @param {String or DisposableHTMLElement} uiObjectClass 
     */
    _Rent( p_class, p_parent = null ){

        var keyName = null;
        
        if(U.IsString(p_class)){
            keyName = p_class;
        }else if(typeof p_class == `function`){
            keyName = p_class.name;
        }else{
            console.error("Rent requires either a string or a class.");
            return null;
        }

        if(!this._uiTypes.Contains(keyName)){ return null; }

        p_class = this._uiTypes.Get(keyName);
        var obj = this._uiPool.Pop(keyName);

        if(!obj){
            obj = new p_class();
            obj._returnFn = this._Return;
        }

        obj.Wake();

        if(p_parent){
            p_parent.Add(obj);
        }

        return obj;

    }

    static AddDirty(p_element){
        if(!p_element){return;}
        UI.instance._AddDirty(p_element);
    }

    _AddDirty(p_element){
        if(this._dirtyElements.includes(p_element)){return;}
        if(this._dirtyElements.length == 0){
            TIME.ON(TIME.TICK, this._UpdateDirty);
        }

        this._dirtyElements.push(p_element);
    }

    _UpdateDirty(p_delta){
        for(var i = 0, n = this._dirtyElements.length; i < n; i++){
            this._dirtyElements[i].ApplyTransforms();
        }
        this._dirtyElements.length = 0;
        TIME.OFF(TIME.TICK, this._UpdateDirty);
    }

    //---> Associations



    Associate( p_context, p_dataType, p_uiType ){

    }

    Dissociate( p_context, p_dataType, p_uiType ){

    }

}

module.exports = UI;

},{"./@.js":6,"./collections/@.js":22,"./singleton-ex.js":146,"./time.js":148,"./ui-core/disposable-htmlelement.js":230}],243:[function(require,module,exports){
'use strict';

const U = require(`./util.js`);

const _delim_model = ':';
const _delim_field = '.';
const _delim_hash = '@';
    
class URI{

    static get DELIM_MODEL(){ return _delim_model; }
    static get DELIM_FIELD(){ return _delim_field; }
    static get DELIM_HASH(){ return _delim_hash; }

    constructor() {}

    static Resolve(p_uri, p_ecosystem ){
        // URI formats
        // modelId == model
        // .fieldId == fieldDescriptor
        // :entryId == entry
        // modelId.fieldId == fieldSettings
        // modelId:entryId == entry
        // modelId:entryId.fieldId == field value
        // modelId:entryId.fieldId#hash == hash resolved in field value

        var o_uri = p_uri;
        var hash = null;
        var fieldId = null;
        var modelId = null;
        var entryId = null;
        
        // hash is anything after the first DELIM_HASH
        var hashSplit = p_uri.split(URI.DELIM_HASH);
        if(hashSplit.length >= 2){
            p_uri = hashSplit.shift();
            hash = hashSplit.join(URI.DELIM_HASH);
        }hashSplit.length = 0;

        // fieldId is anything after the first DELIM_FIELD
        var fieldSplit = p_uri.split(URI.DELIM_FIELD);
        if(fieldSplit.length >= 2){
            p_uri = fieldSplit.shift();
            fieldId = fieldSplit.join(URI.DELIM_FIELD);
        }fieldSplit.length = 0;

        // entryId is anything after the first DELIM_MODEL
        var entrySplit = p_uri.split(URI.DELIM_MODEL);
        if(entrySplit.length >= 2){
            p_uri = entrySplit.shift();
            entryId = entrySplit.join(URI.DELIM_MODEL);
        }entrySplit.length = 0;

        if(!U.Empty(p_uri)){ modelId = p_uri; }

        if(modelId){
            // modelId
            var model = p_ecosystem.models.Get(modelId);
            if(!model){ throw new Error(`could not find model ${modelId} in ${o_uri}`); }

            var fieldSettings = fieldId ? model.Get(fieldId) : null;

            if(entryId){
                // modelId:entryId
                var entry = p_ecosystem.entries.Get( model, entryId );
                if(!entry){ throw new Error(`could not find entry ${entryId} in ${o_uri}`); }

                if(fieldId){
                    // modelId:entryId.fieldId
                    if(!fieldSettings){ throw new Error(`could not find field ${fieldId} in ${o_uri}`); }

                    var fieldData = entry.GetFieldData(fieldSettings.id, true);
                    if(hash){/* TODO : Resolve hash on fieldData */}
                    return fieldData;
                }
                return entry;
            }else{
                if(fieldId){
                    //modelId.fieldId
                    if(!fieldSettings){ throw new Error(`could not find field ${fieldId} in ${o_uri}`); }

                    if(hash){/* TODO : Resolve hash on fieldSettings */}
                    return fieldSettings;
                }
                return model; 
                
            }
        }else{
            if(fieldId){
                var fieldDescriptor = p_ecosystem.fields.Get(fieldId);
                if(!fieldDescriptor){ throw new Error(`could not find field descriptor ${fieldId} in ${o_uri}`); }
                return fieldDescriptor;
            }
        }

        if(entryId){
            throw new Error(`URI(${o_uri}) is a roaming entry ID.`);
        }else{
            throw new Error(`URI(${o_uri}) could not be resolved.`);
        }

    }

    static GetURI(p_target){

    }

}

module.exports = URI;
},{"./util.js":244}],244:[function(require,module,exports){
'use strict';

class UTIL{

    constructor() {}

    static get DELIM_PROTOCOL(){ return `://`; }
    static get DELIM_DRIVE(){ return `:/`; }
    static get DELIM_DIR(){ return `/`; }
    static get DELIM_EXT(){ return `.`; }
    static get DELIM_COLON(){ return `:`; }
    static get DELIM_PIPE(){ return `|`; }

    static IoF(p_source, p_target){

        if(p_source == undefined 
            || p_source == null
            || p_target == undefined 
            || p_target == null){
                return false;
            }

        var tofA = ( typeof p_source ) == 'function';
        var tofB = ( typeof p_target ) == 'function';

        if(tofA && tofB && p_source == p_target){
            return true;
        }

        var A = tofA ? p_source.prototype : p_source;
        var B = tofB ? p_target : p_target.constructor;

        return A instanceof B;
        
    }

    /**
     * Return an HTMLElement formatted as
     * <element att=value ></element>
     * @param {*} p_element 
     * @param {*} p_attributes 
     */
    static Element( p_element, p_attributes = null, p_container = null )
    {

        var element = document.createElement(p_element);
        
        if(!UTIL.Void(p_attributes)){
            for(var att in p_attributes){
                element.setAttribute(att, p_attributes[att]);
            }
        }

        if(!UTIL.Void(p_container)){
            p_container.appendChild(element);
        }

        return element;

    }

    static Void( p_value ){ return (p_value == undefined || p_value == null); }
    static Empty(p_value){ 
        if(p_value == undefined || p_value == null || p_value == '' || p_value == ' '){return true;}
        if(typeof p_value == 'object'){
            for(var key in p_value) {if(p_value.hasOwnProperty(key)){return false;}}
            return true;
        }
        return false;
    }
    
    static JSONStripEmpty(p_key, p_value){ 
        if(p_value == undefined || p_value == null || p_value == '' || p_value == ' '){
            return undefined;
        }
        if(typeof p_value == 'object'){
            for(var k in p_value) {
                if(p_value.hasOwnProperty(k)){
                    return p_value;
                }
            }
            return undefined;
        }
        return p_value;
    }

    static Default( ...args ){
        var val = null;
        for(var i = 0, n = args.length; i < n; i++){
            val = args[i];
            if(val != undefined && val != null){
                return val;
            }
        }

        return val;
    }

    static Get( p_obj, p_id, p_fallback ){

        if(UTIL.Void(p_fallback)){p_fallback = null;}
        if(UTIL.Void(p_obj)){return p_fallback;}
        
        var val = p_obj[p_id];
        if(UTIL.Void(val)){
            return p_fallback;
        }else{
            return val;
        }

    }

    /**
     * Breaks down a path into an object to the following format :
     * {
     *      path:[catalog, catalog, ...],
     *      item:tailName,
     *      ext:extention,
     * }
     * @param {String} p_stringPath 
     */
    static ParsePath( p_stringPath )
    {

        if(UTIL.Void(p_stringPath)){return null;}
        
        var parseResult = {};

        var hasProtocol = p_stringPath.includes(UTIL.DELIM_PROTOCOL);
        if(hasProtocol){
            var protocolSplit = p_stringPath.split(UTIL.DELIM_PROTOCOL);
            if(protocolSplit.length != 2){ throw new Error(`Path '${p_stringPath}' cannot be parsed (protocol malformed).`); }
            parseResult.protocol = protocolSplit[0]+UTIL.DELIM_PROTOCOL;
            p_stringPath = protocolSplit[1];
        }

        var hasDrive = p_stringPath.includes(UTIL.DELIM_DRIVE);
        if(hasDrive){
            var driveSplit = p_stringPath.split(UTIL.DELIM_DRIVE);
            if(driveSplit.length > 2){throw new Error(`Path '${p_stringPath}' cannot be parsed (drive malformed).`);}
            parseResult.drive = driveSplit[0]+UTIL.DELIM_PROTOCOL;
            p_stringPath = driveSplit[1];
        }

        var split = p_stringPath.split(UTIL.DELIM_DIR);
        var lastIndex = split.length-1;
        //Split catalog path
        var fname = split[lastIndex];
        //Remove last item
        split.splice(lastIndex, 1);
        var splitEx = fname.split(UTIL.DELIM_EXT);

        for(var i = 0, n = split.length; i < n; i++){if(split[i] == ``){split.splice(i,1); i--;}}

        parseResult.path = split.join(UTIL.DELIM_DIR) + UTIL.DELIM_DIR;
        parseResult.pathArray = split;
        parseResult.name = splitEx[0];
        parseResult.ext = UTIL.DELIM_EXT + splitEx[splitEx.length-1];

        return parseResult;

    }

    static Append(p_base, p_append){

        if(UTIL.Void(p_base)){
            p_base = {};
        }

        if(UTIL.Void(p_append)){
            return p_base;
        }

        for(var member in p_append){
            if(p_base.hasOwnProperty(member)){continue;}
            p_base[member] = p_append[member];
        }

        return p_base;

    }

    static Slashes(p_string){
        return p_string.split('\\').join('/');
    }

    static Not(p_base, ...args){
        for(var i = 0, n = args.length; i < n; i++){if(args[i] == p_base){return false;}}
        return true;
    }

    static Merge(p_base, p_source, p_skipExisting = false){

        if(p_base == null || p_base == undefined){return p_source;}
        
        var tof = null;
        var baseValue = null;
        var sourceValue = null;
        for(var member in p_source){

            sourceValue = p_source[member];

            if(p_base.hasOwnProperty(member) && !p_skipExisting){
                //Property exist in base, update its values
                baseValue = p_base[member];
                if(!Array.isArray(baseValue) && typeof baseValue == 'object'){
                    if(!Array.isArray(sourceValue) && typeof sourceValue == 'object'){
                        UTIL.Merge(baseValue, sourceValue);
                    }else{
                        p_base[member] = sourceValue;    
                    }
                }else{
                    p_base[member] = sourceValue;
                }
            }else{
                //Simply assign value
                p_base[member] = sourceValue;
            }
        }

        return p_base;

    }

    static Clone(p_base) {
        var clone = {};
        var value;
        for(var member in p_base) {
            value = p_base[member];
            if(value != null){
                if(Array.isArray(value)){
                    value = UTIL.CloneArray(value);
                }else if(typeof value == 'object'){
                    value = UTIL.Clone(value);
                }
            }
            clone[member] = value;
        }
        return clone;
    }

    static CloneArray(p_base){
        var arr = new Array(0);
        var arrValue = null;
        for(var i = 0, n = p_base.length; i < n; i++){
            arrValue = p_base[i];
            if(arrValue != null){
                if(Array.isArray(arrValue)){
                    arrValue = UTIL.CloneArray(arrValue);
                }else if(typeof arrValue == 'object'){
                    arrValue = UTIL.Clone(arrValue);
                }
            }
            arr.push(arrValue); 
        }
        return arr;
    }

    static IsString(p_obj){
        return typeof p_obj == `string`;
    }

    static IsObject(p_obj){
        return typeof p_obj == `object`;
    }

    static IsFunc(p_obj){
        return typeof p_obj == `function`;
    }

    static CamelSplit(p_string){
        return p_string.replace(/([a-z0-9])([A-Z#])/g, '$1 $2');
    }

    static ArrayDiff(p_oldArray, p_newArray, p_out, p_in){
        //Checks the difference between old and new.
        //p_out is the items from oldArray not in the new one
        //p_int are the items from the newArray not in the old one

        if(UTIL.Void(p_oldArray)){
            if(UTIL.Void(p_newArray)){return;}
            //Everything in
            for(var i = 0, n = p_newArray.length; i < n; i++){
                p_in.push(p_newArray[i]);
            }
            return;
        }else if(UTIL.Void(p_newArray)){
            if(UTIL.Void(p_oldArray)){return;}
            //Everything out
            for(var i = 0, n = p_oldArray.length; i < n; i++){
                p_out.push(p_oldArray[i]);
            }
            return;
        }

        var item = null;
        for(var i = 0, n = p_oldArray.length; i<n; i++){
            item = p_oldArray[i];
            if(!p_newArray.includes(item)){p_out.push(item);}
        }
        for(var i = 0, n = p_newArray.length; i < n; i++){
            item = p_oldArray[i];
            if(!p_newArray.includes(item)){p_in.push(item);}
        }
    }

    static ArrayDiffCallbacks(p_oldArray, p_newArray, p_outCallback, p_inCallback ){

        
        if(UTIL.Void(p_oldArray)){
            if(UTIL.Void(p_newArray)){return;}
            //Everything in
            for(var i = 0, n = p_newArray.length; i < n; i++){
                p_inCallback(p_newArray[i], i);
            }
            return;
        }else if(UTIL.Void(p_newArray)){
            if(UTIL.Void(p_oldArray)){return;}
            //Everything out
            for(var i = 0, n = p_oldArray.length; i < n; i++){
                p_outCallback(p_oldArray[i], i);
            }
            return;
        }

        var item = null;

        for(var i = 0, n = p_oldArray.length; i<n; i++){
            item = p_oldArray[i];
            if(!p_newArray.includes(item)){
                p_outCallback(item, i);
            }
        }
        for(var i = 0, n = p_newArray.length; i < n; i++){
            item = p_newArray[i];
            if(!p_oldArray.includes(item)){
                p_inCallback(item, i);
            }
        }

    }

    static InheritanceDistance( p_from, p_to )
    {
        //Return -1 if no inheritance
        var dist = 0;
        if(!UTIL.IoF(p_from, p_to)){return -1;}

        var cl = Object.getPrototypeOf(p_from);

        while(cl != null && dist < 100){
            if(cl == p_to){
                return dist;
            }else{
                cl = Object.getPrototypeOf(cl);
            }
            dist++;
        }

        if(dist == 100){
            console.warn(`InheritanceDistance reached 100 iterations.`);
        }

        return -1;
    }


    static Clear(p_obj, p_returnNewEmpty = false){
        for(var member in p_obj){delete p_obj[member];}
        if(p_returnNewEmpty){return {};}
    }

    static DeepClear(p_obj, p_returnNewEmpty = false){

        var value = null;
        for(var member in p_obj){
            value = p_obj[member];     
            if(Array.isArray(value)){
                UTIL.DeepClearArray(value);
            }else if(typeof value == 'object'){
                UTIL.DeepClear(value);
            }else{
                p_obj[member] = null;
            }
            delete p_obj[member];
        }
        if(p_returnNewEmpty){return {};}
    }

    static DeepClearArray(p_arr){
        var value = null;
        while(p_arr.length != 0){
            value = p_arr.pop();
            if(Array.isArray(value)){
                UTIL.DeepClearArray(value);
            }else if(typeof value == 'object'){
                UTIL.DeepClear(value);
            }
        }
    }

    static Same(p_source, p_other){
        if(p_source === p_other){return true;}
        var value = null;
        var otherValue = null;
        var i = 0;
        var tof = null;
        var otherTof = null;
        for(var member in p_source){
            i++;
            if(member in p_other){
                value = p_source[member];
                otherValue = p_other[member];
                if(value !== otherValue){
                    tof = typeof value;
                    otherTof = typeof otherValue;
                    if(tof == otherTof){
                        if(Array.isArray(value)){
                            if(!UTIL.SameArray(value, otherValue)){return false;}
                        }else if(tof == 'object'){
                            if(!UTIL.Same(value, otherValue)){return false;}
                        }else{
                            return false;
                        }
                    }else{
                        return false;
                    }
                }
            }else{
                return false;
            }
        }

        var j = 0;
        for(var member in p_other){ j++; }

        if(i != j){return false;}
        return true;
    }

    static SameArray(p_source, p_other){
        if(p_source === p_other){return true;}
        var n = p_source.length;
        if(n != p_other.length){ return false; }
        var tof = null;
        var otherTof = null;
        var value = null;
        var otherValue = null;
        for(var i = 0; i < n; i++){
            value = p_source[i];
            otherValue = p_other[i];
            if(value !== otherValue){
                tof = typeof value;
                otherTof = typeof otherValue;
                if(tof == otherTof){
                    if(Array.isArray(value)){
                        if(!UTIL.SameArray(value, otherValue)){return false;}
                    }else if(tof == 'object'){
                        if(!UTIL.Same(value, otherValue)){return false;}
                    }else{
                        return false;
                    }
                }else{
                    return false;
                }
            }
        }
        return true;
    }

    static Join(p_array, p_join, p_from = 0, p_to = null){
        if(p_to == null){p_to = p_array.length-1;}
        var str = `${p_array[p_from]}`;
        p_from++;
        for(var i = p_from; i <= p_to; i++){
            str += `${p_join}${p_array[i]}`;
        }
        return str;
    }

    static RGBToHex(p_r, p_g, p_b) {
        p_r = p_r.toString(16);
        p_g = p_g.toString(16);
        p_b = p_b.toString(16);
        return `#${p_r.length == 1 ? "0" + p_r : p_r}${p_g.length == 1 ? "0" + p_g : p_g}${p_b.length == 1 ? "0" + p_b : p_b}`;
    }

    static HexToRGB(p_hex, p_a = 1) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(p_hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
            a : p_a
        } : { r:0, g:0, b:0, a:p_a };
    }

    static HexToRGBAString(p_hex, p_a = 1){
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(p_hex);
        return result ?
            `rgba(${parseInt(result[1], 16)},${parseInt(result[2], 16)},${parseInt(result[3], 16)},${p_a})` 
            : `rgba(0,0,0,${p_a})`;
    }

    static Resolve(p_obj, p_path)
    {
        var paths = p_path.split('.')
            , current = p_obj
            , i;
        
        for (i = 0; i < paths.length; ++i) {
            if (current[paths[i]] == undefined) {
            return undefined;
            } else {
            current = current[paths[i]];
            }
        }
        return current;
    }

    /*
    static Set(){
        

        if(this._val == p_value){return;}
        var oldValue = this._val;
        this._val = p_value;

        if(oldValue){

        }
        if(p_value){

        }

        this.UpdateCallback(oldValue);

        
    }
    */

    //---> Regex

    static ValidIdentifier(p_str){ return /^[A-Za-z_][A-Za-z0-9_]*$/.test(p_str); }
    static StartWithNumber(p_str){ return /^\d/.test(p_str); }
    static ContainsAnySpace(p_str){
        return p_str.includes(
            ` `,
            ` `, //No break space
            ` `, //Ogham space mark
            `᠎`, //Mongolian vowel separator
            ` `, //EN Quad
            ` `, //EM Quad
            ` `, //EN space
            ` `, //EM space
            ` `, //1/3
            ` `, //1/4 EM
            ` `, //1/6 EM
            ` `, //Figure space
            ` `, //punctuation space
            ` `, //thin space
            ` `, //hair space
            `​`, //zero-width space
            ` `, //narrow no break space
            ` `, //mathematical space
            `　`, //ideographic space
            `﻿`, //zero width nobreak space
            );
    }

    static get unsafeUID(){
        return `_${Math.random().toString(36).substr(2, 9)}`;
    }

    static Move(p_array, p_currentIndex, p_newIndex){
        if(p_currentIndex == p_newIndex){return;}
        if(p_currentIndex == -1){throw new Error(`Item is not in array`);}
        p_array.splice(p_newIndex, 0, p_array.splice(p_currentIndex, 1)[0]);
    }

}

module.exports = UTIL;

},{}],245:[function(require,module,exports){
module.exports = {    

    DefaultFieldSettingsControl : require(`./field-settings-default-control.js`),

    DefaultFieldValueControl : require(`./field-value-default-control.js`),
    FDNumberValueControl : require(`./field-value/fd-number.js`),
    FDBooleanValueControl : require(`./field-value/fd-boolean.js`),
    FDStringValueControl : require(`./field-value/fd-string.js`),
    FDIdentifierValueControl : require(`./field-value/fd-identifier.js`),

    ModelInspector : require(`./model-inspector.js`),
    EntryInspector : require(`./entry-inspector.js`),
    FieldSettingsInspector : require(`./field-settings-inspector.js`),

    ModelFSControlGroup : require(`./model-fs-control-group.js`),
    ModelHierarchyControl : require(`./model-hierarchy-control.js`),
 
    
}
},{"./entry-inspector.js":246,"./field-settings-default-control.js":247,"./field-settings-inspector.js":248,"./field-value-default-control.js":251,"./field-value/fd-boolean.js":254,"./field-value/fd-identifier.js":255,"./field-value/fd-number.js":256,"./field-value/fd-string.js":257,"./model-fs-control-group.js":276,"./model-hierarchy-control.js":277,"./model-inspector.js":278}],246:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { MetaControlGroup, Inspector } = require(`../../../com/ui-controls/@.js`);
const UI = require(`../../../com/ui.js`);

const EntryDerivationInspectorItem = require(`./inspectors/entry-derivation-iitem.js`);
const { EntryUIDInspectorItem } = require(`./inspectors/uid-iitems.js`);


class EntryInspector extends Inspector{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._UIDInspectorItem = null;
        this._overrideControl = null;
        this._metaInspector = null;
    }

    _Render(){
        super._Render();
        this._overrideControl = this.AddInspector(EntryDerivationInspectorItem);
        this._UIDInspectorItem = this.AddInspector(EntryUIDInspectorItem);
        this._metaInspector = this.AddInspector(MetaControlGroup);
        this._metaInspector.metaID = 'Metadata';
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);

        this._UIDInspectorItem.context = this._context;
        this._UIDInspectorItem.data = this._data;
        
        this._metaInspector.context = this._context;
        this._metaInspector.data = this._data;
    }
}

module.exports = EntryInspector;
UI.Register(`inspector-entry`, EntryInspector);
},{"../../../com/@.js":6,"../../../com/ui-controls/@.js":190,"../../../com/ui.js":242,"./inspectors/entry-derivation-iitem.js":259,"./inspectors/uid-iitems.js":263}],247:[function(require,module,exports){
/**
 * Default field setting control is
 * [Field Settings Header]
 * [Field Settings Properties Control]
 * plus overlays in order to delete/revert delete/revert modifications
 */

const { U, C, M, PATH } = require(`../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model, ModelProxy, FieldSettingsProxy } = require(`../../../com/data-core/@.js`);
const { ActionModelDeleteField } = require(`../../../com/data-core/actions/@model.js`);
const { UI_EVENT } = require(`../../../com/ui-core/@.js`);
const { MetaControlGroup, Inspector } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const UI = require(`../../../com/ui.js`);


const KIT_CORE_FLAGS = require(`../kit-core-flags.js`);
const FieldSettingsControl = require(`../../../com/ui-controls/control-field-settings.js`);
const FieldSettingsHeader = require(`./field-settings/field-settings-header.js`);

const { ActionModelOverrideField } = require(`../../../com/data-core/actions/@model`);


class DefaultFieldSettingsControl extends FieldSettingsControl{
    constructor(){super();}
    
    _Init(){
        
        super._Init();
        this._expandOnHeaderAltActivation = false;

        this._useGroupExpand = false;
        this._header = null;

        this._isInherited = false;
        this._isDeleted = false;
        this._isFresh = false;

        this._observer.Hook(FieldSettingsProxy.PLANNED_DELETE_CHANGED, this, this._PlannedDeleteChanged);

        this.RegisterClassToggle(this, KIT_CORE_FLAGS.INHERITED, KIT_CORE_FLAGS.DELETED, KIT_CORE_FLAGS.FRESH, KIT_CORE_FLAGS.DIRTY);

    }

    _PostInit(){
        super._PostInit();

        this._facade.icon.style.opacity = 0.5;
        /*
        this._renameBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_edit.svg`, text:`Rename`,
            trigger:{ thisArg:this, fn:this._TogglePlannedDelete},
        });
        */

        this._scheduleForDeleteBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_delete.svg`, text:`Delete`,
            trigger:{ thisArg:this, fn:this._TogglePlannedDelete},
        });

        this._overrideFieldBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_break_inherit.svg`, text:`Override`,
            trigger:{ thisArg:this, fn:this._CreateFieldOverride},
        });
        this._overrideFieldBtn.visible = false;
        

    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                border:`1px solid rgba(0,0,0,0)`
            },
            '.field-header':{

            },
            '.body':{
                padding:`4px`
            },
            ':host(.deleted):after':{
                content:`""`, width:`calc( 100% - ${this._handleWidth +10})`, height:`100%`, position:`absolute`,
                'pointer-events':`none`,
                'z-index':1, opacity:1,
                //'box-shadow': `inset 0px 0px 500px rgba(${C.COLORS.error},0.5)`, //#e20500
                //background:`url(${PATH.EX('%PATTERN%/pattern_delete.svg')}) repeat`,
                //'background-size':`64px 64px`,
                //'background-attachment': `fixed`
            },
            ':host(.dirty)':{
                border:`1px solid rgba(${C.COLORS.warning},0.2)`
            },
            ':host(.fresh)':{
                border:`1px solid rgba(${C.COLORS.infos},0.2)`
            },
            ':host(.deleted)':{
                border:`1px solid rgba(${C.COLORS.error},0.4)`
            },
            ':host(.inherited)':{
                'padding-left':`0px`
            },
            ':host(.inherited) .drag-handle':{
                'display':`none`
            },
        });
    }

    _Render(){
        super._Render();
        //TODO : Probably remove the setting header from explorer and move it to inspector
        //there's no need to clutter the screen with tons of shit you're not supposed to edit that often
        //this._header = this.Add(FieldSettingsHeader, -1, this, `field-header`);
    }

    _TogglePlannedDelete(){
        if(this._isFresh){
            this._Do(ActionModelDeleteField,{ target:this._data });
        }else{
            this._data.isDeletePlanned = !this._data.isDeletePlanned;
            this._data.dirty = true;
        }
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        
        var inherited = false;
        var deleted = false;
        var fresh = false;

        if(this._data){
            if(U.IoF(this._data, FieldSettingsProxy)){
                deleted = this._data.isDeletePlanned;
                fresh = U.Void(this._data.referenceField);
            }else{
                if(U.IoF(this._data.model, ModelProxy)){
                    fresh = true;
                }else{
                    inherited = true;
                }
            }
        }

        this.ToggleInheritDisplay(inherited);
        this.ToggleDeleteDisplay(deleted);
        this.ToggleFreshDisplay(fresh);
        
        this.SetFlag(KIT_CORE_FLAGS.DIRTY, p_data.dirty);
        this._facade.label.bold = p_data.dirty;
        //this._facade.label.italic = p_data.dirty;

    }
    
    _PlannedDeleteChanged(p_field, p_toggle){ 
        if(this._inherited){return;}
        this.ToggleDeleteDisplay(p_toggle); 
    }

    ToggleDeleteDisplay( p_toggle ){
        if(this._isDeleted == p_toggle){return false;}
        this.SetFlag(KIT_CORE_FLAGS.DELETED, p_toggle);
        this._isDeleted = p_toggle;      
        
        //this._facade.label.striked = p_toggle;
        this._facade.label.color = ``;

        return true;
    }

    ToggleInheritDisplay( p_toggle ){
        if(this._isInherited == p_toggle){return false;}
        this.SetFlag(KIT_CORE_FLAGS.INHERITED, p_toggle);
        this._isInherited = p_toggle;

        this._scheduleForDeleteBtn.visible = !p_toggle;
        this._overrideFieldBtn.visible = p_toggle;
        this._extDrag.enabled = !p_toggle;

        this._facade.label.color = p_toggle ? `rgba(${C.COLORS.mid},1)` : `rgba(${C.COLORS.white},1)`;

        return true;
    }

    ToggleFreshDisplay( p_toggle ){
        if(this._isFresh == p_toggle){return false;}
        this.SetFlag(KIT_CORE_FLAGS.FRESH, p_toggle);
        this._isFresh = p_toggle;
        return true;
    }

    _CreateFieldOverride(){
        var editor = this.editor;
        if(!editor){ throw new Error(`No editor found to execute action.`); }

        var proxy = editor._proxy;
        var fId = this._data.id.name;
        var override = proxy.Get(fId, true);

        if(!override){
            editor.Do(ActionModelOverrideField,{ target:proxy, originalField:this._data });
            override = proxy.Get(fId);
        }

        editor.Inspect(override);
    }

    _CleanUp(){
        this.ToggleInheritDisplay(false);
        this.ToggleDeleteDisplay(false);
        this.ToggleFreshDisplay(false);
        super._CleanUp();
    }

}

module.exports = DefaultFieldSettingsControl;
UI.Register(`default-field-settings-control`, DefaultFieldSettingsControl);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/data-core/actions/@model":44,"../../../com/data-core/actions/@model.js":44,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-controls/@.js":190,"../../../com/ui-controls/control-field-settings.js":193,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242,"../kit-core-flags.js":294,"./field-settings/field-settings-header.js":249}],248:[function(require,module,exports){
const { U, C, M, EVENT } = require(`../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model, FieldSettingsProxy } = require(`../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../com/ui-core/@.js`);
const { MetaControlGroup, Inspector } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const UI = require(`../../../com/ui.js`);

const KIT_CORE_FLAGS = require(`../kit-core-flags.js`);
const { APP_UI_FLAGS, StickerBar } = require(`../../../com/ui-app/@.js`);
const OverlayInherit = require(`./overlays/overlay-inherit.js`);
const OverlayDelete = require(`./overlays/overlay-delete.js`);
const { FieldUIDInspectorItem } = require(`./inspectors/uid-iitems.js`);
const FieldSettingsDerivationInspectorItem = require(`./inspectors/field-settings-derivation-iitem.js`);
const Observer = require(`../../../com/signals/observer.js`);

const { ActionModelOverrideField } = require(`../../../com/data-core/actions/@model`);

class FieldSettingsInspector extends Inspector{
    constructor(){super();}
    
    _Init(){

        super._Init();

        this._isInherited = false;
        this._isDeleted = false;

        this._overlayInherit = null;
        this._overlayDelete = null;

        this._topStatus = null;
        this._overrideControl = null;
        this._UIDInspectorItem = null;
        this._metaInspector = null;

        this._observer.Hook(FieldSettingsProxy.PLANNED_DELETE_CHANGED, this, this._PlannedDeleteChanged);

        this._overrideObserver = new Observer();
        this._overrideObserver.Hook(EVENT.RELEASED, this, this._OverrideRelease);

        this.RegisterClassToggle(this, KIT_CORE_FLAGS.INHERITED, KIT_CORE_FLAGS.DELETED);

    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            '.overlay':{

            }
        });
    }

    _Render(){
        super._Render();
        this._topStatus = this.Add(StickerBar, -1, this, `group`);
        this._overrideControl = this.AddInspector(FieldSettingsDerivationInspectorItem);
        this._UIDInspectorItem = this.AddInspector(FieldUIDInspectorItem);
        this._metaInspector = this.AddInspector(MetaControlGroup);
        this._metaInspector.metaID = 'Metadata';
    }

    _PostRender(){
        super._PostRender();
    }

    _OnParentChanged(p_oldValue){
        super._OnParentChanged(p_oldValue);
    }

    _OnDataChanged(p_oldValue){

        super._OnDataChanged(p_oldValue);

        var inherited = false;
        var deleted = false;

        if(this._data){
            if(this._context != this._data.model){
                inherited = true;
            }else{
                inherited = false;
                deleted = this._data.isDeletePlanned;
            }
            this._overrideObserver.observable = this._context.Get(this._data.id.name, true);
        }else{
            this._overrideObserver.observable = null;
        }

        this.ToggleInheritDisplay(inherited);
        this.ToggleDeleteDisplay(deleted);

    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);

        var overrides = false;
        var bar = this._topStatus;
        if(p_data.base){
            overrides = true;
            
            bar.flag = APP_UI_FLAGS.INFOS;
            bar.text = `Overrides <strong>${p_data.base.uri}</strong>`;
            bar.htitle = `Currently overrides another, inherited field.`;
        }

        bar.visible = false;// overrides;
        this._UIDInspectorItem.visible = !overrides;
        this._overrideControl.visible = overrides;

    }

    _OverrideRelease(p_field){
        this._overrideObserver.observable = null;
        this._RefreshInheritOverlay();
    }

    _PlannedDeleteChanged(p_field, p_toggle){
        this.ToggleDeleteDisplay(p_toggle);
    }

    ToggleDeleteDisplay( p_toggle ){
        if(this._isDeleted == p_toggle){return;}
        this.SetFlag(KIT_CORE_FLAGS.DELETED, p_toggle);
        this._isDeleted = p_toggle;
        if(p_toggle){
            this._overlayDelete = this._parent.Add(OverlayDelete, -1, this._parent._host);
            this._overlayDelete.contentOptions = {
                icon:`%ICON%/icon_delete_scheduled.svg`,
                title:`Planned Delete`,
                text:`<strong>${this._data.id.name}</strong> will be deleted once modifications to <strong>${this._data.id.name}</strong> are saved and applied.`,
                actions:{
                    text:'Restore',
                    icon:`%ICON%/icon_close.svg`, 
                    trigger:{ thisArg:this, fn:this._TogglePlannedDelete } 
                }
            };
        }else if(this._overlayDelete){
            this._overlayDelete.Release();
            this._overlayDelete = null;
        }  
    }

    _RefreshInheritOverlay(){
        this.ToggleInheritDisplay(false);
        this.ToggleInheritDisplay(this._context != this._data.model);
    }

    ToggleInheritDisplay( p_toggle ){
        if(this._isInherited == p_toggle){return;}
        this.SetFlag(KIT_CORE_FLAGS.INHERITED, p_toggle);
        this._isInherited = p_toggle;
        if(p_toggle){

            this._overlayInherit = this._parent.Add(OverlayInherit, -1, this._parent._host);
            var cOptions = null;
            var overrideField = this._overrideObserver.observable;
            if(overrideField){

                // Field is being overriden in current context

                cOptions = {
                    icon:`%ICON%/icon_break_inherit.svg`,
                    title:`Overridden`,
                    text:`<strong>${this._data.id.name}</strong> is currently overridden.`,
                    actions:[
                        {text:`Go to override`, htitle:`Edit context's field`, icon:`%ICON%/icon_cmd.svg`, 
                        trigger:{ thisArg:this, fn:this._InspectOverride } },

                        //{text:`Delete override`, htitle:`Delete overriding field`, icon:`%ICON%/icon_delete.svg`, 
                        //trigger:{ thisArg:this, fn:this._DeleteFieldOverride } },
                    ]
                };

            }else{

                // Field is planned for delete

                cOptions = {
                    icon:`%ICON%/icon_make_inherit.svg`,
                    title:`Inherited`,
                    text:`<strong>${this._data.id.name}</strong> is inherited from <strong>${this._data.model.id.name}</strong>.`,
                    actions:{
                        text:`Override`, htitle:`Creates a linked field in the current model`,icon:`%ICON%/icon_break_inherit.svg`, 
                        trigger:{ thisArg:this, fn:this._CreateFieldOverride } }
                };

            }

            this._overlayInherit.contentOptions = cOptions;
        }else if(this._overlayInherit){
            this._overlayInherit.Release();
            this._overlayInherit = null;
        }  
    }

    _InspectOverride(){
        var editor = this.editor;
        if(editor && this._overrideObserver.observable){
            editor.Inspect(this._overrideObserver.observable);
        }
    }

    _TogglePlannedDelete(){
        this._data.isDeletePlanned = !this._data.isDeletePlanned;
    }

    _CreateFieldOverride(){
        
        this._Do(ActionModelOverrideField,{ target:this._context, originalField:this._data });
        var fId = this._data.id.name;
        this._overrideObserver.observable = this._context.Get(fId, true);

        var editor = this.editor;
        if(editor){ editor.Inspect(this._context.Get(fId)); }

    }

    _CleanUp(){
        super._CleanUp();
    }
}

module.exports = FieldSettingsInspector;
UI.Register(`inspector-field-settings`, FieldSettingsInspector);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/data-core/actions/@model":44,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/signals/observer.js":142,"../../../com/ui-app/@.js":149,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242,"../kit-core-flags.js":294,"./inspectors/field-settings-derivation-iitem.js":260,"./inspectors/uid-iitems.js":263,"./overlays/overlay-delete.js":280,"./overlays/overlay-inherit.js":281}],249:[function(require,module,exports){
/**
 * Field setting header = editing FS ID & FS Type
 */
const { U } = require(`../../../../com/@.js`);
const { UI_FLAGS } = require(`../../../../com/ui-core/@.js`);
const UI = require(`../../../../com/ui.js`);
const { DisposableObjectEx } = require(`../../../../com/collections/@.js`);
const { DATA_EVENT } = require(`../../../../com/data-core/@.js`);

const { Label } = require(`../../../../com/ui-app/textfields.js`);
const { Control } = require(`../../../../com/ui-controls/@.js`);
const { InputText, InputList } = require(`../../../../com/ui-controls/inputs/@.js`);

class FieldSettingsHeader extends Control{
    constructor(){super();}

    _Init(){
        this._ignoreMetaStyle = U.Default(this._ignoreMetaStyle, true);
        super._Init();

        this._IDFieldLabel = null;
        this._IDFieldInput = null;
        
        this._FieldTypeLabel = null;
        this._FieldTypeListInput = null;
    }

    
    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`stretch`,
                padding:`2px`
            },
            '.box':{
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-items':`stretch`,
                'align-content':`stretch`,
                //'min-width':`200px`,
                flex:`1 1 auto`,
            },
            '.box-item':{
                flex:`1 1 auto`,
            }
        });
    }

    _Render(){
        super._Render();

        var box = U.Element(`div`, {class:`box`}, this._host);        
        this._IDFieldLabel = this.Add(Label, -1, box, `box-item label`);
        this._IDFieldLabel.text = `Field ID`;
        this._IDFieldInput = this.Add(InputText, -1, box, `box-item input`);

        box = U.Element(`div`, {class:`box`}, this._host);
        this._FieldTypeLabel = this.Add(Label, -1, box, `box-item label`);
        this._FieldTypeLabel.text = `Field Type`;
        this._FieldTypeListInput = this.Add(InputList, -1, box, `box-item input`);
        
    }
    
    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
    }


}

module.exports = FieldSettingsHeader;
UI.Register(`ui-field-settings-header`, FieldSettingsHeader);
},{"../../../../com/@.js":6,"../../../../com/collections/@.js":22,"../../../../com/data-core/@.js":43,"../../../../com/ui-app/textfields.js":180,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204,"../../../../com/ui-core/@.js":223,"../../../../com/ui.js":242}],250:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { DEFAULT_FIELD_VALUE_CONTROL } = require(`../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../com/ui-core/@.js`);
const { InspectorGroup } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const UI = require(`../../../com/ui.js`);


// A Field value group need two things
// A model, to build field controllers
// An entry, to fetch field data according to the model

class FieldValueControlGroup extends InspectorGroup{
    constructor(){super();}
    
    _Init(){

        this.default_SelectOnActivation = U.Default(this.default_SelectOnActivation, false);

        this._entry = null;

        super._Init();

        this._staticContent = false;

        this._observer.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnModelFieldAdded);
        this._observer.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnModelFieldRemoved);

        this._ctrlList = new List();
        this._ctrlMap = new Dictionary();

    }

    _PostInit(){
        super._PostInit();
        this._facade.icon = `%ICON%/icon_model.svg`;
    }

    get entry(){return this._entry;}
    set entry(p_value){this._entry = p_value;}

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                
            },
            ':host(.inherited)':{
                
            },
            ':host(.defaulted)':{
                
            },
            '.body':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-content':`flex-start`,
                'align-items':`flex-start`,

                flex:`1 1 auto`,
            },
            '.group':{
                flex:`1 1 auto`,
            }
        });
    }

    _Render(){
        super._Render();
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);

        var modelID = p_data.id;
        this._facade.text = U.CamelSplit(modelID.name);
        var metaInfos = M.ETA(p_data.fieldClass);
        if(metaInfos){
            this._facade.icon = U.Get(metaInfos, `icon`, `%ICON%/icon_model.svg` );
        }
    }

    _BuildContent(){
        var fieldList = this._data.localFieldList;
        for(var i = 0, n = fieldList.length; i < n; i++){
            this._CreateFieldControl(fieldList[i]);
        }
    }

    _ClearContent(){
        for(var i = 0, n = this._ctrlList.count; i < n; i++){
            this._RemoveFieldControl(this._ctrlList.last.data);
        }
    }

    _OnModelFieldAdded(p_model, p_fieldSettings){
        if(p_fieldSettings.model != this._data){return;}
        this._CreateFieldControl(p_fieldSettings);
    }

    _OnModelFieldRemoved(p_model, p_fieldSettings){
        this._RemoveFieldControl(p_fieldSettings);
    }

    _CreateFieldControl(p_fieldSettings){

        var controlClass = AssocManager.Get( p_fieldSettings.fieldClass, DEFAULT_FIELD_VALUE_CONTROL );

        if(!controlClass){return;}

        var control = this.Add(controlClass, -1, this, `group` );
        control.entry = this._entry;
        control.data = p_fieldSettings;

        this._ctrlMap.Set(p_fieldSettings, control);
        this._ctrlList.Add(control);

        //control.Subscribe(UI_EVENT.ACTIVATED, this, this._OnFieldSelected);

    }

    _RemoveFieldControl(p_fieldSettings){

        var control = this._ctrlMap.Get(p_fieldSettings);
        
        if(!control){return;}

        this._ctrlMap.Remove(p_fieldSettings);
        this._ctrlList.Remove(control);

        //control.Unsubscribe(UI_EVENT.ACTIVATED, this, this._OnFieldSelected);
        control.Release();        

    }

    _CleanUp(){
        this.entry = null;
        super._CleanUp();
    }

}

module.exports = FieldValueControlGroup;
UI.Register(`field-value-group`, FieldValueControlGroup);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242}],251:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { DisposableObjectEx } = require(`../../../com/collections/@.js`);
const { TitleBar } = require(`../../../com/ui-app/@.js`);
const UI = require(`../../../com/ui.js`);

const LabeledValueControl = require(`./field-value-labeled-control.js`);

class DefaultFieldValueControl extends LabeledValueControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'margin':`2px`
            },
            ':host(.inherited)':{
                
            },
            ':host(.defaulted)':{
                
            },
            '.facade':{
                'align-self':`flex-start`
            }
        });
    }

}

module.exports = DefaultFieldValueControl;
UI.Register(`default-field-value-control`, DefaultFieldValueControl);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/ui-app/@.js":149,"../../../com/ui.js":242,"./field-value-labeled-control.js":253}],252:[function(require,module,exports){
const { U } = require(`../../../com/@.js`);
const UI = require(`../../../com/ui.js`);
const LabeledValueControl = require(`./field-value-labeled-control.js`);

class FieldValueInputControl extends LabeledValueControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputFieldClass = null;
        this._inputField = null;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                'margin':`5px`,
            },
            '.field':{
                'min-width':0,
                flex:`0 0 auto`
            }
        });
    }

    _Render(){
        super._Render();
        this._inputField = this.Add(this._inputFieldClass, -1, this, `field`);
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);        
    }

    _OnFieldDataChanged(){
        if(!super._OnFieldDataChanged()){return false;}
        this._inputField.currentValue = this._fieldData;
        return true;
    }

}
module.exports = FieldValueInputControl;
UI.Register(`field-value-input-control`, FieldValueInputControl);
},{"../../../com/@.js":6,"../../../com/ui.js":242,"./field-value-labeled-control.js":253}],253:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { DisposableObjectEx } = require(`../../../com/collections/@.js`);
const { Facade } = require(`../../../com/ui-app/@.js`);
const UI = require(`../../../com/ui.js`);

const { FieldValueControl } = require(`../../../com/ui-controls/@.js`);

class LabeledValueControl extends FieldValueControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._facadeClass = Facade;
        this._facade = null;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                margin:`2px`,
                padding:`5px`,
                display:`flex`,
                'flex-flow':`column`,
                'align-content':`stretch`,
                'align-items':`stretch`,
            },
            ':host(.inherited)':{
                
            },
            ':host(.defaulted)':{
                
            },
            '.facade':{
                'align-self':`flex-start`
            }
        });
    }

    _Render(){
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        super._Render();
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);

        var fieldID = p_data.id;
        this._facade.text = U.CamelSplit(fieldID.name);
        var metaInfos = M.ETA(p_data.fieldClass);
        if(metaInfos){
            this._facade.icon = U.Get(metaInfos, `icon`, `%ICON%/icon_field.svg` );
        }
    }


}

module.exports = LabeledValueControl;
UI.Register(`labeled-value-control`, LabeledValueControl);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/ui-app/@.js":149,"../../../com/ui-controls/@.js":190,"../../../com/ui.js":242}],254:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);
const FieldValueInputControl = require(`../field-value-input-control.js`);
const { InputBoolean } = require(`../../../../com/ui-controls/inputs/@.js`);

class FDBooleanValueControl extends FieldValueInputControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputFieldClass = InputBoolean;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            '.field':{
                //'min-width':0,
                //flex:`0 0 auto`
            }
        });
    }

}

module.exports = FDBooleanValueControl;
UI.Register(`fd-boolean-value-control`, FDBooleanValueControl);
},{"../../../../com/@.js":6,"../../../../com/ui-controls/inputs/@.js":204,"../../../../com/ui.js":242,"../field-value-input-control.js":252}],255:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);
const FieldValueInputControl = require(`../field-value-input-control.js`);
const { InputIdentifier } = require(`../../../../com/ui-controls/inputs/@.js`);

class FDIdentifierValueControl extends FieldValueInputControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputFieldClass = InputIdentifier;
    }

}

module.exports = FDIdentifierValueControl;
UI.Register(`fd-identifier-value-control`, FDIdentifierValueControl);
},{"../../../../com/@.js":6,"../../../../com/ui-controls/inputs/@.js":204,"../../../../com/ui.js":242,"../field-value-input-control.js":252}],256:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);
const FieldValueInputControl = require(`../field-value-input-control.js`);
const { InputNumber } = require(`../../../../com/ui-controls/inputs/@.js`);

class FDNumberValueControl extends FieldValueInputControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputFieldClass = InputNumber;
    }

}

module.exports = FDNumberValueControl;
UI.Register(`fd-number-value-control`, FDNumberValueControl);
},{"../../../../com/@.js":6,"../../../../com/ui-controls/inputs/@.js":204,"../../../../com/ui.js":242,"../field-value-input-control.js":252}],257:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);
const FieldValueInputControl = require(`../field-value-input-control.js`);
const { InputText } = require(`../../../../com/ui-controls/inputs/@.js`);

class FDStringValueControl extends FieldValueInputControl{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputFieldClass = InputText;
    }

}

module.exports = FDStringValueControl;
UI.Register(`fd-string-value-control`, FDStringValueControl);
},{"../../../../com/@.js":6,"../../../../com/ui-controls/inputs/@.js":204,"../../../../com/ui.js":242,"../field-value-input-control.js":252}],258:[function(require,module,exports){
const { C, U, M, EVENT } = require(`../../../../com/@.js`);
const { DisposableObjectEx } = require(`../../../../com/collections/@.js`);
const { Toolbar, Facade, SmallButton, SmallButtonOutline } = require(`../../../../com/ui-app/@.js`);
const INPUT_EVENT = require(`../../../../com/ui-controls/input-event.js`);
const UI = require(`../../../../com/ui.js`);

const Observer = require(`../../../../com/signals/observer.js`);
const InspectorItem = require(`../../../../com/ui-controls/inspector-item.js`);

class DerivationInspectorItem extends InspectorItem{
    constructor(){super();}
    
    _Init(){

        this.default_SelectOnActivation = false;
        this._ignoreMetaStyle = true;

        super._Init();

        this._facadeClass = Facade;
        this._facade = null;

        this._toolbar = null;
        this._clearDerivationBtn = null;
        this._editOriginalBtn = null;

    }

    _PostInit(){
        super._PostInit();
        //this._toolbar._defaultButtonClass = SmallButton;
        this._toolbar._defaultButtonClass = SmallButtonOutline;

        this._clearDerivationBtn = this._toolbar.CreateHandle({ 
            text:`Clear`, icon:`%ICON%/icon_delete.svg`, htitle:`Clear derivation`,
            trigger:{thisArg:this, fn:this._ClearDerivation}
        });

        this._editOriginalBtn = this._toolbar.CreateHandle({ 
            text:`Edit base`, icon:`%ICON%/icon_edit.svg`,
            trigger:{thisArg:this, fn:this._EditOriginal}
        });
    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${C.COLORS.main},0.1)`,
            UI.sFOCUS, `rgba(${C.COLORS.main},0.1)`,
            UI.sSELECT, `rgba(${C.COLORS.main},0.1)`,
            UI.sFS, `rgba(${C.COLORS.main},0.1)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                margin:`5px`,
                padding:`6px`,
                'padding-top':`10px`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
            },
            '.facade':{ 
                flex:`1 1 auto`,
                'margin-top':`-5px`,
                'margin-bottom':`5px`
            },
            '.control':{
                flex:`1 1 auto`,
            }
        });
    }

    _Render(){
        super._Render();
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        this._facade.icon = '%ICON%/icon_make_inherit.svg';
        this._facade.text = `Override`;
        this._toolbar = this.Add(Toolbar);
        this._toolbar.stretchSame = true;
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        if(!p_data.base){ 
            this._facade.text = `No base.`;
            this._facade.icon = '%ICON%/icon_break_inherit.svg';

            //Show controls
            this._clearDerivationBtn.visible = false;
            this._editOriginalBtn.visible = false;
        }else{
            this._facade.text = `Derivate from <strong>${p_data.base.uri}</strong>`;
            this._facade.icon = '%ICON%/icon_make_inherit.svg';

            //Hide controls
            this._clearDerivationBtn.visible = true;
            this._editOriginalBtn.visible = true;
        }
    }

    _EditOriginal(){

    }

    _ClearDerivation(){

    }

}

module.exports = DerivationInspectorItem;
UI.Register(`derivation-inspector-item`, DerivationInspectorItem);
},{"../../../../com/@.js":6,"../../../../com/collections/@.js":22,"../../../../com/signals/observer.js":142,"../../../../com/ui-app/@.js":149,"../../../../com/ui-controls/input-event.js":199,"../../../../com/ui-controls/inspector-item.js":216,"../../../../com/ui.js":242}],259:[function(require,module,exports){
const { C, U, M, EVENT } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);

const DerivationInspectorItem = require(`./derivation-iitem.js`);

class EntryDerivationInspectorItem extends DerivationInspectorItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
    }

    _PostInit(){
        super._PostInit();        
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{

            }
        });
    }

    _Render(){
        super._Render();
    }

    _EditOriginal(){
        var e = this._data.base;
        e.ecosystem.entries._cmdEntryEdit.Execute(e);
    }

    _ClearDerivation(){

    }

}

module.exports = EntryDerivationInspectorItem;
UI.Register(`entry-derivation-inspector-item`, EntryDerivationInspectorItem);
},{"../../../../com/@.js":6,"../../../../com/ui.js":242,"./derivation-iitem.js":258}],260:[function(require,module,exports){
const { C, U, M, EVENT } = require(`../../../../com/@.js`);
const { DisposableObjectEx } = require(`../../../../com/collections/@.js`);
const { Toolbar, Facade, SmallButton } = require(`../../../../com/ui-app/@.js`);
const INPUT_EVENT = require(`../../../../com/ui-controls/input-event.js`);
const UI = require(`../../../../com/ui.js`);

const Observer = require(`../../../../com/signals/observer.js`);
const InspectorItem = require(`../../../../com/ui-controls/inspector-item.js`);
const InputText = require(`../../../../com/ui-controls/inputs/input-text.js`);
const Textfield = require(`../../../../com/ui-core/textfield.js`);
const ActionRenameID = require(`../../../../com/data-core/actions/action-rename-id.js`);

const DerivationInspectorItem = require(`./derivation-iitem.js`);

class FieldSettingsDerivationInspectorItem extends DerivationInspectorItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
    }

    _PostInit(){
        super._PostInit();

    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{

            }
        });
    }

    _Render(){
        super._Render();
    }

    _EditOriginal(){
        var m = this._data.base.model;
        m.ecosystem.models._cmdModelEdit.Execute(m);
    }

    _ResetValues(){

    }


}

module.exports = FieldSettingsDerivationInspectorItem;
UI.Register(`field-settings-derivation-inspector-item`, FieldSettingsDerivationInspectorItem);
},{"../../../../com/@.js":6,"../../../../com/collections/@.js":22,"../../../../com/data-core/actions/action-rename-id.js":50,"../../../../com/signals/observer.js":142,"../../../../com/ui-app/@.js":149,"../../../../com/ui-controls/input-event.js":199,"../../../../com/ui-controls/inputs/input-text.js":213,"../../../../com/ui-controls/inspector-item.js":216,"../../../../com/ui-core/textfield.js":236,"../../../../com/ui.js":242,"./derivation-iitem.js":258}],261:[function(require,module,exports){
const { C, U, M, EVENT } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);

const DerivationInspectorItem = require(`./derivation-iitem.js`);

class ModelDerivationInspectorItem extends DerivationInspectorItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
    }

    _PostInit(){
        super._PostInit();

    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{

            }
        });
    }

    _Render(){
        super._Render();
    }

    _EditOriginal(){
        var m = this._data.base;
        m.ecosystem.models._cmdModelEdit.Execute(m);
    }

    _ResetValues(){

    }


}

module.exports = ModelDerivationInspectorItem;
UI.Register(`model-derivation-inspector-item`, ModelDerivationInspectorItem);
},{"../../../../com/@.js":6,"../../../../com/ui.js":242,"./derivation-iitem.js":258}],262:[function(require,module,exports){
const { U, M, EVENT } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);
const APP_UI_FLAGS = require(`../../../../com/ui-app/app-ui-flags.js`);
const INPUT_EVENT = require(`../../../../com/ui-controls/input-event.js`);

const { Facade } = require(`../../../../com/ui-app/@.js`);

const Observer = require(`../../../../com/signals/observer.js`);
const InspectorItem = require(`../../../../com/ui-controls/inspector-item.js`);
const InputIdentifier = require(`../../../../com/ui-controls/inputs/input-identifier.js`);
const Textfield = require(`../../../../com/ui-core/textfield.js`);
const ActionRenameID = require(`../../../../com/data-core/actions/action-rename-id.js`);

const ERR_ALREADY_IN_USE = { type:APP_UI_FLAGS.ERROR, message:`ID already in use` };

class UIDInspectorItem extends InspectorItem{
    constructor(){super();}
    
    _Init(){

        this.default_SelectOnActivation = false;
        this._ignoreMetaStyle = true;

        super._Init();

        this._facadeClass = Facade;
        this._facade = null;

        this._inputClass = InputIdentifier;
        this._input = null;
        this._issues = new Array(0);

        this._idObserver = new Observer();
        this._idObserver.Hook(EVENT.RENAMED, this, this._OnIDRenamed);

    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(127,127,127,0.1)`,
            UI.sFOCUS, `rgba(240,240,240,0.1)`,
            UI.sSELECT, `rgba(240,240,240,0.1)`,
            UI.sFS, `rgba(240,240,240,0.1)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                margin:`5px`,
                padding:`6px`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
            },
            '.facade':{ 
                flex:`1 1 auto`,
                'margin-top':`-5px`,
                'margin-bottom':`5px`
            },
            '.control':{
                flex:`1 1 auto`,
            }
        });
    }

    _Render(){
        super._Render();
        this._facade = this.Add(this._facadeClass, -1, this, `facade`);
        this._facade.icon = '%ICON%/icon_identifier.svg';
        this._facade.text = `Unique Identifier`;

        this._input = this.Add(this._inputClass, -1, this, `control`);
        //this._input.Subscribe(INPUT_EVENT.VALUE_CHANGED, this, this._OnInputValueChanged);
        this._input.Subscribe(INPUT_EVENT.VALUE_SUBMITTED, this, this._OnInputSubmit);        
        this._input.AddValidation(this._CheckUniqueness, this);

        this._tf = this.Add(Textfield);

    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        if(this._data){ 
            this._idObserver.observable = this._data.id;
            this._OnIDRenamed(this._data.id, ``);
        }else{
            this._idObserver.observable = null;
        }        
    }

    _OnIDRenamed(p_id, oldName){
        this._input.currentValue = p_id.name;
    }

    _CheckUniqueness(p_value)
    {
        var avail = this._IsIdentifierAvailable(p_value);
        return avail ? null : ERR_ALREADY_IN_USE;
    }

    _OnInputSubmit(p_input, p_changedValue){

        this._Do( ActionRenameID, {
            target : this._data.id,
            value : p_changedValue
        });
        
        //this._input.currentValue = this._data.id.name;

    }

    _IsIdentifierAvailable(p_id){
        return true;
    }

}

module.exports = UIDInspectorItem;
UI.Register(`uid-inspector-item`, UIDInspectorItem);
},{"../../../../com/@.js":6,"../../../../com/data-core/actions/action-rename-id.js":50,"../../../../com/signals/observer.js":142,"../../../../com/ui-app/@.js":149,"../../../../com/ui-app/app-ui-flags.js":151,"../../../../com/ui-controls/input-event.js":199,"../../../../com/ui-controls/inputs/input-identifier.js":209,"../../../../com/ui-controls/inspector-item.js":216,"../../../../com/ui-core/textfield.js":236,"../../../../com/ui.js":242}],263:[function(require,module,exports){
const { U, M } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);
const UIDInspectorItem = require(`./uid-iitem.js`);

class ModelUIDInspectorItem extends UIDInspectorItem{
    constructor(){super();}
    
    _IsIdentifierAvailable(p_id){
        return this._data.ecosystem.models.Get(p_id) ? false : true;
    }
}

class FieldUIDInspectorItem extends UIDInspectorItem{
    constructor(){super();}
    
    _IsIdentifierAvailable(p_id){
        return this._data.model.Get(p_id) ? false : true;
    }
}

class EntryUIDInspectorItem extends UIDInspectorItem{
    constructor(){super();}
    
    _IsIdentifierAvailable(p_id){
        return this._data.ecosystem.entries.Get(this._data.model, p_id) ? false : true;
    }
}

module.exports = { 
    ModelUIDInspectorItem : ModelUIDInspectorItem,
    FieldUIDInspectorItem : FieldUIDInspectorItem,
    EntryUIDInspectorItem : EntryUIDInspectorItem,
};

UI.RegisterGroup({
    'model-uid-inspector-item' : ModelUIDInspectorItem,
    'field-uid-inspector-item' : FieldUIDInspectorItem,
    'entry-uid-inspector-item' : EntryUIDInspectorItem,
});
},{"../../../../com/@.js":6,"../../../../com/ui.js":242,"./uid-iitem.js":262}],264:[function(require,module,exports){
module.exports = {
    MetaControlTileGroup : require(`./meta-control-tile-group.js`),
    MetaControlColor : require(`./meta-control-color.js`),
    MetaControlNumber : require(`./meta-control-number.js`),
    MetaControlNumberSlider : require(`./meta-control-number-slider.js`),
    MetaControlText : require(`./meta-control-text.js`),
    MetaControlTextarea : require(`./meta-control-textarea.js`),
    MetaControlBoolean : require(`./meta-control-boolean.js`),
    MetaControlIdentifier : require(`./meta-control-identifier.js`),
    MetaControlPath : require(`./meta-control-path.js`),
    MetaControlFile : require(`./meta-control-file.js`),
    MetaControlDirectory : require(`./meta-control-directory.js`),
}
},{"./meta-control-boolean.js":265,"./meta-control-color.js":266,"./meta-control-directory.js":267,"./meta-control-file.js":268,"./meta-control-identifier.js":269,"./meta-control-number-slider.js":270,"./meta-control-number.js":271,"./meta-control-path.js":272,"./meta-control-text.js":273,"./meta-control-textarea.js":274,"./meta-control-tile-group.js":275}],265:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputBoolean } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlBoolean extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputBoolean;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`1 1 auto`
            }
        });
    }

}

module.exports = MetaControlBoolean;
UI.Register(`ui-meta-control-boolean`, MetaControlBoolean);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],266:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputColor } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlColor extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputColor;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`1 1 auto`
            }
        });
    }

}

module.exports = MetaControlColor;
UI.Register(`ui-meta-control-color`, MetaControlColor);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],267:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputDirectory } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlDirectory extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputDirectory;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`2 1 auto`,
                //'min-width':`40%`,
            }
        });
    }

}

module.exports = MetaControlDirectory;
UI.Register(`ui-meta-control-directory`, MetaControlDirectory);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],268:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputFile } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlFile extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputFile;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`2 1 auto`,
                //'min-width':`40%`,
            }
        });
    }

}

module.exports = MetaControlFile;
UI.Register(`ui-meta-control-file`, MetaControlFile);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],269:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputIdentifier } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlIdentifier extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputIdentifier;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`2 1 auto`,
                //'min-width':`40%`,
            }
        });
    }

}

module.exports = MetaControlIdentifier;
UI.Register(`ui-meta-control-identifier`, MetaControlIdentifier);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],270:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputNumber } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlNumberSlider extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputNumber;
    }

    _OnInputCreated(p_input){
        p_input.SetSliderData(0,1,0.01);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`1 1 auto`
            }
        });
    }

}

module.exports = MetaControlNumberSlider;
UI.Register(`ui-meta-control-number-slider`, MetaControlNumberSlider);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],271:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputNumber } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlNumber extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputNumber;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`1 1 auto`
            }
        });
    }

}

module.exports = MetaControlNumber;
UI.Register(`ui-meta-control-number`, MetaControlNumber);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],272:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputPath } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlPath extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputPath;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`2 1 auto`,
                //'min-width':`40%`,
            }
        });
    }

}

module.exports = MetaControlPath;
UI.Register(`ui-meta-control-path`, MetaControlPath);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],273:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputText } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlText extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputText;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`2 1 auto`,
                //'min-width':`40%`,
            }
        });
    }

}

module.exports = MetaControlText;
UI.Register(`ui-meta-control-text`, MetaControlText);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],274:[function(require,module,exports){
const { U } = require(`../../../../com/@.js`);
const { UI } = require(`../../../../com/@tools.js`);

const { MetaControlItem } = require(`../../../../com/ui-controls/@.js`);
const { InputTextarea } = require(`../../../../com/ui-controls/inputs/@.js`);

class MetaControlTextarea extends MetaControlItem{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._inputClass = InputTextarea;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                flex:`4 1 auto`
            }
        });
    }

}

module.exports = MetaControlTextarea;
UI.Register(`ui-meta-control-textarea`, MetaControlTextarea);
},{"../../../../com/@.js":6,"../../../../com/@tools.js":7,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-controls/inputs/@.js":204}],275:[function(require,module,exports){
const { U, C, M } = require(`../../../../com/@.js`);
const UI = require(`../../../../com/ui.js`);

const MetaControlGroup = require(`../../../../com/ui-controls/meta-control-group.js`);

class MetaControlTileGroup extends MetaControlGroup{
    constructor(){super();}
    
    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
              
            },
            '.body':{
                'flex-flow':`row wrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,

                flex:`1 1 auto`,
            },
            '.group':{
                
            }
        });
    }


}

module.exports = MetaControlTileGroup;
UI.Register(`ui-meta-control-tile-group`, MetaControlTileGroup);
},{"../../../../com/@.js":6,"../../../../com/ui-controls/meta-control-group.js":221,"../../../../com/ui.js":242}],276:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../com/ui-core/@.js`);
const { InspectorGroup } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const UI = require(`../../../com/ui.js`);

const { FacadeH3 } = require(`../../../com/ui-app/facades.js`);

class ModelFSControlGroup extends InspectorGroup{
    constructor(){super();}
    
    _Init(){

        this.default_SelectOnActivation = U.Default(this.default_SelectOnActivation, false);

        super._Init();
        this._staticContent = true;

       // this._facadeClass = FacadeH3;

        this._observer.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnModelFieldAdded);
        this._observer.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnModelFieldRemoved);

        this._ctrlList = new List();
        this._ctrlMap = new Dictionary();

    }

    _PostInit(){
        super._PostInit();
        this._facade.icon = `%ICON%/icon_model.svg`;
    }

    _InitColors(){
        super._InitColors();
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(0,0,0,0.2)`,
            UI.sFOCUS, `rgba(0,0,0,0,0.25)`,
            UI.sSELECT, `rgba(0,0,0,0,0.3)`,
            UI.sFS, `rgba(0,0,0,0,0.4)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                //'max-width':`750px`
            },
            ':host(.inherited)':{
                
            },
            ':host(.defaulted)':{
                
            }
        });
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
        if(this._data){
            this._facade.label.displayIDSuffix = `'s properties`;
            this._facade.label.displayID = this._data.id;
        }else{
            this._facade.label.displayID = null;
        }  
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        var metaInfos = M.ETA(p_data.fieldClass);
        if(metaInfos){
            this._facade.icon = U.Get(metaInfos, `icon`, `%ICON%/icon_field.svg` );
        }
    }

    _BuildContent(){
        var fieldList = this._data.localFieldList;
        for(var i = 0, n = fieldList.length; i < n; i++){
            this._CreateFieldControl(fieldList[i]);
        }
    }

    _ClearContent(){
        for(var i = 0, n = this._ctrlList.count; i < n; i++){
            this._RemoveFieldControl(this._ctrlList.last.data);
        }
    }

    _OnModelFieldAdded(p_model, p_fieldSettings){
        if(p_fieldSettings.model != this._data){return;}
        this._CreateFieldControl(p_fieldSettings);
    }

    _OnModelFieldRemoved(p_model, p_fieldSettings){
        this._RemoveFieldControl(p_fieldSettings);
    }

    _CreateFieldControl(p_fieldSettings){

        var controlClass = AssocManager.Get( p_fieldSettings.constructor, DEFAULT_EDITOR );

        if(!controlClass){return;}

        var control = this.Add(controlClass, -1, this, `group` );
        control.context = this._context;
        control.data = p_fieldSettings;

        this._ctrlMap.Set(p_fieldSettings, control);
        this._ctrlList.Add(control);
        
    }

    _RemoveFieldControl(p_fieldSettings){
        var control = this._ctrlMap.Get(p_fieldSettings);
        
        if(!control){return;}

        this._ctrlMap.Remove(p_fieldSettings);
        this._ctrlList.Remove(control);
        control.Release();        
    }


}

module.exports = ModelFSControlGroup;
UI.Register(`model-field-settings-control`, ModelFSControlGroup);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-app/facades.js":170,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242}],277:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../com/ui-core/@.js`);
const { InspectorGroup } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const UI = require(`../../../com/ui.js`);

const { FacadeH3 } = require(`../../../com/ui-app/facades.js`);

class ModelHierarchyControl extends InspectorGroup{
    constructor(){super();}
    
    _Init(){

        this.default_SelectOnActivation = U.Default(this.default_SelectOnActivation, false);

        super._Init();
        this._staticContent = false;

        this._ctrlList = new List();
        this._ctrlMap = new Dictionary();

    }

    _InitColors(){
        super._InitColors();
        var c = `57,57,57`;
        this.SEC(UI.elBG,
            UI.sIDLE, `rgba(${c},0.4)`,
            UI.sFOCUS, `rgba(${c},0.45)`,
            UI.sSELECT, `rgba(${c},0.7)`,
            UI.sFS, `rgba(${c},0.8)`);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
            //    'max-width':`750px`
            },
            ':host(.inherited)':{
                
            },
            ':host(.defaulted)':{
                
            }
        });
    }

    _Render(){
        super._Render();
    }

    _OnDataUpdated(p_data){

        super._OnDataUpdated(p_data);
        this._facade.text = `INHERITED`;
        this._facade.icon = ``;//%ICON%/icon_field.svg`;
        
    }

    _BuildContent(){
        var modelList = this._data.GetInheritanceChain();
        for(var i = 0, n = modelList.length; i < n; i++){
            this._CreateModelControl(modelList[i]);
        }
    }

    _ClearContent(){
        for(var i = 0, n = this._ctrlList.count; i < n; i++){
            this._RemoveModelControl(this._ctrlList.last.data);
        }
    }

    _CreateModelControl(p_model){

        var controlClass = AssocManager.Get( p_model.constructor, this.constructor );

        if(!controlClass){return;}

        var control = this.Add(controlClass, -1, this, `group` );
        control.staticContent = false;
        control.context = this._context;
        control.data = p_model;

        this._ctrlMap.Set(p_model, control);
        this._ctrlList.Add(control);

    }

    _RemoveModelControl(p_model){

        var control = this._ctrlMap.Get(p_model);
        
        if(!control){return;}

        this._ctrlMap.Remove(p_model);
        this._ctrlList.Remove(control);

        control.Release();        

    }

}

module.exports = ModelHierarchyControl;
UI.Register(`model-hierarchy-control`, ModelHierarchyControl);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-app/facades.js":170,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242}],278:[function(require,module,exports){
const { U, C, M } = require(`../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../com/ui-core/@.js`);
const { MetaControlGroup, Inspector } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const UI = require(`../../../com/ui.js`);

const { ModelUIDInspectorItem } = require(`./inspectors/uid-iitems.js`);
const ModelDerivationInspectorItem = require(`./inspectors/model-derivation-iitem.js`);

class ModelInspector extends Inspector{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._baseInspectorItem = null;
        this._UIDInspectorItem = null;
        this._metaInspector = null;
    }

    _Render(){
        super._Render();
        this._baseInspectorItem = this.AddInspector(ModelDerivationInspectorItem);
        this._UIDInspectorItem = this.AddInspector(ModelUIDInspectorItem);
        this._metaInspector = this.AddInspector(MetaControlGroup);
        this._metaInspector.metaID = 'Metadata';
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
    }
}

module.exports = ModelInspector;
UI.Register(`inspector-model`, ModelInspector);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242,"./inspectors/model-derivation-iitem.js":261,"./inspectors/uid-iitems.js":263}],279:[function(require,module,exports){
const { U, C, M } = require(`../../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../../com/data-core/@.js`);
const { UI_EVENT, Textfield } = require(`../../../../com/ui-core/@.js`);
const { Icon, Toolbar, SmallButton } = require(`../../../../com/ui-app/@.js`);
const { H2 } = require(`../../../../com/ui-app/textfields.js`);
const { Control } = require(`../../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../../com/environment/@.js`);
const UI = require(`../../../../com/ui.js`);


class OverlayBadge extends Control{
    constructor(){super();}
    
    _Init(){
        super._Init();
        this._icon = null;
        this._title = null;
        this._text = null;
        this._toolbar = null;
    }

    _InitColors(){
        super._InitColors();
        var c = `rgba(0,0,0,0)`;
        this.SEC(UI.elBG,
            UI.sIDLE, c,
            UI.sDISABLED, c,
            UI.sFOCUS, c,
            UI.sSELECT, c,
            UI.sFS, c);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`center`,
                'align-content':`center`,
                'justify-content':`center`,
            },
            '.icon':{
                flex:`0 0 auto`,
                width:'150px',
                height:'150px',
            },
            '.title':{
                flex:`1 1 auto`,
            },
            '.subtitle':{
                flex:`1 1 auto`,
            },
            '.toolbar':{
                flex:`1 1 auto`,
                margin:`12px`
            }
        });
    }

    _Render(){
        super._Render();
        this._icon = this.Add(Icon, -1, this._host, `icon`);
        //this._icon.scale = 10;
        //this._icon.rotation = 15;
        this._title = this.Add(H2, -1, this._host, `title`);
        this._text = this.Add(Textfield, -1, this._host, `subtitle`);
        this._text.center = true;

        this._toolbar = this.Add(Toolbar, -1, this._host, `toolbar`);
        this._toolbar._defaultButtonClass = SmallButton;
    }

    set options(p_options){
        
        this._icon.Set(U.Get(p_options, `icon`, `%ICON%/icon_info.svg`));
        this._title.text = U.Get(p_options, `title`, ``);
        this._text.text = U.Get(p_options, `text`, ``);   
        
        this._ClearHandles();

        var actions = U.Get(p_options, `actions`, null);

        if(actions){
            if(Array.isArray(actions)){
                var def = null;
                for(var i = 0, n = actions.length; i < n; i++){
                    def = actions[i];
                    this._toolbar.CreateHandle(def, U.Get(def, `cl`, null));
                }
            }else{
                this._toolbar.CreateHandle(actions, U.Get(actions, `cl`, null));
            }
            
        }
        
    }

    _OnDataChanged(p_oldValue){
        super._OnDataChanged(p_oldValue);
    }

    _ClearHandles(){
        this._toolbar.Clear();
    }

    _CleanUp(){
        this.options = null;
        super._CleanUp();
    }
}

module.exports = OverlayBadge;
UI.Register(`ui-overlay-badge`, OverlayBadge);
},{"../../../../com/@.js":6,"../../../../com/collections/@.js":22,"../../../../com/data-core/@.js":43,"../../../../com/environment/@.js":95,"../../../../com/environment/keys.js":98,"../../../../com/ui-app/@.js":149,"../../../../com/ui-app/textfields.js":180,"../../../../com/ui-controls/@.js":190,"../../../../com/ui-core/@.js":223,"../../../../com/ui.js":242}],280:[function(require,module,exports){
const { U, C, M, PATH } = require(`../../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../../com/ui-core/@.js`);
const { BlockingOverlay } = require(`../../../../com/ui-app/overlays/@.js`);
const { AssocManager } = require(`../../../../com/environment/@.js`);
const UI = require(`../../../../com/ui.js`);
const OverlayBadge = require(`./overlay-badge.js`);

class OverlayDelete extends BlockingOverlay{
    constructor(){super();}

    _Init(){
        super._Init();
        this._releaseOnMDown = false;
        this._staticContent = true;
    }

    _PostInit(){
        super._PostInit();
        this.content = OverlayBadge;
    }

    _OnContentChanged(p_oldContent){
        super._OnContentChanged(p_oldContent);
        var content = this._content;
        if(!content){return;}
        content.options = {
            icon:``,
            title:`Deleted`,
            text:`This item will be deleted once changes on master are applied.`,
        };
    }

    set contentOptions(p_value){
        if(this._content){
            this._content.options = p_value;
        }else{
            throw new Error(`Content is not ready yet.`);
        }
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{

            },
            '.bg':{
                'background-color':`rgba(0,0,0,0.5)`,
                'backdrop-filter': `blur(5px)`,
            },
            '.bg:after':{
                content:`""`, width:`100%`, height:`100%`, position:`absolute`,
                'z-index':-1, opacity:0.5,
                //'box-shadow': `inset 0px 0px 500px rgba(${C.COLORS.error},0.5)`, //#e20500
                background:`url(${PATH.EX('%PATTERN%/pattern_delete.svg')}) repeat`,
                'background-size':`64px 64px`,
                'background-attachment': `fixed`
            },
            '.content':{

            }
        });
    }

    _Render(){
        super._Render();
    }


    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = OverlayDelete;
UI.Register(`ui-overlay-delete`, OverlayDelete);
},{"../../../../com/@.js":6,"../../../../com/collections/@.js":22,"../../../../com/data-core/@.js":43,"../../../../com/environment/@.js":95,"../../../../com/environment/keys.js":98,"../../../../com/ui-app/overlays/@.js":173,"../../../../com/ui-core/@.js":223,"../../../../com/ui.js":242,"./overlay-badge.js":279}],281:[function(require,module,exports){
const { U, C, M } = require(`../../../../com/@.js`);
const { DEFAULT_EDITOR } = require(`../../../../com/environment/keys.js`);
const { List, Dictionary } = require(`../../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../../com/data-core/@.js`);
const { UI_EVENT } = require(`../../../../com/ui-core/@.js`);
const { BlockingOverlay } = require(`../../../../com/ui-app/overlays/@.js`);
const { AssocManager } = require(`../../../../com/environment/@.js`);
const UI = require(`../../../../com/ui.js`);
const OverlayBadge = require(`./overlay-badge.js`);

class OverlayInherit extends BlockingOverlay{
    constructor(){super();}

    _Init(){
        super._Init();
        this._releaseOnMDown = false;
        this._staticContent = true;
    }

    _PostInit(){
        super._PostInit();
        this.content = OverlayBadge;
    }

    _OnContentChanged(p_oldContent){
        super._OnContentChanged(p_oldContent);
        var content = this._content;
        if(!content){return;}
        content.options = {
            //icon:``,
            title:`Inherited`,
            text:`This item is inherited. You can't modify it in the current context.`,
        };
    }

    set contentOptions(p_value){
        if(this._content){
            this._content.options = p_value;
        }else{
            throw new Error(`Content is not ready yet.`);
        }
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{

            },
            '.bg':{
                'background-color':`rgba(0,0,0,0.5)`,
                'backdrop-filter': `blur(5px)`,
            },
            '.content':{

            }
        });
    }

    _Render(){
        super._Render();
    }


    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = OverlayInherit;
UI.Register(`ui-overlay-inherit`, OverlayInherit);
},{"../../../../com/@.js":6,"../../../../com/collections/@.js":22,"../../../../com/data-core/@.js":43,"../../../../com/environment/@.js":95,"../../../../com/environment/keys.js":98,"../../../../com/ui-app/overlays/@.js":173,"../../../../com/ui-core/@.js":223,"../../../../com/ui.js":242,"./overlay-badge.js":279}],282:[function(require,module,exports){
const { U, C } = require(`../../../com/@.js`);
const { POOL, Dictionary } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../com/data-core/@.js`);
const { View } = require(`../../../com/ui-core/@.js`);
const UI = require(`../../../com/ui.js`);

const { APP_UI_FLAGS, Explorer, SmallButton } = require(`../../../com/ui-app/@.js`);
const { EditorEx } = require(`../../../com/ui-controls/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);

const EditorHeader = require(`../../../kits/core/editors/editor-header.js`);

class EditorBase extends EditorEx{
    constructor(){super();}

    _Init(){
        super._Init();
        this._editorHeader = null;
        this._settingsBtn = null;
    }

    _PostInit(){
        super._PostInit();

        this._settingsBtn = this._editorHeader.CreateRightHandle({
            text:`Details`, icon:`%ICON%/icon_more.svg`,
            trigger:{ thisArg:this, fn:this._triggerRequestDetails }
        }, SmallButton);
    }

    _triggerRequestSave(){  }
    _triggerRequestDelete(){  }
    _triggerRequestDetails(){ this.Inspect(this._data); }

    _RenderStyle(){
        var warning = C.COLORS[APP_UI_FLAGS.WARNING];
        return U.Merge(super._RenderStyle(), {
            ':host':{
                border:`1px solid rgba(0,0,0,0)`
            },
            ':host(.allow-drop)':{
                border:`1px solid rgba(${C.COLORS.main},1)`
            },
            ':host(.warning)':{ 
                //'border-top':`1px solid rgba(${warning},1)`,
            }
        });
    }

    _Render(){
        super._Render();
        this._editorHeader = this.Add(EditorHeader, -1, this._header );
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);
        if(this._data){
            this.Inspect(this._data);
        }else{
            this._inspector.data = null;
            this._editorHeader.data = null;
        }
    }

}

module.exports = EditorBase;
UI.Register('editor-base', EditorBase);
},{"../../../com/@.js":6,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-app/@.js":149,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242,"../../../kits/core/editors/editor-header.js":283}],283:[function(require,module,exports){
const { U, M } = require(`../../../com/@.js`);
const { H1 } = require(`../../../com/ui-app/textfields.js`);
const { Icon, Toolbar, Breadcrum } = require(`../../../com/ui-app/@.js`);
const { Model, DataEntry } = require(`../../../com/data-core/@.js`);
const { Textfield } = require(`../../../com/ui-core/@.js`);
const UI = require(`../../../com/ui.js`);

const { Control } = require(`../../../com/ui-controls/@.js`);

class EditorHeader extends Control{
    constructor(){super();}

    _Init(){
        super._Init();

        this._leftBlock = null;
        this._rightBlock = null;

        this._docIcon = null;

        this._title = null;
        this._breadcrum = null;

        this._toolbarCtnr = null;
        this._leftToolbar = null;
        this._rightToolbar = null;
    }

    CreateLeftHandle(p_options, p_class = null){
        return this._leftToolbar.CreateHandle(p_options, p_class);
    }

    CreateRightHandle(p_options, p_class = null){
        return this._rightToolbar.CreateHandle(p_options, p_class);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`row`,
                'align-items':`stretch`,
                'align-content':`stretch`,


                //height:`100px`,
                padding:`12px 12px 12px 20px`,
                'background-color':`rgba(127,127,127,0.1)`, 
            },

            '.left-block':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
                'margin-left':`-12px`,
                'margin-right':`12px`
            },
            '.right-block':{
                position:`relative`,
                display:`flex`,
                'flex-flow':`column`,
                'align-items':`stretch`,
                'align-content':`stretch`,
                flex:`1 1 auto`
            },

            '.doc-icon':{
                width:`128px`,
                height:`128px`
            },
            '.title':{
                flex:`1 1 auto`
            },
            '.breadcrum':{
                flex:`1 1 auto`,
                //'margin-top':`-5px`,
                //'margin-bottom':`10px`,
                //opacity:0.5
            },
            '.toolbar-ctnr':{
                position:`relative`,
                flex:`1 1 auto`,
                display:`flex`,
                'flex-flow':`row`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'justify-content':`space-between`,
            },
            '.toolbar-left':{
                flex:`0 0 auto`,
            },
            '.toolbar-right':{
                flex:`0 0 auto`,
            }
        });
    }

    _Render(){

        this._leftBlock = U.Element(`div`, {class:`left-block`}, this._host);
        this._rightBlock = U.Element(`div`, {class:`right-block`}, this._host);

        this._docIcon = this.Add(Icon, -1, this._leftBlock, `doc-icon`);

        this._breadcrum = this.Add(Breadcrum, -1, this._rightBlock, `breadcrum`);
        this._title = this.Add(H1, -1, this._rightBlock, `title`);
        this._title.ellipsis = true;
        this._toolbarCtnr = U.Element(`div`, {class:`toolbar-ctnr`}, this._rightBlock);
        this._leftToolbar = this.Add(Toolbar, -1, this._toolbarCtnr, `toolbar-left`);
        this._rightToolbar = this.Add(Toolbar, -1, this._toolbarCtnr, `toolbar-right`);

    }

    _OnDataChanged(p_oldValue){
        if(p_oldValue){ this._breadcrum.ClearHandles(); }
        super._OnDataChanged(p_oldValue);
    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        this._title.displayID = p_data.id; 
        console.log("heh");
        console.log(p_data);
        console.log(p_data.model);
        console.log(M.ETA(p_data));
        this._docIcon.Set( U.Get( M.ETA(p_data), `icon`, `%ICON%/icon_missing.svg` ) );
        this._RefreshBreadcrum();
    }

    _RefreshBreadcrum(){

        this._breadcrum.ClearHandles();

        var elements = new Array(0);
        var el = this._data;
        var cmd = null;

        //elements.push(el);
        while(el.base){
            el = el.base;
            if(el){ elements.push(el); }
        }

        var handle = null;
        while(elements.length != 0){

            el = elements.pop();
            
            if(U.IoF(el, Model)){
                cmd = el.ecosystem.models._cmdModelEdit;
            }else if(U.IoF(el, DataEntry)){
                cmd = el.ecosystem.entries._cmdEntryEdit;
            }else{
                cmd = null;
            }

            //console.error(el.id.name);
            handle = this._breadcrum.CreateHandle({ 
                data:el, command:cmd, 
                //text:el.id.name, 
                icon:''},
                elements.length == 0);
        }

    }

    _CleanUp(){
        this._breadcrum.ClearHandles();
        super._CleanUp();        
    }

}

module.exports = EditorHeader;
UI.Register('editor-header', EditorHeader);
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43,"../../../com/ui-app/@.js":149,"../../../com/ui-app/textfields.js":180,"../../../com/ui-controls/@.js":190,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242}],284:[function(require,module,exports){
const { U, C } = require(`../../../com/@.js`);
const { Dictionary, List } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model } = require(`../../../com/data-core/@.js`);
const { Command } = require(`../../../com/actions/@.js`);
const { EntryDelete, EntrySave } = require(`../../../com/data-core/commands/@entry.js`);
const UI = require(`../../../com/ui.js`);

const { UI_EVENT, ExtDrop } = require(`../../../com/ui-core/@.js`);
const { Explorer, SmallButton, ButtonEx } = require(`../../../com/ui-app/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const { DEFAULT_FIELD_VALUE_CONTROL } = require(`../../../com/environment/keys.js`);

const EditorBase = require(`./editor-base.js`);
const FieldValueControlGroup = require(`../controls/field-value-control-group.js`);

class EntryEditor extends EditorBase{
    constructor(){super();}

    _Init(){
        super._Init();

        this._viewportClass = Explorer;

        this._ctrlList = new List();
        this._ctrlMap = new Dictionary();

        this._observer.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnFieldAdded);
        this._observer.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnFieldRemoved);

        this._saveBtn = null;
        this._deleteBtn = null;

        this._cmdSaveEntry = Command.Rent(
            EntrySave, `Save`, `%ICON%/icon_save.svg`);

        this._cmdDeleteEntry = Command.Rent(
            EntryDelete, `Delete`, `%ICON%/icon_delete.svg`);

        this._extDrop = new ExtDrop();
        //this._extDrop.Hook({});

    }

    _PostInit(){

        super._PostInit();

        //this._inspector.visible = false;
        this._extDrop.Setup(this._viewport, this);

        this._saveBtn = this._editorHeader.CreateLeftHandle({
            command:this._cmdSaveEntry, isCommandContext:false
        }, SmallButton);
        this._saveBtn.htitle = `If your changes affected other data, they will be saved too.`;

        this._deleteBtn = this._editorHeader.CreateRightHandle({
            command:this._cmdDeleteEntry, isCommandContext:false
        }, SmallButton);
        this._deleteBtn.SetFlag(C.LEFT, true);

    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                //margin:`100px`,
            },
            ':host(.allow-drop)':{
                //margin:`100px`,
            }
        });
    }


    _OnDataChanged(p_oldData){

        super._OnDataChanged(p_oldData);

        if(p_oldData){ 
            this._ClearGroups();
        }

        if(!this._data){return;}

        //this._data.dirty = true;
        this._editorHeader.data = this._data;
        this._cmdSaveEntry.context = this._data;
        this._cmdDeleteEntry.context = this._data;

        this._BuildGroups();

    }

    _BuildGroups(){
        // TODO : Keep groups up to date if model base is updated anywhere along the hierarchy
        
        //Create field controllers group
        var m = this._data.model;
        var list = m.GetInheritanceChain(true);
        
        for(var i = 0, n = list.length; i < n; i++){
            this._CreateValueGroupControl(list[i]);
        }
    }

    _ClearGroups(){
        while(!this._ctrlList.empty){
            this._RemoveValueGroupControl(this._ctrlList.last.data);
        }
    }

    _CreateValueGroupControl(p_model){

        var control = this.Add(FieldValueControlGroup, -1, this._viewport, `group`);
        control.entry = this._data;
        control.data = p_model;

        this._ctrlMap.Set(p_model, control);
        this._ctrlList.Add(control);

        control.Expand();

    }

    _RemoveValueGroupControl(p_model){

        var control = this._ctrlMap.Get(p_model);        
        if(!control){return;}

        this._ctrlMap.Remove(p_model);
        this._ctrlList.Remove(control);

        control.Release();

    }

    _OnFieldAdded(){

    }

    _OnFieldRemoved(){

    }
}

module.exports = EntryEditor;
UI.Register('editor-entry', EntryEditor);
},{"../../../com/@.js":6,"../../../com/actions/@.js":8,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/data-core/commands/@entry.js":51,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/ui-app/@.js":149,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242,"../controls/field-value-control-group.js":250,"./editor-base.js":282}],285:[function(require,module,exports){
'use strict'

const { U, C } = require(`../../../com/@.js`);
const { POOL, Dictionary, ID, CatalogItem } = require(`../../../com/collections/@.js`);
const { DATA_EVENT, Model, ModelProxy, FieldSettingsProxy, FieldDescriptor } = require(`../../../com/data-core/@.js`);
const { ModelDelete, ModelApply, ModelApplyAndSave } = require(`../../../com/data-core/commands/@model.js`);
const { ActionModelCreateField } = require(`../../../com/data-core/actions/@model.js`);
const UI = require(`../../../com/ui.js`);

const { UI_EVENT, ExtDrop } = require(`../../../com/ui-core/@.js`);
const { Explorer, SmallButton, ButtonEx } = require(`../../../com/ui-app/@.js`);
const { AssocManager } = require(`../../../com/environment/@.js`);
const { DEFAULT_EDITOR } = require(`../../../com/environment/keys.js`);
const { JSONSerializer } = require(`../../../com/serialization/@.js`);

const Observer = require(`../../../com/signals/observer.js`);
const EditorBase = require(`./editor-base.js`);
const ModelHierarchyControl = require(`../controls/model-hierarchy-control.js`);
const ModelFSControlGroup = require(`../controls/model-fs-control-group.js`);
const COMMAND_EVENT = require(`../../../com/actions/command-event.js`);

class ModelEditor extends EditorBase{
    constructor(){super();}

    _Init(){
        super._Init();

        this._viewportClass = Explorer;

        this._currentControl = null;
        this._controllerMap = new Dictionary();
        this._proxyMap = new Dictionary();

        this._proxyObserver = new Observer();
        this._proxyObserver.Hook(DATA_EVENT.DIRTY, this, this._OnProxyDirty);
        this._proxyObserver.Hook(DATA_EVENT.CLEANED, this, this._OnProxyCleaned);
        this._proxyObserver.Hook(DATA_EVENT.FIELD_ADDED, this, this._OnProxyFieldAdded);
        this._proxyObserver.Hook(DATA_EVENT.FIELD_REMOVED, this, this._OnProxyFieldRemoved);

        this._proxy = new ModelProxy();
        this._proxy.id = new ID();
        
        this._extDrop = new ExtDrop();
        this._extDrop.Hook({ check:this._Bind(this._AllowDropFD), drop:this._Bind(this._DropFD) });

        this._cmdApplyAndSave = this._commands.Create(
            ModelApplyAndSave, `Apply & Save`, `%ICON%/icon_save.svg`);
        this._cmdApplyAndSave.proxy = this._proxy;

        this._cmdApply = this._commands.Create(
            ModelApply, `Apply`, `%ICON%/icon_save.svg`,
            [{evt:COMMAND_EVENT.SUCCESS, thisArg:this, fn:this._OnApplySuccess}]);
        this._cmdApply.proxy = this._proxy;

        this._cmdDeleteModel = this._commands.Create(
            ModelDelete, `Delete`, `%ICON%/icon_delete.svg`);

        this._modelHierarchyControl = null;
        this._modelFieldControl = null;

        this._InitSelectionStack();

    }

    _PostInit(){
        
        super._PostInit();
        
        this._inspector.SetFlag('fixed-size', false);

        this._extDrop.Setup(this, this);

        this._saveBtn = this._editorHeader.CreateLeftHandle({
            command:this._cmdApplyAndSave, isCommandContext:false
        }, SmallButton);

        this._saveBtn = this._editorHeader.CreateLeftHandle({
            command:this._cmdApply, isCommandContext:false
        }, SmallButton);

        this._deleteBtn = this._editorHeader.CreateRightHandle({
            command:this._cmdDeleteModel, isCommandContext:false
        }, SmallButton);

        this._deleteBtn.SetFlag(C.LEFT, true);
        this._newFieldBtn = this.Add(ButtonEx, -1, this._viewport.footer);
        this._newFieldBtn.text = `Add new field`;
        this._newFieldBtn.icon = `%ICON%/icon_plus.svg`;

    }

    _triggerRequestDetails(){ this.Inspect(this._proxy); }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {
            ':host':{
                
            },
            ':host(.allow-drop)':{

            },
            '.viewport':{
               // width:`50%`,
            },
            '.drawer':{
               // width:`50%`,
               // flex:`1 1 auto`,
            },
        });
    }

    _Render(){
        super._Render();

        this._modelFieldControl = this.Add( ModelFSControlGroup, -1, this._viewport, `group` );
        this._modelHierarchyControl = this.Add( ModelHierarchyControl, -1, this._viewport, `group` );
        
        //this._modelFieldInspector._InitSelectionStack();
        //this._modelHierarchyInspector._InitSelectionStack();
    }

    //--->

    _OnDataChanged(p_oldData){

        super._OnDataChanged(p_oldData);

        this._modelHierarchyControl.context = this._data;
        this._modelHierarchyControl.data = this._data;

        this._modelFieldControl.context = this._data;
        this._modelFieldControl.data = null;

        if(p_oldData){ this._ClearProxy(); }

        if(!this._data){ return; }

        
        this._SetupProxy();
        
        if(this._data.base){
            this._modelHierarchyControl.visible = true;
        }else{
            this._modelHierarchyControl.visible = false;
        }
        
        this._modelFieldControl.Expand();
        //this._modelFieldControl.ExpandAll();
        
    }

    _SetupProxy(){
        
        this._proxy.referenceModel = this._data;

        this._editorHeader.data = this._proxy;

        this._inspector.context = this._proxy;
        this._inspector.data = this._proxy;

        this._modelFieldControl.data = this._proxy;

        this._proxy.dirty = this._data.isTemp;

        this._proxyObserver.observable = this._proxy;
        this._ToggleWarning(this._proxy.dirty);

    }

    _ClearProxy(){

        this._editorHeader.data = null;

        this._proxyObserver.observable = null;

        this._inspector.context = null;
        this._inspector.data = null;

        this._proxy.referenceModel = null;

    }

    _OnSelectionStackAdd(p_item){
        this.Inspect(p_item.data);
    }

    _OnDataDirty(p_data){
        super._OnDataDirty(p_data);
        this._ToggleWarning(this._proxy.dirty);
    }

    _OnProxyDirty(p_data){
        this._ToggleWarning(true);
        //this._data.dirty = true;
    }

    _OnDataCleaned(p_data){
        super._OnDataCleaned(p_data);
        this._ToggleWarning(this._proxy.dirty);
    }

    _OnProxyCleaned(p_data){
        this._ToggleWarning(false);
        //this._data.dirty = false;
    }

    //--->

    _OnProxyFieldAdded(p_model, p_fieldSettings){

    }

    _OnProxyFieldRemoved(p_model, p_fieldSettings){
        if(this._inspector.data == p_fieldSettings){
            this.Inspect(this._proxy);
        }
    }

    //--->

    _OnApplySuccess(){
        var d = this._data;
        this.data = null;
        this.data = d;
    }

    //---> Drag/drop ops 

    _AllowDropFD(p_data){
        if(U.IoF(p_data, CatalogItem)){p_data = p_data.data;}
        return U.IoF(p_data, FieldDescriptor);
    }

    _DropFD(p_data){
        if(U.IoF(p_data, CatalogItem)){p_data = p_data.data;}
        this.Do(ActionModelCreateField,{
            target:this._proxy,
            descriptor:p_data
        });
    }
}

module.exports = ModelEditor;
UI.Register('editor-model', ModelEditor);
},{"../../../com/@.js":6,"../../../com/actions/command-event.js":16,"../../../com/collections/@.js":22,"../../../com/data-core/@.js":43,"../../../com/data-core/actions/@model.js":44,"../../../com/data-core/commands/@model.js":52,"../../../com/environment/@.js":95,"../../../com/environment/keys.js":98,"../../../com/serialization/@.js":123,"../../../com/signals/observer.js":142,"../../../com/ui-app/@.js":149,"../../../com/ui-core/@.js":223,"../../../com/ui.js":242,"../controls/model-fs-control-group.js":276,"../controls/model-hierarchy-control.js":277,"./editor-base.js":282}],286:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

class FDBoolean extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Primitives/Boolean`,
        icon:`%ICON%/KitCore/icon_FDBoolean.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDBoolean : FDBoolean
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],287:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

class FDCollection extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Collections/Collection`,
        icon:`%ICON%/KitCore/icon_FDCollection.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDList extends FDCollection{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Collections/List`,
        icon:`%ICON%/KitCore/icon_FDList.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

/**
 * Store a list of <key, value> pairs
 * - Choose type of key (from models ?)
 * - Choose type of value (from fields ? int ? entry ?)
 */
class FDMap extends FDCollection{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Collections/Map`,
        icon:`%ICON%/KitCore/icon_FDMap.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDCollection : FDCollection,
    FDList : FDList,
    FDMap : FDMap
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],288:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

/**
 * An ENUM field allow to select a single value from a list of reference.
 * The list of reference is set per-model as a field info.
 * Need to find a way
 */
class FDColor extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Collections/Primitives/Color`,
        icon:`%ICON%/KitCore/icon_FDColor.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDColor : FDColor
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],289:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

/**
 * An entry value.
 * Hold a reference type. Can point to an existing entry.
 * Offer the ability in the UI to "embed" an entry, when in reality it
 * will creaate an hidden entry and point to it.
 */
class FDEntry extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Data/Entry`,
        icon:`%ICON%/KitCore/icon_FDEntry.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDEntry : FDEntry
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],290:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);
const { FDCollection } = require(`./fd-collections.js`);

class FDEnum extends Field{
    constructor() {super();}

    // Value available for enum are either :
    // - stored in the Model's field settings
    // - grabbed from another Model's Enum
    // Selection is made per-entry, based on the available values.
    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Collections/Enum`,
        icon:`%ICON%/KitCore/icon_FDEnum.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDEnum : FDEnum
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43,"./fd-collections.js":287}],291:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

class FDNumber extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Primitives/Numbers/Number`,
        icon:`%ICON%/KitCore/icon_FDNumber.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDInt extends FDNumber{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDNumber._NFO_, {
        catalogPath:`Primitives/Numbers/Int`,
        icon:`%ICON%/KitCore/icon_FDInt.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDFloat extends FDNumber{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDNumber._NFO_, {
        catalogPath:`Primitives/Numbers/Float`,
        icon:`%ICON%/KitCore/icon_FDFloat.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDDouble extends FDFloat{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDFloat._NFO_, {
        catalogPath:`Primitives/Numbers/Double`,
        icon:`%ICON%/KitCore/icon_FDDouble.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDNumber : FDNumber,
    FDInt : FDInt,
    FDFloat : FDFloat,
    FDDouble : FDDouble
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],292:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

class FDString extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Primitives/String`,
        icon:`%ICON%/KitCore/icon_FDString.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDIdentifier extends FDString{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDString._NFO_, {
        catalogPath:`Primitives/Identifier`,
        icon:`%ICON%/KitCore/icon_FDIdentifier.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDString : FDString,
    FDIdentifier : FDIdentifier
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],293:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);

class FDVector extends Field{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(Field._NFO_, {
        catalogPath:`Primitives/Vectors/Number`,
        icon:`%ICON%/KitCore/icon_FDVector.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDVector2 extends FDVector{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDVector._NFO_, {
        catalogPath:`Primitives/Vectors/Vector2`,
        icon:`%ICON%/KitCore/icon_FDVector2.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDVector3 extends FDVector2{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDVector2._NFO_, {
        catalogPath:`Primitives/Vectors/Vector3`,
        icon:`%ICON%/KitCore/icon_FDVector3.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

class FDVector4 extends FDVector3{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDVector3._NFO_, {
        catalogPath:`Primitives/Vectors/Vector4`,
        icon:`%ICON%/KitCore/icon_FDVector4.svg`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDVector : FDVector,
    FDVector2 : FDVector2,
    FDVector3 : FDVector3,
    FDVector4 : FDVector4
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43}],294:[function(require,module,exports){
'use strict';

class KIT_CORE_FLAGS{
    constructor() {}

    static get INHERITED(){ return `inherited`; }
    static get DELETED(){ return `deleted`; }
    static get DIRTY(){ return `dirty`; }
    static get FRESH(){ return `fresh`; }

}

module.exports = KIT_CORE_FLAGS;
},{}],295:[function(require,module,exports){
'use strict';

const { U, C, APP_REQUEST } = require(`../../com/@.js`);
const { Kit, KitEvents } = require(`../../com/environment/@.js`);
const { DEFAULT_EDITOR, DEFAULT_INSPECTOR, DEFAULT_IP_EDITOR, DEFAULT_FIELD_SETTING_CONTROL, DEFAULT_FIELD_VALUE_CONTROL } = require(`../../com/environment/keys.js`);

const { SERIALIZER_JSON } = require(`../../com/serialization/keys.js`);
const { FieldSettingsJSONSerializer, DataBlockJSONSerializer, DataEntryJSONSerializer, ModelJSONSerializer, METADATAJSONSerializer } = require(`../../com/serialization/@json.js`);

const { METADATA, DataBlock, Model, Field, DataEntry, FieldSettings } = require(`../../com/data-core/@.js`);
const { FieldSettingsControl, FieldValueControl, Inspector } = require(`../../com/ui-controls/@.js`); 

const { FDCollection, FDList, FDMap } = require(`./fields/fd-collections.js`);
const { FDEnum } = require(`./fields/fd-enum.js`);
const { FDNumber, FDInt, FDFloat, FDDouble } = require(`./fields/fd-numbers.js`);
const { FDString, FDIdentifier } = require(`./fields/fd-string.js`);
const { FDEntry } = require(`./fields/fd-entry.js`);
const { FDBoolean } = require(`./fields/fd-boolean.js`);
const { FDColor } = require(`./fields/fd-color.js`);
const { FDVector, FDVector2, FDVector3, FDVector4 } = require(`./fields/fd-vectors.js`);

const { DefaultFieldSettingsControl, DefaultFieldValueControl, FDNumberValueControl, FDBooleanValueControl, FDStringValueControl, FDIdentifierValueControl, ModelFSControlGroup, ModelHierarchyControl,
ModelInspector, FieldSettingsInspector, EntryInspector } = require(`./controls/@.js`);

const { MetaControlTileGroup, MetaControlColor, MetaControlNumber, MetaControlNumberSlider, MetaControlText, MetaControlTextarea, 
MetaControlBoolean } = require(`./controls/meta/@.js`);

const ModelEditor = require(`./editors/model-editor.js`);
const EntryEditor = require(`./editors/entry-editor.js`);


class KitCore extends Kit{
    
    static get _NFO_(){ return U.Merge(Kit._NFO_, {
        catalogPath:`System/Core`
    });}

    constructor() {
        super();        
    }

    _Init(){
        super._Init();
        
        this.Field(
            FDEnum,
            FDBoolean, 
            FDNumber, FDInt, FDFloat, FDDouble,
            FDString, FDIdentifier,
            FDCollection, FDList, FDMap,
            FDEntry,
            FDColor,
            FDVector, FDVector2, FDVector3, FDVector4
        );

        this.Association(
            { 
                rel:DEFAULT_EDITOR, 
                kvp:[
                    { key:Model, ctrl:ModelEditor },
                    { key:FieldSettings, ctrl:DefaultFieldSettingsControl },
                    { key:DataEntry, ctrl:EntryEditor }
                ]
            },
            {
                rel:DEFAULT_INSPECTOR,
                kvp:[
                    { key:Model, ctrl:ModelInspector },
                    { key:FieldSettings, ctrl:FieldSettingsInspector },
                    { key:DataEntry, ctrl:EntryInspector },
                ]
            },
            {
                rel:DEFAULT_FIELD_SETTING_CONTROL,
                kvp:[
                    { key:Field, ctrl:FieldSettingsControl }// ???
                ]
            },
            {
                rel:DEFAULT_FIELD_VALUE_CONTROL,
                kvp:[
                    { key:Field, ctrl:DefaultFieldValueControl },// Default field value control
                    { key:FDNumber, ctrl:FDNumberValueControl },
                    { key:FDBoolean, ctrl:FDBooleanValueControl },
                    { key:FDString, ctrl:FDStringValueControl },
                    { key:FDIdentifier, ctrl:FDIdentifierValueControl },
                ]
            },
            {
                rel:ModelHierarchyControl,
                kvp:[
                    { key:Model, ctrl:ModelFSControlGroup },
                ]
            },

            // Meta-controls

            { key:DataBlock, rel:`${C.METAPREFIX}note`, ctrl:MetaControlTextarea },

            { key:DataBlock, rel:`${C.METAPREFIX}presentation`, ctrl:MetaControlTileGroup },
            { key:DataBlock, rel:`${C.METAPREFIX}presentation.color`, ctrl:MetaControlColor },
            { key:DataBlock, rel:`${C.METAPREFIX}presentation.order`, ctrl:MetaControlNumber },
            { key:DataBlock, rel:`${C.METAPREFIX}presentation.weight`, ctrl:MetaControlNumberSlider },
            { key:DataBlock, rel:`${C.METAPREFIX}presentation.catalogPath`, ctrl:MetaControlText },
            { key:DataBlock, rel:`${C.METAPREFIX}presentation.group`, ctrl:MetaControlText },

            { key:DataBlock, rel:`${C.METAPREFIX}export.identifier`, ctrl:MetaControlText },
            { key:DataBlock, rel:`${C.METAPREFIX}export.deprecated`, ctrl:MetaControlBoolean },

            // Serialization

            { 
                rel:SERIALIZER_JSON, 
                kvp:[
                    { key:METADATA, ctrl:METADATAJSONSerializer },
                    { key:DataBlock, ctrl:DataBlockJSONSerializer },
                    { key:Model, ctrl:ModelJSONSerializer },
                    { key:FieldSettings, ctrl:FieldSettingsJSONSerializer },
                    { key:DataEntry, ctrl:DataEntryJSONSerializer }
                ]
            }
        )

    }
    
    _OnAppIntegrationDeployed(p_ecosystem){
        super._OnAppIntegrationDeployed(p_ecosystem);
    }

    _OnAppIntegrationConcealed(){
        super._OnAppIntegrationConcealed();
    }
    
    _OnEcosystemIntegrationDeployed(p_ecosystem){
        super._OnEcosystemIntegrationDeployed(p_ecosystem);
        //Deploy commands
    }

    _OnEcosystemIntegrationConcealed(p_ecosystem){
        super._OnEcosystemIntegrationConcealed(p_ecosystem);
    }
    
}

module.exports = KitCore;
},{"../../com/@.js":6,"../../com/data-core/@.js":43,"../../com/environment/@.js":95,"../../com/environment/keys.js":98,"../../com/serialization/@json.js":124,"../../com/serialization/keys.js":130,"../../com/ui-controls/@.js":190,"./controls/@.js":245,"./controls/meta/@.js":264,"./editors/entry-editor.js":284,"./editors/model-editor.js":285,"./fields/fd-boolean.js":286,"./fields/fd-collections.js":287,"./fields/fd-color.js":288,"./fields/fd-entry.js":289,"./fields/fd-enum.js":290,"./fields/fd-numbers.js":291,"./fields/fd-string.js":292,"./fields/fd-vectors.js":293}],296:[function(require,module,exports){
'use strict';

const { U } = require(`../../com/@.js`);
const { DisposableObjectEx, List, Catalog } = require(`../../com/collections/@.js`);
const { KitEvents, KitCatalog } = require(`../../com/environment/@.js`);
const CommandFn = require(`../../com/actions/command-fn.js`);

class KitGraphCatalog extends KitCatalog{
    constructor() {super();}

    _Init(){
        
        super._Init();

        //Create commands
        this._OpenModelGraphCmd = this._CmdModel(CommandFn.RentFn({
            thisArg:this, fn:this._OpenModelsGraph, order:-99, icon:`%ICON%/icon_hierarchy.svg`,
            name:`Ecosystem's Models Graph View`
        }));
    }

    Deploy(){
        super.Deploy();
    }

    Conceal(){
        super.Conceal();
    }
    
    _OpenModelsGraph(p_context){
        console.log(p_context);
    }

    _CleanUp()
    {
        super._CleanUp();        
    }

}

module.exports = KitGraphCatalog;
},{"../../com/@.js":6,"../../com/actions/command-fn.js":17,"../../com/collections/@.js":22,"../../com/environment/@.js":95}],297:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const { Kit, KitEvents } = require(`../../com/environment/@.js`);

const KitGraphCatalog = require(`./kit-graph-catalog.js`);

class KitGraph extends Kit{
    
    static get _NFO_(){ return U.Merge(Kit._NFO_, {
        catalogPath:`System/Graph`
    });}

    constructor() {
        super();        
    }

    _Init(){

        this._kitCatalogClass = KitGraphCatalog;
        super._Init();
        
        //this.Field();
    }

    _OnAppIntegrationDeployed(p_ecosystem){
        super._OnAppIntegrationDeployed(p_ecosystem);
    }

    _OnAppIntegrationConcealed(){
        super._OnAppIntegrationConcealed();
    }
    
    _OnEcosystemIntegrationDeployed(p_ecosystem){
        super._OnEcosystemIntegrationDeployed(p_ecosystem);
    }

    _OnEcosystemIntegrationConcealed(p_ecosystem){
        super._OnEcosystemIntegrationConcealed(p_ecosystem);
    }

}

module.exports = KitGraph;
},{"../../com/environment/@.js":95,"../../com/util.js":244,"./kit-graph-catalog.js":296}],298:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Field } = require(`../../../com/data-core/@.js`);
const { FDString } = require(`../../core/fields/fd-string.js`);

class FDLocalizedString extends FDString{
    constructor() {super();}

    static get _NFO_(){ return U.Merge(FDString._NFO_, {
        catalogPath:`Texts/Localized String`
    });}

    _Init(){
        super._Init();
    }
    
}

module.exports = { 
    FDLocalizedString : FDLocalizedString
};
},{"../../../com/@.js":6,"../../../com/data-core/@.js":43,"../../core/fields/fd-string.js":292}],299:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const { Kit, KitEvents } = require(`../../com/environment/@.js`);

const { FDLocalizedString } = require(`./fields/fd-localized-string.js`);

class KitLocalization extends Kit{
    
    static get _NFO_(){ return U.Merge(Kit._NFO_, {
        catalogPath:`System/Localization`
    });}

    constructor() {
        super();        
    }

    _Init(){
        super._Init();
        
        this.Field(
            FDLocalizedString
        );
    }
    
}

module.exports = KitLocalization;
},{"../../com/environment/@.js":95,"../../com/util.js":244,"./fields/fd-localized-string.js":298}],300:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const { Kit, KitEvents } = require(`../../com/environment/@.js`);

class KitUX extends Kit{
    
    static get _NFO_(){ return U.Merge(Kit._NFO_, {
        catalogPath:`UX/Core`
    });}

    constructor() {
        super();        
    }

    _Init(){
        super._Init();
        /*        
        this.Field(

        );
        */
    }
    
}

module.exports = KitUX;
},{"../../com/environment/@.js":95,"../../com/util.js":244}],301:[function(require,module,exports){
'use strict';

const { U } = require(`../../com/@.js`);
const { ENV } = require("../../com/@tools.js");
const { POOL } = require(`../../com/collections/@.js`);
const { DataBlock } = require("../../com/data-core/@.js");
const StateDataBlock = require("./state-data-block.js");

class GameData extends StateDataBlock{

    constructor() { super(); }

    _Init(){
        super._Init();

        this._appid = "";
        this._parentGame = null;
        this._flags = null;
        this._tags = null;
        this._users = new Array();
        this._childs = new Array();

        this._name = ``;
        this._logo = ``;

        this._shouldShow = false;
        
    }

    get shouldShow(){ return this._shouldShow; }
    set shouldShow(p_value){ this._shouldShow = p_value; }

    get usercount(){ return this._users.length; }

    get appid(){ return this._appid; }
    set appid(p_value){ 
        this._appid = p_value;
        this._dataPath = `https://nebukam.github.io/steam/app/${this._appid}/infos.json`;
    }

    get name(){ return this._name; }
    set name(p_value){ 
        if(this._name == p_value){return;}
        this._name = p_value;
        this.CommitUpdate();
    }

    get logo(){ return this._logo; }
    set logo(p_value){ 
        if(this._logo == p_value){return;}
        this._logo = p_value;
        this.CommitUpdate();
    }



    /////

    HasFlags(p_flags, p_any = true){

        if(this._state != StateDataBlock.STATE_READY){ return false; }

        var flag = null;
        var count = p_flags.length;
        var matchCount = 0;
        for(var i = 0, n = count; i < n; i++){
            if(this._flags.includes(p_flags[i])){ matchCount++; }
        }

        if(p_any){ return matchCount > 0; }
        else{ return matchCount == count; }

    }

    HasTags(p_tags, p_any = true){
        
        if(this._state != StateDataBlock.STATE_READY){ return false; }
        
        var tag = null;
        var count = p_tags.length;
        var matchCount = 0;
        for(var i = 0, n = count; i < n; i++){
            tag = p_tags[i];
            for(var j = 0, n = this._tags.length; j < n; j++){
                if(this._flags[i] == tag){ matchCount++; }
            }
        }

        if(p_any){ return matchCount > 0; }
        else{ return matchCount == count; }

    }

    /////

    _OnLoadRequestSuccess(p_data){

        this._flags = p_data.data.flags;
        this._tags = p_data.data.tags;

        var parentID = p_data.data.parentappid;
        if(parentID != ``){
            this._parentGame = ENV.APP._DB.GetGame(parentID);
            this._parentGame.AddChild(this);
        }

        super._OnLoadRequestSuccess(p_data);
    }

    AddChild(p_game){
        if(!this._childs.includes(p_game)){ this._childs.push(p_game); }
    }

    /////

    AddUser(p_user){
        var index = this._users.indexOf(p_user);
        if(index == -1){ this._users.push(p_user); }
    }

    RemoveUser(p_user){
        var index = this._users.indexOf(p_user);
        if(index != -1){ this._users.splice(index, 1); }
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = GameData;
},{"../../com/@.js":6,"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/data-core/@.js":43,"./state-data-block.js":303}],302:[function(require,module,exports){
'use strict';

const { U } = require(`../../com/@.js`);
const { ENV, TIME } = require("../../com/@tools.js");
const { POOL, DisposableObject, Dictionary, DisposableObjectEx } = require(`../../com/collections/@.js`);
const { DataBlock } = require("../../com/data-core/@.js");
const EVENT = require("../../com/event.js");
const GameData = require("./game-data.js");
const StateDataBlock = require("./state-data-block.js");
const UserData = require("./user-data.js");

class GameDatabase extends DisposableObjectEx{

    static get EVT_USER_ADDED(){ return `user-added`; }
    static get EVT_USER_REMOVED(){ return `user-removed`; }
    static get EVT_USER_UPDATED(){ return `user-updated`; }

    static get EVT_GAME_ADDED(){ return `game-added`; }
    static get EVT_GAME_REMOVED(){ return `game-removed`; }
    static get EVT_GAME_UPDATED(){ return `game-updated`; }
    static get EVT_GAME_READY(){ return `game-ready`; }

    static get EVT_INFOS_UPDATED(){ return `infos-updated`; }
    static get EVT_FILTERS_UPDATED(){ return `filters-updated`; }

    constructor() { super(); }

    _Init(){
        super._Init();

        this._gameMap = new Dictionary();
        this._gameList = new Array();

        this._flagMap = new Dictionary();
        this._userMap = new Dictionary();
        this._currentOverlap = new Array();
        this._filteredCount = 0;

        this._userStatuses = StateDataBlock.STATE_NONE;

        this._Bind(this._UpdateInfos);
        this._Bind(this._LoadStoredFilterList);

        this._enums = [];
    //    this._enums.push({ key:"21", id:`dlc`, flag:false }); // 0
    //    this._enums.push({ key:"1", id:`multiplayer`, flag:true }); // 1
    //    this._enums.push({ key:"2", id:`single_player`, flag:false }); // 2
    //    this._enums.push({ key:"49", id:`pvp`, flag:true }); // 3
    //    this._enums.push({ key:"9", id:`coop`, flag:true }); // 4
        this._enums.push({ key:"20", id:`MMO`, flag:false }); // 5
        this._enums.push({ key:"36", id:`Online PvP`, flag:true }); // 6
        this._enums.push({ key:"38", id:`Online Coop`, flag:true }); // 7
        this._enums.push({ key:"47", id:`LAN PvP`, flag:false }); // 8
        this._enums.push({ key:"48", id:`LAN Coop`, flag:false }); // 9
        this._enums.push({ key:"37", id:`Split screen PvP`, flag:false }); // 10
        this._enums.push({ key:"39", id:`Split screen Coop`, flag:false }); // 11
    //    this._enums.push({ key:"27", id:`cross_platform_mp`, flag:false }); // 12
    //    this._enums.push({ key:"29", id:`trading_cards`, flag:false }); // 13
    //    this._enums.push({ key:"35", id:`in_app_purchase`, flag:false }); // 14
    //    this._enums.push({ key:"18", id:`partial_controller_support`, flag:false }); // 15
    //    this._enums.push({ key:"28", id:`full_controller_support`, flag:false }); // 16
    //    this._enums.push({ key:"22", id:`achievements`, flag:false }); // 17
    //    this._enums.push({ key:"22", id:`steam_cloud`, flag:false }); // 18
    //    this._enums.push({ key:"13", id:`captions`, flag:false }); // 19
    //    this._enums.push({ key:"42", id:`remote_play_tablet`, flag:false }); // 20
    //    this._enums.push({ key:"43", id:`remote_play_tv`, flag:false }); // 21
        this._enums.push({ key:"44", id:`Remote play together`, flag:false }); // 22
    //    this._enums.push({ key:"30", id:`steam_workshop`, flag:false }); // 23
    //    this._enums.push({ key:"32", id:`steam_turn_notification`, flag:false }); // 24

        this._filters = new Array();

        try{chrome.storage.sync.get(['filterlist'], this._LoadStoredFilterList);}catch(e){this._UpdateFilters();}
        
    }

    _LoadStoredFilterList(result){
        
        try{
            if(result.filterlist != ``){
                var list = result.filterlist.split(`,`);
                var en;
                for(var i = 0, n = this._enums.length; i < n; i++){
                    en = this._enums[i];
                    en.flag = list.includes(en.key);
                }
            }
        }catch(e){}

        this._UpdateFilters();

    }

    ////

    GetGame( p_appid ){

        var game = null;
        if(this._gameMap.Contains(p_appid)){
            game = this._gameMap.Get(p_appid);
        }else{
            game = new GameData();
            game.appid = p_appid;
            game.Subscribe(StateDataBlock.EVT_STATE_CHANGE, this, this._OnGameStateChanged);
            game.Subscribe(EVENT.UPDATED, this, this._OnGameUpdated);
            this._gameMap.Set(p_appid, game);
            this._gameList.push(game);
            this._Notify(GameDatabase.EVT_GAME_ADDED, game);
            //game.RequestLoad();
        }

        return game;
    }

    _OnGameUpdated(p_game){
        this._Notify(GameDatabase.EVT_GAME_UPDATED, p_game);
        TIME.NEXT_TICK = this._UpdateInfos;
    }

    _OnGameStateChanged(p_game, p_state){
        if(p_state == StateDataBlock.STATE_READY){
            this._Notify(GameDatabase.EVT_GAME_READY, p_game);
        }
    }

    /////

    GetUser( p_username, p_active = true ){

        var user = null;
        if(this._userMap.Contains(p_username)){
            user = this._userMap.Get(p_username);
        }else{
            user = new UserData();
            user.Subscribe(EVENT.RELEASED, this, this._OnUserReleased);
            user._db = this;
            user.userid = p_username;  
            user.active = p_active;          
            this._userMap.Set(p_username, user);
            this._Notify(GameDatabase.EVT_USER_ADDED, user);
            user.Subscribe(EVENT.UPDATED, this, this._OnUserUpdate);
            user.RequestLoad();
        }

        return user;

    }

    _OnUserReleased(p_user){
        this._userMap.Remove(p_user.userid);
        this._Notify(GameDatabase.EVT_USER_REMOVED, p_user);
        this._OnUserUpdate(p_user);
    }

    _OnUserUpdate(p_user){
        
        

        var anyLoading = false;
        var invalidCount = 0;
        var readyCount = 0;

        var uList = this._userMap.keys;
        var user;
        for(var i = 0, n = uList.length; i < n; i++){
            user = this._userMap.Get(uList[i]);

            if(user.state == StateDataBlock.STATE_NONE
                || user.state == StateDataBlock.STATE_LOADING){
                anyLoading = true;
            }else if(user.state == StateDataBlock.STATE_INVALID){
                invalidCount ++;
            }else if(user.state == StateDataBlock.STATE_READY){
                readyCount ++;
            }

        }

        var diff = uList.length - invalidCount;

        if(diff == 0){
            this._userStatuses = StateDataBlock.STATE_INVALID;
        }else if(anyLoading){
            this._userStatuses = StateDataBlock.STATE_LOADING;
        }else{
            this._ComputeOverlap();
            this._userStatuses = StateDataBlock.STATE_READY;
        }

        this._Notify(GameDatabase.EVT_USER_UPDATED, p_user);

        if(!ENV.NODE){
            var uList = this._GetUserJSONData(uList);
            try{ chrome.storage.sync.set({userlist:uList} );}catch(e){}
        }        

        //if(uList.length == 0){ this._ComputeOverlap(); }
        this._ComputeOverlap();

        TIME.NEXT_TICK = this._UpdateInfos;

    }

    _GetUserJSONData(p_keys = null){

        if(!p_keys){ p_keys = this._userMap.keys; }

        var user;
        var data = [];
        for(var i = 0, n = p_keys.length; i < n; i++){
            user = this._userMap.Get(p_keys[i]);
            if(user.profileID64 == ``){continue;}
            data.push({ id:user.profileID64, active:user.active });
        }

        return JSON.stringify(data);
    }

    _ComputeOverlap(){


        this._currentOverlap.length = 0;

        var userKeys = this._userMap.keys;
        var userList = new Array();
        var user;
        var refUser;

        //Find user with the fewest games, yet not 0
        for(var i = 0, n = userKeys.length; i < n; i++){

            user = this._userMap.Get(userKeys[i]);
            if(user.gamesCount == 0 || !user.active){ continue; }

            userList.push(user);

            if(!refUser || (refUser && (user.gamesCount < refUser.gamesCount))){
                refUser = user;
            }

        }

        if(!refUser || userList.length < 1){ 
            console.warn(`refUser = ${refUser} / userList.length = ${userList.length} / uKey.length = ${userKeys.length}`);
            TIME.NEXT_TICK = this._UpdateInfos;
            return; 
        }

        var gameList = refUser._gameList.keys;
        
        for(var g = 0, n = gameList.length; g < n; g++){
            
            var game = this._gameMap.Get(gameList[g]);
            var ok = true;

            for(var i = 0, ni = userList.length; i < ni; i++ ){
                if(!game._users.includes(userList[i])){ ok = false; }
            }

            if(ok){ this._currentOverlap.push(game); }

        }

        TIME.NEXT_TICK = this._UpdateInfos;

    }

    _UpdateFilters(){

        this._filters.length = 0;
        var fl = ``;
        var en;
        for(var i = 0, n = this._enums.length; i < n; i++){
            en = this._enums[i];
            if(en.flag){ 
                this._filters.push(en.key); 
                fl += `${i!=0?',':''}${en.key}`; 
            }
        }

        try{ chrome.storage.sync.set({filterlist:fl} );}catch(e){}

        this._Notify(GameDatabase.EVT_FILTERS_UPDATED, this);
        TIME.NEXT_TICK = this._UpdateInfos;

    }

    _UpdateInfos(){

        // Update game infos, when available
        if(this._currentOverlap.length == 0){
            //Either no game, or no overlap yet.
            this._filteredCount = 0;
            this._Notify(GameDatabase.EVT_INFOS_UPDATED, this);
            return;
        }

        // Reset all games to shouldShow = false;
        for(var g = 0, n = this._gameList.length; g < n; g++){
            this._gameList[g].shouldShow = false;
        }

        this._filteredCount = 0;

        // Flag overlapped games that meet filter criterias
        var game;
        for(var g = 0, n = this._currentOverlap.length; g < n; g++){
            game = this._currentOverlap[g];
            var hasFlags = game.HasFlags(this._filters);
            game.shouldShow = hasFlags;
            if(hasFlags){ this._filteredCount++; }
        }

        this._Notify(GameDatabase.EVT_INFOS_UPDATED, this);
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = GameDatabase;
},{"../../com/@.js":6,"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/data-core/@.js":43,"../../com/event.js":103,"./game-data.js":301,"./state-data-block.js":303,"./user-data.js":304}],303:[function(require,module,exports){
'use strict';

const { U } = require(`../../com/@.js`);
const { ENV } = require("../../com/@tools.js");
const { POOL } = require(`../../com/collections/@.js`);
const { DataBlock } = require("../../com/data-core/@.js");
const axios = require('axios');

class StateDataBlock extends DataBlock{

    static get EVT_STATE_CHANGE(){ return 'state-change'; }

    static get STATE_NONE(){ return 'state-none'; }
    static get STATE_LOADING(){ return 'state-loading'; }
    static get STATE_READY(){ return 'state-ready'; }
    static get STATE_INVALID(){ return 'state-invalid'; }

    constructor() { super(); }

    _Init(){
        super._Init();

        this._db = null;
        this._state = StateDataBlock.STATE_NONE;
        this._dataPath = "";

        this._Bind(this._OnLoadRequestSuccess);
        this._Bind(this._OnLoadRequestError);        
        this._Bind(this._OnLoadRequestComplete);

    }

    get state(){ return this._state; }
    set state(p_state){
        if(p_state == this._state){return;}
        var oldState = this._state;
        this._state = p_state;        
        this._Notify(StateDataBlock.EVT_STATE_CHANGE, this, p_state, oldState);
        this.CommitUpdate();
    }

    RequestLoad(b_force = false){

        if(!b_force && this._state != StateDataBlock.STATE_NONE){return;}

        this.state = StateDataBlock.STATE_LOADING;
        axios.get(this._dataPath, ENV.APP._axiosConfig)
        .then(this._OnLoadRequestSuccess)
        .catch(this._OnLoadRequestError)
        .then(this._OnLoadRequestComplete);

    }

    _OnLoadRequestSuccess(p_data){
        this.state = StateDataBlock.STATE_READY;
        this.CommitUpdate();
    }

    _OnLoadRequestError(p_err){
        //console.error(p_err);
        if(p_err.response && p_err.response.status == 429){
            ENV.APP._429();
        }
        this.state = StateDataBlock.STATE_INVALID;
    }

    _OnLoadRequestComplete(){
        
    }

    

    _CleanUp(){

        this._state = StateDataBlock.STATE_NONE;
        this._dataPath = "";

        super._CleanUp();
    }

}

module.exports = StateDataBlock;
},{"../../com/@.js":6,"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/data-core/@.js":43,"axios":330}],304:[function(require,module,exports){
'use strict';

const { U } = require(`../../com/@.js`);
const { ENV } = require("../../com/@tools.js");
const { POOL, Dictionary } = require(`../../com/collections/@.js`);
const StateDataBlock = require("./state-data-block.js");
const axios = require('axios');

class UserData extends StateDataBlock{

    constructor() { super(); }

    _Init(){
        super._Init();

        this._userID = "";
        this._profileID64 = "";
        this._active = true;

        this._personaID = "";
        this._avatarURL = "";
        this._privacy = "";

        this._gameList = new Dictionary();

        this._xmlparser = new DOMParser();
        
        this._Bind(this._OnDetailsRequestSuccess);        
        this._Bind(this._OnDetailsRequestError);

        this._Bind(this._OnProfileRequestSuccess);
        this._Bind(this._OnProfileRequestError);

    }

    get gamesLoaded(){ return this._gamesLoaded; }
    get gamesCount(){ return this._gameList.count; }

    get userid(){ return this._userID; }
    set userid(p_value){ 
        this._userID = p_value;
        this._personaID = p_value;
    }

    get active(){ return this._active; }
    set active(p_value){ 
        this._active = p_value;
        this.CommitUpdate();
    }

    set profileID64( p_value ){
        this._profileID64 = p_value;
        //this._dataPath = `http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=${ENV.APP._APIKEY}&steamid=${p_value}&format=json`;
        this._dataPath = `https://steamcommunity.com/profiles/${p_value}/games/?tab=all`;
    }
    get profileID64(){ return this._profileID64; }

    //
    //  Data loading
    //

    // Profile

    RequestLoad(){
        this.state = StateDataBlock.STATE_LOADING; 
        this._personaID = this._userID;

        var reg = /^\d+$/;
        if(reg.test(this._userID) && this._userID.length == 17){
            this.profileID64 = this._userID;            
            this._LoadProfile();
        }else{
            axios.get( `https://steamcommunity.com/id/${this._userID}?xml=1` )
            .then(this._OnDetailsRequestSuccess)
            .catch(this._OnDetailsRequestError)
            .then();
        }
    }

    _OnDetailsRequestSuccess(p_data){
        var xmlDoc = this._xmlparser.parseFromString(p_data.data,"text/xml");
        this.profileID64 = xmlDoc.getElementsByTagName(`steamID64`)[0].childNodes[0].nodeValue;
        console.log(`${this._userID} == ${this._profileID64}`);      
        this._LoadProfile();
    }

    _OnDetailsRequestError(p_err){
        console.error(p_err);
        this.state = StateDataBlock.STATE_INVALID;
    }

    // Actual profile

    _LoadProfile(){
        axios.get( `https://steamcommunity.com/profiles/${this._profileID64}?xml=1` )
        .then(this._OnProfileRequestSuccess)
        .catch(this._OnProfileRequestError)
        .then();
    }

    _OnProfileRequestSuccess(p_data){

        try{

            var xmlDoc = this._xmlparser.parseFromString(p_data.data,"text/xml");

            this._personaID = xmlDoc.getElementsByTagName(`steamID`)[0].childNodes[0].nodeValue;;
            this._avatarURL = xmlDoc.getElementsByTagName(`avatarFull`)[0].childNodes[0].nodeValue;
            this._privacy = xmlDoc.getElementsByTagName(`privacyState`)[0].childNodes[0].nodeValue;        
            this._limitedAccount = xmlDoc.getElementsByTagName(`isLimitedAccount`)[0].childNodes[0].nodeValue;

            console.log(`${this._personaID} // ${this._privacy}`);

            this.CommitUpdate();
            super.RequestLoad(true);

        }catch(e){

            console.error(p_data.data);

        }
    }

    _OnProfileRequestError(p_err){
        console.error(p_err);
        this.state = StateDataBlock.STATE_INVALID; 
    }

    // Game list
    
    _OnLoadRequestSuccess(p_data){
        /*
        var games = p_data.data.response.games;
        console.log(p_data);
        if(!games){
            super._OnLoadRequestSuccess(p_data);
            return;
        }

        var appid = null;
        var game = null;

        for(var i = 0, n = games.length; i < n; i++){ 
            appid = games[i].appid;
            game = this._db.GetGame(appid);
            game.AddUser(this);
            this._gameList.Set(appid, game); 
        }
        console.log(this._gameList.count);
        */
        try{

            var game = null;
            var sourceSplit = p_data.data.split(`var rgGames = `);
            sourceSplit.splice(0,1);
            sourceSplit = sourceSplit[0].split(`];`)[0].trim();

            try{
                var games = JSON.parse(`${sourceSplit}]`);
            }catch(e){
                console.log(`${sourceSplit}]`);
            }
            //console.log(this._userID);
            //console.log(games);
            
            var gamedata;
            for(var i = 0, n = games.length; i < n; i++){
                gamedata = games[i];
                var appid = gamedata.appid;
                game = this._db.GetGame(appid);
                game.AddUser(this);
                game.name = gamedata.name;
                game.logo = gamedata.logo;
                //console.log(gamedata);
                this._gameList.Set(appid, game);
                game.RequestLoad();
            }
            
            super._OnLoadRequestSuccess(p_data);

        }catch(e){
            this._OnLoadRequestError(e);
        }
    }

    // Second profile fetch

    _CleanUp(){

        this._userID = "";
        this._profileID64 = "";

        this._personaID = "";
        this._avatarURL = "";
        this._privacy = "";

        var keys = this._gameList.keys;
        for(var i = 0, n = keys.length; i < n; i++ ){ this._gameList.Get(keys[i]).RemoveUser(this); }
        this._gameList.Clear();
        super._CleanUp();
    }


}

module.exports = UserData;
},{"../../com/@.js":6,"../../com/@tools.js":7,"../../com/collections/@.js":22,"./state-data-block.js":303,"axios":330}],305:[function(require,module,exports){
'use strict';

//const U = require(`../com/util.js`);

const { U } = require(`../com/@.js`);
const UI = require(`../com/ui.js`);

const CSS = require(`../com/ui-core/css.js`);

const Shell = require(`../com/ui-app/shell.js`);

const { MainAppDrawer } = require(`./ui/main-app-drawer.js`);
const MainWorkspace = require(`./ui/main-workspace.js`);

class MainAppShell extends Shell{
    
    constructor() {
        super();        
    }

    _Init(){
        super._Init();
    }

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            ':host':{
                position:`relative`,
                width:`100%`,
                height:`100%`,
                display: `flex`,
                'flex-flow':`row nowrap`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'background-color':`#1e1e1e`
            },
            '.side-panel':{
                position:`relative`,
                flex:`0 0 auto`,
                //outline:`1px #7f7f7f solid`,
                //'outline-offset':`-1px`
            },
            '.workspace':{
                position:`relative`,
                flex:`1 1 auto`,
                //outline:`1px #7f7f7f solid`,
                //'outline-offset':`-1px`
            }
        });
    }

    _Render()
    {
        //this._sidePanel = this.Add(MainAppDrawer, -1, this, `side-panel`);
        this._workspace = this.Add(MainWorkspace, -1, this, `workspace` );     
    }
    
    
    set appCatalog(p_value){
        //this._sidePanel.catalog = p_value;
    }

    get appCatalog(){
        //return this._sidePanel.catalog;
    }

}

module.exports = MainAppShell;
UI.Register(`steam-coop-app-shell`, MainAppShell);
},{"../com/@.js":6,"../com/ui-app/shell.js":177,"../com/ui-core/css.js":227,"../com/ui.js":242,"./ui/main-app-drawer.js":320,"./ui/main-workspace.js":321}],306:[function(require,module,exports){
'use strict';

const { U } = require(`../com/@.js`);
const { Layer } = require(`../com/ui-core/@.js`);
const UI = require(`../com/ui.js`);


class AppSplash extends Layer{
    
    constructor() {
        super();        
        this.focusable = false;
    }

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(),{
            ':host':{
                //position:`relative`,
                width:`100%`,
                height:`100%`,
            }
        });
    }

    _Render()
    {
               
    }

    _Init(){
        super._Init();
    }

}

module.exports = AppSplash;
UI.Register(`steam-coop-app-splash`, AppSplash);
},{"../com/@.js":6,"../com/ui-core/@.js":223,"../com/ui.js":242}],307:[function(require,module,exports){
/**
 * Main App.
 * Prepare all layers etc, load preferences, blah blah blah
 */
'use strict';

const AppBase = require(`../com/app-base.js`);

const { U, C, M, URI, PATH } = require(`../com/@.js`);
const { POOL, Catalog } = require(`../com/collections/@.js`);
const { ProjectExplorer, DataTypesExplorer, SearchExplorer, KitExplorer, EcosystemExplorer, SettingsExplorer } = require(`./ui/explorers/@.js`);
const { KitManager } = require(`../com/environment/@.js`);

const { Shell } = require(`../com/ui-app/@.js`);

const MainAppShell = require(`./steam-coop-app-shell.js`);
const AppSplash = require(`./steam-coop-app-splash.js`);

const ProjectManager = require(`../com/data-app/project-manager.js`);

const KitLocalization = require(`../kits/localization/kit-localization.js`);
const KitGraph = require(`../kits/graph/kit-graph.js`);
const KitUX = require(`../kits/ux/kit-ux.js`);

const { Model, ModelMockup } = require(`../com/data-core/@.js`);

const JSONSerializer = require(`../com/serialization/serializer-json.js`);

const DIALOG = require(`../com/dialog.js`);
const APP_DATA_EVENT = require(`../com/data-app/app-data-event.js`);
const { ENV } = require("../com/@tools.js");
const SteamGameCache = require("./steam-game-cache.js");

const UserData = require("./data/user-data.js");
const GameDatabase = require("./data/game-database.js");
const axios = require('axios');

class KissApp extends AppBase{

    constructor() { super(); }

    _Init(){

        super._Init();

        this._fiftyYearsAgo = ((Date.now() - 1576800000000) / 1000).toFixed();
        document.cookie = `wants_mature_content="1"`;
        document.cookie = `birthtime=${this._fiftyYearsAgo}`;
        document.cookie = `path=/`;
        document.cookie = `max-age=315360000`;  

        axios.defaults.withCredentials = true;

        this._APIKEY = `STEAMKEY`; 
        

        this._appWrapperClass = Shell;
        this._appLayers = [
            { cl:MainAppShell }, //Main layer
            { cl:AppSplash } //App splash
        ];

        this._DB = new GameDatabase();
        
    }

    _PostInit(){
        super._PostInit();
    }

    _PrepareEnvironment()
    {
        super._PrepareEnvironment();
    }

    _PostPrepareEnvironment()
    {
        // Create main UI etc
        
        //this._DB.GetUser(`nebukam`);
        //this._DB.GetUser(`76561197998180826`);
        //this._DB.GetUser(`asdasdasdasd as das dasdasdasdasdasdasdasdasdasdasdasdasdasd`);
        //this._DB.GetUser(`76561198055276814`);

        for(var i = 0; i < 5; i++){
           // this._DB.GetUser(`asd${i}`);
        }

        

    }

    _AddUser(p_id){
        var newUser = this._DB.GetUser(p_id);
        return newUser;
    }

    _429(){
        DIALOG.Push({ 
            title:`Ewwww.`,
            icon:`%ICON%/icon_error.svg`,
            message:`It appears that Steam has temporarily locked out your IP from requesting data.</br>Wait a few minutes and come back. Also, don't worry, it only affects the website !`,
            actions:[
                { text:`Ok :(` }
            ]
        });
    }

}

module.exports = KissApp;
},{"../com/@.js":6,"../com/@tools.js":7,"../com/app-base.js":19,"../com/collections/@.js":22,"../com/data-app/app-data-event.js":39,"../com/data-app/project-manager.js":42,"../com/data-core/@.js":43,"../com/dialog.js":93,"../com/environment/@.js":95,"../com/serialization/serializer-json.js":132,"../com/ui-app/@.js":149,"../kits/graph/kit-graph.js":297,"../kits/localization/kit-localization.js":299,"../kits/ux/kit-ux.js":300,"./data/game-database.js":302,"./data/user-data.js":304,"./steam-coop-app-shell.js":305,"./steam-coop-app-splash.js":306,"./steam-game-cache.js":308,"./ui/explorers/@.js":309,"axios":330}],308:[function(require,module,exports){
'use strict';

//const U = require(`../com/util.js`);

const { U } = require(`../com/@.js`);
const UI = require(`../com/ui.js`);

const CSS = require(`../com/ui-core/css.js`);

const Shell = require(`../com/ui-app/shell.js`);

const { MainAppDrawer } = require(`./ui/main-app-drawer.js`);
const MainWorkspace = require(`./ui/main-workspace.js`);
const { DisposableObjectEx } = require("../com/collections/@.js");
const fs = require(`fs`);

class SteamGameCache extends DisposableObjectEx{
    
    constructor() { super(); }

    _Init(){
        super._Init();

        this._batchCount = 1000;
        this._currentBatchIndex = 0;
        this._index = 0;
        this._tickIndex = 0;
        this._count = 0;
        this._parseCount = 0;
        this._gameList = null;
        this._gameMap = {};
        this._uniqueTagMap = {};
        this._uniqueTagList = [];

        this._Bind(this._OnMainListFetched);
        this._Bind(this._OnGamePageLoaded);
        this._Bind(this._OnGamePageLoadFailed);

        this._masterFlagInfos = [];
        this._masterFlagInfos.push({ cat:21, id:`dlc` });
        this._masterFlagInfos.push({ cat:1, id:`multiplayer` });
        this._masterFlagInfos.push({ cat:2, id:`single_player` });
        this._masterFlagInfos.push({ cat:49, id:`pvp` });
        this._masterFlagInfos.push({ cat:9, id:`coop` });
        this._masterFlagInfos.push({ cat:20, id:`mmo` });
        this._masterFlagInfos.push({ cat:36, id:`online_pvp` });
        this._masterFlagInfos.push({ cat:38, id:`online_coop` });
        this._masterFlagInfos.push({ cat:47, id:`lan_pvp` });
        this._masterFlagInfos.push({ cat:48, id:`lan_coop` });
        this._masterFlagInfos.push({ cat:37, id:`shared_split_pvp` });
        this._masterFlagInfos.push({ cat:39, id:`shared_split_coop` });
        this._masterFlagInfos.push({ cat:27, id:`cross_platform_mp` });
        this._masterFlagInfos.push({ cat:29, id:`trading_cards` });
        this._masterFlagInfos.push({ cat:35, id:`in_app_purchase` });
        this._masterFlagInfos.push({ cat:18, id:`partial_controller_support` });
        this._masterFlagInfos.push({ cat:28, id:`full_controller_support` });
        this._masterFlagInfos.push({ cat:22, id:`achievements` });
        this._masterFlagInfos.push({ cat:22, id:`steam_cloud` });
        this._masterFlagInfos.push({ cat:13, id:`captions` });
        this._masterFlagInfos.push({ cat:42, id:`remote_play_tabled` });
        this._masterFlagInfos.push({ cat:43, id:`remote_play_tv` });
        this._masterFlagInfos.push({ cat:44, id:`remote_play_together` });
        this._masterFlagInfos.push({ cat:30, id:`steam_workshop` });
        this._masterFlagInfos.push({ cat:32, id:`steam_turn_notification` });

        this._flagsMap = {};

        var infos, cat, catid;
        for(var i = 0, n = this._masterFlagInfos.length; i < n; i++){
            infos = this._masterFlagInfos[i];
            cat = infos.cat; catid = infos.catid;
            this._flagsMap[cat] = catid;
        }

    }

    Run(){
        
        var xhttp = new XMLHttpRequest();
        xhttp.onloadend = this._OnMainListFetched;
        xhttp.open("GET", `http://api.steampowered.com/ISteamApps/GetAppList/v0002/?key=STEAMKEY&format=json`, true);
        xhttp.send();

    }

    _OnMainListFetched(evt){

        var data = evt.srcElement;
        if (data.readyState == 4 && data.status == 200) {

            this._gameList = JSON.parse(data.responseText).applist.apps;
            this._tickIndex = this._index = 0;

            //this._count = 10;
            this._count = this._gameList.length;
            
            console.log(this._count);

            for(var i = 0; i < 1000; i++){
                this._LoadNext();
            }

        }else{
            console.error("Failed to load game list");
        }
    }

    _OnGamePageLoaded(evt){

        var data = evt.srcElement;

        if (data.readyState == 4 && data.status == 200) { 

            var u = evt.currentTarget.responseURL.split('/');
            var appid = u[u.length-1];

            if(appid == ''){ this._LoadNext(); return; }

            //console.log(`Received appid=${appid}`);

            //

            var appName = this._gameMap[appid];
            var appImg = `https://steamcdn-a.akamaihd.net/steam/apps/${appid}/header.jpg`;
            var parentAppid = ``;
            var tagIDList = new Array();
            var flagIDList = new Array();

            // Flags

            try{
                var flagSplit = data.responseText.split(`<div class="game_area_details_specs"><div class="icon"><a href="https://store.steampowered.com/search/?category`);//data.responseText.split(`<img class="category_icon" src="`);
                flagSplit.splice(0,1);
                for(var i = 0, n = flagSplit.length; i < n; i++){
                    var flagID = flagSplit[i].split(`=`)[1].split(`&`)[0];
                    flagIDList.push(flagID);
                    if(flagID == `21`){
                        // if flag is DLC, retrieve base game
                        parentAppid = data.responseText.split(`base game <a href="https://store.steampowered.com/app/`)[1].split(`/`)[0];

                    }
                }
            }catch(e){}

            // Tags

            try{
                var tagSplit = data.responseText.split(`class="glance_tags popular_tags"`)[1].split(`<div class="app_tag add_button"`)[0];
                tagSplit = tagSplit.split(`>`); tagSplit.splice(0,1); tagSplit = tagSplit.join(`>`); tagSplit = tagSplit.split(`</a>`);

                for(var i = 0, n = tagSplit.length; i < n; i++){
                    var tagID = tagSplit[i].split(`>`); 
                    tagID = tagID[tagID.length-1].trim();
                    if(tagID != ``){ 
                        tagIDList.push(tagID); 
                        this._uniqueTagMap[tagID] = 1;
                    }
                }
            }catch(e){}

            //

            var gameData = {
                appid:appid,
                parentappid:parentAppid,
                name:appName,
                flags:flagIDList,
                tags:tagIDList
            }

            //console.log(gameData);
            var dirPath = `C:/Users/Owner/Documents/SteamApps/${appid}`;
            if (!fs.existsSync(dirPath)){fs.mkdirSync(dirPath);}            
            fs.writeFile(`${dirPath}/infos.json`, JSON.stringify(gameData), 'utf8', ()=>{});

            console.log(`\n+ ${appid}`);

            this._TickLoadEnd();
            this._LoadNext();

        }else{ //404 amongst other being "not an error", but not a 200 either...
            this._OnGamePageLoadFailed(evt);
        }

    }

    _OnGamePageLoadFailed(evt){
        console.warn(`Failed ${this._parseCount}`);
        this._TickLoadEnd();
        this._LoadNext();
    }

    _LoadNext(){

        if(this._index >= this._count){ this._End(); }

        var appid = this._gameList[this._index].appid;

        if(fs.existsSync(`C:/Users/Owner/Documents/SteamApps/${appid}`))
        {
            this._index++;
            this._TickLoadEnd();
            this._LoadNext();
            return;
        }
        
        this._gameMap[appid] = this._gameList[this._index].name;

        var xhttp = new XMLHttpRequest();
        xhttp.onloadend = this._OnGamePageLoaded;
        xhttp.open("GET", `https://store.steampowered.com/app/${appid}`, true);
        xhttp.onerror = this._OnGamePageLoadFailed;
        xhttp.send();

        this._index++;

    }

    _TickLoadEnd(){
        var pc = ((this._tickIndex / this._count ) * 100 ).toFixed(2);
        console.log(`${pc}% || ${this._tickIndex}/${this._count}`);
        this._tickIndex ++;
    }

    _End(){

        /*
        for(var n in this._uniqueTagMap){ this._uniqueTagList.push(n); }
        this._uniqueTagList.sort();
        console.log(this._uniqueTagList);
        */

    }

}

module.exports = SteamGameCache;
},{"../com/@.js":6,"../com/collections/@.js":22,"../com/ui-app/shell.js":177,"../com/ui-core/css.js":227,"../com/ui.js":242,"./ui/main-app-drawer.js":320,"./ui/main-workspace.js":321,"fs":358}],309:[function(require,module,exports){
module.exports = {

    DataTypesExplorer : require(`./explorer-datatypes.js`),
    EcosystemExplorer : require(`./explorer-ecosystem.js`),
    KitExplorer : require(`./explorer-kit.js`),
    ProjectExplorer : require(`./explorer-project.js`),
    SearchExplorer : require(`./explorer-search.js`),
    SettingsExplorer : require(`./explorer-settings.js`),
    
}
},{"./explorer-datatypes.js":311,"./explorer-ecosystem.js":312,"./explorer-kit.js":313,"./explorer-project.js":314,"./explorer-search.js":315,"./explorer-settings.js":316}],310:[function(require,module,exports){
'use strict';

const { U } = require(`../../../com/@.js`);
const { Explorer, TitleBar } = require(`../../../com/ui-app/@.js`);
const UI = require(`../../../com/ui.js`);

class ExplorerBase extends Explorer{
    constructor(){super();}

    _Init(){
        super._Init();

        this._titleBar = null;
        this._titleBarClass = TitleBar;

    }

    _PostInit(){
        super._PostInit();
        this._titleBar.facade.icon = ``;
        this._titleBar.facade.text = U.CamelSplit(this.constructor.name);
    }
    
    //---> Rendering

    _RenderStyle()
    {
        return U.Merge(super._RenderStyle(), {
            '.title':{

            },
        });
    }

    _Render()
    {        
        super._Render();
        this._titleBar = this.Add(this._titleBarClass, -1, this._header, `title`);
    }

    

}

module.exports = ExplorerBase;
UI.Register('kiss-explorer-base', ExplorerBase);
},{"../../../com/@.js":6,"../../../com/ui-app/@.js":149,"../../../com/ui.js":242}],311:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);
const UI_EVENT = require(`../../../com/ui-core/core-ui-event.js`);
const APP_REQUEST = require(`../../../com/app-request.js`);

const Ecosystem = require(`../../../com/data-core/ecosystem.js`);
const TreeRoot = require(`../../../com/ui-app/tree-root.js`);
const ButtonEx = require(`../../../com/ui-app/button-ex.js`);

const ExplorerBase = require(`./explorer-base.js`);

class DataTypesExplorer extends ExplorerBase{
    constructor(){super();}

    _Init(){
        super._Init();
        this._ecosystem = null;
        this._modelList = null;
        this._fieldList = null;
        this._btnNew = null;
        this._tempModel = null;
    }
    
    _Render(){
        
        super._Render();

        this._modelList = this.Add(TreeRoot, -1, this._body, 'group');
//      this._modelList.Expand();
        this._fieldList = this.Add(TreeRoot, -1, this._body, 'group');
//      this._fieldList.Expand();

        this._btnNew = this.Add(ButtonEx, -1, this._footer);
        
    }

    _RequestNewModel(){

        if(this._tempModel){ this._tempModel.Release(); }

        if(!this._ecosystem){throw new Error(`No ecosystem set.`);}

        var e = this._ecosystem;

        // TODO :
        // Dispatch a request for item creation
        // Design the creation request process.
        // It should not be handled here, but needs to be provided with an ecosystem.
        // Creation arguments may be both broad and specifics as they should cover :
        //  - creation of a model from scratch 
        //  - creation of a model based off of another existing one
        //  - creation of a model entry, in no particular context
        //  - creation of a model entry, based off of another existing one
        //  - creation of a model entry, as a nested field value
        //  - creation of a document, or any element not tied to an ecosystem.
        //  - creation may be discarded.
        //  - 


        this._EmitLocalRequest(APP_REQUEST.EDIT,{model:this._tempModel});

    }


    _OnDataChanged(p_oldData){
        var e = this._data;
        if(!e || !U.IoF(e, Ecosystem)){
            this._ecosystem = null;
            this._fieldList.data = null;
            this._modelList.data = null;
            this._btnNew.command = null;
        }else{
            this._ecosystem = e;
            this._fieldList.data = e.models.catalog;
            this._modelList.data = e.fields.catalog;
            this._btnNew.command = e.models._cmdModelCreate;
        }
    }

}

module.exports = DataTypesExplorer;
UI.Register('explorer-datatypes', DataTypesExplorer);
},{"../../../com/app-request.js":21,"../../../com/data-core/ecosystem.js":77,"../../../com/ui-app/button-ex.js":155,"../../../com/ui-app/tree-root.js":186,"../../../com/ui-core/core-ui-event.js":224,"../../../com/ui.js":242,"../../../com/util.js":244,"./explorer-base.js":310}],312:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);
const Ecosystem = require(`../../../com/data-core/ecosystem.js`);
const TreeRoot = require(`../../../com/ui-app/tree-root.js`);
const ButtonEx = require(`../../../com/ui-app/button-ex.js`);

const ExplorerBase = require(`./explorer-base.js`);

class EcosystemExplorer extends ExplorerBase{
    constructor(){super();}

    _Init(){
        super._Init();
        this._entriesList = null;
        this._btnNew = null;
    }
    
    _Render(){
        super._Render();
        this._entriesList = this.Add(TreeRoot, -1, this._body, 'group');
        //this._entriesList.Expand();

        var b = this._btnNew = this.Add(ButtonEx, -1, this._footer);
        b.uppercaseText = `Create entry`;
        b.icon = `%ICON%/icon_plus.svg`;
        //TODO : Bind a command to this button instead of handling request and all that shit here.
        //this way we can separate commands from actual UI, to an certain extent
        //b.Subscribe(UI_EVENT.ACTIVATED, this, this._RequestNewModel);
    }

    _OnDataChanged(p_oldData){
        super._OnDataChanged(p_oldData);

        var e = this._data;
        if(!e || !U.IoF(e, Ecosystem)){
            this._entriesList.data = null;
        }else{
            this._entriesList.data = e.catalog;
        }
    }

}

module.exports = EcosystemExplorer;
UI.Register('explorer-ecosystem', EcosystemExplorer);
},{"../../../com/data-core/ecosystem.js":77,"../../../com/ui-app/button-ex.js":155,"../../../com/ui-app/tree-root.js":186,"../../../com/ui.js":242,"../../../com/util.js":244,"./explorer-base.js":310}],313:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);

const ExplorerBase = require(`./explorer-base.js`);

class KitExplorer extends ExplorerBase{
    constructor(){super();}

    _Init(){
        super._Init();
    }
    
}

module.exports = KitExplorer;
UI.Register('explorer-kit', KitExplorer);
},{"../../../com/ui.js":242,"../../../com/util.js":244,"./explorer-base.js":310}],314:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);

const ExplorerBase = require(`./explorer-base.js`);

class ProjectExplorer extends ExplorerBase{
    constructor(){super();}

    _Init(){
        super._Init();
    }
    
}

module.exports = ProjectExplorer;
UI.Register('explorer-project', ProjectExplorer);
},{"../../../com/ui.js":242,"../../../com/util.js":244,"./explorer-base.js":310}],315:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);

const ExplorerBase = require(`./explorer-base.js`);

class SearchExplorer extends ExplorerBase{
    constructor(){super();}

    _Init(){
        super._Init();
    }
    

}

module.exports = SearchExplorer;
UI.Register('explorer-search', SearchExplorer);
},{"../../../com/ui.js":242,"../../../com/util.js":244,"./explorer-base.js":310}],316:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);

const ExplorerBase = require(`./explorer-base.js`);

class SettingsExplorer extends ExplorerBase{
    constructor(){super();}

    _Init(){
        super._Init();
    }
    
    //---> Rendering
/*
    _RenderStyle()
    {
        return {
            ':host':{
                position:`relative`,
                width:`100%`,
                height:`100%`,
                display:`flex`,
                flex:`0 1 auto`,
                'flex-direction':`row`,
                'align-content':`stretch`,
                'align-items':`stretch`,
                'background-color':`rgba(1,1,1,0.1)`,
            }
        };
    }
*/
    _Render()
    {   
        super._Render();     
        //var tag = this.Add(DebugTag, -1, this);
    }

    

}

module.exports = SettingsExplorer;
UI.Register('explorer-settings', SettingsExplorer);
},{"../../../com/ui.js":242,"../../../com/util.js":244,"./explorer-base.js":310}],317:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const UI = require(`../../com/ui.js`);
const { Widget } = require("../../com/ui-core/@.js");
const { InputField, INPUT_EVENT } = require("../../com/ui-controls/@.js");
const ButtonEx = require("../../com/ui-app/button-ex.js");
const { Button_HA, SmallButton_HA } = require("../../com/ui-app/buttons.js");
const { InputText } = require("../../com/ui-controls/inputs/@.js");
const { ENV, TIME } = require("../../com/@tools.js");
const GameDatabase = require("../data/game-database.js");
const { Dictionary } = require("../../com/collections/@.js");
const UserWidgetInline = require("./widgets/user-widget-inline.js");
const { Label, H2, H3 } = require("../../com/ui-app/textfields.js");
const StateDataBlock = require("../data/state-data-block.js");
const GameWidgetInline = require("./widgets/game-widget-inline.js");
const FilterControl = require("./widgets/filter-control.js");

class FiltersLanding extends Widget {
    constructor() {super();}

    _Init(){
        super._Init();

        this._filterContainer = null;
        this._filterList = new Array();

        ENV.APP._DB.Subscribe(GameDatabase.EVT_INFOS_UPDATED, this, this._OnInfosUpdated);
        ENV.APP._DB.Subscribe(GameDatabase.EVT_FILTERS_UPDATED, this, this._OnFiltersUpdated);
        

    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                'background-color':`rgba(0,0,0,0.7)`,

                display:`flex`,
                'flex-flow':`column wrap`,
                'align-items':`center`,
                'align-content':`flex-start`,
                'justify-content':`space-evenly`,

                //'backdrop-filter': `blur(5px)`,
            },
            '.wrapper':{
                //position:'relative',
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-items':`center`,
                'align-content':`center`,
                flex:`0 1 auto`,

                //width:'100%',
                'min-height':0,
                width:'250px',
                margin:'12px',

            },
            '.separator':{
                'background-color':`#000`,
                width:'100%',
                height:'1px',
                margin:'5px',
                opacity:`0.2`,
            },

            '.filterlist':{
                
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,

                width:`100%`,
                'min-height':0,
                flex:`1 1 auto`,

                'overflow-x':`hidden`,
                'overflow-y':`auto`
            },
                '.filterlist::-webkit-scrollbar-track':{
                    'background-color':`rgba(127,127,127,0.05)`,
                },
                '.filterlist::-webkit-scrollbar':{
                    width: `4px`,
                    height: `4px`,
                    'background-color': `rgba(127,127,127,0.05)`
                },
                '.filterlist::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.05)',
                },
                '.filterlist:hover::-webkit-scrollbar':{
                    width: `4px`,
                    height: `4px`,
                },
                '.filterlist:hover::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.15)',
                },
            
            '.filter':{
                flex:`1 1 auto`,
                margin:`2px`,
            }
        });
    }

    _Render()
    {

        var content = U.Element(`div`, { class:`wrapper` }, this._host);   
        //this._statusLabel = this.Add( H3, -1, content, 'label-count');   
        //this._statusLabel.text = `content filters`;

        //var line = U.Element(`div`, { class:`separator` }, content);
        this._filterContainer = U.Element(`div`, { class:`filterlist` }, content);

        this._CreateFilters();

    }

    _CreateFilters(){

        var filterList = ENV.APP._DB._enums;
        for(var i = 0, n = filterList.length; i < n; i++){
            var filter = this.Add(FilterControl, -1, this._filterContainer, 'filter');
            filter.SetControlObject(filterList[i]);
            //filter.Subscribe();
            this._filterList.push(filter);
        }

    }

    _OnFiltersUpdated(){
        for(var i = 0, n = this._filterList.length; i < n; i++){
            this._filterList[i]._Refresh();
        }
    }

    ////

    _OnGameUpdated(p_Game){

    }

    _OnInfosUpdated(){

    }

}

module.exports = FiltersLanding;
UI.Register(`filters-landing`, FiltersLanding);
},{"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/ui-app/button-ex.js":155,"../../com/ui-app/buttons.js":158,"../../com/ui-app/textfields.js":180,"../../com/ui-controls/@.js":190,"../../com/ui-controls/inputs/@.js":204,"../../com/ui-core/@.js":223,"../../com/ui.js":242,"../../com/util.js":244,"../data/game-database.js":302,"../data/state-data-block.js":303,"./widgets/filter-control.js":323,"./widgets/game-widget-inline.js":324,"./widgets/user-widget-inline.js":327}],318:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const UI = require(`../../com/ui.js`);
const { Widget } = require("../../com/ui-core/@.js");
const { InputField, INPUT_EVENT } = require("../../com/ui-controls/@.js");
const ButtonEx = require("../../com/ui-app/button-ex.js");
const { Button_HA, SmallButton_HA, SmallButtonOutline } = require("../../com/ui-app/buttons.js");
const { InputText } = require("../../com/ui-controls/inputs/@.js");
const { ENV, TIME } = require("../../com/@tools.js");
const GameDatabase = require("../data/game-database.js");
const { Dictionary } = require("../../com/collections/@.js");
const UserWidgetInline = require("./widgets/user-widget-inline.js");
const { Label, H2, H3 } = require("../../com/ui-app/textfields.js");
const StateDataBlock = require("../data/state-data-block.js");
const GameWidgetInline = require("./widgets/game-widget-inline.js");
const axios = require('axios');
const UserWidgetTemp = require("./widgets/user-widget-temp.js");

class FriendlistOverlay extends Widget {
    constructor() {super();}

    _Init(){
        super._Init();

        this._userContainer = null;
        this._closeBtn = null;
        this._userCtrls = new Array();
        this._closeFn = null;

        this._Bind(this._OnLoadRequestSuccess);
        this._Bind(this._OnLoadRequestError);        
        this._Bind(this._OnLoadRequestComplete);


    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                'background-color':`rgba(0,0,0,0.8)`,
                display:`flex`,
                'flex-flow':`column wrap`,
                'align-items':`center`,
                'align-content':`center`,
                //'justify-content':`space-evenly`,
                'backdrop-filter': `blur(5px)`,
            },
            '.header':{
                position:'relative',
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-items':`center`,
                'align-content':`center`,
                flex:`0 0 auto`,

                height:'60px'
            },
            '.wrapper':{
                position:'relative',
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-items':`center`,
                'align-content':`center`,
                flex:`1 1 auto`,

                width:'100%',
                'min-width':0,
                'min-height':0,
            },

            '.friendlist':{
                
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,

                width:`100%`,
                'min-width':0,
                flex:`0 1 auto`,

                'overflow-x':`hidden`,
                'overflow-y':`auto`,

                
            },
                '.friendlist::-webkit-scrollbar-track':{
                    'background-color':`rgba(127,127,127,0.05)`,
                },
                '.friendlist::-webkit-scrollbar':{
                    width: `8px`,
                    height: `8px`,
                    'background-color': `rgba(127,127,127,0.05)`
                },
                '.friendlist::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.05)',
                },
                '.friendlist:hover::-webkit-scrollbar':{
                    width: `8px`,
                    height: `8px`,
                },
                '.friendlist:hover::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.15)',
                },
            
            '.friend':{
                flex:`0 0 auto`,
                margin:`12px`,
                width:`270px`
            },
            '.btn':{
                'margin-top':`20px`
            },
            '.infos':{
                flex:`0 0 auto`,
                'margin-top':`35%`
            }
        });
    }

    _Render()
    {
        var content = U.Element(`div`, { class:`wrapper` }, this._host);      
        var header = U.Element(`div`, { class:`header` }, content);
        this._userContainer = U.Element(`div`, { class:`friendlist` }, content);

        this._statusLabel = this.Add( H3, -1, content, 'infos');

        this._closeBtn = this.Add(SmallButtonOutline, -1, header, 'btn');
        this._closeBtn.options = { 
            icon:`%ICON%/icon_close.svg`, text:`Close`, htitle:`Close list`,
            trigger:{thisArg:this, fn:this._Close}
        }
    }

    ////

    LoadFriends(p_profileID64){

        
        this._statusLabel.visible = true;
        this._statusLabel.text = `Loading friendlist...`;

        axios.get(`https://steamcommunity.com/profiles/${p_profileID64}/friends`, ENV.APP._axiosConfig)
        .then(this._OnLoadRequestSuccess)
        .catch(this._OnLoadRequestError)
        .then(this._OnLoadRequestComplete);

    }

    _OnLoadRequestSuccess(p_data){
        var friendSplit = p_data.data.split(`<div class="selectable friend_block_`);
        if(friendSplit.length == 0){ 
            // No friends or private friendlist
            return; 
        }

        var friendserial;
        var split;
        var profileID64, profileAvatar, profileName;
        for(var i = 0, n = friendSplit.length; i < n; i++){
            friendserial = friendSplit[i];
            try{
                profileID64 = friendserial.split(`data-steamid="`)[1].split(`"`)[0];
                profileAvatar = friendserial.split(`<div class="player_avatar`)[1].split(`<img src="`)[1].split(`"`)[0];
                profileName = friendserial.split(`<div class="friend_block_content`)[1].split(`>`)[1].split(`<`)[0];
                
                this._OnFriendAdded({  
                    profileID64:profileID64,
                    profileAvatar:profileAvatar,
                    profileName:profileName
                });

            }catch(e){  
                //console.error(e);
            }
        }

        if(this._userCtrls.length == 0){
            this._statusLabel.visible = true;
            this._statusLabel.text = `<font color="#ffce00">Either no friends or private friendlist</font>`;
        }else{
            this._statusLabel.visible = false;
        }

    }

    _OnLoadRequestError(p_err){
        if(p_err.response && p_err.response.status == 429){ ENV.APP._429(); }
        this._statusLabel.text = `<font color="#ffce00">Either no friends or private friendlist</font>`;
    }

    _OnLoadRequestComplete(){
        
    }

    //
    
    _OnFriendAdded(p_obj){
        var friend = this.Add(UserWidgetTemp, -1, this._userContainer, 'friend');
        friend.Fill(p_obj);
        this._userCtrls.push(friend);
    }

    _Close(){
        for(var i = 0, n = this._userCtrls.length; i < n; i++){
            this._userCtrls[i].Release();
        }
        this._userCtrls.length = 0;
        this._closeFn();
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = FriendlistOverlay;
UI.Register(`friendlist-overlay`, FriendlistOverlay);
},{"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/ui-app/button-ex.js":155,"../../com/ui-app/buttons.js":158,"../../com/ui-app/textfields.js":180,"../../com/ui-controls/@.js":190,"../../com/ui-controls/inputs/@.js":204,"../../com/ui-core/@.js":223,"../../com/ui.js":242,"../../com/util.js":244,"../data/game-database.js":302,"../data/state-data-block.js":303,"./widgets/game-widget-inline.js":324,"./widgets/user-widget-inline.js":327,"./widgets/user-widget-temp.js":328,"axios":330}],319:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const UI = require(`../../com/ui.js`);
const { Widget } = require("../../com/ui-core/@.js");
const { InputField, INPUT_EVENT } = require("../../com/ui-controls/@.js");
const ButtonEx = require("../../com/ui-app/button-ex.js");
const { Button_HA, SmallButton_HA } = require("../../com/ui-app/buttons.js");
const { InputText } = require("../../com/ui-controls/inputs/@.js");
const { ENV, TIME } = require("../../com/@tools.js");
const GameDatabase = require("../data/game-database.js");
const { Dictionary } = require("../../com/collections/@.js");
const UserWidgetInline = require("./widgets/user-widget-inline.js");
const { Label, H2 } = require("../../com/ui-app/textfields.js");
const StateDataBlock = require("../data/state-data-block.js");
const GameWidgetInline = require("./widgets/game-widget-inline.js");

class GameLanding extends Widget {
    constructor() {super();}

    _Init(){
        super._Init();

        this._gameContainer = null;
        this._gamemap = new Dictionary();
        this._gamectrls = new Array();

        ENV.APP._DB.Subscribe(GameDatabase.EVT_GAME_READY, this, this._OnGameAdded);
        ENV.APP._DB.Subscribe(GameDatabase.EVT_GAME_UPDATED, this, this._OnGameUpdated);
        ENV.APP._DB.Subscribe(GameDatabase.EVT_INFOS_UPDATED, this, this._OnInfosUpdated);

    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                'background-color':`rgba(0,0,0,0.55)`,
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`center`,
                'align-content':`center`,
                'justify-content':`space-evenly`,
            },
            '.wrapper':{
                //position:'relative',
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-items':`center`,
                'align-content':`center`,
                flex:`1 1 auto`,

                width:'100%',
                height:'100%'
            },

            '.gamelist':{
                
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,

                width:`100%`,
                flex:`1 1 auto`,

                'overflow-x':`hidden`,
                'overflow-y':`auto`
            },
                '.gamelist::-webkit-scrollbar-track':{
                    'background-color':`rgba(127,127,127,0.05)`,
                },
                '.gamelist::-webkit-scrollbar':{
                    width: `8px`,
                    height: `8px`,
                    'background-color': `rgba(127,127,127,0.05)`
                },
                '.gamelist::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.05)',
                },
                '.gamelist:hover::-webkit-scrollbar':{
                    width: `8px`,
                    height: `8px`,
                },
                '.gamelist:hover::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.15)',
                },
            
            '.game':{
                flex:`0 0 auto`,
                margin:`12px`
            }
        });
    }

    _Render()
    {

        var content = U.Element(`div`, { class:`wrapper` }, this._host);      
        this._gameContainer = U.Element(`div`, { class:`gamelist` }, content);

    }

    ////

    
    _OnGameAdded(p_game){
        var ctrl = this._gamemap.Get(p_game);
        if(ctrl){return;}
        ctrl = this.Add(GameWidgetInline, -1, this._gameContainer, 'game');
        this._gamemap.Set(p_game, ctrl);
        this._gamectrls.push(ctrl);
        ctrl.data = p_game;
    }

    _OnGameRemoved(p_game){
        var ctrl = this._gamemap.Get(p_game);
        if(!ctrl){return;}
        this._gamemap.Remove(p_game);
        this._gamectrls.splice(this._gamectrls.indexOf(ctrl), 1);
        ctrl.Release();
    }

    ////

    _OnGameUpdated(p_Game){

    }

    _OnInfosUpdated(){
        
        if(ENV.APP._DB._userMap.count == 0){
            for(var i = 0, n = this._gamectrls.length; i < n; i++){
                this._gamectrls[i].visible = false;
            }
        }else{
            var ctrl;
            for(var i = 0, n = this._gamectrls.length; i < n; i++){
                ctrl = this._gamectrls[i];
                ctrl.visible = ctrl.data.shouldShow;
            }
        }
        
    }

}

module.exports = GameLanding;
UI.Register(`game-landing`, GameLanding);
},{"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/ui-app/button-ex.js":155,"../../com/ui-app/buttons.js":158,"../../com/ui-app/textfields.js":180,"../../com/ui-controls/@.js":190,"../../com/ui-controls/inputs/@.js":204,"../../com/ui-core/@.js":223,"../../com/ui.js":242,"../../com/util.js":244,"../data/game-database.js":302,"../data/state-data-block.js":303,"./widgets/game-widget-inline.js":324,"./widgets/user-widget-inline.js":327}],320:[function(require,module,exports){
'use strict';

const { U } = require(`../../com/@.js`);
const { CSS, Widget } = require(`../../com/ui-core/@.js`);
const { DrawerControls, Drawer, LargeToolButton } = require(`../../com/ui-app/@.js`);
const UI = require(`../../com/ui.js`);

class MainAppDrawerControls extends DrawerControls{
    constructor() {super();}

    _Init(){
        super._Init();
        this._defaultControlClass = LargeToolButton;
        this._settingsBtn = null;
    }

    _PostInit(){
        super._PostInit();

        //Request SETTINGS button from toolbar
        this._settingsBtn = this._toolbar.CreateHandle({
            icon:`%ICON%/icon_settings.svg`, text:`Settings`,
            trigger:{ thisArg:this, fn:this._OpenSettings},
            //request:{}
        }, LargeToolButton);
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(), {

        });
    }

    _OpenSettings(){
        console.log(`Open Settings`);
    }

} 

class MainAppDrawer extends Drawer {
    constructor() {super();}

    _Init(){
        super._Init();
        this._controlsClass = MainAppDrawerControls;
    }

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                width:`354px`,
                flex:`0 0 auto`,
            },
        });
    }

}

module.exports = {
    MainAppDrawerControls : MainAppDrawerControls,
    MainAppDrawer : MainAppDrawer
};

UI.RegisterGroup({
    'main-app-drawer-controls':MainAppDrawerControls,
    'main-app-drawer':MainAppDrawer,
});
},{"../../com/@.js":6,"../../com/ui-app/@.js":149,"../../com/ui-core/@.js":223,"../../com/ui.js":242}],321:[function(require,module,exports){
'use strict';

const { U, APP_REQUEST } = require(`../../com/@.js`);
const { CatalogItem } = require(`../../com/collections/@.js`);
const { CSS, Widget } = require(`../../com/ui-core/@.js`);
const { RootWorkspace } = require(`../../com/ui-app/@.js`);
const { DEFAULT_EDITOR, DEFAULT_IP_EDITOR } = require(`../../com/environment/keys.js`);
const UI = require(`../../com/ui.js`);
const RELAY = require(`../../com/relay.js`);
const AssocManager = require(`../../com/environment/assoc-manager.js`);
const UserLanding = require("./user-landing.js");
const GameLanding = require("./game-landing.js");
const FiltersLanding = require("./filters-landing.js");
const FriendlistOverlay = require("./friendlist-overlay.js");

class MainWorkspace extends Widget{
    
    constructor() {super(); }

    //---> Init

    _Init(){
        super._Init();
        
        this._Bind(this._InitSearch);
        this._Bind(this._CloseFriends);
        this._Bind(this._RequestFriendOverlay);

        this._landingForm = null;
        this._landingGames = null;
        this._landingFilters = null;
        this._friendOverlay = null;

    }

    _PostInit(){
        super._PostInit();
    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                //'background-color':`#000`
                display:'flex',
                'flex-flow':`row nowrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,

                'background-size': `cover`,
                'background-position': `center`,
                'background-image':`url(img/bg.png)`,
                zoom:`0.815`
            },
            '.overlay':{
                position:`absolute`,
                width:`100%`, height:`100%`
            },
            '.panel':{
                flex:`0 0 auto`,

                display:'flex',
                'flex-flow':`column nowrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
            },
            '.main-content':{
                flex:`1 1 auto`
            },
            '.side-content':{
                //position:'absolute',
                flex:`1 1 auto`,
                'min-height':0
            },
            '.users':{
                flex:`1 1 auto`,
            },
            '.filters':{
                flex:`0 0 auto`,
            }
        });
    }

    _Render(){
                
        this._panel = U.Element('div', {class:'panel'}, this._host);

        this._landingForm = this.Add(UserLanding, -1, this._panel, 'side-content users');
        this._landingForm._submitCallback = this._InitSearch;
        this._landingForm._friendsCallback = this._RequestFriendOverlay;

        this._landingFilters = this.Add(FiltersLanding, -1, this._panel, 'side-content filters');

        this._landingGames = this.Add(GameLanding, -1, this._host, 'main-content');


        //this._RequestFriendOverlay(`76561197970839736`);

    }

    _RequestFriendOverlay( p_profileID64 ){
        if(!this._friendOverlay){
            this._friendOverlay = this.Add(FriendlistOverlay, -1, this._host, 'overlay');
        }
        this._friendOverlay._closeFn = this._CloseFriends;
        this._friendOverlay.LoadFriends(p_profileID64);
    }

    _CloseFriends(){
        if(this._friendOverlay){ this._friendOverlay.Release(); }
        this._friendOverlay = null;
    }

    _InitSearch(){
        this._landingForm.visible = false;
    }

}

module.exports = MainWorkspace;
UI.Register(`main-workspace`, MainWorkspace);
},{"../../com/@.js":6,"../../com/collections/@.js":22,"../../com/environment/assoc-manager.js":96,"../../com/environment/keys.js":98,"../../com/relay.js":122,"../../com/ui-app/@.js":149,"../../com/ui-core/@.js":223,"../../com/ui.js":242,"./filters-landing.js":317,"./friendlist-overlay.js":318,"./game-landing.js":319,"./user-landing.js":322}],322:[function(require,module,exports){
'use strict';

const U = require(`../../com/util.js`);
const UI = require(`../../com/ui.js`);
const { Widget, Textfield } = require("../../com/ui-core/@.js");
const { InputField, INPUT_EVENT } = require("../../com/ui-controls/@.js");
const ButtonEx = require("../../com/ui-app/button-ex.js");
const { Button_HA, SmallButton_HA, SmallButtonOutline_HA, SmallButtonOutline } = require("../../com/ui-app/buttons.js");
const { InputText } = require("../../com/ui-controls/inputs/@.js");
const { ENV } = require("../../com/@tools.js");
const GameDatabase = require("../data/game-database.js");
const { Dictionary } = require("../../com/collections/@.js");
const UserWidgetInline = require("./widgets/user-widget-inline.js");
const { Label, H2, H3, H4 } = require("../../com/ui-app/textfields.js");
const StateDataBlock = require("../data/state-data-block.js");

class UserLanding extends Widget {
    constructor() {super();}

    _Init(){
        super._Init();

        this._inputField = null;
        this._userContainer = null;
        this._statusLabel = null;

        this._newUserBtn = null;
        this._copyUserListBtn = null;
        this._submitBtn = null;
        this._infos = null;

        this._usermap = new Dictionary();

        this._submitCallback = null;
        this._friendsCallback = null;

        ENV.APP._DB.Subscribe(GameDatabase.EVT_USER_ADDED, this, this._OnUserAdded);
        ENV.APP._DB.Subscribe(GameDatabase.EVT_USER_REMOVED, this, this._OnUserRemoved);
        ENV.APP._DB.Subscribe(GameDatabase.EVT_USER_UPDATED, this, this._OnUserUpdated);
        ENV.APP._DB.Subscribe(GameDatabase.EVT_INFOS_UPDATED, this, this._OnInfosUpdated);

        this._Bind(this._LoadStoredUserList);

    }

    _PostInit(){
        super._PostInit();
        try{chrome.storage.sync.get(['userlist'], this._LoadStoredUserList);}catch(e){}
    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                'background-color':`rgba(0,0,0,0.8)`,

                display:`flex`,
                'flex-flow':`column wrap`,
                'align-items':`center`,
                'align-content':`flex-start`,
                'justify-content':`space-evenly`,

                //'backdrop-filter': `blur(5px)`,
            },
            '.wrapper':{
                //position:'relative',
                display:`flex`,
                'flex-flow':`column nowrap`,
                'align-items':`center`,
                'align-content':`center`,
                flex:`0 1 auto`,

                //width:'100%',
                'min-height':0,
                width:'250px',
                margin:'12px',
            },
            '.separator':{
                'background-color':`#000`,
                width:'100%',
                height:'1px',
                margin:'10px',
                opacity:`0.2`,
            },
            '.header':{
                width:`100%`,
                flex:`1 1 auto`,
                padding:`5px`
            },
            '.addBlock':{
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                width:`100%`,
                flex:`1 1 auto`,

                'border-radius': `5px`,
                'background-color':`rgba(40,40,40,0.9)`,
                padding:`5px`,
            },
            '.ifield':{
                flex:`1 1 auto`
            },
            '.newBtn':{
                flex:`0 1 auto`
            },
            '.copyBtn':{
                flex:`0 1 auto`,
                //height:`90%`,
                zoom:0.75
            },
            '.submitBtn':{
                'min-width':`85%`,
                flex:`1 1 auto`
            },

            '.userlist':{
                
                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,

                width:`100%`,
                'min-height':0,
                flex:`1 1 auto`,

                'overflow-x':`hidden`,
                'overflow-y':`auto`
            },
                '.userlist::-webkit-scrollbar-track':{
                    'background-color':`rgba(127,127,127,0.05)`,
                },
                '.userlist::-webkit-scrollbar':{
                    width: `4px`,
                    height: `4px`,
                    'background-color': `rgba(127,127,127,0.05)`
                },
                '.userlist::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.05)',
                },
                '.userlist:hover::-webkit-scrollbar':{
                    width: `4px`,
                    height: `4px`,
                },
                '.userlist:hover::-webkit-scrollbar-thumb':{
                    'background-color': 'rgba(255,255,255,0.15)',
                },
            
                '.user':{
                    'min-width':`50%`,
                    flex:`1 1 auto`,
                    'margin-bottom':`2px`,
                }
        });
    }

    _Render()
    {

        var content = U.Element(`div`, { class:`wrapper` }, this._host);

        var header = U.Element(`div`, { class:`header` }, content);
        var addBlock = U.Element(`div`, { class:`addBlock` }, content);

        //var inputLabel = U.Element(`text-label`, {}, header);
        this._inputField = this.Add(InputText, -1, addBlock, `ifield`);
        this._inputField.Subscribe(INPUT_EVENT.VALUE_SUBMITTED, this, this._OnInputSubmit);
        this._inputField.placeholderValue = `UserID, profile url, ...`;

        this._newUserBtn = this.Add(SmallButton_HA, -1, addBlock, 'newBtn');
        this._newUserBtn.options = { 
            icon:`%ICON%/icon_plus.svg`, htitle:`Add user`,
            trigger:{thisArg:this, fn:this._CreateNewFromInputValue}
        }

        this._copyUserListBtn = this.Add(SmallButtonOutline, -1, addBlock, 'copyBtn');
        this._copyUserListBtn.options = { 
            icon:`%ICON%/icon_code.svg`, htitle:`Copy list of user to clipboard to share it`,
            trigger:{thisArg:this, fn:this._CopyUsersToClipboard}
        }

        var line = U.Element(`div`, { class:`separator` }, content);
        this._infos = U.Element(`div`, { class:`infos` }, content);
        this._userContainer = U.Element(`div`, { class:`userlist` }, content);
        var line = U.Element(`div`, { class:`separator` }, content);

        this._subStatusLabel = this.Add( Textfield, -1, content, 'label-count');
        this._statusLabel = this.Add( H3, -1, content, 'label-count');

        this._submitBtn = this.Add(Button_HA, -1, content, 'submitBtn');
        this._submitBtn.options = { 
            icon:`%ICON%/icon_search.svg`, htitle:`Fetch shared games`,
            trigger:{thisArg:this, fn:this._InitSearch}
        }
        this._submitBtn.visible = false;

        //inputLabel.text = `Steam player ID (?)`;

    }

    ////

    
    _OnUserAdded(p_user){
        var ctrl = this._usermap.Get(p_user);
        if(ctrl){return;}
        ctrl = this.Add(UserWidgetInline, -1, this._userContainer, 'user');
        ctrl.data = p_user;
        ctrl._friendsCallback = this._friendsCallback;
        this._usermap.Set(p_user, ctrl);
    }

    _OnUserRemoved(p_user){
        var ctrl = this._usermap.Get(p_user);
        if(!ctrl){return;}
        this._usermap.Remove(p_user);
        ctrl.Release();
    }

    _OnUserUpdated(p_user){
        this._OnInfosUpdated();
    }

    ////

    _OnInfosUpdated(){

        var statusText = `Add some users to start !`;
        var substatus = ``;
        this._submitBtn.visible = false;

        switch(ENV.APP._DB._userStatuses){

            case StateDataBlock.STATE_NONE:
            case StateDataBlock.STATE_INVALID:
                statusText = `Need some more valid profiles...`;
                break;
            case StateDataBlock.STATE_LOADING:
                statusText = `Loading...`;
                break;
            case StateDataBlock.STATE_READY:

                var l = ENV.APP._DB._currentOverlap.length;                
                substatus = `${l} products in common`;
                
                var m = ENV.APP._DB._filteredCount;
                if(m > 0){ statusText = `${m} games matches filters`; }
                else{ statusText = `0 games matches filters`; }                

                //this._submitBtn.visible = (l != 0);
                break;
            case StateDataBlock.STATE_INVALID:
                statusText = `Something went wrong`;
                break;

        }

        if(ENV.APP._DB._userMap.count == 0){
            statusText = `Add users here`;
        }

        this._subStatusLabel.text = substatus;
        this._statusLabel.text = statusText;

    }

    ////

    _OnInputSubmit(p_field, p_value){
        this._inputField.currentValue = p_value;
    }

    _CreateNewFromInputValue(){

        try{
            
            var playerid = this._inputField.currentValue;

            if(this._ReadJSONList(playerid)){
                this._inputField.currentValue = ``;
                return;
            }

            if(playerid == ``){ return; }

            if(playerid.includes(`.com/profiles`)){
                playerid = playerid.split(`.com/profiles/`)[1];
                var fs = playerid.split(`/`);
                if(fs.length >1){ playerid = fs[0]; }
            }else if(playerid.includes(`.com/id`)){
                playerid = playerid.split(`.com/id/`)[1];
                var fs = playerid.split(`/`);
                if(fs.length >1){ playerid = fs[0]; }
            }

            if(playerid == ``){ return; }

            
            ENV.APP._DB.GetUser(playerid);
            this._inputField.currentValue = ``;

        }catch(e){
            this._inputField.currentValue = ``;
        }
    }

    
    _InitSearch(){
        //window.open("steam://url/SteamIDMyProfile");
        this._submitCallback.call();
    }
    
    _LoadStoredUserList(result){
        if(result.userlist != ``){
            this._ReadJSONList(result.userlist);
        }
    }

    _ReadJSONList(p_json){
        try{
            var uList = JSON.parse(p_json);
            if(!Array.isArray(uList)){ return false; }
            for(var i = 0, n = uList.length; i < n; i++){
                if(uList[i].id == ``){ continue; }
                ENV.APP._DB.GetUser(uList[i].id, uList[i].active);
            }
            return true;
        }catch(e){
            return false;
        }
    }

    //

    _CopyUsersToClipboard(){
        navigator.clipboard.writeText(ENV.APP._DB._GetUserJSONData());
    }

}

module.exports = UserLanding;
UI.Register(`user-landing`, UserLanding);
},{"../../com/@tools.js":7,"../../com/collections/@.js":22,"../../com/ui-app/button-ex.js":155,"../../com/ui-app/buttons.js":158,"../../com/ui-app/textfields.js":180,"../../com/ui-controls/@.js":190,"../../com/ui-controls/inputs/@.js":204,"../../com/ui-core/@.js":223,"../../com/ui.js":242,"../../com/util.js":244,"../data/game-database.js":302,"../data/state-data-block.js":303,"./widgets/user-widget-inline.js":327}],323:[function(require,module,exports){
'use strict';

const { U, C } = require("../../../com/@.js");
const { UI, ENV, TIME } = require("../../../com/@tools.js");
const { Icon, SmallButtonOutline } = require("../../../com/ui-app/@.js");
const { SmallButton_HA, SmallButton_ERR } = require("../../../com/ui-app/buttons.js");
const { H3, Label } = require("../../../com/ui-app/textfields.js");
const { INPUT_EVENT } = require("../../../com/ui-controls/@.js");
const InputBoolean = require("../../../com/ui-controls/inputs/input-boolean.js");
const { Textfield, Widget } = require("../../../com/ui-core/@.js");
const StateDataBlock = require("../../data/state-data-block.js");
const ToggleControlBase = require("./toggle-control-base.js");
const UserWidgetBase = require("./user-widget-base.js");

class FilterControl extends ToggleControlBase {
    constructor() {super();}


    _Init(){
        super._Init();

        this._label = null;
        this._toggle = null;
    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
               //'background-color':`rgba(127,127,127,0.1)`,

               padding:'6px',
               display:'flex',
               'flex-flow':`row nowrap`,
               'align-items':`stretch`,
               'align-content':`flex-start`,
               
               //'backdrop-filter': `blur(5px)`,
               'border-radius': `3px`,
               zoom:`0.8`
            },
            ':host(.toggled)':{
                'background-color':`rgba(${C.COLORS.main},0.25)`,
             },
            '.label':{
                flex:`1 1 auto`,
                'min-width':0,
                'margin-left':`8px`
            },
            '.toggle':{
                flex:`0 0 auto`
            }
        });
    }

    _Render()
    {
        this.RegisterClassToggle(this, 'toggled');

        this._toggle = this.Add(InputBoolean, -1, this._host, 'toggle');
        this._label = this.Add(Textfield, -1, this._host, 'label');
        this._label.ellipsis = true;
        
        this._toggle.Subscribe(INPUT_EVENT.VALUE_CHANGED, this, this._OnToggle);
    }

    _Refresh(){
        super._Refresh();
        this._label.text = this._ctrlObj.id;
        this._toggle.currentValue = this._ctrlObj.flag;
        this.ToggleCSSFlag('toggled', this._ctrlObj.flag);
        console.log(`${this._ctrlObj.key} == ${this._ctrlObj.flag}`)
    }

    _OnToggle(p_obj, p_value){
        this._toggle.currentValue = p_value;
        this._ctrlObj.flag = p_value;
        this._Refresh();
        ENV.APP._DB._UpdateFilters();
    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = FilterControl;
UI.Register(`filter-control`, FilterControl);
},{"../../../com/@.js":6,"../../../com/@tools.js":7,"../../../com/ui-app/@.js":149,"../../../com/ui-app/buttons.js":158,"../../../com/ui-app/textfields.js":180,"../../../com/ui-controls/@.js":190,"../../../com/ui-controls/inputs/input-boolean.js":205,"../../../com/ui-core/@.js":223,"../../data/state-data-block.js":303,"./toggle-control-base.js":325,"./user-widget-base.js":326}],324:[function(require,module,exports){
'use strict';

const { U } = require("../../../com/@.js");
const { UI, ENV } = require("../../../com/@tools.js");
const { Icon, SmallButtonOutline } = require("../../../com/ui-app/@.js");
const { SmallButton_HA, SmallButton_ERR } = require("../../../com/ui-app/buttons.js");
const { H3, Label } = require("../../../com/ui-app/textfields.js");
const { Textfield, Widget } = require("../../../com/ui-core/@.js");
const StateDataBlock = require("../../data/state-data-block.js");
const UserWidgetBase = require("./user-widget-base.js");

class GameWidgetInline extends Widget {
    constructor() {super();}


    _Init(){
        super._Init();

        this._img = null;
        this._frame = null;
        this._launchBtn = null;
        this._blobURL = "";

        this._Bind(this._OnThumbBlobLoaded);

    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                margin:'6px',
                width:`150px`,//`460px`,//`184px`,
                height:`225px`, //`215px`,//`69px`,
                'border-radius': `5px`,

                'background-size': `cover`,
                'background-position': `center`,

                display:`flex`,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`stretch`,
                'justify-content':`space-evenly`,
            },
            '.thumb':{
                flex:`1 1 auto`,
                'width':`100%`,
                'height':`100%`,
                
            },
            '.launchBtn':{
                flex:`1 1 auto`,
                opacity:0,
                //'width':`100%`,
                //'height':`100%`,
            },
            '.launchBtn:hover':{
                opacity:1,
            },
            '.frame':{
                position:`absolute`,
                width:`1px`, height:`1px`,
                opacity:'0'
            }
        });
    }

    _Render()
    {
        //this._img = U.Element(`div`, {class:`thumb`}, this._wrapper);
        this._frame = U.Element(`div`, {class:`frame`}, this._wrapper);

        this._launchBtn = this.Add(SmallButton_HA, -1, this._host, 'launchBtn');
        this._launchBtn.options = { 
            icon:`%ICON%/icon_cmd.svg`, htitle:`Launch`,
            trigger:{thisArg:this, fn:this._Launch}
        }

        this.focusArea = this._img;
    }

    _OnDataUpdated(p_data){

        super._OnDataUpdated(p_data);
        
        this.setAttribute(`title`, p_data._name);
        this._launchBtn.htitle = `Launch ${p_data._name}`;

        if(p_data.logo != `` && this._blobURL == ``){
            this._blobURL = `https://steamcdn-a.akamaihd.net/steam/apps/${p_data.appid}/library_600x900_2x.jpg`; //header.jpg`;//p_data.logo;
            this._LoadGameIcon();
        }

    }

    _LoadGameIcon(){
        var xhr = new XMLHttpRequest();
        xhr.open('get', this._blobURL, true);
        xhr.responseType = 'blob';
        xhr.onload = this._OnThumbBlobLoaded;
        xhr.send(); 
    }

    _Launch(p_alt){
        var url = `steam://run/${this._data.appid}/`;
        if(ENV.NODE){
            this._frame.innerHTML = `<iframe src="${url}" width="1px" height="1px">`;
        }else{
            window.open(url);
        }
    }

    _OnThumbBlobLoaded(evt){
        try{
            this.style.backgroundImage = `url(${URL.createObjectURL(evt.srcElement.response)})`;
        }catch(e){}
    }

    _CleanUp(){
        this._blobURL = "";
        super._CleanUp();
    }

}

module.exports = GameWidgetInline;
UI.Register(`game-widget-inline`, GameWidgetInline);
},{"../../../com/@.js":6,"../../../com/@tools.js":7,"../../../com/ui-app/@.js":149,"../../../com/ui-app/buttons.js":158,"../../../com/ui-app/textfields.js":180,"../../../com/ui-core/@.js":223,"../../data/state-data-block.js":303,"./user-widget-base.js":326}],325:[function(require,module,exports){
'use strict';

const { U } = require("../../../com/@.js");
const { UI, ENV } = require("../../../com/@tools.js");
const { Icon, SmallButtonOutline } = require("../../../com/ui-app/@.js");
const { SmallButton_HA, SmallButton_ERR } = require("../../../com/ui-app/buttons.js");
const { H3, Label } = require("../../../com/ui-app/textfields.js");
const { Textfield, Widget } = require("../../../com/ui-core/@.js");
const StateDataBlock = require("../../data/state-data-block.js");
const UserWidgetBase = require("./user-widget-base.js");

class ToggleControlBase extends Widget {
    constructor() {super();}

    static get EVT_TOGGLE(){ return `control-toggled`; }

    _Init(){
        super._Init();

        this._ctrlObj = null;
    }

    //---> Rendering

    SetControlObject(p_obj){
        this._ctrlObj = p_obj;
        this._Refresh();
    }

    _Refresh(){

    }

    _CleanUp(){
        super._CleanUp();
    }

}

module.exports = ToggleControlBase;
UI.Register(`toggle-control-base`, ToggleControlBase);
},{"../../../com/@.js":6,"../../../com/@tools.js":7,"../../../com/ui-app/@.js":149,"../../../com/ui-app/buttons.js":158,"../../../com/ui-app/textfields.js":180,"../../../com/ui-core/@.js":223,"../../data/state-data-block.js":303,"./user-widget-base.js":326}],326:[function(require,module,exports){
'use strict';

const U = require(`../../../com/util.js`);
const UI = require(`../../../com/ui.js`);
const Widget = require(`../../../com/ui-core/widget.js`);

class UserWidgetBase extends Widget {
    constructor() {super();}

    //---> Rendering

    _Render()
    {

        var content = U.Element(`ul`, { class:`list-group` });
        var item = U.Element(`li`, { class:`list-group-item` });
        var tf = U.Element(`text-h1`);
        
        item.appendChild(tf);
        content.appendChild(item);

        tf.text = "Lorem ipsum, dolor si amet in prescipto pacta.";

        return content;

    }

    



}

module.exports = UserWidgetBase;
UI.Register(`user-widget-base`, UserWidgetBase);
},{"../../../com/ui-core/widget.js":241,"../../../com/ui.js":242,"../../../com/util.js":244}],327:[function(require,module,exports){
'use strict';

const { U } = require("../../../com/@.js");
const { UI } = require("../../../com/@tools.js");
const { Icon, SmallButtonOutline } = require("../../../com/ui-app/@.js");
const { INPUT_EVENT } = require("../../../com/ui-controls/@.js");
const InputBoolean = require("../../../com/ui-controls/inputs/input-boolean.js");
const { SmallButton_HA, SmallButton_ERR } = require("../../../com/ui-app/buttons.js");
const { H3, Label } = require("../../../com/ui-app/textfields.js");
const { Textfield } = require("../../../com/ui-core/@.js");
const StateDataBlock = require("../../data/state-data-block.js");
const UserWidgetBase = require("./user-widget-base.js");

class UserWidgetInline extends UserWidgetBase {
    constructor() {super();}


    _Init(){
        super._Init();

        this._userid_tf = null;
        this._status_tf = null;
        this._deleteBtn = null;
        this._hideBtn = null;
        this._showFriendsBtn = null;
        this._blobURL = "";
        this._friendsCallback = null;

        this._Bind(this._OnAvatarBlobLoaded);

    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                
                //'background-color':`rgba(127,127,127,0.1)`,

                padding:'12px',
                display:'flex',
                'flex-flow':`row nowrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                
                //'backdrop-filter': `blur(5px)`,
                'border-radius': `5px`,
            },
            ':host(.hidden)':{
                opacity:0.5
            },
            ':host(.hidden:hover)':{
                opacity:1
            },
            '.icon':{
                width:`52px`, height:`52px`,                
                'background-size': `cover`,
                'background-position': `center`,
                'background-position': `no-repeat`,
                flex:`0 0 auto`,
            },
            '.labels':{
                display:`flex`,
                'min-width': 0,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                flex:`1 1 auto`,
            },
            '.label':{
                'margin-left':`12px`,
                'min-width': 0,
                'max-width': `85%`,
                flex:`0 1 auto`
            },
            '.title':{
                width:`100%`
            },
            '.subtitle':{
                //'margin-left':`2px`,
                'margin-top':`2px`,
            },
            '.btCtnr':{
                width:`28px`, height:`52px`,
                display:'flex',
                'flex-flow':`column nowrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                'justify-content':`space-between`,
                flex:`0 0 auto`
            },
            '.btn':{
                flex:`0 0 auto`,
                width:`100%`
            },
            '.toggleBtn':{
                
            },
            '.deleteBtn':{
                zoom:0.6
                //flex:`0 0 auto`
            },
            '.friendsBtn':{
                position:`absolute`,
                width:`48px`, height:`48px`,
                opacity:0
            }
        });
    }

    _Render()
    {
        
        this._usericon = U.Element(`div`, { class:`icon` }, this._host ); //this.Add(Icon, -1, this._host, 'icon');
        var ctnr = U.Element(`div`, { class:`labels` }, this._host );
        this._userid_tf = this.Add(H3, -1, ctnr, 'label title');
        this._userid_tf.ellipsis = true;        

        this._status_tf = this.Add(Label, -1, ctnr, 'label subtitle');

        var btnCtnr = U.Element(`div`, { class:`btCtnr` }, this._host);
        
        this._deleteBtn = this.Add(SmallButtonOutline, -1, btnCtnr, 'btn deleteBtn');
        this._deleteBtn.options = { 
            icon:`%ICON%/icon_close.svg`, htitle:`Delete`,
            trigger:{thisArg:this, fn:this._DeleteProfile}
        }

        this._hideBtn = this.Add(InputBoolean, -1, btnCtnr, 'btn toggleBtn');
        this._hideBtn.htitle = `show/hide`;
        this._hideBtn.visible = false;
        this._hideBtn.Subscribe(INPUT_EVENT.VALUE_CHANGED, this, this._OnToggle);

        this._showFriendsBtn = this.Add(SmallButtonOutline, -1, this._host, 'friendsBtn');
        this._showFriendsBtn.options = { 
            icon:`%ICON%/icon_cmd.svg`, htitle:`Show friends`,
            trigger:{thisArg:this, fn:this._ShowFriends}
        }
        this._showFriendsBtn = false;
        
        this.RegisterClassToggle(this,`hidden`);
        this.ToggleCSSFlag(`hidden`, true);

    }

    _OnDataUpdated(p_data){
        super._OnDataUpdated(p_data);
        this._userid_tf.text = p_data._personaID;
        //this._usericon.Set(`blob:${p_data._avatarURL}`);

        if(p_data._avatarURL != `` && this._blobURL == ``){
            this._blobURL = p_data._avatarURL;
            this._LoadUserIcon();
        }
        
        var statusText = `...`;
        var validProfile = false;

        switch(p_data.state){
            case StateDataBlock.STATE_NONE:
                break;
            case StateDataBlock.STATE_LOADING:
                statusText = `<font color="#3ec188">loading...</font>`;
                break;
            case StateDataBlock.STATE_READY:
                if(p_data._gameList.count == 0 || p_data._limitedAccount == `1` || p_data._privacy != `public`){
                    statusText = `<font color="#ffce00">Private profile</font>`;
                }else{statusText = `${p_data.gamesCount} products`; validProfile = true;}
                break;
            case StateDataBlock.STATE_INVALID:
                if(p_data._privacy != `` && p_data._privacy != `public`){
                    statusText = `<font color="#ffce00">Private profile</font>`;
                }else{statusText = `<font color="#ff764a">No data</font>`;}
                
                break;
        }

        this.ToggleCSSFlag(`hidden`, !validProfile);
        
        this._hideBtn.visible = validProfile;
        this._hideBtn.currentValue = p_data.active;

        if(!validProfile || !p_data.active){ this.ToggleCSSFlag(`hidden`, true); }
        else{ this.ToggleCSSFlag(`hidden`, false); }

        this._showFriendsBtn = validProfile;
        this._status_tf.text = statusText;

    }

    _LoadUserIcon(){
        var xhr = new XMLHttpRequest();
        xhr.open('get', this._blobURL, true);
        xhr.responseType = 'blob';
        xhr.onload = this._OnAvatarBlobLoaded;
        xhr.send(); 
    }

    _OnAvatarBlobLoaded(evt){
        try{
            this._usericon.style.backgroundImage = `url(${URL.createObjectURL(evt.srcElement.response)})`;
        }catch(e){}
    }


    _ShowFriends(){
        this._friendsCallback(this._data.profileID64);
    }

    _DeleteProfile(){
        this.data.Release();
    }

    _OnToggle(p_obj, p_value){
        //this._toggle.currentValue = p_value;
        this._data.active = p_value;
    }

    _CleanUp(){
        this._blobURL = "";
        this._usericon.style.backgroundImage = `url()`;
        this._showFriendsBtn = false;
        this._hideBtn.visible = false;
        super._CleanUp();
    }

}

module.exports = UserWidgetInline;
UI.Register(`user-widget-inline`, UserWidgetInline);
},{"../../../com/@.js":6,"../../../com/@tools.js":7,"../../../com/ui-app/@.js":149,"../../../com/ui-app/buttons.js":158,"../../../com/ui-app/textfields.js":180,"../../../com/ui-controls/@.js":190,"../../../com/ui-controls/inputs/input-boolean.js":205,"../../../com/ui-core/@.js":223,"../../data/state-data-block.js":303,"./user-widget-base.js":326}],328:[function(require,module,exports){
'use strict';

const { C, U } = require("../../../com/@.js");
const { UI, ENV } = require("../../../com/@tools.js");
const { Icon, SmallButtonOutline } = require("../../../com/ui-app/@.js");
const { INPUT_EVENT } = require("../../../com/ui-controls/@.js");
const InputBoolean = require("../../../com/ui-controls/inputs/input-boolean.js");
const { SmallButton_HA, SmallButton_ERR } = require("../../../com/ui-app/buttons.js");
const { H3, Label } = require("../../../com/ui-app/textfields.js");
const { Textfield } = require("../../../com/ui-core/@.js");
const StateDataBlock = require("../../data/state-data-block.js");
const UserWidgetBase = require("./user-widget-base.js");

class UserWidgetTemp extends UserWidgetBase {
    constructor() {super();}


    _Init(){
        super._Init();

        this._userid_tf = null;
        this._addBtn = null;
        this._delBtn = null;
        this._showFriendsBtn = null;
        this._blobURL = "";
        this._profileID64 = ``;
        this._prof = null;

        this._Bind(this._OnAvatarBlobLoaded);
        

    }

    //---> Rendering

    _RenderStyle(){
        return U.Merge(super._RenderStyle(),{
            ':host':{
                
                //'background-color':`rgba(127,127,127,0.1)`,

                padding:'12px',
                display:'flex',
                'flex-flow':`row nowrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                
                //'backdrop-filter': `blur(5px)`,
                'border-radius': `5px`,
            },
            ':host(.added)':{
                'background-color':`rgba(${C.COLORS.main},0.25)`,
            },
            '.icon':{
                width:`52px`, height:`52px`,                
                'background-size': `cover`,
                'background-position': `center`,
                'background-position': `no-repeat`,
                flex:`0 0 auto`,
            },
            '.labels':{
                display:`flex`,
                'min-width': 0,
                'flex-flow':`row wrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                flex:`1 1 auto`,
            },
            '.label':{
                'margin-left':`12px`,
                'min-width': 0,
                'max-width': `85%`,
                flex:`0 1 auto`
            },
            '.title':{
                width:`100%`
            },
            '.subtitle':{
                //'margin-left':`2px`,
                'margin-top':`2px`,
            },
            '.btCtnr':{
                width:`28px`, height:`52px`,
                display:'flex',
                'flex-flow':`column nowrap`,
                'align-items':`stretch`,
                'align-content':`flex-start`,
                'justify-content':`space-between`,
                flex:`0 0 auto`
            },
            '.btn':{
                flex:`1 0 auto`,
                width:`100%`,
            }
        });
    }

    _Render()
    {
        this.RegisterClassToggle(this, 'added');

        this._usericon = U.Element(`div`, { class:`icon` }, this._host ); //this.Add(Icon, -1, this._host, 'icon');
        var ctnr = U.Element(`div`, { class:`labels` }, this._host );
        this._userid_tf = this.Add(H3, -1, ctnr, 'label title');
        this._userid_tf.ellipsis = true;        

        var btnCtnr = U.Element(`div`, { class:`btCtnr` }, this._host);
        
        this._addBtn = this.Add(SmallButtonOutline, -1, btnCtnr, 'btn addBtn');
        this._addBtn.options = { 
            icon:`%ICON%/icon_plus.svg`, htitle:`Add user`,
            trigger:{thisArg:this, fn:this._AddUser}
        }

        this._delBtn = this.Add(SmallButtonOutline, -1, btnCtnr, 'btn addBtn');
        this._delBtn.options = { 
            icon:`%ICON%/icon_close.svg`, htitle:`Delete user`,
            trigger:{thisArg:this, fn:this._DeleteUser}
        }

    }

    Fill(p_data){
        
        this._prof = p_data;
        this._userid_tf.text = p_data.profileName;
        //this._usericon.Set(`blob:${p_data._avatarURL}`);

        if(p_data.profileAvatar != `` && this._blobURL == ``){
            this._blobURL = p_data.profileAvatar;
            this._LoadUserIcon();
        }

        this._profileID64 = p_data.profileID64;

        if(ENV.APP._DB._userMap.Contains(p_data.profileName) 
        || ENV.APP._DB._userMap.Contains(p_data.profileID64)){
            this._addBtn.visible = false;
            this._delBtn.visible = true;
            this.ToggleCSSFlag('added', true);
        }else{
            this._addBtn.visible = true;
            this._delBtn.visible = false;
            this.ToggleCSSFlag('added', false);
        }
        
    }

    _AddUser(){
        this.ToggleCSSFlag('added', true);
        this._addBtn.visible = false;
        this._delBtn.visible = true;
        ENV.APP._DB.GetUser(this._profileID64);
    }

    _DeleteUser(){
        this.ToggleCSSFlag('added', false);
        this._addBtn.visible = true;
        this._delBtn.visible = false;

        var u = ENV.APP._DB._userMap.Get(this._prof.profileID64);
        if(!u){ u = ENV.APP._DB._userMap.Get(this._prof.profileName); }

        u.Release();
        
    }

    _LoadUserIcon(){
        var xhr = new XMLHttpRequest();
        xhr.open('get', this._blobURL, true);
        xhr.responseType = 'blob';
        xhr.onload = this._OnAvatarBlobLoaded;
        xhr.send(); 
    }

    _OnAvatarBlobLoaded(evt){
        try{
            this._usericon.style.backgroundImage = `url(${URL.createObjectURL(evt.srcElement.response)})`;
        }catch(e){}
    }


    _CleanUp(){
        this.ToggleCSSFlag('added', false);
        this._addBtn.visible = true;
        this._delBtn.visible = false;
        this._blobURL = "";
        this._usericon.style.backgroundImage = `url()`;
        super._CleanUp();
    }

}

module.exports = UserWidgetTemp;
UI.Register(`user-widget-inline-temp`, UserWidgetTemp);
},{"../../../com/@.js":6,"../../../com/@tools.js":7,"../../../com/ui-app/@.js":149,"../../../com/ui-app/buttons.js":158,"../../../com/ui-app/textfields.js":180,"../../../com/ui-controls/@.js":190,"../../../com/ui-controls/inputs/input-boolean.js":205,"../../../com/ui-core/@.js":223,"../../data/state-data-block.js":303,"./user-widget-base.js":326}],329:[function(require,module,exports){
const U = require(`./js/com/util.js`);
const ENV = require(`./js/com/environment.js`);
const PATH = require(`./js/com/path.js`);

ENV.instance.node = false;

var paths = {};

paths.exe = '';
paths[PATH.APP_CONTEXT]='';
paths[PATH.HOME]='';
paths[PATH.APP_DATA]='';
paths[PATH.USER_DATA]='';
paths[PATH.TEMP]='';
paths[PATH.DESKTOP]='';
paths[PATH.DOCUMENTS]='';
paths[PATH.DOWNLOADS]='';
paths[PATH.MUSIC]='';
paths[PATH.PICTURES]='';
paths[PATH.VIDEOS]='';
paths[PATH.LOGS]='';

ENV.instance.SetEnvInfos({
    paths:paths,
    argv:[]
});

const MainApp = require(`./js/renderer/steam-coop-app.js`);
MainApp.instance.Boot();
},{"./js/com/environment.js":94,"./js/com/path.js":121,"./js/com/util.js":244,"./js/renderer/steam-coop-app.js":307}],330:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":332}],331:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

},{"../core/buildFullPath":338,"../core/createError":339,"./../core/settle":343,"./../helpers/buildURL":347,"./../helpers/cookies":349,"./../helpers/isURLSameOrigin":352,"./../helpers/parseHeaders":354,"./../utils":356}],332:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":333,"./cancel/CancelToken":334,"./cancel/isCancel":335,"./core/Axios":336,"./core/mergeConfig":342,"./defaults":345,"./helpers/bind":346,"./helpers/isAxiosError":351,"./helpers/spread":355,"./utils":356}],333:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],334:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":333}],335:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],336:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"../helpers/buildURL":347,"./../utils":356,"./InterceptorManager":337,"./dispatchRequest":340,"./mergeConfig":342}],337:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":356}],338:[function(require,module,exports){
'use strict';

var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

},{"../helpers/combineURLs":348,"../helpers/isAbsoluteURL":350}],339:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":341}],340:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/isCancel":335,"../defaults":345,"./../utils":356,"./transformData":344}],341:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};

},{}],342:[function(require,module,exports){
'use strict';

var utils = require('../utils');

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};

},{"../utils":356}],343:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":339}],344:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":356}],345:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require('_process'))
},{"./adapters/http":331,"./adapters/xhr":331,"./helpers/normalizeHeaderName":353,"./utils":356,"_process":361}],346:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],347:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":356}],348:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],349:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

},{"./../utils":356}],350:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],351:[function(require,module,exports){
'use strict';

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};

},{}],352:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

},{"./../utils":356}],353:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":356}],354:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":356}],355:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],356:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

},{"./helpers/bind":346}],357:[function(require,module,exports){
(function (setImmediate){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["BrowserFS"] = factory();
	else
		root["BrowserFS"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, module, process) {'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var buffer = __webpack_require__(2);
	var path = __webpack_require__(9);
	
	/**
	 * Standard libc error codes. Add more to this enum and ErrorStrings as they are
	 * needed.
	 * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
	 */
	/**
	 * Standard libc error codes. Add more to this enum and ErrorStrings as they are
	 * needed.
	 * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
	 */ var ErrorCode;
	(function (ErrorCode) {
	    ErrorCode[ErrorCode["EPERM"] = 1] = "EPERM";
	    ErrorCode[ErrorCode["ENOENT"] = 2] = "ENOENT";
	    ErrorCode[ErrorCode["EIO"] = 5] = "EIO";
	    ErrorCode[ErrorCode["EBADF"] = 9] = "EBADF";
	    ErrorCode[ErrorCode["EACCES"] = 13] = "EACCES";
	    ErrorCode[ErrorCode["EBUSY"] = 16] = "EBUSY";
	    ErrorCode[ErrorCode["EEXIST"] = 17] = "EEXIST";
	    ErrorCode[ErrorCode["ENOTDIR"] = 20] = "ENOTDIR";
	    ErrorCode[ErrorCode["EISDIR"] = 21] = "EISDIR";
	    ErrorCode[ErrorCode["EINVAL"] = 22] = "EINVAL";
	    ErrorCode[ErrorCode["EFBIG"] = 27] = "EFBIG";
	    ErrorCode[ErrorCode["ENOSPC"] = 28] = "ENOSPC";
	    ErrorCode[ErrorCode["EROFS"] = 30] = "EROFS";
	    ErrorCode[ErrorCode["ENOTEMPTY"] = 39] = "ENOTEMPTY";
	    ErrorCode[ErrorCode["ENOTSUP"] = 95] = "ENOTSUP";
	})(ErrorCode || (ErrorCode = {}));
	/* tslint:disable:variable-name */
	/**
	 * Strings associated with each error code.
	 * @hidden
	 */
	var ErrorStrings = {};
	ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';
	ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';
	ErrorStrings[ErrorCode.EIO] = 'Input/output error.';
	ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';
	ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';
	ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';
	ErrorStrings[ErrorCode.EEXIST] = 'File exists.';
	ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';
	ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';
	ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';
	ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';
	ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';
	ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';
	ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';
	ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';
	/* tslint:enable:variable-name */
	/**
	 * Represents a BrowserFS error. Passed back to applications after a failed
	 * call to the BrowserFS API.
	 */
	var ApiError = (function (Error) {
	     function ApiError(type, message, path$$1) {
	        if ( message === void 0 ) message = ErrorStrings[type];
	
	        Error.call(this, message);
	        // Unsupported.
	        this.syscall = "";
	        this.errno = type;
	        this.code = ErrorCode[type];
	        this.path = path$$1;
	        this.stack = new Error().stack;
	        this.message = "Error: " + (this.code) + ": " + message + (this.path ? (", '" + (this.path) + "'") : '');
	    }
	
	     if ( Error ) ApiError.__proto__ = Error;
	     ApiError.prototype = Object.create( Error && Error.prototype );
	     ApiError.prototype.constructor = ApiError;
	    ApiError.fromJSON = function fromJSON (json) {
	        var err = new ApiError(0);
	        err.errno = json.errno;
	        err.code = json.code;
	        err.path = json.path;
	        err.stack = json.stack;
	        err.message = json.message;
	        return err;
	    };
	    /**
	     * Creates an ApiError object from a buffer.
	     */
	    ApiError.fromBuffer = function fromBuffer (buffer$$1, i) {
	        if ( i === void 0 ) i = 0;
	
	        return ApiError.fromJSON(JSON.parse(buffer$$1.toString('utf8', i + 4, i + 4 + buffer$$1.readUInt32LE(i))));
	    };
	    ApiError.FileError = function FileError (code, p) {
	        return new ApiError(code, ErrorStrings[code], p);
	    };
	    ApiError.ENOENT = function ENOENT (path$$1) {
	        return this.FileError(ErrorCode.ENOENT, path$$1);
	    };
	    ApiError.EEXIST = function EEXIST (path$$1) {
	        return this.FileError(ErrorCode.EEXIST, path$$1);
	    };
	    ApiError.EISDIR = function EISDIR (path$$1) {
	        return this.FileError(ErrorCode.EISDIR, path$$1);
	    };
	    ApiError.ENOTDIR = function ENOTDIR (path$$1) {
	        return this.FileError(ErrorCode.ENOTDIR, path$$1);
	    };
	    ApiError.EPERM = function EPERM (path$$1) {
	        return this.FileError(ErrorCode.EPERM, path$$1);
	    };
	    ApiError.ENOTEMPTY = function ENOTEMPTY (path$$1) {
	        return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
	    };
	    /**
	     * @return A friendly error message.
	     */
	    ApiError.prototype.toString = function toString () {
	        return this.message;
	    };
	    ApiError.prototype.toJSON = function toJSON () {
	        return {
	            errno: this.errno,
	            code: this.code,
	            path: this.path,
	            stack: this.stack,
	            message: this.message
	        };
	    };
	    /**
	     * Writes the API error into a buffer.
	     */
	    ApiError.prototype.writeToBuffer = function writeToBuffer (buffer$$1, i) {
	        if ( buffer$$1 === void 0 ) buffer$$1 = Buffer.alloc(this.bufferSize());
	        if ( i === void 0 ) i = 0;
	
	        var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i + 4);
	        buffer$$1.writeUInt32LE(bytesWritten, i);
	        return buffer$$1;
	    };
	    /**
	     * The size of the API error in buffer-form in bytes.
	     */
	    ApiError.prototype.bufferSize = function bufferSize () {
	        // 4 bytes for string length.
	        return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));
	    };
	
	     return ApiError;
	 }(Error));
	
	
	var api_error = Object.freeze({
		get ErrorCode () { return ErrorCode; },
		ErrorStrings: ErrorStrings,
		ApiError: ApiError
	});
	
	var ActionType;
	(function (ActionType) {
	    // Indicates that the code should not do anything.
	    ActionType[ActionType["NOP"] = 0] = "NOP";
	    // Indicates that the code should throw an exception.
	    ActionType[ActionType["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION";
	    // Indicates that the code should truncate the file, but only if it is a file.
	    ActionType[ActionType["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE";
	    // Indicates that the code should create the file.
	    ActionType[ActionType["CREATE_FILE"] = 3] = "CREATE_FILE";
	})(ActionType || (ActionType = {}));
	/**
	 * Represents one of the following file flags. A convenience object.
	 *
	 * * `'r'` - Open file for reading. An exception occurs if the file does not exist.
	 * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.
	 * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.
	 * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.
	 * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).
	 * * `'wx'` - Like 'w' but opens the file in exclusive mode.
	 * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).
	 * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.
	 * * `'a'` - Open file for appending. The file is created if it does not exist.
	 * * `'ax'` - Like 'a' but opens the file in exclusive mode.
	 * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.
	 * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.
	 *
	 * Exclusive mode ensures that the file path is newly created.
	 */
	var FileFlag = function FileFlag(flagStr) {
	    this.flagStr = flagStr;
	    if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
	    }
	};
	/**
	 * Get an object representing the given file flag.
	 * @param modeStr The string representing the flag
	 * @return The FileFlag object representing the flag
	 * @throw when the flag string is invalid
	 */
	FileFlag.getFileFlag = function getFileFlag (flagStr) {
	    // Check cache first.
	    if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
	        return FileFlag.flagCache[flagStr];
	    }
	    return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
	};
	/**
	 * Get the underlying flag string for this flag.
	 */
	FileFlag.prototype.getFlagString = function getFlagString () {
	    return this.flagStr;
	};
	/**
	 * Returns true if the file is readable.
	 */
	FileFlag.prototype.isReadable = function isReadable () {
	    return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;
	};
	/**
	 * Returns true if the file is writeable.
	 */
	FileFlag.prototype.isWriteable = function isWriteable () {
	    return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;
	};
	/**
	 * Returns true if the file mode should truncate.
	 */
	FileFlag.prototype.isTruncating = function isTruncating () {
	    return this.flagStr.indexOf('w') !== -1;
	};
	/**
	 * Returns true if the file is appendable.
	 */
	FileFlag.prototype.isAppendable = function isAppendable () {
	    return this.flagStr.indexOf('a') !== -1;
	};
	/**
	 * Returns true if the file is open in synchronous mode.
	 */
	FileFlag.prototype.isSynchronous = function isSynchronous () {
	    return this.flagStr.indexOf('s') !== -1;
	};
	/**
	 * Returns true if the file is open in exclusive mode.
	 */
	FileFlag.prototype.isExclusive = function isExclusive () {
	    return this.flagStr.indexOf('x') !== -1;
	};
	/**
	 * Returns one of the static fields on this object that indicates the
	 * appropriate response to the path existing.
	 */
	FileFlag.prototype.pathExistsAction = function pathExistsAction () {
	    if (this.isExclusive()) {
	        return ActionType.THROW_EXCEPTION;
	    }
	    else if (this.isTruncating()) {
	        return ActionType.TRUNCATE_FILE;
	    }
	    else {
	        return ActionType.NOP;
	    }
	};
	/**
	 * Returns one of the static fields on this object that indicates the
	 * appropriate response to the path not existing.
	 */
	FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction () {
	    if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {
	        return ActionType.CREATE_FILE;
	    }
	    else {
	        return ActionType.THROW_EXCEPTION;
	    }
	};
	// Contains cached FileMode instances.
	FileFlag.flagCache = {};
	// Array of valid mode strings.
	FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];
	
	/**
	 * Indicates the type of the given file. Applied to 'mode'.
	 */
	var FileType;
	(function (FileType) {
	    FileType[FileType["FILE"] = 32768] = "FILE";
	    FileType[FileType["DIRECTORY"] = 16384] = "DIRECTORY";
	    FileType[FileType["SYMLINK"] = 40960] = "SYMLINK";
	})(FileType || (FileType = {}));
	/**
	 * Emulation of Node's `fs.Stats` object.
	 *
	 * Attribute descriptions are from `man 2 stat'
	 * @see http://nodejs.org/api/fs.html#fs_class_fs_stats
	 * @see http://man7.org/linux/man-pages/man2/stat.2.html
	 */
	var Stats = function Stats(itemType, size, mode, atime, mtime, ctime) {
	    if ( atime === void 0 ) atime = new Date();
	    if ( mtime === void 0 ) mtime = new Date();
	    if ( ctime === void 0 ) ctime = new Date();
	
	    this.size = size;
	    this.atime = atime;
	    this.mtime = mtime;
	    this.ctime = ctime;
	    /**
	     * UNSUPPORTED ATTRIBUTES
	     * I assume no one is going to need these details, although we could fake
	     * appropriate values if need be.
	     */
	    // ID of device containing file
	    this.dev = 0;
	    // inode number
	    this.ino = 0;
	    // device ID (if special file)
	    this.rdev = 0;
	    // number of hard links
	    this.nlink = 1;
	    // blocksize for file system I/O
	    this.blksize = 4096;
	    // @todo Maybe support these? atm, it's a one-user filesystem.
	    // user ID of owner
	    this.uid = 0;
	    // group ID of owner
	    this.gid = 0;
	    // time file was created (currently unsupported)
	    this.birthtime = new Date(0);
	    // XXX: Some file systems stash data on stats objects.
	    this.fileData = null;
	    if (!mode) {
	        switch (itemType) {
	            case FileType.FILE:
	                this.mode = 0x1a4;
	                break;
	            case FileType.DIRECTORY:
	            default:
	                this.mode = 0x1ff;
	        }
	    }
	    else {
	        this.mode = mode;
	    }
	    // number of 512B blocks allocated
	    this.blocks = Math.ceil(size / 512);
	    // Check if mode also includes top-most bits, which indicate the file's
	    // type.
	    if (this.mode < 0x1000) {
	        this.mode |= itemType;
	    }
	};
	Stats.fromBuffer = function fromBuffer (buffer$$1) {
	    var size = buffer$$1.readUInt32LE(0), mode = buffer$$1.readUInt32LE(4), atime = buffer$$1.readDoubleLE(8), mtime = buffer$$1.readDoubleLE(16), ctime = buffer$$1.readDoubleLE(24);
	    return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));
	};
	Stats.prototype.toBuffer = function toBuffer () {
	    var buffer$$1 = Buffer.alloc(32);
	    buffer$$1.writeUInt32LE(this.size, 0);
	    buffer$$1.writeUInt32LE(this.mode, 4);
	    buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
	    buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
	    buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
	    return buffer$$1;
	};
	/**
	 * **Nonstandard**: Clone the stats object.
	 * @return [BrowserFS.node.fs.Stats]
	 */
	Stats.prototype.clone = function clone () {
	    return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);
	};
	/**
	 * @return [Boolean] True if this item is a file.
	 */
	Stats.prototype.isFile = function isFile () {
	    return (this.mode & 0xF000) === FileType.FILE;
	};
	/**
	 * @return [Boolean] True if this item is a directory.
	 */
	Stats.prototype.isDirectory = function isDirectory () {
	    return (this.mode & 0xF000) === FileType.DIRECTORY;
	};
	/**
	 * @return [Boolean] True if this item is a symbolic link (only valid through lstat)
	 */
	Stats.prototype.isSymbolicLink = function isSymbolicLink () {
	    return (this.mode & 0xF000) === FileType.SYMLINK;
	};
	/**
	 * Change the mode of the file. We use this helper function to prevent messing
	 * up the type of the file, which is encoded in mode.
	 */
	Stats.prototype.chmod = function chmod (mode) {
	    this.mode = (this.mode & 0xF000) | mode;
	};
	// We don't support the following types of files.
	Stats.prototype.isSocket = function isSocket () {
	    return false;
	};
	Stats.prototype.isBlockDevice = function isBlockDevice () {
	    return false;
	};
	Stats.prototype.isCharacterDevice = function isCharacterDevice () {
	    return false;
	};
	Stats.prototype.isFIFO = function isFIFO () {
	    return false;
	};
	
	/**
	 * Wraps a callback function. Used for unit testing. Defaults to a NOP.
	 * @hidden
	 */
	var wrapCb = function (cb, numArgs) {
	    return cb;
	};
	/**
	 * @hidden
	 */
	function assertRoot(fs) {
	    if (fs) {
	        return fs;
	    }
	    throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
	}
	/**
	 * @hidden
	 */
	function normalizeMode(mode, def) {
	    switch (typeof mode) {
	        case 'number':
	            // (path, flag, mode, cb?)
	            return mode;
	        case 'string':
	            // (path, flag, modeString, cb?)
	            var trueMode = parseInt(mode, 8);
	            if (!isNaN(trueMode)) {
	                return trueMode;
	            }
	            // Invalid string.
	            return def;
	        default:
	            return def;
	    }
	}
	/**
	 * @hidden
	 */
	function normalizeTime(time) {
	    if (time instanceof Date) {
	        return time;
	    }
	    else if (typeof time === 'number') {
	        return new Date(time * 1000);
	    }
	    else {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
	    }
	}
	/**
	 * @hidden
	 */
	function normalizePath(p) {
	    // Node doesn't allow null characters in paths.
	    if (p.indexOf('\u0000') >= 0) {
	        throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');
	    }
	    else if (p === '') {
	        throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');
	    }
	    return path.resolve(p);
	}
	/**
	 * @hidden
	 */
	function normalizeOptions(options, defEnc, defFlag, defMode) {
	    switch (typeof options) {
	        case 'object':
	            return {
	                encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,
	                flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,
	                mode: normalizeMode(options['mode'], defMode)
	            };
	        case 'string':
	            return {
	                encoding: options,
	                flag: defFlag,
	                mode: defMode
	            };
	        default:
	            return {
	                encoding: defEnc,
	                flag: defFlag,
	                mode: defMode
	            };
	    }
	}
	/**
	 * The default callback is a NOP.
	 * @hidden
	 * @private
	 */
	function nopCb() {
	    // NOP.
	}
	/**
	 * The node frontend to all filesystems.
	 * This layer handles:
	 *
	 * * Sanity checking inputs.
	 * * Normalizing paths.
	 * * Resetting stack depth for asynchronous operations which may not go through
	 *   the browser by wrapping all input callbacks using `setImmediate`.
	 * * Performing the requested operation through the filesystem or the file
	 *   descriptor, as appropriate.
	 * * Handling optional arguments and setting default arguments.
	 * @see http://nodejs.org/api/fs.html
	 */
	var FS = function FS() {
	    /* tslint:enable:variable-name */
	    this.F_OK = 0;
	    this.R_OK = 4;
	    this.W_OK = 2;
	    this.X_OK = 1;
	    this.root = null;
	    this.fdMap = {};
	    this.nextFd = 100;
	};
	FS.prototype.initialize = function initialize (rootFS) {
	    if (!rootFS.constructor.isAvailable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');
	    }
	    return this.root = rootFS;
	};
	/**
	 * converts Date or number to a fractional UNIX timestamp
	 * Grabbed from NodeJS sources (lib/fs.js)
	 */
	FS.prototype._toUnixTimestamp = function _toUnixTimestamp (time) {
	    if (typeof time === 'number') {
	        return time;
	    }
	    else if (time instanceof Date) {
	        return time.getTime() / 1000;
	    }
	    throw new Error("Cannot parse time: " + time);
	};
	/**
	 * **NONSTANDARD**: Grab the FileSystem instance that backs this API.
	 * @return [BrowserFS.FileSystem | null] Returns null if the file system has
	 *   not been initialized.
	 */
	FS.prototype.getRootFS = function getRootFS () {
	    if (this.root) {
	        return this.root;
	    }
	    else {
	        return null;
	    }
	};
	// FILE OR DIRECTORY METHODS
	/**
	 * Asynchronous rename. No arguments other than a possible exception are given
	 * to the completion callback.
	 * @param oldPath
	 * @param newPath
	 * @param callback
	 */
	FS.prototype.rename = function rename (oldPath, newPath, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous rename.
	 * @param oldPath
	 * @param newPath
	 */
	FS.prototype.renameSync = function renameSync (oldPath, newPath) {
	    assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
	};
	/**
	 * Test whether or not the given path exists by checking with the file system.
	 * Then call the callback argument with either true or false.
	 * @example Sample invocation
	 *   fs.exists('/etc/passwd', function (exists) {
	 * util.debug(exists ? "it's there" : "no passwd!");
	 *   });
	 * @param path
	 * @param callback
	 */
	FS.prototype.exists = function exists (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
	    }
	    catch (e) {
	        // Doesn't return an error. If something bad happens, we assume it just
	        // doesn't exist.
	        return newCb(false);
	    }
	};
	/**
	 * Test whether or not the given path exists by checking with the file system.
	 * @param path
	 * @return [boolean]
	 */
	FS.prototype.existsSync = function existsSync (path$$1) {
	    try {
	        return assertRoot(this.root).existsSync(normalizePath(path$$1));
	    }
	    catch (e) {
	        // Doesn't return an error. If something bad happens, we assume it just
	        // doesn't exist.
	        return false;
	    }
	};
	/**
	 * Asynchronous `stat`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.stat = function stat (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `stat`.
	 * @param path
	 * @return [BrowserFS.node.fs.Stats]
	 */
	FS.prototype.statSync = function statSync (path$$1) {
	    return assertRoot(this.root).statSync(normalizePath(path$$1), false);
	};
	/**
	 * Asynchronous `lstat`.
	 * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
	 * then the link itself is stat-ed, not the file that it refers to.
	 * @param path
	 * @param callback
	 */
	FS.prototype.lstat = function lstat (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `lstat`.
	 * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
	 * then the link itself is stat-ed, not the file that it refers to.
	 * @param path
	 * @return [BrowserFS.node.fs.Stats]
	 */
	FS.prototype.lstatSync = function lstatSync (path$$1) {
	    return assertRoot(this.root).statSync(normalizePath(path$$1), true);
	};
	FS.prototype.truncate = function truncate (path$$1, arg2, cb) {
	        if ( arg2 === void 0 ) arg2 = 0;
	        if ( cb === void 0 ) cb = nopCb;
	
	    var len = 0;
	    if (typeof arg2 === 'function') {
	        cb = arg2;
	    }
	    else if (typeof arg2 === 'number') {
	        len = arg2;
	    }
	    var newCb = wrapCb(cb, 1);
	    try {
	        if (len < 0) {
	            throw new ApiError(ErrorCode.EINVAL);
	        }
	        return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `truncate`.
	 * @param path
	 * @param len
	 */
	FS.prototype.truncateSync = function truncateSync (path$$1, len) {
	        if ( len === void 0 ) len = 0;
	
	    if (len < 0) {
	        throw new ApiError(ErrorCode.EINVAL);
	    }
	    return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
	};
	/**
	 * Asynchronous `unlink`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.unlink = function unlink (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `unlink`.
	 * @param path
	 */
	FS.prototype.unlinkSync = function unlinkSync (path$$1) {
	    return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
	};
	FS.prototype.open = function open (path$$1, flag, arg2, cb) {
	        var this$1 = this;
	        if ( cb === void 0 ) cb = nopCb;
	
	    var mode = normalizeMode(arg2, 0x1a4);
	    cb = typeof arg2 === 'function' ? arg2 : cb;
	    var newCb = wrapCb(cb, 2);
	    try {
	        assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function (e, file) {
	            if (file) {
	                newCb(e, this$1.getFdForFile(file));
	            }
	            else {
	                newCb(e);
	            }
	        });
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous file open.
	 * @see http://www.manpagez.com/man/2/open/
	 * @param path
	 * @param flags
	 * @param mode defaults to `0644`
	 * @return [BrowserFS.File]
	 */
	FS.prototype.openSync = function openSync (path$$1, flag, mode) {
	        if ( mode === void 0 ) mode = 0x1a4;
	
	    return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));
	};
	FS.prototype.readFile = function readFile (filename, arg2, cb) {
	        if ( arg2 === void 0 ) arg2 = {};
	        if ( cb === void 0 ) cb = nopCb;
	
	    var options = normalizeOptions(arg2, null, 'r', null);
	    cb = typeof arg2 === 'function' ? arg2 : cb;
	    var newCb = wrapCb(cb, 2);
	    try {
	        var flag = FileFlag.getFileFlag(options['flag']);
	        if (!flag.isReadable()) {
	            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));
	        }
	        return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	FS.prototype.readFileSync = function readFileSync (filename, arg2) {
	        if ( arg2 === void 0 ) arg2 = {};
	
	    var options = normalizeOptions(arg2, null, 'r', null);
	    var flag = FileFlag.getFileFlag(options.flag);
	    if (!flag.isReadable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');
	    }
	    return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);
	};
	FS.prototype.writeFile = function writeFile (filename, data, arg3, cb) {
	        if ( arg3 === void 0 ) arg3 = {};
	        if ( cb === void 0 ) cb = nopCb;
	
	    var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
	    cb = typeof arg3 === 'function' ? arg3 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        var flag = FileFlag.getFileFlag(options.flag);
	        if (!flag.isWriteable()) {
	            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));
	        }
	        return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	FS.prototype.writeFileSync = function writeFileSync (filename, data, arg3) {
	    var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
	    var flag = FileFlag.getFileFlag(options.flag);
	    if (!flag.isWriteable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');
	    }
	    return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
	};
	FS.prototype.appendFile = function appendFile (filename, data, arg3, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
	    cb = typeof arg3 === 'function' ? arg3 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        var flag = FileFlag.getFileFlag(options.flag);
	        if (!flag.isAppendable()) {
	            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));
	        }
	        assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	FS.prototype.appendFileSync = function appendFileSync (filename, data, arg3) {
	    var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
	    var flag = FileFlag.getFileFlag(options.flag);
	    if (!flag.isAppendable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');
	    }
	    return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
	};
	// FILE DESCRIPTOR METHODS
	/**
	 * Asynchronous `fstat`.
	 * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
	 * specified by the file descriptor `fd`.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.fstat = function fstat (fd, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        var file = this.fd2file(fd);
	        file.stat(newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `fstat`.
	 * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
	 * specified by the file descriptor `fd`.
	 * @param fd
	 * @return [BrowserFS.node.fs.Stats]
	 */
	FS.prototype.fstatSync = function fstatSync (fd) {
	    return this.fd2file(fd).statSync();
	};
	/**
	 * Asynchronous close.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.close = function close (fd, cb) {
	        var this$1 = this;
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        this.fd2file(fd).close(function (e) {
	            if (!e) {
	                this$1.closeFd(fd);
	            }
	            newCb(e);
	        });
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous close.
	 * @param fd
	 */
	FS.prototype.closeSync = function closeSync (fd) {
	    this.fd2file(fd).closeSync();
	    this.closeFd(fd);
	};
	FS.prototype.ftruncate = function ftruncate (fd, arg2, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var length = typeof arg2 === 'number' ? arg2 : 0;
	    cb = typeof arg2 === 'function' ? arg2 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        var file = this.fd2file(fd);
	        if (length < 0) {
	            throw new ApiError(ErrorCode.EINVAL);
	        }
	        file.truncate(length, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous ftruncate.
	 * @param fd
	 * @param len
	 */
	FS.prototype.ftruncateSync = function ftruncateSync (fd, len) {
	        if ( len === void 0 ) len = 0;
	
	    var file = this.fd2file(fd);
	    if (len < 0) {
	        throw new ApiError(ErrorCode.EINVAL);
	    }
	    file.truncateSync(len);
	};
	/**
	 * Asynchronous fsync.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.fsync = function fsync (fd, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        this.fd2file(fd).sync(newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous fsync.
	 * @param fd
	 */
	FS.prototype.fsyncSync = function fsyncSync (fd) {
	    this.fd2file(fd).syncSync();
	};
	/**
	 * Asynchronous fdatasync.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.fdatasync = function fdatasync (fd, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        this.fd2file(fd).datasync(newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous fdatasync.
	 * @param fd
	 */
	FS.prototype.fdatasyncSync = function fdatasyncSync (fd) {
	    this.fd2file(fd).datasyncSync();
	};
	FS.prototype.write = function write (fd, arg2, arg3, arg4, arg5, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var buffer$$1, offset, length, position = null;
	    if (typeof arg2 === 'string') {
	        // Signature 1: (fd, string, [position?, [encoding?]], cb?)
	        var encoding = 'utf8';
	        switch (typeof arg3) {
	            case 'function':
	                // (fd, string, cb)
	                cb = arg3;
	                break;
	            case 'number':
	                // (fd, string, position, encoding?, cb?)
	                position = arg3;
	                encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
	                cb = typeof arg5 === 'function' ? arg5 : cb;
	                break;
	            default:
	                // ...try to find the callback and get out of here!
	                cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;
	                return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));
	        }
	        buffer$$1 = Buffer.from(arg2, encoding);
	        offset = 0;
	        length = buffer$$1.length;
	    }
	    else {
	        // Signature 2: (fd, buffer, offset, length, position?, cb?)
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = typeof arg5 === 'number' ? arg5 : null;
	        cb = typeof arg5 === 'function' ? arg5 : cb;
	    }
	    var newCb = wrapCb(cb, 3);
	    try {
	        var file = this.fd2file(fd);
	        if (position === undefined || position === null) {
	            position = file.getPos();
	        }
	        file.write(buffer$$1, offset, length, position, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	FS.prototype.writeSync = function writeSync (fd, arg2, arg3, arg4, arg5) {
	    var buffer$$1, offset = 0, length, position;
	    if (typeof arg2 === 'string') {
	        // Signature 1: (fd, string, [position?, [encoding?]])
	        position = typeof arg3 === 'number' ? arg3 : null;
	        var encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
	        offset = 0;
	        buffer$$1 = Buffer.from(arg2, encoding);
	        length = buffer$$1.length;
	    }
	    else {
	        // Signature 2: (fd, buffer, offset, length, position?)
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = typeof arg5 === 'number' ? arg5 : null;
	    }
	    var file = this.fd2file(fd);
	    if (position === undefined || position === null) {
	        position = file.getPos();
	    }
	    return file.writeSync(buffer$$1, offset, length, position);
	};
	FS.prototype.read = function read (fd, arg2, arg3, arg4, arg5, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var position, offset, length, buffer$$1, newCb;
	    if (typeof arg2 === 'number') {
	        // legacy interface
	        // (fd, length, position, encoding, callback)
	        length = arg2;
	        position = arg3;
	        var encoding = arg4;
	        cb = typeof arg5 === 'function' ? arg5 : cb;
	        offset = 0;
	        buffer$$1 = Buffer.alloc(length);
	        // XXX: Inefficient.
	        // Wrap the cb so we shelter upper layers of the API from these
	        // shenanigans.
	        newCb = wrapCb(function (err, bytesRead, buf) {
	            if (err) {
	                return cb(err);
	            }
	            cb(err, buf.toString(encoding), bytesRead);
	        }, 3);
	    }
	    else {
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = arg5;
	        newCb = wrapCb(cb, 3);
	    }
	    try {
	        var file = this.fd2file(fd);
	        if (position === undefined || position === null) {
	            position = file.getPos();
	        }
	        file.read(buffer$$1, offset, length, position, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	FS.prototype.readSync = function readSync (fd, arg2, arg3, arg4, arg5) {
	    var shenanigans = false;
	    var buffer$$1, offset, length, position, encoding = 'utf8';
	    if (typeof arg2 === 'number') {
	        length = arg2;
	        position = arg3;
	        encoding = arg4;
	        offset = 0;
	        buffer$$1 = Buffer.alloc(length);
	        shenanigans = true;
	    }
	    else {
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = arg5;
	    }
	    var file = this.fd2file(fd);
	    if (position === undefined || position === null) {
	        position = file.getPos();
	    }
	    var rv = file.readSync(buffer$$1, offset, length, position);
	    if (!shenanigans) {
	        return rv;
	    }
	    else {
	        return [buffer$$1.toString(encoding), rv];
	    }
	};
	/**
	 * Asynchronous `fchown`.
	 * @param fd
	 * @param uid
	 * @param gid
	 * @param callback
	 */
	FS.prototype.fchown = function fchown (fd, uid, gid, callback) {
	        if ( callback === void 0 ) callback = nopCb;
	
	    var newCb = wrapCb(callback, 1);
	    try {
	        this.fd2file(fd).chown(uid, gid, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `fchown`.
	 * @param fd
	 * @param uid
	 * @param gid
	 */
	FS.prototype.fchownSync = function fchownSync (fd, uid, gid) {
	    this.fd2file(fd).chownSync(uid, gid);
	};
	/**
	 * Asynchronous `fchmod`.
	 * @param fd
	 * @param mode
	 * @param callback
	 */
	FS.prototype.fchmod = function fchmod (fd, mode, cb) {
	    var newCb = wrapCb(cb, 1);
	    try {
	        var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
	        this.fd2file(fd).chmod(numMode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `fchmod`.
	 * @param fd
	 * @param mode
	 */
	FS.prototype.fchmodSync = function fchmodSync (fd, mode) {
	    var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
	    this.fd2file(fd).chmodSync(numMode);
	};
	/**
	 * Change the file timestamps of a file referenced by the supplied file
	 * descriptor.
	 * @param fd
	 * @param atime
	 * @param mtime
	 * @param callback
	 */
	FS.prototype.futimes = function futimes (fd, atime, mtime, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        var file = this.fd2file(fd);
	        if (typeof atime === 'number') {
	            atime = new Date(atime * 1000);
	        }
	        if (typeof mtime === 'number') {
	            mtime = new Date(mtime * 1000);
	        }
	        file.utimes(atime, mtime, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Change the file timestamps of a file referenced by the supplied file
	 * descriptor.
	 * @param fd
	 * @param atime
	 * @param mtime
	 */
	FS.prototype.futimesSync = function futimesSync (fd, atime, mtime) {
	    this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
	};
	// DIRECTORY-ONLY METHODS
	/**
	 * Asynchronous `rmdir`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.rmdir = function rmdir (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).rmdir(path$$1, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `rmdir`.
	 * @param path
	 */
	FS.prototype.rmdirSync = function rmdirSync (path$$1) {
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).rmdirSync(path$$1);
	};
	/**
	 * Asynchronous `mkdir`.
	 * @param path
	 * @param mode defaults to `0777`
	 * @param callback
	 */
	FS.prototype.mkdir = function mkdir (path$$1, mode, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    if (typeof mode === 'function') {
	        cb = mode;
	        mode = 0x1ff;
	    }
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).mkdir(path$$1, mode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `mkdir`.
	 * @param path
	 * @param mode defaults to `0777`
	 */
	FS.prototype.mkdirSync = function mkdirSync (path$$1, mode) {
	    assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 0x1ff));
	};
	/**
	 * Asynchronous `readdir`. Reads the contents of a directory.
	 * The callback gets two arguments `(err, files)` where `files` is an array of
	 * the names of the files in the directory excluding `'.'` and `'..'`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.readdir = function readdir (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).readdir(path$$1, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `readdir`. Reads the contents of a directory.
	 * @param path
	 * @return [String[]]
	 */
	FS.prototype.readdirSync = function readdirSync (path$$1) {
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).readdirSync(path$$1);
	};
	// SYMLINK METHODS
	/**
	 * Asynchronous `link`.
	 * @param srcpath
	 * @param dstpath
	 * @param callback
	 */
	FS.prototype.link = function link (srcpath, dstpath, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        srcpath = normalizePath(srcpath);
	        dstpath = normalizePath(dstpath);
	        assertRoot(this.root).link(srcpath, dstpath, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `link`.
	 * @param srcpath
	 * @param dstpath
	 */
	FS.prototype.linkSync = function linkSync (srcpath, dstpath) {
	    srcpath = normalizePath(srcpath);
	    dstpath = normalizePath(dstpath);
	    return assertRoot(this.root).linkSync(srcpath, dstpath);
	};
	FS.prototype.symlink = function symlink (srcpath, dstpath, arg3, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var type = typeof arg3 === 'string' ? arg3 : 'file';
	    cb = typeof arg3 === 'function' ? arg3 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        if (type !== 'file' && type !== 'dir') {
	            return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
	        }
	        srcpath = normalizePath(srcpath);
	        dstpath = normalizePath(dstpath);
	        assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `symlink`.
	 * @param srcpath
	 * @param dstpath
	 * @param type can be either `'dir'` or `'file'` (default is `'file'`)
	 */
	FS.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	    if (!type) {
	        type = 'file';
	    }
	    else if (type !== 'file' && type !== 'dir') {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
	    }
	    srcpath = normalizePath(srcpath);
	    dstpath = normalizePath(dstpath);
	    return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
	};
	/**
	 * Asynchronous readlink.
	 * @param path
	 * @param callback
	 */
	FS.prototype.readlink = function readlink (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).readlink(path$$1, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous readlink.
	 * @param path
	 * @return [String]
	 */
	FS.prototype.readlinkSync = function readlinkSync (path$$1) {
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).readlinkSync(path$$1);
	};
	// PROPERTY OPERATIONS
	/**
	 * Asynchronous `chown`.
	 * @param path
	 * @param uid
	 * @param gid
	 * @param callback
	 */
	FS.prototype.chown = function chown (path$$1, uid, gid, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `chown`.
	 * @param path
	 * @param uid
	 * @param gid
	 */
	FS.prototype.chownSync = function chownSync (path$$1, uid, gid) {
	    path$$1 = normalizePath(path$$1);
	    assertRoot(this.root).chownSync(path$$1, false, uid, gid);
	};
	/**
	 * Asynchronous `lchown`.
	 * @param path
	 * @param uid
	 * @param gid
	 * @param callback
	 */
	FS.prototype.lchown = function lchown (path$$1, uid, gid, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `lchown`.
	 * @param path
	 * @param uid
	 * @param gid
	 */
	FS.prototype.lchownSync = function lchownSync (path$$1, uid, gid) {
	    path$$1 = normalizePath(path$$1);
	    assertRoot(this.root).chownSync(path$$1, true, uid, gid);
	};
	/**
	 * Asynchronous `chmod`.
	 * @param path
	 * @param mode
	 * @param callback
	 */
	FS.prototype.chmod = function chmod (path$$1, mode, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        var numMode = normalizeMode(mode, -1);
	        if (numMode < 0) {
	            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	        }
	        assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `chmod`.
	 * @param path
	 * @param mode
	 */
	FS.prototype.chmodSync = function chmodSync (path$$1, mode) {
	    var numMode = normalizeMode(mode, -1);
	    if (numMode < 0) {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	    }
	    path$$1 = normalizePath(path$$1);
	    assertRoot(this.root).chmodSync(path$$1, false, numMode);
	};
	/**
	 * Asynchronous `lchmod`.
	 * @param path
	 * @param mode
	 * @param callback
	 */
	FS.prototype.lchmod = function lchmod (path$$1, mode, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        var numMode = normalizeMode(mode, -1);
	        if (numMode < 0) {
	            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	        }
	        assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `lchmod`.
	 * @param path
	 * @param mode
	 */
	FS.prototype.lchmodSync = function lchmodSync (path$$1, mode) {
	    var numMode = normalizeMode(mode, -1);
	    if (numMode < 1) {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	    }
	    assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
	};
	/**
	 * Change file timestamps of the file referenced by the supplied path.
	 * @param path
	 * @param atime
	 * @param mtime
	 * @param callback
	 */
	FS.prototype.utimes = function utimes (path$$1, atime, mtime, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Change file timestamps of the file referenced by the supplied path.
	 * @param path
	 * @param atime
	 * @param mtime
	 */
	FS.prototype.utimesSync = function utimesSync (path$$1, atime, mtime) {
	    assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
	};
	FS.prototype.realpath = function realpath (path$$1, arg2, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var cache = typeof (arg2) === 'object' ? arg2 : {};
	    cb = typeof (arg2) === 'function' ? arg2 : nopCb;
	    var newCb = wrapCb(cb, 2);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).realpath(path$$1, cache, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `realpath`.
	 * @param path
	 * @param cache An object literal of mapped paths that can be used to
	 *   force a specific path resolution or avoid additional `fs.stat` calls for
	 *   known real paths.
	 * @return [String]
	 */
	FS.prototype.realpathSync = function realpathSync (path$$1, cache) {
	        if ( cache === void 0 ) cache = {};
	
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).realpathSync(path$$1, cache);
	};
	FS.prototype.watchFile = function watchFile (filename, arg2, listener) {
	        if ( listener === void 0 ) listener = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.unwatchFile = function unwatchFile (filename, listener) {
	        if ( listener === void 0 ) listener = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.watch = function watch (filename, arg2, listener) {
	        if ( listener === void 0 ) listener = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.access = function access (path$$1, arg2, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.accessSync = function accessSync (path$$1, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.createReadStream = function createReadStream (path$$1, options) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.createWriteStream = function createWriteStream (path$$1, options) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.
	 */
	FS.prototype.wrapCallbacks = function wrapCallbacks (cbWrapper) {
	    wrapCb = cbWrapper;
	};
	FS.prototype.getFdForFile = function getFdForFile (file) {
	    var fd = this.nextFd++;
	    this.fdMap[fd] = file;
	    return fd;
	};
	FS.prototype.fd2file = function fd2file (fd) {
	    var rv = this.fdMap[fd];
	    if (rv) {
	        return rv;
	    }
	    else {
	        throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');
	    }
	};
	FS.prototype.closeFd = function closeFd (fd) {
	    delete this.fdMap[fd];
	};
	
	/* tslint:disable:variable-name */
	// Exported fs.Stats.
	FS.Stats = Stats;
	
	// Manually export the individual public functions of fs.
	// Required because some code will invoke functions off of the module.
	// e.g.:
	// let writeFile = fs.writeFile;
	// writeFile(...)
	/**
	 * @hidden
	 */
	var fs = new FS();
	/**
	 * @hidden
	 */
	var _fsMock = {};
	/**
	 * @hidden
	 */
	var fsProto = FS.prototype;
	Object.keys(fsProto).forEach(function (key) {
	    if (typeof fs[key] === 'function') {
	        _fsMock[key] = function () {
	            return fs[key].apply(fs, arguments);
	        };
	    }
	    else {
	        _fsMock[key] = fs[key];
	    }
	});
	_fsMock['changeFSModule'] = function (newFs) {
	    fs = newFs;
	};
	_fsMock['getFSModule'] = function () {
	    return fs;
	};
	_fsMock['FS'] = FS;
	
	/*
	 * Levenshtein distance, from the `js-levenshtein` NPM module.
	 * Copied here to avoid complexity of adding another CommonJS module dependency.
	 */
	function _min(d0, d1, d2, bx, ay) {
	    return d0 < d1 || d2 < d1
	        ? d0 > d2
	            ? d2 + 1
	            : d0 + 1
	        : bx === ay
	            ? d1
	            : d1 + 1;
	}
	/**
	 * Calculates levenshtein distance.
	 * @param a
	 * @param b
	 */
	function levenshtein(a, b) {
	    if (a === b) {
	        return 0;
	    }
	    if (a.length > b.length) {
	        var tmp = a;
	        a = b;
	        b = tmp;
	    }
	    var la = a.length;
	    var lb = b.length;
	    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
	        la--;
	        lb--;
	    }
	    var offset = 0;
	    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
	        offset++;
	    }
	    la -= offset;
	    lb -= offset;
	    if (la === 0 || lb === 1) {
	        return lb;
	    }
	    var vector = new Array(la << 1);
	    for (var y = 0; y < la;) {
	        vector[la + y] = a.charCodeAt(offset + y);
	        vector[y] = ++y;
	    }
	    var x;
	    var d0;
	    var d1;
	    var d2;
	    var d3;
	    for (x = 0; (x + 3) < lb;) {
	        var bx0 = b.charCodeAt(offset + (d0 = x));
	        var bx1 = b.charCodeAt(offset + (d1 = x + 1));
	        var bx2 = b.charCodeAt(offset + (d2 = x + 2));
	        var bx3 = b.charCodeAt(offset + (d3 = x + 3));
	        var dd$1 = (x += 4);
	        for (var y$1 = 0; y$1 < la;) {
	            var ay = vector[la + y$1];
	            var dy = vector[y$1];
	            d0 = _min(dy, d0, d1, bx0, ay);
	            d1 = _min(d0, d1, d2, bx1, ay);
	            d2 = _min(d1, d2, d3, bx2, ay);
	            dd$1 = _min(d2, d3, dd$1, bx3, ay);
	            vector[y$1++] = dd$1;
	            d3 = d2;
	            d2 = d1;
	            d1 = d0;
	            d0 = dy;
	        }
	    }
	    var dd = 0;
	    for (; x < lb;) {
	        var bx0$1 = b.charCodeAt(offset + (d0 = x));
	        dd = ++x;
	        for (var y$2 = 0; y$2 < la; y$2++) {
	            var dy$1 = vector[y$2];
	            vector[y$2] = dd = dy$1 < d0 || dd < d0
	                ? dy$1 > dd ? dd + 1 : dy$1 + 1
	                : bx0$1 === vector[la + y$2]
	                    ? d0
	                    : d0 + 1;
	            d0 = dy$1;
	        }
	    }
	    return dd;
	}
	
	function deprecationMessage(print, fsName, opts) {
	    if (print) {
	        console.warn(("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + (JSON.stringify(opts)) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details."));
	    }
	}
	/**
	 * Checks for any IE version, including IE11 which removed MSIE from the
	 * userAgent string.
	 * @hidden
	 */
	var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf('Trident') !== -1);
	/**
	 * Check if we're in a web worker.
	 * @hidden
	 */
	var isWebWorker = typeof window === "undefined";
	/**
	 * Throws an exception. Called on code paths that should be impossible.
	 * @hidden
	 */
	function fail() {
	    throw new Error("BFS has reached an impossible code path; please file a bug.");
	}
	/**
	 * Synchronous recursive makedir.
	 * @hidden
	 */
	function mkdirpSync(p, mode, fs) {
	    if (!fs.existsSync(p)) {
	        mkdirpSync(path.dirname(p), mode, fs);
	        fs.mkdirSync(p, mode);
	    }
	}
	/**
	 * Converts a buffer into an array buffer. Attempts to do so in a
	 * zero-copy manner, e.g. the array references the same memory.
	 * @hidden
	 */
	function buffer2ArrayBuffer(buff) {
	    var u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;
	    if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
	        return u8.buffer;
	    }
	    else {
	        return u8.buffer.slice(u8offset, u8offset + u8Len);
	    }
	}
	/**
	 * Converts a buffer into a Uint8Array. Attempts to do so in a
	 * zero-copy manner, e.g. the array references the same memory.
	 * @hidden
	 */
	function buffer2Uint8array(buff) {
	    if (buff instanceof Uint8Array) {
	        // BFS & Node v4.0 buffers *are* Uint8Arrays.
	        return buff;
	    }
	    else {
	        // Uint8Arrays can be constructed from arrayish numbers.
	        // At this point, we assume this isn't a BFS array.
	        return new Uint8Array(buff);
	    }
	}
	/**
	 * Converts the given arrayish object into a Buffer. Attempts to
	 * be zero-copy.
	 * @hidden
	 */
	function arrayish2Buffer(arr) {
	    if (arr instanceof Buffer) {
	        return arr;
	    }
	    else if (arr instanceof Uint8Array) {
	        return uint8Array2Buffer(arr);
	    }
	    else {
	        return Buffer.from(arr);
	    }
	}
	/**
	 * Converts the given Uint8Array into a Buffer. Attempts to be zero-copy.
	 * @hidden
	 */
	function uint8Array2Buffer(u8) {
	    if (u8 instanceof Buffer) {
	        return u8;
	    }
	    else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
	        return arrayBuffer2Buffer(u8.buffer);
	    }
	    else {
	        return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);
	    }
	}
	/**
	 * Converts the given array buffer into a Buffer. Attempts to be
	 * zero-copy.
	 * @hidden
	 */
	function arrayBuffer2Buffer(ab) {
	    return Buffer.from(ab);
	}
	/**
	 * Copies a slice of the given buffer
	 * @hidden
	 */
	function copyingSlice(buff, start, end) {
	    if ( start === void 0 ) start = 0;
	    if ( end === void 0 ) end = buff.length;
	
	    if (start < 0 || end < 0 || end > buff.length || start > end) {
	        throw new TypeError(("Invalid slice bounds on buffer of length " + (buff.length) + ": [" + start + ", " + end + "]"));
	    }
	    if (buff.length === 0) {
	        // Avoid s0 corner case in ArrayBuffer case.
	        return emptyBuffer();
	    }
	    else {
	        var u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 0xFF;
	        buff[0] = newS0;
	        if (u8[0] === newS0) {
	            // Same memory. Revert & copy.
	            u8[0] = s0;
	            return uint8Array2Buffer(u8.slice(start, end));
	        }
	        else {
	            // Revert.
	            buff[0] = s0;
	            return uint8Array2Buffer(u8.subarray(start, end));
	        }
	    }
	}
	/**
	 * @hidden
	 */
	var emptyBuff = null;
	/**
	 * Returns an empty buffer.
	 * @hidden
	 */
	function emptyBuffer() {
	    if (emptyBuff) {
	        return emptyBuff;
	    }
	    return emptyBuff = Buffer.alloc(0);
	}
	/**
	 * Option validator for a Buffer file system option.
	 * @hidden
	 */
	function bufferValidator(v, cb) {
	    if (Buffer.isBuffer(v)) {
	        cb();
	    }
	    else {
	        cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
	    }
	}
	/**
	 * Checks that the given options object is valid for the file system options.
	 * @hidden
	 */
	function checkOptions(fsType, opts, cb) {
	    var optsInfo = fsType.Options;
	    var fsName = fsType.Name;
	    var pendingValidators = 0;
	    var callbackCalled = false;
	    var loopEnded = false;
	    function validatorCallback(e) {
	        if (!callbackCalled) {
	            if (e) {
	                callbackCalled = true;
	                cb(e);
	            }
	            pendingValidators--;
	            if (pendingValidators === 0 && loopEnded) {
	                cb();
	            }
	        }
	    }
	    // Check for required options.
	    var loop = function ( optName ) {
	        if (optsInfo.hasOwnProperty(optName)) {
	            var opt = optsInfo[optName];
	            var providedValue = opts[optName];
	            if (providedValue === undefined || providedValue === null) {
	                if (!opt.optional) {
	                    // Required option, not provided.
	                    // Any incorrect options provided? Which ones are close to the provided one?
	                    // (edit distance 5 === close)
	                    var incorrectOptions = Object.keys(opts).filter(function (o) { return !(o in optsInfo); }).map(function (a) {
	                        return { str: a, distance: levenshtein(optName, a) };
	                    }).filter(function (o) { return o.distance < 5; }).sort(function (a, b) { return a.distance - b.distance; });
	                    // Validators may be synchronous.
	                    if (callbackCalled) {
	                        return {};
	                    }
	                    callbackCalled = true;
	                    return { v: cb(new ApiError(ErrorCode.EINVAL, ("[" + fsName + "] Required option '" + optName + "' not provided." + (incorrectOptions.length > 0 ? (" You provided unrecognized option '" + (incorrectOptions[0].str) + "'; perhaps you meant to type '" + optName + "'.") : '') + "\nOption description: " + (opt.description)))) };
	                }
	                // Else: Optional option, not provided. That is OK.
	            }
	            else {
	                // Option provided! Check type.
	                var typeMatches = false;
	                if (Array.isArray(opt.type)) {
	                    typeMatches = opt.type.indexOf(typeof (providedValue)) !== -1;
	                }
	                else {
	                    typeMatches = typeof (providedValue) === opt.type;
	                }
	                if (!typeMatches) {
	                    // Validators may be synchronous.
	                    if (callbackCalled) {
	                        return {};
	                    }
	                    callbackCalled = true;
	                    return { v: cb(new ApiError(ErrorCode.EINVAL, ("[" + fsName + "] Value provided for option " + optName + " is not the proper type. Expected " + (Array.isArray(opt.type) ? ("one of {" + (opt.type.join(", ")) + "}") : opt.type) + ", but received " + (typeof (providedValue)) + "\nOption description: " + (opt.description)))) };
	                }
	                else if (opt.validator) {
	                    pendingValidators++;
	                    opt.validator(providedValue, validatorCallback);
	                }
	                // Otherwise: All good!
	            }
	        }
	    };
	
	    for (var optName in optsInfo) {
	        var returned = loop( optName );
	
	        if ( returned ) return returned.v;
	    }
	    loopEnded = true;
	    if (pendingValidators === 0 && !callbackCalled) {
	        cb();
	    }
	}
	
	
	var BFSUtils = Object.freeze({
		deprecationMessage: deprecationMessage,
		isIE: isIE,
		isWebWorker: isWebWorker,
		fail: fail,
		mkdirpSync: mkdirpSync,
		buffer2ArrayBuffer: buffer2ArrayBuffer,
		buffer2Uint8array: buffer2Uint8array,
		arrayish2Buffer: arrayish2Buffer,
		uint8Array2Buffer: uint8Array2Buffer,
		arrayBuffer2Buffer: arrayBuffer2Buffer,
		copyingSlice: copyingSlice,
		emptyBuffer: emptyBuffer,
		bufferValidator: bufferValidator,
		checkOptions: checkOptions
	});
	
	var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps(fs) {
	    this.fs = fs;
	    this.nodefs = fs.getNodeFS();
	    this.FS = fs.getFS();
	    this.PATH = fs.getPATH();
	    this.ERRNO_CODES = fs.getERRNO_CODES();
	};
	BFSEmscriptenStreamOps.prototype.open = function open (stream) {
	    var path$$1 = this.fs.realPath(stream.node);
	    var FS = this.FS;
	    try {
	        if (FS.isFile(stream.node.mode)) {
	            stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.close = function close (stream) {
	    var FS = this.FS;
	    try {
	        if (FS.isFile(stream.node.mode) && stream.nfd) {
	            this.nodefs.closeSync(stream.nfd);
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.read = function read (stream, buffer$$1, offset, length, position) {
	    // Avoid copying overhead by reading directly into buffer.
	    try {
	        return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
	    }
	    catch (e) {
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.write = function write (stream, buffer$$1, offset, length, position) {
	    // Avoid copying overhead.
	    try {
	        return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
	    }
	    catch (e) {
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.llseek = function llseek (stream, offset, whence) {
	    var position = offset;
	    if (whence === 1) {
	        position += stream.position;
	    }
	    else if (whence === 2) {
	        if (this.FS.isFile(stream.node.mode)) {
	            try {
	                var stat = this.nodefs.fstatSync(stream.nfd);
	                position += stat.size;
	            }
	            catch (e) {
	                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	            }
	        }
	    }
	    if (position < 0) {
	        throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
	    }
	    stream.position = position;
	    return position;
	};
	var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps(fs) {
	    this.fs = fs;
	    this.nodefs = fs.getNodeFS();
	    this.FS = fs.getFS();
	    this.PATH = fs.getPATH();
	    this.ERRNO_CODES = fs.getERRNO_CODES();
	};
	BFSEmscriptenNodeOps.prototype.getattr = function getattr (node) {
	    var path$$1 = this.fs.realPath(node);
	    var stat;
	    try {
	        stat = this.nodefs.lstatSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	    return {
	        dev: stat.dev,
	        ino: stat.ino,
	        mode: stat.mode,
	        nlink: stat.nlink,
	        uid: stat.uid,
	        gid: stat.gid,
	        rdev: stat.rdev,
	        size: stat.size,
	        atime: stat.atime,
	        mtime: stat.mtime,
	        ctime: stat.ctime,
	        blksize: stat.blksize,
	        blocks: stat.blocks
	    };
	};
	BFSEmscriptenNodeOps.prototype.setattr = function setattr (node, attr) {
	    var path$$1 = this.fs.realPath(node);
	    try {
	        if (attr.mode !== undefined) {
	            this.nodefs.chmodSync(path$$1, attr.mode);
	            // update the common node structure mode as well
	            node.mode = attr.mode;
	        }
	        if (attr.timestamp !== undefined) {
	            var date = new Date(attr.timestamp);
	            this.nodefs.utimesSync(path$$1, date, date);
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        // Ignore not supported errors. Emscripten does utimesSync when it
	        // writes files, but never really requires the value to be set.
	        if (e.code !== "ENOTSUP") {
	            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	        }
	    }
	    if (attr.size !== undefined) {
	        try {
	            this.nodefs.truncateSync(path$$1, attr.size);
	        }
	        catch (e) {
	            if (!e.code) {
	                throw e;
	            }
	            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	        }
	    }
	};
	BFSEmscriptenNodeOps.prototype.lookup = function lookup (parent, name) {
	    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
	    var mode = this.fs.getMode(path$$1);
	    return this.fs.createNode(parent, name, mode);
	};
	BFSEmscriptenNodeOps.prototype.mknod = function mknod (parent, name, mode, dev) {
	    var node = this.fs.createNode(parent, name, mode, dev);
	    // create the backing node for this in the fs root as well
	    var path$$1 = this.fs.realPath(node);
	    try {
	        if (this.FS.isDir(node.mode)) {
	            this.nodefs.mkdirSync(path$$1, node.mode);
	        }
	        else {
	            this.nodefs.writeFileSync(path$$1, '', { mode: node.mode });
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	    return node;
	};
	BFSEmscriptenNodeOps.prototype.rename = function rename (oldNode, newDir, newName) {
	    var oldPath = this.fs.realPath(oldNode);
	    var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);
	    try {
	        this.nodefs.renameSync(oldPath, newPath);
	        // This logic is missing from the original NodeFS,
	        // causing Emscripten's filesystem to think that the old file still exists.
	        oldNode.name = newName;
	        oldNode.parent = newDir;
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.unlink = function unlink (parent, name) {
	    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
	    try {
	        this.nodefs.unlinkSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.rmdir = function rmdir (parent, name) {
	    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
	    try {
	        this.nodefs.rmdirSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.readdir = function readdir (node) {
	    var path$$1 = this.fs.realPath(node);
	    try {
	        // Node does not list . and .. in directory listings,
	        // but Emscripten expects it.
	        var contents = this.nodefs.readdirSync(path$$1);
	        contents.push('.', '..');
	        return contents;
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.symlink = function symlink (parent, newName, oldPath) {
	    var newPath = this.PATH.join2(this.fs.realPath(parent), newName);
	    try {
	        this.nodefs.symlinkSync(oldPath, newPath);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.readlink = function readlink (node) {
	    var path$$1 = this.fs.realPath(node);
	    try {
	        return this.nodefs.readlinkSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	var BFSEmscriptenFS = function BFSEmscriptenFS(_FS, _PATH, _ERRNO_CODES, nodefs) {
	    if ( _FS === void 0 ) _FS = self['FS'];
	    if ( _PATH === void 0 ) _PATH = self['PATH'];
	    if ( _ERRNO_CODES === void 0 ) _ERRNO_CODES = self['ERRNO_CODES'];
	    if ( nodefs === void 0 ) nodefs = _fsMock;
	
	    // This maps the integer permission modes from http://linux.die.net/man/3/open
	    // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
	    this.flagsToPermissionStringMap = {
	        0 /*O_RDONLY*/: 'r',
	        1 /*O_WRONLY*/: 'r+',
	        2 /*O_RDWR*/: 'r+',
	        64 /*O_CREAT*/: 'r',
	        65 /*O_WRONLY|O_CREAT*/: 'r+',
	        66 /*O_RDWR|O_CREAT*/: 'r+',
	        129 /*O_WRONLY|O_EXCL*/: 'rx+',
	        193 /*O_WRONLY|O_CREAT|O_EXCL*/: 'rx+',
	        514 /*O_RDWR|O_TRUNC*/: 'w+',
	        577 /*O_WRONLY|O_CREAT|O_TRUNC*/: 'w',
	        578 /*O_CREAT|O_RDWR|O_TRUNC*/: 'w+',
	        705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: 'wx',
	        706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: 'wx+',
	        1024 /*O_APPEND*/: 'a',
	        1025 /*O_WRONLY|O_APPEND*/: 'a',
	        1026 /*O_RDWR|O_APPEND*/: 'a+',
	        1089 /*O_WRONLY|O_CREAT|O_APPEND*/: 'a',
	        1090 /*O_RDWR|O_CREAT|O_APPEND*/: 'a+',
	        1153 /*O_WRONLY|O_EXCL|O_APPEND*/: 'ax',
	        1154 /*O_RDWR|O_EXCL|O_APPEND*/: 'ax+',
	        1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: 'ax',
	        1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: 'ax+',
	        4096 /*O_RDONLY|O_DSYNC*/: 'rs',
	        4098 /*O_RDWR|O_DSYNC*/: 'rs+'
	    };
	    this.nodefs = nodefs;
	    this.FS = _FS;
	    this.PATH = _PATH;
	    this.ERRNO_CODES = _ERRNO_CODES;
	    this.node_ops = new BFSEmscriptenNodeOps(this);
	    this.stream_ops = new BFSEmscriptenStreamOps(this);
	};
	BFSEmscriptenFS.prototype.mount = function mount (m) {
	    return this.createNode(null, '/', this.getMode(m.opts.root), 0);
	};
	BFSEmscriptenFS.prototype.createNode = function createNode (parent, name, mode, dev) {
	    var FS = this.FS;
	    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
	        throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);
	    }
	    var node = FS.createNode(parent, name, mode);
	    node.node_ops = this.node_ops;
	    node.stream_ops = this.stream_ops;
	    return node;
	};
	BFSEmscriptenFS.prototype.getMode = function getMode (path$$1) {
	    var stat;
	    try {
	        stat = this.nodefs.lstatSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	    return stat.mode;
	};
	BFSEmscriptenFS.prototype.realPath = function realPath (node) {
	    var parts = [];
	    while (node.parent !== node) {
	        parts.push(node.name);
	        node = node.parent;
	    }
	    parts.push(node.mount.opts.root);
	    parts.reverse();
	    return this.PATH.join.apply(null, parts);
	};
	BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString (flags) {
	    var parsedFlags = (typeof flags === "string") ? parseInt(flags, 10) : flags;
	    parsedFlags &= 0x1FFF;
	    if (parsedFlags in this.flagsToPermissionStringMap) {
	        return this.flagsToPermissionStringMap[parsedFlags];
	    }
	    else {
	        return flags;
	    }
	};
	BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS () {
	    return this.nodefs;
	};
	BFSEmscriptenFS.prototype.getFS = function getFS () {
	    return this.FS;
	};
	BFSEmscriptenFS.prototype.getPATH = function getPATH () {
	    return this.PATH;
	};
	BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES () {
	    return this.ERRNO_CODES;
	};
	
	/**
	 * Basic filesystem class. Most filesystems should extend this class, as it
	 * provides default implementations for a handful of methods.
	 */
	var BaseFileSystem = function BaseFileSystem () {};
	
	BaseFileSystem.prototype.supportsLinks = function supportsLinks () {
	    return false;
	};
	BaseFileSystem.prototype.diskSpace = function diskSpace (p, cb) {
	    cb(0, 0);
	};
	/**
	 * Opens the file at path p with the given flag. The file must exist.
	 * @param p The path to open.
	 * @param flag The flag to use when opening the file.
	 */
	BaseFileSystem.prototype.openFile = function openFile (p, flag, cb) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Create the file at path p with the given mode. Then, open it with the given
	 * flag.
	 */
	BaseFileSystem.prototype.createFile = function createFile (p, flag, mode, cb) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.open = function open (p, flag, mode, cb) {
	        var this$1 = this;
	
	    var mustBeFile = function (e, stats) {
	        if (e) {
	            // File does not exist.
	            switch (flag.pathNotExistsAction()) {
	                case ActionType.CREATE_FILE:
	                    // Ensure parent exists.
	                    return this$1.stat(path.dirname(p), false, function (e, parentStats) {
	                        if (e) {
	                            cb(e);
	                        }
	                        else if (parentStats && !parentStats.isDirectory()) {
	                            cb(ApiError.ENOTDIR(path.dirname(p)));
	                        }
	                        else {
	                            this$1.createFile(p, flag, mode, cb);
	                        }
	                    });
	                case ActionType.THROW_EXCEPTION:
	                    return cb(ApiError.ENOENT(p));
	                default:
	                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
	            }
	        }
	        else {
	            // File exists.
	            if (stats && stats.isDirectory()) {
	                return cb(ApiError.EISDIR(p));
	            }
	            switch (flag.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                    return cb(ApiError.EEXIST(p));
	                case ActionType.TRUNCATE_FILE:
	                    // NOTE: In a previous implementation, we deleted the file and
	                    // re-created it. However, this created a race condition if another
	                    // asynchronous request was trying to read the file, as the file
	                    // would not exist for a small period of time.
	                    return this$1.openFile(p, flag, function (e, fd) {
	                        if (e) {
	                            cb(e);
	                        }
	                        else if (fd) {
	                            fd.truncate(0, function () {
	                                fd.sync(function () {
	                                    cb(null, fd);
	                                });
	                            });
	                        }
	                        else {
	                            fail();
	                        }
	                    });
	                case ActionType.NOP:
	                    return this$1.openFile(p, flag, cb);
	                default:
	                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
	            }
	        }
	    };
	    this.stat(p, false, mustBeFile);
	};
	BaseFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.stat = function stat (p, isLstat, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.statSync = function statSync (p, isLstat) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Opens the file at path p with the given flag. The file must exist.
	 * @param p The path to open.
	 * @param flag The flag to use when opening the file.
	 * @return A File object corresponding to the opened file.
	 */
	BaseFileSystem.prototype.openFileSync = function openFileSync (p, flag, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Create the file at path p with the given mode. Then, open it with the given
	 * flag.
	 */
	BaseFileSystem.prototype.createFileSync = function createFileSync (p, flag, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.openSync = function openSync (p, flag, mode) {
	    // Check if the path exists, and is a file.
	    var stats;
	    try {
	        stats = this.statSync(p, false);
	    }
	    catch (e) {
	        // File does not exist.
	        switch (flag.pathNotExistsAction()) {
	            case ActionType.CREATE_FILE:
	                // Ensure parent exists.
	                var parentStats = this.statSync(path.dirname(p), false);
	                if (!parentStats.isDirectory()) {
	                    throw ApiError.ENOTDIR(path.dirname(p));
	                }
	                return this.createFileSync(p, flag, mode);
	            case ActionType.THROW_EXCEPTION:
	                throw ApiError.ENOENT(p);
	            default:
	                throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
	        }
	    }
	    // File exists.
	    if (stats.isDirectory()) {
	        throw ApiError.EISDIR(p);
	    }
	    switch (flag.pathExistsAction()) {
	        case ActionType.THROW_EXCEPTION:
	            throw ApiError.EEXIST(p);
	        case ActionType.TRUNCATE_FILE:
	            // Delete file.
	            this.unlinkSync(p);
	            // Create file. Use the same mode as the old file.
	            // Node itself modifies the ctime when this occurs, so this action
	            // will preserve that behavior if the underlying file system
	            // supports those properties.
	            return this.createFileSync(p, flag, stats.mode);
	        case ActionType.NOP:
	            return this.openFileSync(p, flag, mode);
	        default:
	            throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
	    }
	};
	BaseFileSystem.prototype.unlink = function unlink (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.unlinkSync = function unlinkSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.rmdir = function rmdir (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.readdir = function readdir (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.readdirSync = function readdirSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.exists = function exists (p, cb) {
	    this.stat(p, null, function (err) {
	        cb(!err);
	    });
	};
	BaseFileSystem.prototype.existsSync = function existsSync (p) {
	    try {
	        this.statSync(p, true);
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	};
	BaseFileSystem.prototype.realpath = function realpath (p, cache, cb) {
	    if (this.supportsLinks()) {
	        // The path could contain symlinks. Split up the path,
	        // resolve any symlinks, return the resolved string.
	        var splitPath = p.split(path.sep);
	        // TODO: Simpler to just pass through file, find sep and such.
	        for (var i = 0; i < splitPath.length; i++) {
	            var addPaths = splitPath.slice(0, i + 1);
	            splitPath[i] = path.join.apply(null, addPaths);
	        }
	    }
	    else {
	        // No symlinks. We just need to verify that it exists.
	        this.exists(p, function (doesExist) {
	            if (doesExist) {
	                cb(null, p);
	            }
	            else {
	                cb(ApiError.ENOENT(p));
	            }
	        });
	    }
	};
	BaseFileSystem.prototype.realpathSync = function realpathSync (p, cache) {
	    if (this.supportsLinks()) {
	        // The path could contain symlinks. Split up the path,
	        // resolve any symlinks, return the resolved string.
	        var splitPath = p.split(path.sep);
	        // TODO: Simpler to just pass through file, find sep and such.
	        for (var i = 0; i < splitPath.length; i++) {
	            var addPaths = splitPath.slice(0, i + 1);
	            splitPath[i] = path.join.apply(path, addPaths);
	        }
	        return splitPath.join(path.sep);
	    }
	    else {
	        // No symlinks. We just need to verify that it exists.
	        if (this.existsSync(p)) {
	            return p;
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    }
	};
	BaseFileSystem.prototype.truncate = function truncate (p, len, cb) {
	    this.open(p, FileFlag.getFileFlag('r+'), 0x1a4, (function (er, fd) {
	        if (er) {
	            return cb(er);
	        }
	        fd.truncate(len, (function (er) {
	            fd.close((function (er2) {
	                cb(er || er2);
	            }));
	        }));
	    }));
	};
	BaseFileSystem.prototype.truncateSync = function truncateSync (p, len) {
	    var fd = this.openSync(p, FileFlag.getFileFlag('r+'), 0x1a4);
	    // Need to safely close FD, regardless of whether or not truncate succeeds.
	    try {
	        fd.truncateSync(len);
	    }
	    catch (e) {
	        throw e;
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	    // Wrap cb in file closing code.
	    var oldCb = cb;
	    // Get file.
	    this.open(fname, flag, 0x1a4, function (err, fd) {
	        if (err) {
	            return cb(err);
	        }
	        cb = function (err, arg) {
	            fd.close(function (err2) {
	                if (!err) {
	                    err = err2;
	                }
	                return oldCb(err, arg);
	            });
	        };
	        fd.stat(function (err, stat) {
	            if (err) {
	                return cb(err);
	            }
	            // Allocate buffer.
	            var buf = Buffer.alloc(stat.size);
	            fd.read(buf, 0, stat.size, 0, function (err) {
	                if (err) {
	                    return cb(err);
	                }
	                else if (encoding === null) {
	                    return cb(err, buf);
	                }
	                try {
	                    cb(null, buf.toString(encoding));
	                }
	                catch (e) {
	                    cb(e);
	                }
	            });
	        });
	    });
	};
	BaseFileSystem.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	    // Get file.
	    var fd = this.openSync(fname, flag, 0x1a4);
	    try {
	        var stat = fd.statSync();
	        // Allocate buffer.
	        var buf = Buffer.alloc(stat.size);
	        fd.readSync(buf, 0, stat.size, 0);
	        fd.closeSync();
	        if (encoding === null) {
	            return buf;
	        }
	        return buf.toString(encoding);
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
	    // Wrap cb in file closing code.
	    var oldCb = cb;
	    // Get file.
	    this.open(fname, flag, 0x1a4, function (err, fd) {
	        if (err) {
	            return cb(err);
	        }
	        cb = function (err) {
	            fd.close(function (err2) {
	                oldCb(err ? err : err2);
	            });
	        };
	        try {
	            if (typeof data === 'string') {
	                data = Buffer.from(data, encoding);
	            }
	        }
	        catch (e) {
	            return cb(e);
	        }
	        // Write into file.
	        fd.write(data, 0, data.length, 0, cb);
	    });
	};
	BaseFileSystem.prototype.writeFileSync = function writeFileSync (fname, data, encoding, flag, mode) {
	    // Get file.
	    var fd = this.openSync(fname, flag, mode);
	    try {
	        if (typeof data === 'string') {
	            data = Buffer.from(data, encoding);
	        }
	        // Write into file.
	        fd.writeSync(data, 0, data.length, 0);
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
	    // Wrap cb in file closing code.
	    var oldCb = cb;
	    this.open(fname, flag, mode, function (err, fd) {
	        if (err) {
	            return cb(err);
	        }
	        cb = function (err) {
	            fd.close(function (err2) {
	                oldCb(err ? err : err2);
	            });
	        };
	        if (typeof data === 'string') {
	            data = Buffer.from(data, encoding);
	        }
	        fd.write(data, 0, data.length, null, cb);
	    });
	};
	BaseFileSystem.prototype.appendFileSync = function appendFileSync (fname, data, encoding, flag, mode) {
	    var fd = this.openSync(fname, flag, mode);
	    try {
	        if (typeof data === 'string') {
	            data = Buffer.from(data, encoding);
	        }
	        fd.writeSync(data, 0, data.length, null);
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.utimes = function utimes (p, atime, mtime, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.link = function link (srcpath, dstpath, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.linkSync = function linkSync (srcpath, dstpath) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.readlink = function readlink (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.readlinkSync = function readlinkSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Implements the asynchronous API in terms of the synchronous API.
	 * @class SynchronousFileSystem
	 */
	var SynchronousFileSystem = (function (BaseFileSystem) {
	    function SynchronousFileSystem () {
	        BaseFileSystem.apply(this, arguments);
	    }
	
	    if ( BaseFileSystem ) SynchronousFileSystem.__proto__ = BaseFileSystem;
	    SynchronousFileSystem.prototype = Object.create( BaseFileSystem && BaseFileSystem.prototype );
	    SynchronousFileSystem.prototype.constructor = SynchronousFileSystem;
	
	    SynchronousFileSystem.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    SynchronousFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        try {
	            this.renameSync(oldPath, newPath);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.stat = function stat (p, isLstat, cb) {
	        try {
	            cb(null, this.statSync(p, isLstat));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.open = function open (p, flags, mode, cb) {
	        try {
	            cb(null, this.openSync(p, flags, mode));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.unlink = function unlink (p, cb) {
	        try {
	            this.unlinkSync(p);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.rmdir = function rmdir (p, cb) {
	        try {
	            this.rmdirSync(p);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	        try {
	            this.mkdirSync(p, mode);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.readdir = function readdir (p, cb) {
	        try {
	            cb(null, this.readdirSync(p));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        try {
	            this.chmodSync(p, isLchmod, mode);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	        try {
	            this.chownSync(p, isLchown, uid, gid);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        try {
	            this.utimesSync(p, atime, mtime);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.link = function link (srcpath, dstpath, cb) {
	        try {
	            this.linkSync(srcpath, dstpath);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	        try {
	            this.symlinkSync(srcpath, dstpath, type);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.readlink = function readlink (p, cb) {
	        try {
	            cb(null, this.readlinkSync(p));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	
	    return SynchronousFileSystem;
	}(BaseFileSystem));
	
	/**
	 * Base class that contains shared implementations of functions for the file
	 * object.
	 */
	var BaseFile = function BaseFile () {};
	
	BaseFile.prototype.sync = function sync (cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.syncSync = function syncSync () {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFile.prototype.datasync = function datasync (cb) {
	    this.sync(cb);
	};
	BaseFile.prototype.datasyncSync = function datasyncSync () {
	    return this.syncSync();
	};
	BaseFile.prototype.chown = function chown (uid, gid, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.chownSync = function chownSync (uid, gid) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFile.prototype.chmod = function chmod (mode, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.chmodSync = function chmodSync (mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFile.prototype.utimes = function utimes (atime, mtime, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.utimesSync = function utimesSync (atime, mtime) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	
	/**
	 * An implementation of the File interface that operates on a file that is
	 * completely in-memory. PreloadFiles are backed by a Buffer.
	 *
	 * This is also an abstract class, as it lacks an implementation of 'sync' and
	 * 'close'. Each filesystem that wishes to use this file representation must
	 * extend this class and implement those two methods.
	 * @todo 'close' lever that disables functionality once closed.
	 */
	var PreloadFile = (function (BaseFile$$1) {
	    function PreloadFile(_fs, _path, _flag, _stat, contents) {
	        BaseFile$$1.call(this);
	        this._pos = 0;
	        this._dirty = false;
	        this._fs = _fs;
	        this._path = _path;
	        this._flag = _flag;
	        this._stat = _stat;
	        if (contents) {
	            this._buffer = contents;
	        }
	        else {
	            // Empty buffer. It'll expand once we write stuff to it.
	            this._buffer = emptyBuffer();
	        }
	        // Note: This invariant is *not* maintained once the file starts getting
	        // modified.
	        // Note: Only actually matters if file is readable, as writeable modes may
	        // truncate/append to file.
	        if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
	            throw new Error(("Invalid buffer: Buffer is " + (this._buffer.length) + " long, yet Stats object specifies that file is " + (this._stat.size) + " long."));
	        }
	    }
	
	    if ( BaseFile$$1 ) PreloadFile.__proto__ = BaseFile$$1;
	    PreloadFile.prototype = Object.create( BaseFile$$1 && BaseFile$$1.prototype );
	    PreloadFile.prototype.constructor = PreloadFile;
	    /**
	     * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.
	     */
	    PreloadFile.prototype.getBuffer = function getBuffer () {
	        return this._buffer;
	    };
	    /**
	     * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!
	     */
	    PreloadFile.prototype.getStats = function getStats () {
	        return this._stat;
	    };
	    PreloadFile.prototype.getFlag = function getFlag () {
	        return this._flag;
	    };
	    /**
	     * Get the path to this file.
	     * @return [String] The path to the file.
	     */
	    PreloadFile.prototype.getPath = function getPath () {
	        return this._path;
	    };
	    /**
	     * Get the current file position.
	     *
	     * We emulate the following bug mentioned in the Node documentation:
	     * > On Linux, positional writes don't work when the file is opened in append
	     *   mode. The kernel ignores the position argument and always appends the data
	     *   to the end of the file.
	     * @return [Number] The current file position.
	     */
	    PreloadFile.prototype.getPos = function getPos () {
	        if (this._flag.isAppendable()) {
	            return this._stat.size;
	        }
	        return this._pos;
	    };
	    /**
	     * Advance the current file position by the indicated number of positions.
	     * @param [Number] delta
	     */
	    PreloadFile.prototype.advancePos = function advancePos (delta) {
	        return this._pos += delta;
	    };
	    /**
	     * Set the file position.
	     * @param [Number] newPos
	     */
	    PreloadFile.prototype.setPos = function setPos (newPos) {
	        return this._pos = newPos;
	    };
	    /**
	     * **Core**: Asynchronous sync. Must be implemented by subclasses of this
	     * class.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.sync = function sync (cb) {
	        try {
	            this.syncSync();
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * **Core**: Synchronous sync.
	     */
	    PreloadFile.prototype.syncSync = function syncSync () {
	        throw new ApiError(ErrorCode.ENOTSUP);
	    };
	    /**
	     * **Core**: Asynchronous close. Must be implemented by subclasses of this
	     * class.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.close = function close (cb) {
	        try {
	            this.closeSync();
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * **Core**: Synchronous close.
	     */
	    PreloadFile.prototype.closeSync = function closeSync () {
	        throw new ApiError(ErrorCode.ENOTSUP);
	    };
	    /**
	     * Asynchronous `stat`.
	     * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb
	     */
	    PreloadFile.prototype.stat = function stat (cb) {
	        try {
	            cb(null, this._stat.clone());
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Synchronous `stat`.
	     */
	    PreloadFile.prototype.statSync = function statSync () {
	        return this._stat.clone();
	    };
	    /**
	     * Asynchronous truncate.
	     * @param [Number] len
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.truncate = function truncate (len, cb) {
	        try {
	            this.truncateSync(len);
	            if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
	                this.sync(cb);
	            }
	            cb();
	        }
	        catch (e) {
	            return cb(e);
	        }
	    };
	    /**
	     * Synchronous truncate.
	     * @param [Number] len
	     */
	    PreloadFile.prototype.truncateSync = function truncateSync (len) {
	        this._dirty = true;
	        if (!this._flag.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
	        }
	        this._stat.mtime = new Date();
	        if (len > this._buffer.length) {
	            var buf = Buffer.alloc(len - this._buffer.length, 0);
	            // Write will set @_stat.size for us.
	            this.writeSync(buf, 0, buf.length, this._buffer.length);
	            if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
	                this.syncSync();
	            }
	            return;
	        }
	        this._stat.size = len;
	        // Truncate buffer to 'len'.
	        var newBuff = Buffer.alloc(len);
	        this._buffer.copy(newBuff, 0, 0, len);
	        this._buffer = newBuff;
	        if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
	            this.syncSync();
	        }
	    };
	    /**
	     * Write buffer to the file.
	     * Note that it is unsafe to use fs.write multiple times on the same file
	     * without waiting for the callback.
	     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
	     *  the file.
	     * @param [Number] offset Offset in the buffer to start reading data from.
	     * @param [Number] length The amount of bytes to write to the file.
	     * @param [Number] position Offset from the beginning of the file where this
	     *   data should be written. If position is null, the data will be written at
	     *   the current position.
	     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]
	     *   cb The number specifies the number of bytes written into the file.
	     */
	    PreloadFile.prototype.write = function write (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Write buffer to the file.
	     * Note that it is unsafe to use fs.writeSync multiple times on the same file
	     * without waiting for the callback.
	     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
	     *  the file.
	     * @param [Number] offset Offset in the buffer to start reading data from.
	     * @param [Number] length The amount of bytes to write to the file.
	     * @param [Number] position Offset from the beginning of the file where this
	     *   data should be written. If position is null, the data will be written at
	     *   the current position.
	     * @return [Number]
	     */
	    PreloadFile.prototype.writeSync = function writeSync (buffer$$1, offset, length, position) {
	        this._dirty = true;
	        if (position === undefined || position === null) {
	            position = this.getPos();
	        }
	        if (!this._flag.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
	        }
	        var endFp = position + length;
	        if (endFp > this._stat.size) {
	            this._stat.size = endFp;
	            if (endFp > this._buffer.length) {
	                // Extend the buffer!
	                var newBuff = Buffer.alloc(endFp);
	                this._buffer.copy(newBuff);
	                this._buffer = newBuff;
	            }
	        }
	        var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
	        this._stat.mtime = new Date();
	        if (this._flag.isSynchronous()) {
	            this.syncSync();
	            return len;
	        }
	        this.setPos(position + len);
	        return len;
	    };
	    /**
	     * Read data from the file.
	     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
	     *   written to.
	     * @param [Number] offset The offset within the buffer where writing will
	     *   start.
	     * @param [Number] length An integer specifying the number of bytes to read.
	     * @param [Number] position An integer specifying where to begin reading from
	     *   in the file. If position is null, data will be read from the current file
	     *   position.
	     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The
	     *   number is the number of bytes read
	     */
	    PreloadFile.prototype.read = function read (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Read data from the file.
	     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
	     *   written to.
	     * @param [Number] offset The offset within the buffer where writing will
	     *   start.
	     * @param [Number] length An integer specifying the number of bytes to read.
	     * @param [Number] position An integer specifying where to begin reading from
	     *   in the file. If position is null, data will be read from the current file
	     *   position.
	     * @return [Number]
	     */
	    PreloadFile.prototype.readSync = function readSync (buffer$$1, offset, length, position) {
	        if (!this._flag.isReadable()) {
	            throw new ApiError(ErrorCode.EPERM, 'File not opened with a readable mode.');
	        }
	        if (position === undefined || position === null) {
	            position = this.getPos();
	        }
	        var endRead = position + length;
	        if (endRead > this._stat.size) {
	            length = this._stat.size - position;
	        }
	        var rv = this._buffer.copy(buffer$$1, offset, position, position + length);
	        this._stat.atime = new Date();
	        this._pos = position + length;
	        return rv;
	    };
	    /**
	     * Asynchronous `fchmod`.
	     * @param [Number|String] mode
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.chmod = function chmod (mode, cb) {
	        try {
	            this.chmodSync(mode);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Asynchronous `fchmod`.
	     * @param [Number] mode
	     */
	    PreloadFile.prototype.chmodSync = function chmodSync (mode) {
	        if (!this._fs.supportsProps()) {
	            throw new ApiError(ErrorCode.ENOTSUP);
	        }
	        this._dirty = true;
	        this._stat.chmod(mode);
	        this.syncSync();
	    };
	    PreloadFile.prototype.isDirty = function isDirty () {
	        return this._dirty;
	    };
	    /**
	     * Resets the dirty bit. Should only be called after a sync has completed successfully.
	     */
	    PreloadFile.prototype.resetDirty = function resetDirty () {
	        this._dirty = false;
	    };
	
	    return PreloadFile;
	}(BaseFile));
	
	/**
	 * File class for the InMemory and XHR file systems.
	 * Doesn't sync to anything, so it works nicely for memory-only files.
	 */
	var NoSyncFile = (function (PreloadFile) {
	    function NoSyncFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile ) NoSyncFile.__proto__ = PreloadFile;
	    NoSyncFile.prototype = Object.create( PreloadFile && PreloadFile.prototype );
	    NoSyncFile.prototype.constructor = NoSyncFile;
	    /**
	     * Asynchronous sync. Doesn't do anything, simply calls the cb.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    NoSyncFile.prototype.sync = function sync (cb) {
	        cb();
	    };
	    /**
	     * Synchronous sync. Doesn't do anything.
	     */
	    NoSyncFile.prototype.syncSync = function syncSync () {
	        // NOP.
	    };
	    /**
	     * Asynchronous close. Doesn't do anything, simply calls the cb.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    NoSyncFile.prototype.close = function close (cb) {
	        cb();
	    };
	    /**
	     * Synchronous close. Doesn't do anything.
	     */
	    NoSyncFile.prototype.closeSync = function closeSync () {
	        // NOP.
	    };
	
	    return NoSyncFile;
	}(PreloadFile));
	
	/**
	 * We define our own file to interpose on syncSync() for mirroring purposes.
	 */
	var MirrorFile = (function (PreloadFile$$1) {
	    function MirrorFile(fs, path$$1, flag, stat, data) {
	        PreloadFile$$1.call(this, fs, path$$1, flag, stat, data);
	    }
	
	    if ( PreloadFile$$1 ) MirrorFile.__proto__ = PreloadFile$$1;
	    MirrorFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    MirrorFile.prototype.constructor = MirrorFile;
	    MirrorFile.prototype.syncSync = function syncSync () {
	        if (this.isDirty()) {
	            this._fs._syncSync(this);
	            this.resetDirty();
	        }
	    };
	    MirrorFile.prototype.closeSync = function closeSync () {
	        this.syncSync();
	    };
	
	    return MirrorFile;
	}(PreloadFile));
	/**
	 * AsyncMirrorFS mirrors a synchronous filesystem into an asynchronous filesystem
	 * by:
	 *
	 * * Performing operations over the in-memory copy, while asynchronously pipelining them
	 *   to the backing store.
	 * * During application loading, the contents of the async file system can be reloaded into
	 *   the synchronous store, if desired.
	 *
	 * The two stores will be kept in sync. The most common use-case is to pair a synchronous
	 * in-memory filesystem with an asynchronous backing store.
	 *
	 * Example: Mirroring an IndexedDB file system to an in memory file system. Now, you can use
	 * IndexedDB synchronously.
	 *
	 * ```javascript
	 * BrowserFS.configure({
	 *   fs: "AsyncMirror",
	 *   options: {
	 *     sync: { fs: "InMemory" },
	 *     async: { fs: "IndexedDB" }
	 *   }
	 * }, function(e) {
	 *   // BrowserFS is initialized and ready-to-use!
	 * });
	 * ```
	 *
	 * Or, alternatively:
	 *
	 * ```javascript
	 * BrowserFS.FileSystem.IndexedDB.Create(function(e, idbfs) {
	 *   BrowserFS.FileSystem.InMemory.Create(function(e, inMemory) {
	 *     BrowserFS.FileSystem.AsyncMirror({
	 *       sync: inMemory, async: idbfs
	 *     }, function(e, mirrored) {
	 *       BrowserFS.initialize(mirrored);
	 *     });
	 *   });
	 * });
	 * ```
	 */
	var AsyncMirror = (function (SynchronousFileSystem$$1) {
	    function AsyncMirror(sync, async, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        SynchronousFileSystem$$1.call(this);
	        /**
	         * Queue of pending asynchronous operations.
	         */
	        this._queue = [];
	        this._queueRunning = false;
	        this._isInitialized = false;
	        this._initializeCallbacks = [];
	        this._sync = sync;
	        this._async = async;
	        if (!sync.supportsSynch()) {
	            throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
	        }
	        deprecationMessage(deprecateMsg, AsyncMirror.Name, { sync: "sync file system instance", async: "async file system instance" });
	    }
	
	    if ( SynchronousFileSystem$$1 ) AsyncMirror.__proto__ = SynchronousFileSystem$$1;
	    AsyncMirror.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    AsyncMirror.prototype.constructor = AsyncMirror;
	    /**
	     * Constructs and initializes an AsyncMirror file system with the given options.
	     */
	    AsyncMirror.Create = function Create (opts, cb) {
	        try {
	            var fs = new AsyncMirror(opts.sync, opts.async, false);
	            fs.initialize(function (e) {
	                if (e) {
	                    cb(e);
	                }
	                else {
	                    cb(null, fs);
	                }
	            }, false);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    AsyncMirror.isAvailable = function isAvailable () {
	        return true;
	    };
	    AsyncMirror.prototype.getName = function getName () {
	        return AsyncMirror.Name;
	    };
	    AsyncMirror.prototype._syncSync = function _syncSync (fd) {
	        this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag('w'), fd.getStats().mode);
	        this.enqueueOp({
	            apiMethod: 'writeFile',
	            arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
	        });
	    };
	    /**
	     * Called once to load up files from async storage into sync storage.
	     */
	    AsyncMirror.prototype.initialize = function initialize (userCb, deprecateMsg) {
	        var this$1 = this;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
	        }
	        var callbacks = this._initializeCallbacks;
	        var end = function (e) {
	            this$1._isInitialized = !e;
	            this$1._initializeCallbacks = [];
	            callbacks.forEach(function (cb) { return cb(e); });
	        };
	        if (!this._isInitialized) {
	            // First call triggers initialization, the rest wait.
	            if (callbacks.push(userCb) === 1) {
	                var copyDirectory = function (p, mode, cb) {
	                    if (p !== '/') {
	                        this$1._sync.mkdirSync(p, mode);
	                    }
	                    this$1._async.readdir(p, function (err, files) {
	                        var i = 0;
	                        // NOTE: This function must not be in a lexically nested statement,
	                        // such as an if or while statement. Safari refuses to run the
	                        // script since it is undefined behavior.
	                        function copyNextFile(err) {
	                            if (err) {
	                                cb(err);
	                            }
	                            else if (i < files.length) {
	                                copyItem(path.join(p, files[i]), copyNextFile);
	                                i++;
	                            }
	                            else {
	                                cb();
	                            }
	                        }
	                        if (err) {
	                            cb(err);
	                        }
	                        else {
	                            copyNextFile();
	                        }
	                    });
	                }, copyFile = function (p, mode, cb) {
	                    this$1._async.readFile(p, null, FileFlag.getFileFlag('r'), function (err, data) {
	                        if (err) {
	                            cb(err);
	                        }
	                        else {
	                            try {
	                                this$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag('w'), mode);
	                            }
	                            catch (e) {
	                                err = e;
	                            }
	                            finally {
	                                cb(err);
	                            }
	                        }
	                    });
	                }, copyItem = function (p, cb) {
	                    this$1._async.stat(p, false, function (err, stats) {
	                        if (err) {
	                            cb(err);
	                        }
	                        else if (stats.isDirectory()) {
	                            copyDirectory(p, stats.mode, cb);
	                        }
	                        else {
	                            copyFile(p, stats.mode, cb);
	                        }
	                    });
	                };
	                copyDirectory('/', 0, end);
	            }
	        }
	        else {
	            userCb();
	        }
	    };
	    AsyncMirror.prototype.isReadOnly = function isReadOnly () { return false; };
	    AsyncMirror.prototype.supportsSynch = function supportsSynch () { return true; };
	    AsyncMirror.prototype.supportsLinks = function supportsLinks () { return false; };
	    AsyncMirror.prototype.supportsProps = function supportsProps () { return this._sync.supportsProps() && this._async.supportsProps(); };
	    AsyncMirror.prototype.renameSync = function renameSync (oldPath, newPath) {
	        this.checkInitialized();
	        this._sync.renameSync(oldPath, newPath);
	        this.enqueueOp({
	            apiMethod: 'rename',
	            arguments: [oldPath, newPath]
	        });
	    };
	    AsyncMirror.prototype.statSync = function statSync (p, isLstat) {
	        this.checkInitialized();
	        return this._sync.statSync(p, isLstat);
	    };
	    AsyncMirror.prototype.openSync = function openSync (p, flag, mode) {
	        this.checkInitialized();
	        // Sanity check: Is this open/close permitted?
	        var fd = this._sync.openSync(p, flag, mode);
	        fd.closeSync();
	        return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag('r')));
	    };
	    AsyncMirror.prototype.unlinkSync = function unlinkSync (p) {
	        this.checkInitialized();
	        this._sync.unlinkSync(p);
	        this.enqueueOp({
	            apiMethod: 'unlink',
	            arguments: [p]
	        });
	    };
	    AsyncMirror.prototype.rmdirSync = function rmdirSync (p) {
	        this.checkInitialized();
	        this._sync.rmdirSync(p);
	        this.enqueueOp({
	            apiMethod: 'rmdir',
	            arguments: [p]
	        });
	    };
	    AsyncMirror.prototype.mkdirSync = function mkdirSync (p, mode) {
	        this.checkInitialized();
	        this._sync.mkdirSync(p, mode);
	        this.enqueueOp({
	            apiMethod: 'mkdir',
	            arguments: [p, mode]
	        });
	    };
	    AsyncMirror.prototype.readdirSync = function readdirSync (p) {
	        this.checkInitialized();
	        return this._sync.readdirSync(p);
	    };
	    AsyncMirror.prototype.existsSync = function existsSync (p) {
	        this.checkInitialized();
	        return this._sync.existsSync(p);
	    };
	    AsyncMirror.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	        this.checkInitialized();
	        this._sync.chmodSync(p, isLchmod, mode);
	        this.enqueueOp({
	            apiMethod: 'chmod',
	            arguments: [p, isLchmod, mode]
	        });
	    };
	    AsyncMirror.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	        this.checkInitialized();
	        this._sync.chownSync(p, isLchown, uid, gid);
	        this.enqueueOp({
	            apiMethod: 'chown',
	            arguments: [p, isLchown, uid, gid]
	        });
	    };
	    AsyncMirror.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	        this.checkInitialized();
	        this._sync.utimesSync(p, atime, mtime);
	        this.enqueueOp({
	            apiMethod: 'utimes',
	            arguments: [p, atime, mtime]
	        });
	    };
	    AsyncMirror.prototype.checkInitialized = function checkInitialized () {
	        if (!this._isInitialized) {
	            throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
	        }
	    };
	    AsyncMirror.prototype.enqueueOp = function enqueueOp (op) {
	        var this$1 = this;
	
	        this._queue.push(op);
	        if (!this._queueRunning) {
	            this._queueRunning = true;
	            var doNextOp = function (err) {
	                if (err) {
	                    console.error(("WARNING: File system has desynchronized. Received following error: " + err + "\n$"));
	                }
	                if (this$1._queue.length > 0) {
	                    var op = this$1._queue.shift(), args = op.arguments;
	                    args.push(doNextOp);
	                    this$1._async[op.apiMethod].apply(this$1._async, args);
	                }
	                else {
	                    this$1._queueRunning = false;
	                }
	            };
	            doNextOp();
	        }
	    };
	
	    return AsyncMirror;
	}(SynchronousFileSystem));
	
	AsyncMirror.Name = "AsyncMirror";
	AsyncMirror.Options = {
	    sync: {
	        type: "object",
	        description: "The synchronous file system to mirror the asynchronous file system to."
	    },
	    async: {
	        type: "object",
	        description: "The asynchronous file system to mirror."
	    }
	};
	
	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest$1(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);
	
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}
	
	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	// Lodash rest function without function.toString()
	// remappings
	function rest(func, start) {
	    return overRest$1(func, start, identity);
	}
	
	var initialParams = function (fn) {
	    return rest(function (args/*..., callback*/) {
	        var callback = args.pop();
	        fn.call(this, args, callback);
	    });
	};
	
	function applyEach$1(eachfn) {
	    return rest(function(fns, args) {
	        var go = initialParams(function(args, callback) {
	            var that = this;
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat(cb));
	            }, callback);
	        });
	        if (args.length) {
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    });
	}
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	/** Built-in value references. */
	var Symbol$1 = root.Symbol;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];
	
	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}
	
	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]';
	var undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]';
	var funcTag = '[object Function]';
	var genTag = '[object GeneratorFunction]';
	var proxyTag = '[object Proxy]';
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	// A temporary value used to identify if the loop should be broken.
	// See #1064, #1293
	var breakLoop = {};
	
	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}
	
	function once(fn) {
	    return function () {
	        if (fn === null) { return; }
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	
	var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
	
	var getIterator = function (coll) {
	    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
	};
	
	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	
	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Built-in value references. */
	var Buffer$1 = moduleExports ? root.Buffer : undefined;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER$1 : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]';
	var arrayTag = '[object Array]';
	var boolTag = '[object Boolean]';
	var dateTag = '[object Date]';
	var errorTag = '[object Error]';
	var funcTag$1 = '[object Function]';
	var mapTag = '[object Map]';
	var numberTag = '[object Number]';
	var objectTag = '[object Object]';
	var regexpTag = '[object RegExp]';
	var setTag = '[object Set]';
	var stringTag = '[object String]';
	var weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]';
	var dataViewTag = '[object DataView]';
	var float32Tag = '[object Float32Array]';
	var float64Tag = '[object Float64Array]';
	var int8Tag = '[object Int8Array]';
	var int16Tag = '[object Int16Array]';
	var int32Tag = '[object Int32Array]';
	var uint8Tag = '[object Uint8Array]';
	var uint8ClampedTag = '[object Uint8ClampedArray]';
	var uint16Tag = '[object Uint16Array]';
	var uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	
	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}
	
	/** Detect free variable `exports`. */
	var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports$1 && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty$1.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;
	
	  return value === proto;
	}
	
	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);
	
	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	function createArrayIterator(coll) {
	    var i = -1;
	    var len = coll.length;
	    return function next() {
	        return ++i < len ? {value: coll[i], key: i} : null;
	    }
	}
	
	function createES2015Iterator(iterator) {
	    var i = -1;
	    return function next() {
	        var item = iterator.next();
	        if (item.done)
	            { return null; }
	        i++;
	        return {value: item.value, key: i};
	    }
	}
	
	function createObjectIterator(obj) {
	    var okeys = keys(obj);
	    var i = -1;
	    var len = okeys.length;
	    return function next() {
	        var key = okeys[++i];
	        return i < len ? {value: obj[key], key: key} : null;
	    };
	}
	
	function iterator(coll) {
	    if (isArrayLike(coll)) {
	        return createArrayIterator(coll);
	    }
	
	    var iterator = getIterator(coll);
	    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
	}
	
	function onlyOnce(fn) {
	    return function() {
	        if (fn === null) { throw new Error("Callback was already called."); }
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	
	function _eachOfLimit(limit) {
	    return function (obj, iteratee, callback) {
	        callback = once(callback || noop);
	        if (limit <= 0 || !obj) {
	            return callback(null);
	        }
	        var nextElem = iterator(obj);
	        var done = false;
	        var running = 0;
	
	        function iterateeCallback(err, value) {
	            running -= 1;
	            if (err) {
	                done = true;
	                callback(err);
	            }
	            else if (value === breakLoop || (done && running <= 0)) {
	                done = true;
	                return callback(null);
	            }
	            else {
	                replenish();
	            }
	        }
	
	        function replenish () {
	            while (running < limit && !done) {
	                var elem = nextElem();
	                if (elem === null) {
	                    done = true;
	                    if (running <= 0) {
	                        callback(null);
	                    }
	                    return;
	                }
	                running += 1;
	                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
	            }
	        }
	
	        replenish();
	    };
	}
	
	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name eachOfLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A function to apply to each
	 * item in `coll`. The `key` is the item's key, or index in the case of an
	 * array. The iteratee is passed a `callback(err)` which must be called once it
	 * has completed. If no error has occurred, the callback should be run without
	 * arguments or with an explicit `null` argument. Invoked with
	 * (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	function eachOfLimit(coll, limit, iteratee, callback) {
	    _eachOfLimit(limit)(coll, iteratee, callback);
	}
	
	function doLimit(fn, limit) {
	    return function (iterable, iteratee, callback) {
	        return fn(iterable, limit, iteratee, callback);
	    };
	}
	
	// eachOf implementation optimized for array-likes
	function eachOfArrayLike(coll, iteratee, callback) {
	    callback = once(callback || noop);
	    var index = 0,
	        completed = 0,
	        length = coll.length;
	    if (length === 0) {
	        callback(null);
	    }
	
	    function iteratorCallback(err, value) {
	        if (err) {
	            callback(err);
	        } else if ((++completed === length) || value === breakLoop) {
	            callback(null);
	        }
	    }
	
	    for (; index < length; index++) {
	        iteratee(coll[index], index, onlyOnce(iteratorCallback));
	    }
	}
	
	// a generic version of eachOf which can handle array, object, and iterator cases.
	var eachOfGeneric = doLimit(eachOfLimit, Infinity);
	
	/**
	 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
	 * to the iteratee.
	 *
	 * @name eachOf
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEachOf
	 * @category Collection
	 * @see [async.each]{@link module:Collections.each}
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each
	 * item in `coll`. The `key` is the item's key, or index in the case of an
	 * array. The iteratee is passed a `callback(err)` which must be called once it
	 * has completed. If no error has occurred, the callback should be run without
	 * arguments or with an explicit `null` argument. Invoked with
	 * (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @example
	 *
	 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
	 * var configs = {};
	 *
	 * async.forEachOf(obj, function (value, key, callback) {
	 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
	 *         if (err) return callback(err);
	 *         try {
	 *             configs[key] = JSON.parse(data);
	 *         } catch (e) {
	 *             return callback(e);
	 *         }
	 *         callback();
	 *     });
	 * }, function (err) {
	 *     if (err) console.error(err.message);
	 *     // configs is now a map of JSON data
	 *     doSomethingWith(configs);
	 * });
	 */
	var eachOf = function(coll, iteratee, callback) {
	    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
	    eachOfImplementation(coll, iteratee, callback);
	};
	
	function doParallel(fn) {
	    return function (obj, iteratee, callback) {
	        return fn(eachOf, obj, iteratee, callback);
	    };
	}
	
	function _asyncMap(eachfn, arr, iteratee, callback) {
	    callback = callback || noop;
	    arr = arr || [];
	    var results = [];
	    var counter = 0;
	
	    eachfn(arr, function (value, _, callback) {
	        var index = counter++;
	        iteratee(value, function (err, v) {
	            results[index] = v;
	            callback(err);
	        });
	    }, function (err) {
	        callback(err, results);
	    });
	}
	
	/**
	 * Produces a new collection of values by mapping each value in `coll` through
	 * the `iteratee` function. The `iteratee` is called with an item from `coll`
	 * and a callback for when it has finished processing. Each of these callback
	 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
	 * `iteratee` passes an error to its callback, the main `callback` (for the
	 * `map` function) is immediately called with the error.
	 *
	 * Note, that since this function applies the `iteratee` to each item in
	 * parallel, there is no guarantee that the `iteratee` functions will complete
	 * in order. However, the results array will be in the same order as the
	 * original `coll`.
	 *
	 * If `map` is passed an Object, the results will be an Array.  The results
	 * will roughly be in the order of the original Objects' keys (but this can
	 * vary across JavaScript engines)
	 *
	 * @name map
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a
	 * transformed item. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an Array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 * @example
	 *
	 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
	 *     // results is now an array of stats for each file
	 * });
	 */
	var map = doParallel(_asyncMap);
	
	/**
	 * Applies the provided arguments to each function in the array, calling
	 * `callback` after all functions have completed. If you only provide the first
	 * argument, `fns`, then it will return a function which lets you pass in the
	 * arguments as if it were a single function call. If more arguments are
	 * provided, `callback` is required while `args` is still optional.
	 *
	 * @name applyEach
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array|Iterable|Object} fns - A collection of asynchronous functions
	 * to all call with the same arguments
	 * @param {...*} [args] - any number of separate arguments to pass to the
	 * function.
	 * @param {Function} [callback] - the final argument should be the callback,
	 * called when all functions have completed processing.
	 * @returns {Function} - If only the first argument, `fns`, is provided, it will
	 * return a function which lets you pass in the arguments as if it were a single
	 * function call. The signature is `(..args, callback)`. If invoked with any
	 * arguments, `callback` is required.
	 * @example
	 *
	 * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
	 *
	 * // partial application example:
	 * async.each(
	 *     buckets,
	 *     async.applyEach([enableSearch, updateSchema]),
	 *     callback
	 * );
	 */
	applyEach$1(map);
	
	function doParallelLimit(fn) {
	    return function (obj, limit, iteratee, callback) {
	        return fn(_eachOfLimit(limit), obj, iteratee, callback);
	    };
	}
	
	/**
	 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name mapLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.map]{@link module:Collections.map}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a transformed
	 * item. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 */
	var mapLimit = doParallelLimit(_asyncMap);
	
	/**
	 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
	 *
	 * @name mapSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.map]{@link module:Collections.map}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a
	 * transformed item. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 */
	var mapSeries = doLimit(mapLimit, 1);
	
	/**
	 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
	 *
	 * @name applyEachSeries
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
	 * @category Control Flow
	 * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
	 * call with the same arguments
	 * @param {...*} [args] - any number of separate arguments to pass to the
	 * function.
	 * @param {Function} [callback] - the final argument should be the callback,
	 * called when all functions have completed processing.
	 * @returns {Function} - If only the first argument is provided, it will return
	 * a function which lets you pass in the arguments as if it were a single
	 * function call.
	 */
	applyEach$1(mapSeries);
	
	/**
	 * Creates a continuation function with some arguments already applied.
	 *
	 * Useful as a shorthand when combined with other control flow functions. Any
	 * arguments passed to the returned function are added to the arguments
	 * originally passed to apply.
	 *
	 * @name apply
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {Function} function - The function you want to eventually apply all
	 * arguments to. Invokes with (arguments...).
	 * @param {...*} arguments... - Any number of arguments to automatically apply
	 * when the continuation is called.
	 * @example
	 *
	 * // using apply
	 * async.parallel([
	 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
	 *     async.apply(fs.writeFile, 'testfile2', 'test2')
	 * ]);
	 *
	 *
	 * // the same process without using apply
	 * async.parallel([
	 *     function(callback) {
	 *         fs.writeFile('testfile1', 'test1', callback);
	 *     },
	 *     function(callback) {
	 *         fs.writeFile('testfile2', 'test2', callback);
	 *     }
	 * ]);
	 *
	 * // It's possible to pass any number of additional arguments when calling the
	 * // continuation:
	 *
	 * node> var fn = async.apply(sys.puts, 'one');
	 * node> fn('two', 'three');
	 * one
	 * two
	 * three
	 */
	rest(function(fn, args) {
	    return rest(function(callArgs) {
	        return fn.apply(null, args.concat(callArgs));
	    });
	});
	
	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;
	
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	
	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;
	
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}
	
	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);
	
	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}
	
	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;
	
	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}
	
	/**
	 * Determines the best order for running the functions in `tasks`, based on
	 * their requirements. Each function can optionally depend on other functions
	 * being completed first, and each function is run as soon as its requirements
	 * are satisfied.
	 *
	 * If any of the functions pass an error to their callback, the `auto` sequence
	 * will stop. Further tasks will not execute (so any other functions depending
	 * on it will not run), and the main `callback` is immediately called with the
	 * error.
	 *
	 * Functions also receive an object containing the results of functions which
	 * have completed so far as the first argument, if they have dependencies. If a
	 * task function has no dependencies, it will only be passed a callback.
	 *
	 * @name auto
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Object} tasks - An object. Each of its properties is either a
	 * function or an array of requirements, with the function itself the last item
	 * in the array. The object's key of a property serves as the name of the task
	 * defined by that property, i.e. can be used when specifying requirements for
	 * other tasks. The function receives one or two arguments:
	 * * a `results` object, containing the results of the previously executed
	 *   functions, only passed if the task has any dependencies,
	 * * a `callback(err, result)` function, which must be called when finished,
	 *   passing an `error` (which can be `null`) and the result of the function's
	 *   execution.
	 * @param {number} [concurrency=Infinity] - An optional `integer` for
	 * determining the maximum number of tasks that can be run in parallel. By
	 * default, as many as possible.
	 * @param {Function} [callback] - An optional callback which is called when all
	 * the tasks have been completed. It receives the `err` argument if any `tasks`
	 * pass an error to their callback. Results are always returned; however, if an
	 * error occurs, no further `tasks` will be performed, and the results object
	 * will only contain partial results. Invoked with (err, results).
	 * @returns undefined
	 * @example
	 *
	 * async.auto({
	 *     // this function will just be passed a callback
	 *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
	 *     showData: ['readData', function(results, cb) {
	 *         // results.readData is the file's contents
	 *         // ...
	 *     }]
	 * }, callback);
	 *
	 * async.auto({
	 *     get_data: function(callback) {
	 *         console.log('in get_data');
	 *         // async code to get some data
	 *         callback(null, 'data', 'converted to array');
	 *     },
	 *     make_folder: function(callback) {
	 *         console.log('in make_folder');
	 *         // async code to create a directory to store a file in
	 *         // this is run at the same time as getting the data
	 *         callback(null, 'folder');
	 *     },
	 *     write_file: ['get_data', 'make_folder', function(results, callback) {
	 *         console.log('in write_file', JSON.stringify(results));
	 *         // once there is some data and the directory exists,
	 *         // write the data to a file in the directory
	 *         callback(null, 'filename');
	 *     }],
	 *     email_link: ['write_file', function(results, callback) {
	 *         console.log('in email_link', JSON.stringify(results));
	 *         // once the file is written let's email a link to it...
	 *         // results.write_file contains the filename returned by write_file.
	 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
	 *     }]
	 * }, function(err, results) {
	 *     console.log('err = ', err);
	 *     console.log('results = ', results);
	 * });
	 */
	
	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	
	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	
	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	
	/** Used to compose unicode character classes. */
	
	/** Used to compose unicode character classes. */
	var rsAstralRange$1 = '\\ud800-\\udfff';
	var rsComboMarksRange$1 = '\\u0300-\\u036f';
	var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
	var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
	var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
	var rsVarRange$1 = '\\ufe0e\\ufe0f';
	
	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange$1 + ']';
	var rsCombo = '[' + rsComboRange$1 + ']';
	var rsFitz = '\\ud83c[\\udffb-\\udfff]';
	var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
	var rsNonAstral = '[^' + rsAstralRange$1 + ']';
	var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
	var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
	var rsZWJ$1 = '\\u200d';
	
	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?';
	var rsOptVar = '[' + rsVarRange$1 + ']?';
	var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
	var rsSeq = rsOptVar + reOptMod + rsOptJoin;
	var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	
	var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
	var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
	
	function fallback(fn) {
	    setTimeout(fn, 0);
	}
	
	function wrap(defer) {
	    return rest(function (fn, args) {
	        defer(function () {
	            fn.apply(null, args);
	        });
	    });
	}
	
	var _defer;
	
	if (hasSetImmediate) {
	    _defer = setImmediate;
	} else if (hasNextTick) {
	    _defer = process.nextTick;
	} else {
	    _defer = fallback;
	}
	
	wrap(_defer);
	
	// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
	// used for queues. This implementation assumes that the node provided by the user can be modified
	// to adjust the next and last properties. We implement only the minimal functionality
	// for queue support.
	
	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
	 *
	 * @name eachOfSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`. The
	 * `key` is the item's key, or index in the case of an array. The iteratee is
	 * passed a `callback(err)` which must be called once it has completed. If no
	 * error has occurred, the callback should be run without arguments or with an
	 * explicit `null` argument. Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Invoked with (err).
	 */
	var eachOfSeries = doLimit(eachOfLimit, 1);
	
	/**
	 * Reduces `coll` into a single value using an async `iteratee` to return each
	 * successive step. `memo` is the initial state of the reduction. This function
	 * only operates in series.
	 *
	 * For performance reasons, it may make sense to split a call to this function
	 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
	 * results. This function is for situations where each step in the reduction
	 * needs to be async; if you can get the data before reducing it, then it's
	 * probably a good idea to do so.
	 *
	 * @name reduce
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias inject
	 * @alias foldl
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {*} memo - The initial state of the reduction.
	 * @param {Function} iteratee - A function applied to each item in the
	 * array to produce the next step in the reduction. The `iteratee` is passed a
	 * `callback(err, reduction)` which accepts an optional error as its first
	 * argument, and the state of the reduction as the second. If an error is
	 * passed to the callback, the reduction is stopped and the main `callback` is
	 * immediately called with the error. Invoked with (memo, item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result is the reduced value. Invoked with
	 * (err, result).
	 * @example
	 *
	 * async.reduce([1,2,3], 0, function(memo, item, callback) {
	 *     // pointless async:
	 *     process.nextTick(function() {
	 *         callback(null, memo + item)
	 *     });
	 * }, function(err, result) {
	 *     // result is now equal to the last value of memo, which is 6
	 * });
	 */
	function reduce(coll, memo, iteratee, callback) {
	    callback = once(callback || noop);
	    eachOfSeries(coll, function(x, i, callback) {
	        iteratee(memo, x, function(err, v) {
	            memo = v;
	            callback(err);
	        });
	    }, function(err) {
	        callback(err, memo);
	    });
	}
	
	/**
	 * Version of the compose function that is more natural to read. Each function
	 * consumes the return value of the previous function. It is the equivalent of
	 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
	 *
	 * Each function is executed with the `this` binding of the composed function.
	 *
	 * @name seq
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.compose]{@link module:ControlFlow.compose}
	 * @category Control Flow
	 * @param {...Function} functions - the asynchronous functions to compose
	 * @returns {Function} a function that composes the `functions` in order
	 * @example
	 *
	 * // Requires lodash (or underscore), express3 and dresende's orm2.
	 * // Part of an app, that fetches cats of the logged user.
	 * // This example uses `seq` function to avoid overnesting and error
	 * // handling clutter.
	 * app.get('/cats', function(request, response) {
	 *     var User = request.models.User;
	 *     async.seq(
	 *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
	 *         function(user, fn) {
	 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
	 *         }
	 *     )(req.session.user_id, function (err, cats) {
	 *         if (err) {
	 *             console.error(err);
	 *             response.json({ status: 'error', message: err.message });
	 *         } else {
	 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
	 *         }
	 *     });
	 * });
	 */
	var seq = rest(function seq(functions) {
	    return rest(function(args) {
	        var that = this;
	
	        var cb = args[args.length - 1];
	        if (typeof cb == 'function') {
	            args.pop();
	        } else {
	            cb = noop;
	        }
	
	        reduce(functions, args, function(newargs, fn, cb) {
	            fn.apply(that, newargs.concat(rest(function(err, nextargs) {
	                cb(err, nextargs);
	            })));
	        },
	        function(err, results) {
	            cb.apply(that, [err].concat(results));
	        });
	    });
	});
	
	/**
	 * Creates a function which is a composition of the passed asynchronous
	 * functions. Each function consumes the return value of the function that
	 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
	 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
	 *
	 * Each function is executed with the `this` binding of the composed function.
	 *
	 * @name compose
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {...Function} functions - the asynchronous functions to compose
	 * @returns {Function} an asynchronous function that is the composed
	 * asynchronous `functions`
	 * @example
	 *
	 * function add1(n, callback) {
	 *     setTimeout(function () {
	 *         callback(null, n + 1);
	 *     }, 10);
	 * }
	 *
	 * function mul3(n, callback) {
	 *     setTimeout(function () {
	 *         callback(null, n * 3);
	 *     }, 10);
	 * }
	 *
	 * var add1mul3 = async.compose(mul3, add1);
	 * add1mul3(4, function (err, result) {
	 *     // result now equals 15
	 * });
	 */
	rest(function(args) {
	    return seq.apply(null, args.reverse());
	});
	
	/**
	 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
	 * the concatenated list. The `iteratee`s are called in parallel, and the
	 * results are concatenated as they return. There is no guarantee that the
	 * results array will be returned in the original order of `coll` passed to the
	 * `iteratee` function.
	 *
	 * @name concat
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, results)` which must be called once
	 * it has completed with an error (which can be `null`) and an array of results.
	 * Invoked with (item, callback).
	 * @param {Function} [callback(err)] - A callback which is called after all the
	 * `iteratee` functions have finished, or an error occurs. Results is an array
	 * containing the concatenated results of the `iteratee` function. Invoked with
	 * (err, results).
	 * @example
	 *
	 * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
	 *     // files is now a list of filenames that exist in the 3 directories
	 * });
	 */
	
	/**
	 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
	 *
	 * @name concatSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.concat]{@link module:Collections.concat}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, results)` which must be called once
	 * it has completed with an error (which can be `null`) and an array of results.
	 * Invoked with (item, callback).
	 * @param {Function} [callback(err)] - A callback which is called after all the
	 * `iteratee` functions have finished, or an error occurs. Results is an array
	 * containing the concatenated results of the `iteratee` function. Invoked with
	 * (err, results).
	 */
	
	/**
	 * Returns a function that when called, calls-back with the values provided.
	 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
	 * [`auto`]{@link module:ControlFlow.auto}.
	 *
	 * @name constant
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {...*} arguments... - Any number of arguments to automatically invoke
	 * callback with.
	 * @returns {Function} Returns a function that when invoked, automatically
	 * invokes the callback with the previous given arguments.
	 * @example
	 *
	 * async.waterfall([
	 *     async.constant(42),
	 *     function (value, next) {
	 *         // value === 42
	 *     },
	 *     //...
	 * ], callback);
	 *
	 * async.waterfall([
	 *     async.constant(filename, "utf8"),
	 *     fs.readFile,
	 *     function (fileData, next) {
	 *         //...
	 *     }
	 *     //...
	 * ], callback);
	 *
	 * async.auto({
	 *     hostname: async.constant("https://server.net/"),
	 *     port: findFreePort,
	 *     launchServer: ["hostname", "port", function (options, cb) {
	 *         startServer(options, cb);
	 *     }],
	 *     //...
	 * }, callback);
	 */
	rest(function(values) {
	    var args = [null].concat(values);
	    return initialParams(function (ignoredArgs, callback) {
	        return callback.apply(this, args);
	    });
	});
	
	/**
	 * Returns the first value in `coll` that passes an async truth test. The
	 * `iteratee` is applied in parallel, meaning the first iteratee to return
	 * `true` will fire the detect `callback` with that result. That means the
	 * result might not be the first item in the original `coll` (in terms of order)
	 * that passes the test.
	
	 * If order within the original `coll` is important, then look at
	 * [`detectSeries`]{@link module:Collections.detectSeries}.
	 *
	 * @name detect
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias find
	 * @category Collections
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, truthValue)` which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the `iteratee` functions have finished.
	 * Result will be the first item in the array that passes the truth test
	 * (iteratee) or the value `undefined` if none passed. Invoked with
	 * (err, result).
	 * @example
	 *
	 * async.detect(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, result) {
	 *     // result now equals the first file in the list that exists
	 * });
	 */
	
	/**
	 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name detectLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.detect]{@link module:Collections.detect}
	 * @alias findLimit
	 * @category Collections
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, truthValue)` which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the `iteratee` functions have finished.
	 * Result will be the first item in the array that passes the truth test
	 * (iteratee) or the value `undefined` if none passed. Invoked with
	 * (err, result).
	 */
	
	/**
	 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
	 *
	 * @name detectSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.detect]{@link module:Collections.detect}
	 * @alias findSeries
	 * @category Collections
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, truthValue)` which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the `iteratee` functions have finished.
	 * Result will be the first item in the array that passes the truth test
	 * (iteratee) or the value `undefined` if none passed. Invoked with
	 * (err, result).
	 */
	
	function consoleFunc(name) {
	    return rest(function (fn, args) {
	        fn.apply(null, args.concat(rest(function (err, args) {
	            if (typeof console === 'object') {
	                if (err) {
	                    if (console.error) {
	                        console.error(err);
	                    }
	                }
	                else if (console[name]) {
	                    arrayEach(args, function (x) {
	                        console[name](x);
	                    });
	                }
	            }
	        })));
	    });
	}
	
	/**
	 * Logs the result of an `async` function to the `console` using `console.dir`
	 * to display the properties of the resulting object. Only works in Node.js or
	 * in browsers that support `console.dir` and `console.error` (such as FF and
	 * Chrome). If multiple arguments are returned from the async function,
	 * `console.dir` is called on each argument in order.
	 *
	 * @name dir
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {Function} function - The function you want to eventually apply all
	 * arguments to.
	 * @param {...*} arguments... - Any number of arguments to apply to the function.
	 * @example
	 *
	 * // in a module
	 * var hello = function(name, callback) {
	 *     setTimeout(function() {
	 *         callback(null, {hello: name});
	 *     }, 1000);
	 * };
	 *
	 * // in the node repl
	 * node> async.dir(hello, 'world');
	 * {hello: 'world'}
	 */
	consoleFunc('dir');
	
	function _withoutIndex(iteratee) {
	    return function (value, index, callback) {
	        return iteratee(value, callback);
	    };
	}
	
	/**
	 * Applies the function `iteratee` to each item in `coll`, in parallel.
	 * The `iteratee` is called with an item from the list, and a callback for when
	 * it has finished. If the `iteratee` passes an error to its `callback`, the
	 * main `callback` (for the `each` function) is immediately called with the
	 * error.
	 *
	 * Note, that since this function applies `iteratee` to each item in parallel,
	 * there is no guarantee that the iteratee functions will complete in order.
	 *
	 * @name each
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEach
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item
	 * in `coll`. The iteratee is passed a `callback(err)` which must be called once
	 * it has completed. If no error has occurred, the `callback` should be run
	 * without arguments or with an explicit `null` argument. The array index is not
	 * passed to the iteratee. Invoked with (item, callback). If you need the index,
	 * use `eachOf`.
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @example
	 *
	 * // assuming openFiles is an array of file names and saveFile is a function
	 * // to save the modified contents of that file:
	 *
	 * async.each(openFiles, saveFile, function(err){
	 *   // if any of the saves produced an error, err would equal that error
	 * });
	 *
	 * // assuming openFiles is an array of file names
	 * async.each(openFiles, function(file, callback) {
	 *
	 *     // Perform operation on file here.
	 *     console.log('Processing file ' + file);
	 *
	 *     if( file.length > 32 ) {
	 *       console.log('This file name is too long');
	 *       callback('File name too long');
	 *     } else {
	 *       // Do work to process file here
	 *       console.log('File processed');
	 *       callback();
	 *     }
	 * }, function(err) {
	 *     // if any of the file processing produced an error, err would equal that error
	 *     if( err ) {
	 *       // One of the iterations produced an error.
	 *       // All processing will now stop.
	 *       console.log('A file failed to process');
	 *     } else {
	 *       console.log('All files have been processed successfully');
	 *     }
	 * });
	 */
	function eachLimit(coll, iteratee, callback) {
	    eachOf(coll, _withoutIndex(iteratee), callback);
	}
	
	/**
	 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
	 *
	 * @name eachSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.each]{@link module:Collections.each}
	 * @alias forEachSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each
	 * item in `coll`. The iteratee is passed a `callback(err)` which must be called
	 * once it has completed. If no error has occurred, the `callback` should be run
	 * without arguments or with an explicit `null` argument. The array index is
	 * not passed to the iteratee. Invoked with (item, callback). If you need the
	 * index, use `eachOfSeries`.
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	
	/**
	 * Returns `true` if every element in `coll` satisfies an async test. If any
	 * iteratee call returns `false`, the main `callback` is immediately called.
	 *
	 * @name every
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias all
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the
	 * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	 * which must be called with a  boolean argument once it has completed. Invoked
	 * with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result will be either `true` or `false`
	 * depending on the values of the async tests. Invoked with (err, result).
	 * @example
	 *
	 * async.every(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, result) {
	 *     // if result is true then every file exists
	 * });
	 */
	
	/**
	 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name everyLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.every]{@link module:Collections.every}
	 * @alias allLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in the
	 * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	 * which must be called with a  boolean argument once it has completed. Invoked
	 * with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result will be either `true` or `false`
	 * depending on the values of the async tests. Invoked with (err, result).
	 */
	
	/**
	 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
	 *
	 * @name everySeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.every]{@link module:Collections.every}
	 * @alias allSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the
	 * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	 * which must be called with a  boolean argument once it has completed. Invoked
	 * with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result will be either `true` or `false`
	 * depending on the values of the async tests. Invoked with (err, result).
	 */
	
	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	
	/**
	 * Returns a new array of all the values in `coll` which pass an async truth
	 * test. This operation is performed in parallel, but the results array will be
	 * in the same order as the original.
	 *
	 * @name filter
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias select
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 * @example
	 *
	 * async.filter(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, results) {
	 *     // results now equals an array of the existing files
	 * });
	 */
	
	/**
	 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name filterLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.filter]{@link module:Collections.filter}
	 * @alias selectLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 */
	
	/**
	 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
	 *
	 * @name filterSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.filter]{@link module:Collections.filter}
	 * @alias selectSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results)
	 */
	
	/**
	 * Logs the result of an `async` function to the `console`. Only works in
	 * Node.js or in browsers that support `console.log` and `console.error` (such
	 * as FF and Chrome). If multiple arguments are returned from the async
	 * function, `console.log` is called on each argument in order.
	 *
	 * @name log
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {Function} function - The function you want to eventually apply all
	 * arguments to.
	 * @param {...*} arguments... - Any number of arguments to apply to the function.
	 * @example
	 *
	 * // in a module
	 * var hello = function(name, callback) {
	 *     setTimeout(function() {
	 *         callback(null, 'hello ' + name);
	 *     }, 1000);
	 * };
	 *
	 * // in the node repl
	 * node> async.log(hello, 'world');
	 * 'hello world'
	 */
	consoleFunc('log');
	
	/**
	 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
	 *
	 * Produces a new Object by mapping each value of `obj` through the `iteratee`
	 * function. The `iteratee` is called each `value` and `key` from `obj` and a
	 * callback for when it has finished processing. Each of these callbacks takes
	 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
	 * passes an error to its callback, the main `callback` (for the `mapValues`
	 * function) is immediately called with the error.
	 *
	 * Note, the order of the keys in the result is not guaranteed.  The keys will
	 * be roughly in the order they complete, (but this is very engine-specific)
	 *
	 * @name mapValues
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Object} obj - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each value and key in
	 * `coll`. The iteratee is passed a `callback(err, transformed)` which must be
	 * called once it has completed with an error (which can be `null`) and a
	 * transformed value. Invoked with (value, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. `result` is a new object consisting
	 * of each key from `obj`, with each transformed value on the right-hand side.
	 * Invoked with (err, result).
	 * @example
	 *
	 * async.mapValues({
	 *     f1: 'file1',
	 *     f2: 'file2',
	 *     f3: 'file3'
	 * }, function (file, key, callback) {
	 *   fs.stat(file, callback);
	 * }, function(err, result) {
	 *     // result is now a map of stats for each file, e.g.
	 *     // {
	 *     //     f1: [stats for file1],
	 *     //     f2: [stats for file2],
	 *     //     f3: [stats for file3]
	 *     // }
	 * });
	 */
	
	/**
	 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
	 *
	 * @name mapValuesSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.mapValues]{@link module:Collections.mapValues}
	 * @category Collection
	 * @param {Object} obj - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each value in `obj`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a
	 * transformed value. Invoked with (value, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. `result` is a new object consisting
	 * of each key from `obj`, with each transformed value on the right-hand side.
	 * Invoked with (err, result).
	 */
	
	/**
	 * Calls `callback` on a later loop around the event loop. In Node.js this just
	 * calls `setImmediate`.  In the browser it will use `setImmediate` if
	 * available, otherwise `setTimeout(callback, 0)`, which means other higher
	 * priority events may precede the execution of `callback`.
	 *
	 * This is used internally for browser-compatibility purposes.
	 *
	 * @name nextTick
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @alias setImmediate
	 * @category Util
	 * @param {Function} callback - The function to call on a later loop around
	 * the event loop. Invoked with (args...).
	 * @param {...*} args... - any number of additional arguments to pass to the
	 * callback on the next tick.
	 * @example
	 *
	 * var call_order = [];
	 * async.nextTick(function() {
	 *     call_order.push('two');
	 *     // call_order now equals ['one','two']
	 * });
	 * call_order.push('one');
	 *
	 * async.setImmediate(function (a, b, c) {
	 *     // a, b, and c equal 1, 2, and 3
	 * }, 1, 2, 3);
	 */
	var _defer$1;
	
	if (hasNextTick) {
	    _defer$1 = process.nextTick;
	} else if (hasSetImmediate) {
	    _defer$1 = setImmediate;
	} else {
	    _defer$1 = fallback;
	}
	
	wrap(_defer$1);
	
	/**
	 * Calls `callback` on a later loop around the event loop. In Node.js this just
	 * calls `setImmediate`.  In the browser it will use `setImmediate` if
	 * available, otherwise `setTimeout(callback, 0)`, which means other higher
	 * priority events may precede the execution of `callback`.
	 *
	 * This is used internally for browser-compatibility purposes.
	 *
	 * @name setImmediate
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @alias nextTick
	 * @category Util
	 * @param {Function} callback - The function to call on a later loop around
	 * the event loop. Invoked with (args...).
	 * @param {...*} args... - any number of additional arguments to pass to the
	 * callback on the next tick.
	 * @example
	 *
	 * var call_order = [];
	 * async.nextTick(function() {
	 *     call_order.push('two');
	 *     // call_order now equals ['one','two']
	 * });
	 * call_order.push('one');
	 *
	 * async.setImmediate(function (a, b, c) {
	 *     // a, b, and c equal 1, 2, and 3
	 * }, 1, 2, 3);
	 */
	
	/**
	 * A queue of tasks for the worker function to complete.
	 * @typedef {Object} QueueObject
	 * @memberOf module:ControlFlow
	 * @property {Function} length - a function returning the number of items
	 * waiting to be processed. Invoke with `queue.length()`.
	 * @property {boolean} started - a boolean indicating whether or not any
	 * items have been pushed and processed by the queue.
	 * @property {Function} running - a function returning the number of items
	 * currently being processed. Invoke with `queue.running()`.
	 * @property {Function} workersList - a function returning the array of items
	 * currently being processed. Invoke with `queue.workersList()`.
	 * @property {Function} idle - a function returning false if there are items
	 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
	 * @property {number} concurrency - an integer for determining how many `worker`
	 * functions should be run in parallel. This property can be changed after a
	 * `queue` is created to alter the concurrency on-the-fly.
	 * @property {Function} push - add a new task to the `queue`. Calls `callback`
	 * once the `worker` has finished processing the task. Instead of a single task,
	 * a `tasks` array can be submitted. The respective callback is used for every
	 * task in the list. Invoke with `queue.push(task, [callback])`,
	 * @property {Function} unshift - add a new task to the front of the `queue`.
	 * Invoke with `queue.unshift(task, [callback])`.
	 * @property {Function} saturated - a callback that is called when the number of
	 * running workers hits the `concurrency` limit, and further tasks will be
	 * queued.
	 * @property {Function} unsaturated - a callback that is called when the number
	 * of running workers is less than the `concurrency` & `buffer` limits, and
	 * further tasks will not be queued.
	 * @property {number} buffer - A minimum threshold buffer in order to say that
	 * the `queue` is `unsaturated`.
	 * @property {Function} empty - a callback that is called when the last item
	 * from the `queue` is given to a `worker`.
	 * @property {Function} drain - a callback that is called when the last item
	 * from the `queue` has returned from the `worker`.
	 * @property {Function} error - a callback that is called when a task errors.
	 * Has the signature `function(error, task)`.
	 * @property {boolean} paused - a boolean for determining whether the queue is
	 * in a paused state.
	 * @property {Function} pause - a function that pauses the processing of tasks
	 * until `resume()` is called. Invoke with `queue.pause()`.
	 * @property {Function} resume - a function that resumes the processing of
	 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
	 * @property {Function} kill - a function that removes the `drain` callback and
	 * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.
	 */
	
	/**
	 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
	 * `queue` are processed in parallel (up to the `concurrency` limit). If all
	 * `worker`s are in progress, the task is queued until one becomes available.
	 * Once a `worker` completes a `task`, that `task`'s callback is called.
	 *
	 * @name queue
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Function} worker - An asynchronous function for processing a queued
	 * task, which must call its `callback(err)` argument when finished, with an
	 * optional `error` as an argument.  If you want to handle errors from an
	 * individual task, pass a callback to `q.push()`. Invoked with
	 * (task, callback).
	 * @param {number} [concurrency=1] - An `integer` for determining how many
	 * `worker` functions should be run in parallel.  If omitted, the concurrency
	 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
	 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
	 * attached as certain properties to listen for specific events during the
	 * lifecycle of the queue.
	 * @example
	 *
	 * // create a queue object with concurrency 2
	 * var q = async.queue(function(task, callback) {
	 *     console.log('hello ' + task.name);
	 *     callback();
	 * }, 2);
	 *
	 * // assign a callback
	 * q.drain = function() {
	 *     console.log('all items have been processed');
	 * };
	 *
	 * // add some items to the queue
	 * q.push({name: 'foo'}, function(err) {
	 *     console.log('finished processing foo');
	 * });
	 * q.push({name: 'bar'}, function (err) {
	 *     console.log('finished processing bar');
	 * });
	 *
	 * // add some items to the queue (batch-wise)
	 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
	 *     console.log('finished processing item');
	 * });
	 *
	 * // add some items to the front of the queue
	 * q.unshift({name: 'bar'}, function (err) {
	 *     console.log('finished processing bar');
	 * });
	 */
	
	/**
	 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
	 * completed in ascending priority order.
	 *
	 * @name priorityQueue
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.queue]{@link module:ControlFlow.queue}
	 * @category Control Flow
	 * @param {Function} worker - An asynchronous function for processing a queued
	 * task, which must call its `callback(err)` argument when finished, with an
	 * optional `error` as an argument.  If you want to handle errors from an
	 * individual task, pass a callback to `q.push()`. Invoked with
	 * (task, callback).
	 * @param {number} concurrency - An `integer` for determining how many `worker`
	 * functions should be run in parallel.  If omitted, the concurrency defaults to
	 * `1`.  If the concurrency is `0`, an error is thrown.
	 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
	 * differences between `queue` and `priorityQueue` objects:
	 * * `push(task, priority, [callback])` - `priority` should be a number. If an
	 *   array of `tasks` is given, all tasks will be assigned the same priority.
	 * * The `unshift` method was removed.
	 */
	
	/**
	 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
	 *
	 * @name reject
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.filter]{@link module:Collections.filter}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 * @example
	 *
	 * async.reject(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, results) {
	 *     // results now equals an array of missing files
	 *     createFiles(results);
	 * });
	 */
	
	/**
	 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name rejectLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.reject]{@link module:Collections.reject}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 */
	
	/**
	 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
	 *
	 * @name rejectSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.reject]{@link module:Collections.reject}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 */
	
	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	
	/**
	 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it
	 * retryable, rather than immediately calling it with retries.
	 *
	 * @name retryable
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.retry]{@link module:ControlFlow.retry}
	 * @category Control Flow
	 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
	 * options, exactly the same as from `retry`
	 * @param {Function} task - the asynchronous function to wrap
	 * @returns {Functions} The wrapped function, which when invoked, will retry on
	 * an error, based on the parameters specified in `opts`.
	 * @example
	 *
	 * async.auto({
	 *     dep1: async.retryable(3, getFromFlakyService),
	 *     process: ["dep1", async.retryable(3, function (results, cb) {
	 *         maybeProcessData(results.dep1, cb);
	 *     })]
	 * }, callback);
	 */
	
	/**
	 * Returns `true` if at least one element in the `coll` satisfies an async test.
	 * If any iteratee call returns `true`, the main `callback` is immediately
	 * called.
	 *
	 * @name some
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias any
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the array
	 * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	 * be called with a boolean argument once it has completed. Invoked with
	 * (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the iteratee functions have finished.
	 * Result will be either `true` or `false` depending on the values of the async
	 * tests. Invoked with (err, result).
	 * @example
	 *
	 * async.some(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, result) {
	 *     // if result is true then at least one of the files exists
	 * });
	 */
	
	/**
	 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name someLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.some]{@link module:Collections.some}
	 * @alias anyLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in the array
	 * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	 * be called with a boolean argument once it has completed. Invoked with
	 * (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the iteratee functions have finished.
	 * Result will be either `true` or `false` depending on the values of the async
	 * tests. Invoked with (err, result).
	 */
	
	/**
	 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
	 *
	 * @name someSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.some]{@link module:Collections.some}
	 * @alias anySeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the array
	 * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	 * be called with a boolean argument once it has completed. Invoked with
	 * (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the iteratee functions have finished.
	 * Result will be either `true` or `false` depending on the values of the async
	 * tests. Invoked with (err, result).
	 */
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil;
	var nativeMax$1 = Math.max;
	
	/**
	 * Calls the `iteratee` function `n` times, and accumulates results in the same
	 * manner you would use with [map]{@link module:Collections.map}.
	 *
	 * @name times
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.map]{@link module:Collections.map}
	 * @category Control Flow
	 * @param {number} n - The number of times to run the function.
	 * @param {Function} iteratee - The function to call `n` times. Invoked with the
	 * iteration index and a callback (n, next).
	 * @param {Function} callback - see {@link module:Collections.map}.
	 * @example
	 *
	 * // Pretend this is some complicated async factory
	 * var createUser = function(id, callback) {
	 *     callback(null, {
	 *         id: 'user' + id
	 *     });
	 * };
	 *
	 * // generate 5 users
	 * async.times(5, function(n, next) {
	 *     createUser(n, function(err, user) {
	 *         next(err, user);
	 *     });
	 * }, function(err, users) {
	 *     // we should now have 5 users
	 * });
	 */
	
	/**
	 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
	 *
	 * @name timesSeries
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.times]{@link module:ControlFlow.times}
	 * @category Control Flow
	 * @param {number} n - The number of times to run the function.
	 * @param {Function} iteratee - The function to call `n` times. Invoked with the
	 * iteration index and a callback (n, next).
	 * @param {Function} callback - see {@link module:Collections.map}.
	 */
	
	/**
	 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
	 * unmemoized form. Handy for testing.
	 *
	 * @name unmemoize
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @see [async.memoize]{@link module:Utils.memoize}
	 * @category Util
	 * @param {Function} fn - the memoized function
	 * @returns {Function} a function that calls the original unmemoized function
	 */
	
	/**
	 * Runs the `tasks` array of functions in series, each passing their results to
	 * the next in the array. However, if any of the `tasks` pass an error to their
	 * own callback, the next function is not executed, and the main `callback` is
	 * immediately called with the error.
	 *
	 * @name waterfall
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array} tasks - An array of functions to run, each function is passed
	 * a `callback(err, result1, result2, ...)` it must call on completion. The
	 * first argument is an error (which can be `null`) and any further arguments
	 * will be passed as arguments in order to the next task.
	 * @param {Function} [callback] - An optional callback to run once all the
	 * functions have completed. This will be passed the results of the last task's
	 * callback. Invoked with (err, [results]).
	 * @returns undefined
	 * @example
	 *
	 * async.waterfall([
	 *     function(callback) {
	 *         callback(null, 'one', 'two');
	 *     },
	 *     function(arg1, arg2, callback) {
	 *         // arg1 now equals 'one' and arg2 now equals 'two'
	 *         callback(null, 'three');
	 *     },
	 *     function(arg1, callback) {
	 *         // arg1 now equals 'three'
	 *         callback(null, 'done');
	 *     }
	 * ], function (err, result) {
	 *     // result now equals 'done'
	 * });
	 *
	 * // Or, with named functions:
	 * async.waterfall([
	 *     myFirstFunction,
	 *     mySecondFunction,
	 *     myLastFunction,
	 * ], function (err, result) {
	 *     // result now equals 'done'
	 * });
	 * function myFirstFunction(callback) {
	 *     callback(null, 'one', 'two');
	 * }
	 * function mySecondFunction(arg1, arg2, callback) {
	 *     // arg1 now equals 'one' and arg2 now equals 'two'
	 *     callback(null, 'three');
	 * }
	 * function myLastFunction(arg1, callback) {
	 *     // arg1 now equals 'three'
	 *     callback(null, 'done');
	 * }
	 */
	
	/**
	 * Async is a utility module which provides straight-forward, powerful functions
	 * for working with asynchronous JavaScript. Although originally designed for
	 * use with [Node.js](http://nodejs.org) and installable via
	 * `npm install --save async`, it can also be used directly in the browser.
	 * @module async
	 */
	
	/**
	 * A collection of `async` functions for manipulating collections, such as
	 * arrays and objects.
	 * @module Collections
	 */
	
	/**
	 * A collection of `async` functions for controlling the flow through a script.
	 * @module ControlFlow
	 */
	
	 /**
	  * A collection of `async` utility functions.
	  * @module Utils
	  */
	
	/**
	 * @hidden
	 */
	var errorCodeLookup;
	/**
	 * Lazily construct error code lookup, since DropboxJS might be loaded *after* BrowserFS (or not at all!)
	 * @hidden
	 */
	function constructErrorCodeLookup() {
	    if (errorCodeLookup) {
	        return;
	    }
	    errorCodeLookup = {};
	    // This indicates a network transmission error on modern browsers. Internet Explorer might cause this code to be reported on some API server errors.
	    errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO;
	    // This happens when the contentHash parameter passed to a Dropbox.Client#readdir or Dropbox.Client#stat matches the most recent content, so the API call response is omitted, to save bandwidth.
	    // errorCodeLookup[Dropbox.ApiError.NO_CONTENT];
	    // The error property on {Dropbox.ApiError#response} should indicate which input parameter is invalid and why.
	    errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL;
	    // The OAuth token used for the request will never become valid again, so the user should be re-authenticated.
	    errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM;
	    // This indicates a bug in dropbox.js and should never occur under normal circumstances.
	    // ^ Actually, that's false. This occurs when you try to move folders to themselves, or move a file over another file.
	    errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM;
	    // This happens when trying to read from a non-existing file, readdir a non-existing directory, write a file into a non-existing directory, etc.
	    errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT;
	    // This indicates a bug in dropbox.js and should never occur under normal circumstances.
	    errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL;
	    // This happens when a Dropbox.Client#readdir or Dropbox.Client#stat call would return more than a maximum amount of directory entries.
	    errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL;
	    // This is used by some backend methods to indicate that the client needs to download server-side changes and perform conflict resolution. Under normal usage, errors with this code should never surface to the code using dropbox.js.
	    errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL;
	    // Status value indicating that the application is making too many requests.
	    errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY;
	    // The request should be retried after some time.
	    errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY;
	    // Status value indicating that the user's Dropbox is over its storage quota.
	    errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
	}
	/**
	 * @hidden
	 */
	function isFileInfo(cache) {
	    return cache && cache.stat.isFile;
	}
	/**
	 * @hidden
	 */
	function isDirInfo(cache) {
	    return cache && cache.stat.isFolder;
	}
	/**
	 * @hidden
	 */
	function isArrayBuffer(ab) {
	    // Accept null / undefined, too.
	    return ab === null || ab === undefined || (typeof (ab) === 'object' && typeof (ab['byteLength']) === 'number');
	}
	/**
	 * Wraps a Dropbox client and caches operations.
	 * @hidden
	 */
	var CachedDropboxClient = function CachedDropboxClient(client) {
	    this._cache = {};
	    this._client = client;
	};
	CachedDropboxClient.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	    var cacheInfo = this.getCachedDirInfo(p);
	    this._wrap(function (interceptCb) {
	        if (cacheInfo !== null && cacheInfo.contents) {
	            this$1._client.readdir(p, {
	                contentHash: cacheInfo.stat.contentHash
	            }, interceptCb);
	        }
	        else {
	            this$1._client.readdir(p, interceptCb);
	        }
	    }, function (err, filenames, stat, folderEntries) {
	        if (err) {
	            if (err.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
	                cb(null, cacheInfo.contents.slice(0));
	            }
	            else {
	                cb(err);
	            }
	        }
	        else {
	            this$1.updateCachedDirInfo(p, stat, filenames.slice(0));
	            folderEntries.forEach(function (entry) {
	                this$1.updateCachedInfo(path.join(p, entry.name), entry);
	            });
	            cb(null, filenames);
	        }
	    });
	};
	CachedDropboxClient.prototype.remove = function remove (p, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.remove(p, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat);
	        }
	        cb(err);
	    });
	};
	CachedDropboxClient.prototype.move = function move (src, dest, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.move(src, dest, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.deleteCachedInfo(src);
	            this$1.updateCachedInfo(dest, stat);
	        }
	        cb(err);
	    });
	};
	CachedDropboxClient.prototype.stat = function stat (p, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.stat(p, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat);
	        }
	        cb(err, stat);
	    });
	};
	CachedDropboxClient.prototype.readFile = function readFile (p, cb) {
	        var this$1 = this;
	
	    var cacheInfo = this.getCachedFileInfo(p);
	    if (cacheInfo !== null && cacheInfo.contents !== null) {
	        // Try to use cached info; issue a stat to see if contents are up-to-date.
	        this.stat(p, function (error, stat) {
	            if (error) {
	                cb(error);
	            }
	            else if (stat.contentHash === cacheInfo.stat.contentHash) {
	                // No file changes.
	                cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
	            }
	            else {
	                // File changes; rerun to trigger actual readFile.
	                this$1.readFile(p, cb);
	            }
	        });
	    }
	    else {
	        this._wrap(function (interceptCb) {
	            this$1._client.readFile(p, { arrayBuffer: true }, interceptCb);
	        }, function (err, contents, stat) {
	            if (!err) {
	                this$1.updateCachedInfo(p, stat, contents.slice(0));
	            }
	            cb(err, contents, stat);
	        });
	    }
	};
	CachedDropboxClient.prototype.writeFile = function writeFile (p, contents, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.writeFile(p, contents, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat, contents.slice(0));
	        }
	        cb(err, stat);
	    });
	};
	CachedDropboxClient.prototype.mkdir = function mkdir (p, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.mkdir(p, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat, []);
	        }
	        cb(err);
	    });
	};
	/**
	 * Wraps an operation such that we retry a failed operation 3 times.
	 * Necessary to deal with Dropbox rate limiting.
	 *
	 * @param performOp Function that performs the operation. Will be called up to three times.
	 * @param cb Called when the operation succeeds, fails in a non-temporary manner, or fails three times.
	 */
	CachedDropboxClient.prototype._wrap = function _wrap (performOp, cb) {
	    var numRun = 0;
	    var interceptCb = function (error) {
	        // Timeout duration, in seconds.
	        var timeoutDuration = 2;
	        if (error && 3 > (++numRun)) {
	            switch (error.status) {
	                case Dropbox.ApiError.SERVER_ERROR:
	                case Dropbox.ApiError.NETWORK_ERROR:
	                case Dropbox.ApiError.RATE_LIMITED:
	                    setTimeout(function () {
	                        performOp(interceptCb);
	                    }, timeoutDuration * 1000);
	                    break;
	                default:
	                    cb.apply(null, arguments);
	                    break;
	            }
	        }
	        else {
	            cb.apply(null, arguments);
	        }
	    };
	    performOp(interceptCb);
	};
	CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo (p) {
	    return this._cache[p.toLowerCase()];
	};
	CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo (p, cache) {
	    this._cache[p.toLowerCase()] = cache;
	};
	CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo (p) {
	    delete this._cache[p.toLowerCase()];
	};
	CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo (p) {
	    var info = this.getCachedInfo(p);
	    if (isDirInfo(info)) {
	        return info;
	    }
	    else {
	        return null;
	    }
	};
	CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo (p) {
	    var info = this.getCachedInfo(p);
	    if (isFileInfo(info)) {
	        return info;
	    }
	    else {
	        return null;
	    }
	};
	CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo (p, stat, contents) {
	        if ( contents === void 0 ) contents = null;
	
	    var cachedInfo = this.getCachedInfo(p);
	    // Dropbox uses the *contentHash* property for directories.
	    // Ignore stat objects w/o a contentHash defined; those actually exist!!!
	    // (Example: readdir returns an array of stat objs; stat objs for dirs in that context have no contentHash)
	    if (stat.contentHash !== null && (cachedInfo === undefined || cachedInfo.stat.contentHash !== stat.contentHash)) {
	        this.putCachedInfo(p, {
	            stat: stat,
	            contents: contents
	        });
	    }
	};
	CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo (p, stat, contents) {
	        if ( contents === void 0 ) contents = null;
	
	    var cachedInfo = this.getCachedInfo(p);
	    // Dropbox uses the *versionTag* property for files.
	    // Ignore stat objects w/o a versionTag defined.
	    if (stat.versionTag !== null && (cachedInfo === undefined || cachedInfo.stat.versionTag !== stat.versionTag)) {
	        this.putCachedInfo(p, {
	            stat: stat,
	            contents: contents
	        });
	    }
	};
	CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo (p, stat, contents) {
	        if ( contents === void 0 ) contents = null;
	
	    if (stat.isFile && isArrayBuffer(contents)) {
	        this.updateCachedFileInfo(p, stat, contents);
	    }
	    else if (stat.isFolder && Array.isArray(contents)) {
	        this.updateCachedDirInfo(p, stat, contents);
	    }
	};
	var DropboxFile = (function (PreloadFile$$1) {
	    function DropboxFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile$$1 ) DropboxFile.__proto__ = PreloadFile$$1;
	    DropboxFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    DropboxFile.prototype.constructor = DropboxFile;
	    DropboxFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (this.isDirty()) {
	            var buffer$$1 = this.getBuffer(), arrayBuffer = buffer2ArrayBuffer(buffer$$1);
	            this._fs._writeFileStrict(this.getPath(), arrayBuffer, function (e) {
	                if (!e) {
	                    this$1.resetDirty();
	                }
	                cb(e);
	            });
	        }
	        else {
	            cb();
	        }
	    };
	    DropboxFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	
	    return DropboxFile;
	}(PreloadFile));
	/**
	 * A read/write file system backed by Dropbox cloud storage.
	 *
	 * Uses the Dropbox V1 API.
	 *
	 * NOTE: You must use the v0.10 version of the [Dropbox JavaScript SDK](https://www.npmjs.com/package/dropbox).
	 */
	var DropboxFileSystem = (function (BaseFileSystem$$1) {
	    function DropboxFileSystem(client, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        this._client = new CachedDropboxClient(client);
	        deprecationMessage(deprecateMsg, DropboxFileSystem.Name, { client: "authenticated dropbox client instance" });
	        constructErrorCodeLookup();
	    }
	
	    if ( BaseFileSystem$$1 ) DropboxFileSystem.__proto__ = BaseFileSystem$$1;
	    DropboxFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    DropboxFileSystem.prototype.constructor = DropboxFileSystem;
	    /**
	     * Creates a new DropboxFileSystem instance with the given options.
	     * Must be given an *authenticated* DropboxJS client from the old v0.10 version of the Dropbox JS SDK.
	     */
	    DropboxFileSystem.Create = function Create (opts, cb) {
	        cb(null, new DropboxFileSystem(opts.client, false));
	    };
	    DropboxFileSystem.isAvailable = function isAvailable () {
	        // Checks if the Dropbox library is loaded.
	        return typeof Dropbox !== 'undefined';
	    };
	    DropboxFileSystem.prototype.getName = function getName () {
	        return DropboxFileSystem.Name;
	    };
	    DropboxFileSystem.prototype.isReadOnly = function isReadOnly () {
	        return false;
	    };
	    // Dropbox doesn't support symlinks, properties, or synchronous calls
	    DropboxFileSystem.prototype.supportsSymlinks = function supportsSymlinks () {
	        return false;
	    };
	    DropboxFileSystem.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    DropboxFileSystem.prototype.supportsSynch = function supportsSynch () {
	        return false;
	    };
	    DropboxFileSystem.prototype.empty = function empty (mainCb) {
	        var this$1 = this;
	
	        this._client.readdir('/', function (error, files) {
	            if (error) {
	                mainCb(this$1.convert(error, '/'));
	            }
	            else {
	                var deleteFile = function (file, cb) {
	                    var p = path.join('/', file);
	                    this$1._client.remove(p, function (err) {
	                        cb(err ? this$1.convert(err, p) : null);
	                    });
	                };
	                var finished = function (err) {
	                    if (err) {
	                        mainCb(err);
	                    }
	                    else {
	                        mainCb();
	                    }
	                };
	                // XXX: <any> typing is to get around overly-restrictive ErrorCallback typing.
	                eachLimit(files, deleteFile, finished);
	            }
	        });
	    };
	    DropboxFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        this._client.move(oldPath, newPath, function (error) {
	            if (error) {
	                // the move is permitted if newPath is a file.
	                // Check if this is the case, and remove if so.
	                this$1._client.stat(newPath, function (error2, stat) {
	                    if (error2 || stat.isFolder) {
	                        var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
	                        cb(this$1.convert(error, missingPath));
	                    }
	                    else {
	                        // Delete file, repeat rename.
	                        this$1._client.remove(newPath, function (error2) {
	                            if (error2) {
	                                cb(this$1.convert(error2, newPath));
	                            }
	                            else {
	                                this$1.rename(oldPath, newPath, cb);
	                            }
	                        });
	                    }
	                });
	            }
	            else {
	                cb();
	            }
	        });
	    };
	    DropboxFileSystem.prototype.stat = function stat (path$$1, isLstat, cb) {
	        var this$1 = this;
	
	        // Ignore lstat case -- Dropbox doesn't support symlinks
	        // Stat the file
	        this._client.stat(path$$1, function (error, stat) {
	            if (error) {
	                cb(this$1.convert(error, path$$1));
	            }
	            else if (stat && stat.isRemoved) {
	                // Dropbox keeps track of deleted files, so if a file has existed in the
	                // past but doesn't any longer, you wont get an error
	                cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
	            }
	            else {
	                var stats = new Stats(this$1._statType(stat), stat.size);
	                return cb(null, stats);
	            }
	        });
	    };
	    DropboxFileSystem.prototype.open = function open (path$$1, flags, mode, cb) {
	        var this$1 = this;
	
	        // Try and get the file's contents
	        this._client.readFile(path$$1, function (error, content, dbStat) {
	            if (error) {
	                // If the file's being opened for reading and doesn't exist, return an
	                // error
	                if (flags.isReadable()) {
	                    cb(this$1.convert(error, path$$1));
	                }
	                else {
	                    switch (error.status) {
	                        // If it's being opened for writing or appending, create it so that
	                        // it can be written to
	                        case Dropbox.ApiError.NOT_FOUND:
	                            var ab = new ArrayBuffer(0);
	                            return this$1._writeFileStrict(path$$1, ab, function (error2, stat) {
	                                if (error2) {
	                                    cb(error2);
	                                }
	                                else {
	                                    var file = this$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));
	                                    cb(null, file);
	                                }
	                            });
	                        default:
	                            return cb(this$1.convert(error, path$$1));
	                    }
	                }
	            }
	            else {
	                // No error
	                var buffer$$1;
	                // Dropbox.js seems to set `content` to `null` rather than to an empty
	                // buffer when reading an empty file. Not sure why this is.
	                if (content === null) {
	                    buffer$$1 = emptyBuffer();
	                }
	                else {
	                    buffer$$1 = arrayBuffer2Buffer(content);
	                }
	                var file = this$1._makeFile(path$$1, flags, dbStat, buffer$$1);
	                return cb(null, file);
	            }
	        });
	    };
	    DropboxFileSystem.prototype._writeFileStrict = function _writeFileStrict (p, data, cb) {
	        var this$1 = this;
	
	        var parent = path.dirname(p);
	        this.stat(parent, false, function (error, stat) {
	            if (error) {
	                cb(ApiError.FileError(ErrorCode.ENOENT, parent));
	            }
	            else {
	                this$1._client.writeFile(p, data, function (error2, stat) {
	                    if (error2) {
	                        cb(this$1.convert(error2, p));
	                    }
	                    else {
	                        cb(null, stat);
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Private
	     * Returns a BrowserFS object representing the type of a Dropbox.js stat object
	     */
	    DropboxFileSystem.prototype._statType = function _statType (stat) {
	        return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
	    };
	    /**
	     * Private
	     * Returns a BrowserFS object representing a File, created from the data
	     * returned by calls to the Dropbox API.
	     */
	    DropboxFileSystem.prototype._makeFile = function _makeFile (path$$1, flag, stat, buffer$$1) {
	        var type = this._statType(stat);
	        var stats = new Stats(type, stat.size);
	        return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
	    };
	    /**
	     * Private
	     * Delete a file or directory from Dropbox
	     * isFile should reflect which call was made to remove the it (`unlink` or
	     * `rmdir`). If this doesn't match what's actually at `path`, an error will be
	     * returned
	     */
	    DropboxFileSystem.prototype._remove = function _remove (path$$1, cb, isFile) {
	        var this$1 = this;
	
	        this._client.stat(path$$1, function (error, stat) {
	            if (error) {
	                cb(this$1.convert(error, path$$1));
	            }
	            else {
	                if (stat.isFile && !isFile) {
	                    cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
	                }
	                else if (!stat.isFile && isFile) {
	                    cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
	                }
	                else {
	                    this$1._client.remove(path$$1, function (error) {
	                        if (error) {
	                            cb(this$1.convert(error, path$$1));
	                        }
	                        else {
	                            cb(null);
	                        }
	                    });
	                }
	            }
	        });
	    };
	    /**
	     * Delete a file
	     */
	    DropboxFileSystem.prototype.unlink = function unlink (path$$1, cb) {
	        this._remove(path$$1, cb, true);
	    };
	    /**
	     * Delete a directory
	     */
	    DropboxFileSystem.prototype.rmdir = function rmdir (path$$1, cb) {
	        this._remove(path$$1, cb, false);
	    };
	    /**
	     * Create a directory
	     */
	    DropboxFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	        var this$1 = this;
	
	        // Dropbox.js' client.mkdir() behaves like `mkdir -p`, i.e. it creates a
	        // directory and all its ancestors if they don't exist.
	        // Node's fs.mkdir() behaves like `mkdir`, i.e. it throws an error if an attempt
	        // is made to create a directory without a parent.
	        // To handle this inconsistency, a check for the existence of `path`'s parent
	        // must be performed before it is created, and an error thrown if it does
	        // not exist
	        var parent = path.dirname(p);
	        this._client.stat(parent, function (error, stat) {
	            if (error) {
	                cb(this$1.convert(error, parent));
	            }
	            else {
	                this$1._client.mkdir(p, function (error) {
	                    if (error) {
	                        cb(ApiError.FileError(ErrorCode.EEXIST, p));
	                    }
	                    else {
	                        cb(null);
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Get the names of the files in a directory
	     */
	    DropboxFileSystem.prototype.readdir = function readdir (path$$1, cb) {
	        var this$1 = this;
	
	        this._client.readdir(path$$1, function (error, files) {
	            if (error) {
	                return cb(this$1.convert(error));
	            }
	            else {
	                return cb(null, files);
	            }
	        });
	    };
	    /**
	     * Converts a Dropbox-JS error into a BFS error.
	     */
	    DropboxFileSystem.prototype.convert = function convert (err, path$$1) {
	        if ( path$$1 === void 0 ) path$$1 = null;
	
	        var errorCode = errorCodeLookup[err.status];
	        if (errorCode === undefined) {
	            errorCode = ErrorCode.EIO;
	        }
	        if (!path$$1) {
	            return new ApiError(errorCode);
	        }
	        else {
	            return ApiError.FileError(errorCode, path$$1);
	        }
	    };
	
	    return DropboxFileSystem;
	}(BaseFileSystem));
	
	DropboxFileSystem.Name = "Dropbox";
	DropboxFileSystem.Options = {
	    client: {
	        type: "object",
	        description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
	        validator: function (opt, cb) {
	            if (opt.isAuthenticated && opt.isAuthenticated()) {
	                cb();
	            }
	            else {
	                cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
	            }
	        }
	    }
	};
	
	/**
	 * @hidden
	 */
	function convertError(e, path$$1) {
	    if ( path$$1 === void 0 ) path$$1 = '';
	
	    var errno = e.errno;
	    var parent = e.node;
	    var paths = [];
	    while (parent) {
	        paths.unshift(parent.name);
	        if (parent === parent.parent) {
	            break;
	        }
	        parent = parent.parent;
	    }
	    return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? '/' + paths.join('/') : path$$1);
	}
	var EmscriptenFile = (function (BaseFile$$1) {
	    function EmscriptenFile(_fs, _FS, _path, _stream) {
	        BaseFile$$1.call(this);
	        this._fs = _fs;
	        this._FS = _FS;
	        this._path = _path;
	        this._stream = _stream;
	    }
	
	    if ( BaseFile$$1 ) EmscriptenFile.__proto__ = BaseFile$$1;
	    EmscriptenFile.prototype = Object.create( BaseFile$$1 && BaseFile$$1.prototype );
	    EmscriptenFile.prototype.constructor = EmscriptenFile;
	    EmscriptenFile.prototype.getPos = function getPos () {
	        return undefined;
	    };
	    EmscriptenFile.prototype.close = function close (cb) {
	        var err = null;
	        try {
	            this.closeSync();
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.closeSync = function closeSync () {
	        try {
	            this._FS.close(this._stream);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.stat = function stat (cb) {
	        try {
	            cb(null, this.statSync());
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    EmscriptenFile.prototype.statSync = function statSync () {
	        try {
	            return this._fs.statSync(this._path, false);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.truncate = function truncate (len, cb) {
	        var err = null;
	        try {
	            this.truncateSync(len);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.truncateSync = function truncateSync (len) {
	        try {
	            this._FS.ftruncate(this._stream.fd, len);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.write = function write (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    EmscriptenFile.prototype.writeSync = function writeSync (buffer$$1, offset, length, position) {
	        try {
	            var u8 = buffer2Uint8array(buffer$$1);
	            // Emscripten is particular about what position is set to.
	            var emPosition = position === null ? undefined : position;
	            return this._FS.write(this._stream, u8, offset, length, emPosition);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.read = function read (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    EmscriptenFile.prototype.readSync = function readSync (buffer$$1, offset, length, position) {
	        try {
	            var u8 = buffer2Uint8array(buffer$$1);
	            // Emscripten is particular about what position is set to.
	            var emPosition = position === null ? undefined : position;
	            return this._FS.read(this._stream, u8, offset, length, emPosition);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.sync = function sync (cb) {
	        // NOP.
	        cb();
	    };
	    EmscriptenFile.prototype.syncSync = function syncSync () {
	        // NOP.
	    };
	    EmscriptenFile.prototype.chown = function chown (uid, gid, cb) {
	        var err = null;
	        try {
	            this.chownSync(uid, gid);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.chownSync = function chownSync (uid, gid) {
	        try {
	            this._FS.fchown(this._stream.fd, uid, gid);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.chmod = function chmod (mode, cb) {
	        var err = null;
	        try {
	            this.chmodSync(mode);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.chmodSync = function chmodSync (mode) {
	        try {
	            this._FS.fchmod(this._stream.fd, mode);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.utimes = function utimes (atime, mtime, cb) {
	        var err = null;
	        try {
	            this.utimesSync(atime, mtime);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.utimesSync = function utimesSync (atime, mtime) {
	        this._fs.utimesSync(this._path, atime, mtime);
	    };
	
	    return EmscriptenFile;
	}(BaseFile));
	/**
	 * Mounts an Emscripten file system into the BrowserFS file system.
	 */
	var EmscriptenFileSystem = (function (SynchronousFileSystem$$1) {
	    function EmscriptenFileSystem(_FS) {
	        SynchronousFileSystem$$1.call(this);
	        this._FS = _FS;
	    }
	
	    if ( SynchronousFileSystem$$1 ) EmscriptenFileSystem.__proto__ = SynchronousFileSystem$$1;
	    EmscriptenFileSystem.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    EmscriptenFileSystem.prototype.constructor = EmscriptenFileSystem;
	    /**
	     * Create an EmscriptenFileSystem instance with the given options.
	     */
	    EmscriptenFileSystem.Create = function Create (opts, cb) {
	        cb(null, new EmscriptenFileSystem(opts.FS));
	    };
	    EmscriptenFileSystem.isAvailable = function isAvailable () { return true; };
	    EmscriptenFileSystem.prototype.getName = function getName () { return this._FS.DB_NAME(); };
	    EmscriptenFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
	    EmscriptenFileSystem.prototype.supportsLinks = function supportsLinks () { return true; };
	    EmscriptenFileSystem.prototype.supportsProps = function supportsProps () { return true; };
	    EmscriptenFileSystem.prototype.supportsSynch = function supportsSynch () { return true; };
	    EmscriptenFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	        try {
	            this._FS.rename(oldPath, newPath);
	        }
	        catch (e) {
	            if (e.errno === ErrorCode.ENOENT) {
	                throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
	            }
	            else {
	                throw convertError(e);
	            }
	        }
	    };
	    EmscriptenFileSystem.prototype.statSync = function statSync (p, isLstat) {
	        try {
	            var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
	            var itemType = this.modeToFileType(stats.mode);
	            return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.openSync = function openSync (p, flag, mode) {
	        try {
	            var stream = this._FS.open(p, flag.getFlagString(), mode);
	            if (this._FS.isDir(stream.node.mode)) {
	                this._FS.close(stream);
	                throw ApiError.EISDIR(p);
	            }
	            return new EmscriptenFile(this, this._FS, p, stream);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.unlinkSync = function unlinkSync (p) {
	        try {
	            this._FS.unlink(p);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	        try {
	            this._FS.rmdir(p);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
	        try {
	            this._FS.mkdir(p, mode);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.readdirSync = function readdirSync (p) {
	        try {
	            // Emscripten returns items for '.' and '..'. Node does not.
	            return this._FS.readdir(p).filter(function (p) { return p !== '.' && p !== '..'; });
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.truncateSync = function truncateSync (p, len) {
	        try {
	            this._FS.truncate(p, len);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.readFileSync = function readFileSync (p, encoding, flag) {
	        try {
	            var data = this._FS.readFile(p, { flags: flag.getFlagString() });
	            var buff = uint8Array2Buffer(data);
	            if (encoding) {
	                return buff.toString(encoding);
	            }
	            else {
	                return buff;
	            }
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.writeFileSync = function writeFileSync (p, data, encoding, flag, mode) {
	        try {
	            if (encoding) {
	                data = Buffer.from(data, encoding);
	            }
	            var u8 = buffer2Uint8array(data);
	            this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: 'binary' });
	            this._FS.chmod(p, mode);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	        try {
	            isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	        try {
	            isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	        try {
	            this._FS.symlink(srcpath, dstpath);
	        }
	        catch (e) {
	            throw convertError(e);
	        }
	    };
	    EmscriptenFileSystem.prototype.readlinkSync = function readlinkSync (p) {
	        try {
	            return this._FS.readlink(p);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	        try {
	            this._FS.utime(p, atime.getTime(), mtime.getTime());
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.modeToFileType = function modeToFileType (mode) {
	        if (this._FS.isDir(mode)) {
	            return FileType.DIRECTORY;
	        }
	        else if (this._FS.isFile(mode)) {
	            return FileType.FILE;
	        }
	        else if (this._FS.isLink(mode)) {
	            return FileType.SYMLINK;
	        }
	        else {
	            throw ApiError.EPERM(("Invalid mode: " + mode));
	        }
	    };
	
	    return EmscriptenFileSystem;
	}(SynchronousFileSystem));
	
	EmscriptenFileSystem.Name = "EmscriptenFileSystem";
	EmscriptenFileSystem.Options = {
	    FS: {
	        type: "object",
	        description: "The Emscripten file system to use (the `FS` variable)"
	    }
	};
	
	/**
	 * The FolderAdapter file system wraps a file system, and scopes all interactions to a subfolder of that file system.
	 *
	 * Example: Given a file system `foo` with folder `bar` and file `bar/baz`...
	 *
	 * ```javascript
	 * BrowserFS.configure({
	 *   fs: "FolderAdapter",
	 *   options: {
	 *     folder: "bar",
	 *     wrapped: foo
	 *   }
	 * }, function(e) {
	 *   var fs = BrowserFS.BFSRequire('fs');
	 *   fs.readdirSync('/'); // ['baz']
	 * });
	 * ```
	 */
	var FolderAdapter = (function (BaseFileSystem$$1) {
	    function FolderAdapter(folder, wrapped) {
	        BaseFileSystem$$1.call(this);
	        this._folder = folder;
	        this._wrapped = wrapped;
	    }
	
	    if ( BaseFileSystem$$1 ) FolderAdapter.__proto__ = BaseFileSystem$$1;
	    FolderAdapter.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    FolderAdapter.prototype.constructor = FolderAdapter;
	    /**
	     * Creates a FolderAdapter instance with the given options.
	     */
	    FolderAdapter.Create = function Create (opts, cb) {
	        cb(null, new FolderAdapter(opts.folder, opts.wrapped));
	    };
	    FolderAdapter.isAvailable = function isAvailable () {
	        return true;
	    };
	    /**
	     * Initialize the file system. Ensures that the wrapped file system
	     * has the given folder.
	     */
	    FolderAdapter.prototype.initialize = function initialize (cb) {
	        var this$1 = this;
	
	        this._wrapped.exists(this._folder, function (exists) {
	            if (exists) {
	                cb();
	            }
	            else if (this$1._wrapped.isReadOnly()) {
	                cb(ApiError.ENOENT(this$1._folder));
	            }
	            else {
	                this$1._wrapped.mkdir(this$1._folder, 0x1ff, cb);
	            }
	        });
	    };
	    FolderAdapter.prototype.getName = function getName () { return this._wrapped.getName(); };
	    FolderAdapter.prototype.isReadOnly = function isReadOnly () { return this._wrapped.isReadOnly(); };
	    FolderAdapter.prototype.supportsProps = function supportsProps () { return this._wrapped.supportsProps(); };
	    FolderAdapter.prototype.supportsSynch = function supportsSynch () { return this._wrapped.supportsSynch(); };
	    FolderAdapter.prototype.supportsLinks = function supportsLinks () { return false; };
	
	    return FolderAdapter;
	}(BaseFileSystem));
	
	FolderAdapter.Name = "FolderAdapter";
	FolderAdapter.Options = {
	    folder: {
	        type: "string",
	        description: "The folder to use as the root directory"
	    },
	    wrapped: {
	        type: "object",
	        description: "The file system to wrap"
	    }
	};
	/**
	 * @hidden
	 */
	function translateError(folder, e) {
	    if (e !== null && typeof e === 'object') {
	        var err = e;
	        var p = err.path;
	        if (p) {
	            p = '/' + path.relative(folder, p);
	            err.message = err.message.replace(err.path, p);
	            err.path = p;
	        }
	    }
	    return e;
	}
	/**
	 * @hidden
	 */
	function wrapCallback(folder, cb) {
	    if (typeof cb === 'function') {
	        return function (err) {
	            if (arguments.length > 0) {
	                arguments[0] = translateError(folder, err);
	            }
	            cb.apply(null, arguments);
	        };
	    }
	    else {
	        return cb;
	    }
	}
	/**
	 * @hidden
	 */
	function wrapFunction(name, wrapFirst, wrapSecond) {
	    if (name.slice(name.length - 4) !== 'Sync') {
	        // Async function. Translate error in callback.
	        return function () {
	            if (arguments.length > 0) {
	                if (wrapFirst) {
	                    arguments[0] = path.join(this._folder, arguments[0]);
	                }
	                if (wrapSecond) {
	                    arguments[1] = path.join(this._folder, arguments[1]);
	                }
	                arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
	            }
	            return this._wrapped[name].apply(this._wrapped, arguments);
	        };
	    }
	    else {
	        // Sync function. Translate error in catch.
	        return function () {
	            try {
	                if (wrapFirst) {
	                    arguments[0] = path.join(this._folder, arguments[0]);
	                }
	                if (wrapSecond) {
	                    arguments[1] = path.join(this._folder, arguments[1]);
	                }
	                return this._wrapped[name].apply(this._wrapped, arguments);
	            }
	            catch (e) {
	                throw translateError(this._folder, e);
	            }
	        };
	    }
	}
	// First argument is a path.
	['diskSpace', 'stat', 'statSync', 'open', 'openSync', 'unlink', 'unlinkSync',
	    'rmdir', 'rmdirSync', 'mkdir', 'mkdirSync', 'readdir', 'readdirSync', 'exists',
	    'existsSync', 'realpath', 'realpathSync', 'truncate', 'truncateSync', 'readFile',
	    'readFileSync', 'writeFile', 'writeFileSync', 'appendFile', 'appendFileSync',
	    'chmod', 'chmodSync', 'chown', 'chownSync', 'utimes', 'utimesSync', 'readlink',
	    'readlinkSync'].forEach(function (name) {
	    FolderAdapter.prototype[name] = wrapFunction(name, true, false);
	});
	// First and second arguments are paths.
	['rename', 'renameSync', 'link', 'linkSync', 'symlink', 'symlinkSync'].forEach(function (name) {
	    FolderAdapter.prototype[name] = wrapFunction(name, true, true);
	});
	
	/**
	 * @hidden
	 */
	var toExport;
	if (typeof (window) !== 'undefined') {
	    toExport = window;
	}
	else if (typeof (self) !== 'undefined') {
	    toExport = self;
	}
	else {
	    toExport = global;
	}
	var global$1 = toExport;
	
	/**
	 * @hidden
	 */
	function isDirectoryEntry(entry) {
	    return entry.isDirectory;
	}
	/**
	 * @hidden
	 */
	var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
	/**
	 * @hidden
	 */
	function _requestQuota(type, size, success, errorCallback) {
	    // We cast navigator and window to '<any>' because everything here is
	    // nonstandard functionality, despite the fact that Chrome has the only
	    // implementation of the HTML5FS and is likely driving the standardization
	    // process. Thus, these objects defined off of navigator and window are not
	    // present in the DefinitelyTyped TypeScript typings for FileSystem.
	    if (typeof navigator['webkitPersistentStorage'] !== 'undefined') {
	        switch (type) {
	            case global$1.PERSISTENT:
	                navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
	                break;
	            case global$1.TEMPORARY:
	                navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
	                break;
	            default:
	                errorCallback(new TypeError(("Invalid storage type: " + type)));
	                break;
	        }
	    }
	    else {
	        global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
	    }
	}
	/**
	 * @hidden
	 */
	function _toArray(list) {
	    return Array.prototype.slice.call(list || [], 0);
	}
	/**
	 * Converts the given DOMError into an appropriate ApiError.
	 * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError
	 * @hidden
	 */
	function convertError$1(err, p, expectedDir) {
	    switch (err.name) {
	        /* The user agent failed to create a file or directory due to the existence of a file or
	            directory with the same path.  */
	        case "PathExistsError":
	            return ApiError.EEXIST(p);
	        /* The operation failed because it would cause the application to exceed its storage quota.  */
	        case 'QuotaExceededError':
	            return ApiError.FileError(ErrorCode.ENOSPC, p);
	        /*  A required file or directory could not be found at the time an operation was processed.   */
	        case 'NotFoundError':
	            return ApiError.ENOENT(p);
	        /* This is a security error code to be used in situations not covered by any other error codes.
	            - A required file was unsafe for access within a Web application
	            - Too many calls are being made on filesystem resources */
	        case 'SecurityError':
	            return ApiError.FileError(ErrorCode.EACCES, p);
	        /* The modification requested was illegal. Examples of invalid modifications include moving a
	            directory into its own child, moving a file into its parent directory without changing its name,
	            or copying a directory to a path occupied by a file.  */
	        case 'InvalidModificationError':
	            return ApiError.FileError(ErrorCode.EPERM, p);
	        /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type
	            [e.g. is a DirectoryEntry when the user requested a FileEntry].  */
	        case 'TypeMismatchError':
	            return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);
	        /* A path or URL supplied to the API was malformed.  */
	        case "EncodingError":
	        /* An operation depended on state cached in an interface object, but that state that has changed
	            since it was read from disk.  */
	        case "InvalidStateError":
	        /* The user attempted to write to a file or directory which could not be modified due to the state
	            of the underlying filesystem.  */
	        case "NoModificationAllowedError":
	        default:
	            return ApiError.FileError(ErrorCode.EINVAL, p);
	    }
	}
	// A note about getFile and getDirectory options:
	// These methods are called at numerous places in this file, and are passed
	// some combination of these two options:
	//   - create: If true, the entry will be created if it doesn't exist.
	//             If false, an error will be thrown if it doesn't exist.
	//   - exclusive: If true, only create the entry if it doesn't already exist,
	//                and throw an error if it does.
	var HTML5FSFile = (function (PreloadFile$$1) {
	    function HTML5FSFile(fs, entry, path$$1, flag, stat, contents) {
	        PreloadFile$$1.call(this, fs, path$$1, flag, stat, contents);
	        this._entry = entry;
	    }
	
	    if ( PreloadFile$$1 ) HTML5FSFile.__proto__ = PreloadFile$$1;
	    HTML5FSFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    HTML5FSFile.prototype.constructor = HTML5FSFile;
	    HTML5FSFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (!this.isDirty()) {
	            return cb();
	        }
	        this._entry.createWriter(function (writer) {
	            var buffer$$1 = this$1.getBuffer();
	            var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
	            var length = blob.size;
	            writer.onwriteend = function (err) {
	                writer.onwriteend = null;
	                writer.onerror = null;
	                writer.truncate(length);
	                this$1.resetDirty();
	                cb();
	            };
	            writer.onerror = function (err) {
	                cb(convertError$1(err, this$1.getPath(), false));
	            };
	            writer.write(blob);
	        });
	    };
	    HTML5FSFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	
	    return HTML5FSFile;
	}(PreloadFile));
	/**
	 * A read-write filesystem backed by the HTML5 FileSystem API.
	 *
	 * As the HTML5 FileSystem is only implemented in Blink, this interface is
	 * only available in Chrome.
	 */
	var HTML5FS = (function (BaseFileSystem$$1) {
	    function HTML5FS(size, type, deprecateMsg) {
	        if ( size === void 0 ) size = 5;
	        if ( type === void 0 ) type = global$1.PERSISTENT;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        // Convert MB to bytes.
	        this.size = 1024 * 1024 * size;
	        this.type = type;
	        deprecationMessage(deprecateMsg, HTML5FS.Name, { size: size, type: type });
	    }
	
	    if ( BaseFileSystem$$1 ) HTML5FS.__proto__ = BaseFileSystem$$1;
	    HTML5FS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    HTML5FS.prototype.constructor = HTML5FS;
	    /**
	     * Creates an HTML5FS instance with the given options.
	     */
	    HTML5FS.Create = function Create (opts, cb) {
	        var fs = new HTML5FS(opts.size, opts.type, false);
	        fs.allocate(function (e) { return e ? cb(e) : cb(null, fs); }, false);
	    };
	    HTML5FS.isAvailable = function isAvailable () {
	        return !!_getFS;
	    };
	    HTML5FS.prototype.getName = function getName () {
	        return HTML5FS.Name;
	    };
	    HTML5FS.prototype.isReadOnly = function isReadOnly () {
	        return false;
	    };
	    HTML5FS.prototype.supportsSymlinks = function supportsSymlinks () {
	        return false;
	    };
	    HTML5FS.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    HTML5FS.prototype.supportsSynch = function supportsSynch () {
	        return false;
	    };
	    /**
	     * **Deprecated. Please use Create() method instead to create and allocate an HTML5FS.**
	     *
	     * Requests a storage quota from the browser to back this FS.
	     * Must be called before file system can be used!
	     */
	    HTML5FS.prototype.allocate = function allocate (cb, deprecateMsg) {
	        var this$1 = this;
	        if ( cb === void 0 ) cb = function () { };
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn(("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + (this.type) + ", size: " + (this.size) + "}, cb)' to create and allocate HTML5FS instances."));
	        }
	        var success = function (fs) {
	            this$1.fs = fs;
	            cb();
	        };
	        var error = function (err) {
	            cb(convertError$1(err, "/", true));
	        };
	        if (this.type === global$1.PERSISTENT) {
	            _requestQuota(this.type, this.size, function (granted) {
	                _getFS(this$1.type, granted, success, error);
	            }, error);
	        }
	        else {
	            _getFS(this.type, this.size, success, error);
	        }
	    };
	    /**
	     * Deletes everything in the FS. Used for testing.
	     * Karma clears the storage after you quit it but not between runs of the test
	     * suite, and the tests expect an empty FS every time.
	     */
	    HTML5FS.prototype.empty = function empty (mainCb) {
	        // Get a list of all entries in the root directory to delete them
	        this._readdir('/', function (err, entries) {
	            if (err) {
	                console.error('Failed to empty FS');
	                mainCb(err);
	            }
	            else {
	                // Called when every entry has been operated on
	                var finished = function (er) {
	                    if (err) {
	                        console.error("Failed to empty FS");
	                        mainCb(err);
	                    }
	                    else {
	                        mainCb();
	                    }
	                };
	                // Removes files and recursively removes directories
	                var deleteEntry = function (entry, cb) {
	                    var succ = function () {
	                        cb();
	                    };
	                    var error = function (err) {
	                        cb(convertError$1(err, entry.fullPath, !entry.isDirectory));
	                    };
	                    if (isDirectoryEntry(entry)) {
	                        entry.removeRecursively(succ, error);
	                    }
	                    else {
	                        entry.remove(succ, error);
	                    }
	                };
	                // Loop through the entries and remove them, then call the callback
	                // when they're all finished.
	                eachLimit(entries, deleteEntry, finished);
	            }
	        });
	    };
	    HTML5FS.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        var semaphore = 2;
	        var successCount = 0;
	        var root = this.fs.root;
	        var currentPath = oldPath;
	        var error = function (err) {
	            if (--semaphore <= 0) {
	                cb(convertError$1(err, currentPath, false));
	            }
	        };
	        var success = function (file) {
	            if (++successCount === 2) {
	                return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
	            }
	            // SPECIAL CASE: If newPath === oldPath, and the path exists, then
	            // this operation trivially succeeds.
	            if (oldPath === newPath) {
	                return cb();
	            }
	            // Get the new parent directory.
	            currentPath = path.dirname(newPath);
	            root.getDirectory(currentPath, {}, function (parentDir) {
	                currentPath = path.basename(newPath);
	                file.moveTo(parentDir, currentPath, function (entry) { cb(); }, function (err) {
	                    // SPECIAL CASE: If oldPath is a directory, and newPath is a
	                    // file, rename should delete the file and perform the move.
	                    if (file.isDirectory) {
	                        currentPath = newPath;
	                        // Unlink only works on files. Try to delete newPath.
	                        this$1.unlink(newPath, function (e) {
	                            if (e) {
	                                // newPath is probably a directory.
	                                error(err);
	                            }
	                            else {
	                                // Recur, now that newPath doesn't exist.
	                                this$1.rename(oldPath, newPath, cb);
	                            }
	                        });
	                    }
	                    else {
	                        error(err);
	                    }
	                });
	            }, error);
	        };
	        // We don't know if oldPath is a *file* or a *directory*, and there's no
	        // way to stat items. So launch both requests, see which one succeeds.
	        root.getFile(oldPath, {}, success, error);
	        root.getDirectory(oldPath, {}, success, error);
	    };
	    HTML5FS.prototype.stat = function stat (path$$1, isLstat, cb) {
	        var this$1 = this;
	
	        // Throw an error if the entry doesn't exist, because then there's nothing
	        // to stat.
	        var opts = {
	            create: false
	        };
	        // Called when the path has been successfully loaded as a file.
	        var loadAsFile = function (entry) {
	            var fileFromEntry = function (file) {
	                var stat = new Stats(FileType.FILE, file.size);
	                cb(null, stat);
	            };
	            entry.file(fileFromEntry, failedToLoad);
	        };
	        // Called when the path has been successfully loaded as a directory.
	        var loadAsDir = function (dir$$1) {
	            // Directory entry size can't be determined from the HTML5 FS API, and is
	            // implementation-dependant anyway, so a dummy value is used.
	            var size = 4096;
	            var stat = new Stats(FileType.DIRECTORY, size);
	            cb(null, stat);
	        };
	        // Called when the path couldn't be opened as a directory or a file.
	        var failedToLoad = function (err) {
	            cb(convertError$1(err, path$$1, false /* Unknown / irrelevant */));
	        };
	        // Called when the path couldn't be opened as a file, but might still be a
	        // directory.
	        var failedToLoadAsFile = function () {
	            this$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
	        };
	        // No method currently exists to determine whether a path refers to a
	        // directory or a file, so this implementation tries both and uses the first
	        // one that succeeds.
	        this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
	    };
	    HTML5FS.prototype.open = function open (p, flags, mode, cb) {
	        var this$1 = this;
	
	        // XXX: err is a DOMError
	        var error = function (err) {
	            if (err.name === 'InvalidModificationError' && flags.isExclusive()) {
	                cb(ApiError.EEXIST(p));
	            }
	            else {
	                cb(convertError$1(err, p, false));
	            }
	        };
	        this.fs.root.getFile(p, {
	            create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
	            exclusive: flags.isExclusive()
	        }, function (entry) {
	            // Try to fetch corresponding file.
	            entry.file(function (file) {
	                var reader = new FileReader();
	                reader.onloadend = function (event) {
	                    var bfsFile = this$1._makeFile(p, entry, flags, file, reader.result);
	                    cb(null, bfsFile);
	                };
	                reader.onerror = function (ev) {
	                    error(reader.error);
	                };
	                reader.readAsArrayBuffer(file);
	            }, error);
	        }, error);
	    };
	    HTML5FS.prototype.unlink = function unlink (path$$1, cb) {
	        this._remove(path$$1, cb, true);
	    };
	    HTML5FS.prototype.rmdir = function rmdir (path$$1, cb) {
	        var this$1 = this;
	
	        // Check if directory is non-empty, first.
	        this.readdir(path$$1, function (e, files) {
	            if (e) {
	                cb(e);
	            }
	            else if (files.length > 0) {
	                cb(ApiError.ENOTEMPTY(path$$1));
	            }
	            else {
	                this$1._remove(path$$1, cb, false);
	            }
	        });
	    };
	    HTML5FS.prototype.mkdir = function mkdir (path$$1, mode, cb) {
	        // Create the directory, but throw an error if it already exists, as per
	        // mkdir(1)
	        var opts = {
	            create: true,
	            exclusive: true
	        };
	        var success = function (dir$$1) {
	            cb();
	        };
	        var error = function (err) {
	            cb(convertError$1(err, path$$1, true));
	        };
	        this.fs.root.getDirectory(path$$1, opts, success, error);
	    };
	    /**
	     * Map _readdir's list of `FileEntry`s to their names and return that.
	     */
	    HTML5FS.prototype.readdir = function readdir (path$$1, cb) {
	        this._readdir(path$$1, function (e, entries) {
	            if (entries) {
	                var rv = [];
	                for (var i = 0, list = entries; i < list.length; i += 1) {
	                    var entry = list[i];
	
	                    rv.push(entry.name);
	                }
	                cb(null, rv);
	            }
	            else {
	                return cb(e);
	            }
	        });
	    };
	    /**
	     * Returns a BrowserFS object representing a File.
	     */
	    HTML5FS.prototype._makeFile = function _makeFile (path$$1, entry, flag, stat, data) {
	        if ( data === void 0 ) data = new ArrayBuffer(0);
	
	        var stats = new Stats(FileType.FILE, stat.size);
	        var buffer$$1 = arrayBuffer2Buffer(data);
	        return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
	    };
	    /**
	     * Returns an array of `FileEntry`s. Used internally by empty and readdir.
	     */
	    HTML5FS.prototype._readdir = function _readdir (path$$1, cb) {
	        var error = function (err) {
	            cb(convertError$1(err, path$$1, true));
	        };
	        // Grab the requested directory.
	        this.fs.root.getDirectory(path$$1, { create: false }, function (dirEntry) {
	            var reader = dirEntry.createReader();
	            var entries = [];
	            // Call the reader.readEntries() until no more results are returned.
	            var readEntries = function () {
	                reader.readEntries((function (results) {
	                    if (results.length) {
	                        entries = entries.concat(_toArray(results));
	                        readEntries();
	                    }
	                    else {
	                        cb(null, entries);
	                    }
	                }), error);
	            };
	            readEntries();
	        }, error);
	    };
	    /**
	     * Delete a file or directory from the file system
	     * isFile should reflect which call was made to remove the it (`unlink` or
	     * `rmdir`). If this doesn't match what's actually at `path`, an error will be
	     * returned
	     */
	    HTML5FS.prototype._remove = function _remove (path$$1, cb, isFile) {
	        var success = function (entry) {
	            var succ = function () {
	                cb();
	            };
	            var err = function (err) {
	                cb(convertError$1(err, path$$1, !isFile));
	            };
	            entry.remove(succ, err);
	        };
	        var error = function (err) {
	            cb(convertError$1(err, path$$1, !isFile));
	        };
	        // Deleting the entry, so don't create it
	        var opts = {
	            create: false
	        };
	        if (isFile) {
	            this.fs.root.getFile(path$$1, opts, success, error);
	        }
	        else {
	            this.fs.root.getDirectory(path$$1, opts, success, error);
	        }
	    };
	
	    return HTML5FS;
	}(BaseFileSystem));
	
	HTML5FS.Name = "HTML5FS";
	HTML5FS.Options = {
	    size: {
	        type: "number",
	        optional: true,
	        description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
	    },
	    type: {
	        type: "number",
	        optional: true,
	        description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
	    }
	};
	
	/**
	 * Generic inode definition that can easily be serialized.
	 */
	var Inode = function Inode(id, size, mode, atime, mtime, ctime) {
	    this.id = id;
	    this.size = size;
	    this.mode = mode;
	    this.atime = atime;
	    this.mtime = mtime;
	    this.ctime = ctime;
	};
	/**
	 * Converts the buffer into an Inode.
	 */
	Inode.fromBuffer = function fromBuffer (buffer$$1) {
	    if (buffer$$1 === undefined) {
	        throw new Error("NO");
	    }
	    return new Inode(buffer$$1.toString('ascii', 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
	};
	/**
	 * Handy function that converts the Inode to a Node Stats object.
	 */
	Inode.prototype.toStats = function toStats () {
	    return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
	};
	/**
	 * Get the size of this Inode, in bytes.
	 */
	Inode.prototype.getSize = function getSize () {
	    // ASSUMPTION: ID is ASCII (1 byte per char).
	    return 30 + this.id.length;
	};
	/**
	 * Writes the inode into the start of the buffer.
	 */
	Inode.prototype.toBuffer = function toBuffer (buff) {
	        if ( buff === void 0 ) buff = Buffer.alloc(this.getSize());
	
	    buff.writeUInt32LE(this.size, 0);
	    buff.writeUInt16LE(this.mode, 4);
	    buff.writeDoubleLE(this.atime, 6);
	    buff.writeDoubleLE(this.mtime, 14);
	    buff.writeDoubleLE(this.ctime, 22);
	    buff.write(this.id, 30, this.id.length, 'ascii');
	    return buff;
	};
	/**
	 * Updates the Inode using information from the stats object. Used by file
	 * systems at sync time, e.g.:
	 * - Program opens file and gets a File object.
	 * - Program mutates file. File object is responsible for maintaining
	 *   metadata changes locally -- typically in a Stats object.
	 * - Program closes file. File object's metadata changes are synced with the
	 *   file system.
	 * @return True if any changes have occurred.
	 */
	Inode.prototype.update = function update (stats) {
	    var hasChanged = false;
	    if (this.size !== stats.size) {
	        this.size = stats.size;
	        hasChanged = true;
	    }
	    if (this.mode !== stats.mode) {
	        this.mode = stats.mode;
	        hasChanged = true;
	    }
	    var atimeMs = stats.atime.getTime();
	    if (this.atime !== atimeMs) {
	        this.atime = atimeMs;
	        hasChanged = true;
	    }
	    var mtimeMs = stats.mtime.getTime();
	    if (this.mtime !== mtimeMs) {
	        this.mtime = mtimeMs;
	        hasChanged = true;
	    }
	    var ctimeMs = stats.ctime.getTime();
	    if (this.ctime !== ctimeMs) {
	        this.ctime = ctimeMs;
	        hasChanged = true;
	    }
	    return hasChanged;
	};
	// XXX: Copied from Stats. Should reconcile these two into something more
	//  compact.
	/**
	 * @return [Boolean] True if this item is a file.
	 */
	Inode.prototype.isFile = function isFile () {
	    return (this.mode & 0xF000) === FileType.FILE;
	};
	/**
	 * @return [Boolean] True if this item is a directory.
	 */
	Inode.prototype.isDirectory = function isDirectory () {
	    return (this.mode & 0xF000) === FileType.DIRECTORY;
	};
	
	/**
	 * @hidden
	 */
	var ROOT_NODE_ID = "/";
	/**
	 * @hidden
	 */
	var emptyDirNode = null;
	/**
	 * Returns an empty directory node.
	 * @hidden
	 */
	function getEmptyDirNode() {
	    if (emptyDirNode) {
	        return emptyDirNode;
	    }
	    return emptyDirNode = Buffer.from("{}");
	}
	/**
	 * Generates a random ID.
	 * @hidden
	 */
	function GenerateRandomID() {
	    // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
	    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	        var r = Math.random() * 16 | 0;
	        var v = c === 'x' ? r : (r & 0x3 | 0x8);
	        return v.toString(16);
	    });
	}
	/**
	 * Helper function. Checks if 'e' is defined. If so, it triggers the callback
	 * with 'e' and returns false. Otherwise, returns true.
	 * @hidden
	 */
	function noError(e, cb) {
	    if (e) {
	        cb(e);
	        return false;
	    }
	    return true;
	}
	/**
	 * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,
	 * triggers the callback with 'e', and returns false. Otherwise, returns true.
	 * @hidden
	 */
	function noErrorTx(e, tx, cb) {
	    if (e) {
	        tx.abort(function () {
	            cb(e);
	        });
	        return false;
	    }
	    return true;
	}
	/**
	 * A simple RW transaction for simple synchronous key-value stores.
	 */
	var SimpleSyncRWTransaction = function SimpleSyncRWTransaction(store) {
	    this.store = store;
	    /**
	     * Stores data in the keys we modify prior to modifying them.
	     * Allows us to roll back commits.
	     */
	    this.originalData = {};
	    /**
	     * List of keys modified in this transaction, if any.
	     */
	    this.modifiedKeys = [];
	};
	SimpleSyncRWTransaction.prototype.get = function get (key) {
	    var val = this.store.get(key);
	    this.stashOldValue(key, val);
	    return val;
	};
	SimpleSyncRWTransaction.prototype.put = function put (key, data, overwrite) {
	    this.markModified(key);
	    return this.store.put(key, data, overwrite);
	};
	SimpleSyncRWTransaction.prototype.del = function del (key) {
	    this.markModified(key);
	    this.store.del(key);
	};
	SimpleSyncRWTransaction.prototype.commit = function commit () { };
	SimpleSyncRWTransaction.prototype.abort = function abort () {
	        var this$1 = this;
	
	    // Rollback old values.
	    for (var i = 0, list = this$1.modifiedKeys; i < list.length; i += 1) {
	        var key = list[i];
	
	            var value = this$1.originalData[key];
	        if (!value) {
	            // Key didn't exist.
	            this$1.store.del(key);
	        }
	        else {
	            // Key existed. Store old value.
	            this$1.store.put(key, value, true);
	        }
	    }
	};
	/**
	 * Stashes given key value pair into `originalData` if it doesn't already
	 * exist. Allows us to stash values the program is requesting anyway to
	 * prevent needless `get` requests if the program modifies the data later
	 * on during the transaction.
	 */
	SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue (key, value) {
	    // Keep only the earliest value in the transaction.
	    if (!this.originalData.hasOwnProperty(key)) {
	        this.originalData[key] = value;
	    }
	};
	/**
	 * Marks the given key as modified, and stashes its value if it has not been
	 * stashed already.
	 */
	SimpleSyncRWTransaction.prototype.markModified = function markModified (key) {
	    if (this.modifiedKeys.indexOf(key) === -1) {
	        this.modifiedKeys.push(key);
	        if (!this.originalData.hasOwnProperty(key)) {
	            this.originalData[key] = this.store.get(key);
	        }
	    }
	};
	var SyncKeyValueFile = (function (PreloadFile$$1) {
	    function SyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile$$1 ) SyncKeyValueFile.__proto__ = PreloadFile$$1;
	    SyncKeyValueFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    SyncKeyValueFile.prototype.constructor = SyncKeyValueFile;
	    SyncKeyValueFile.prototype.syncSync = function syncSync () {
	        if (this.isDirty()) {
	            this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());
	            this.resetDirty();
	        }
	    };
	    SyncKeyValueFile.prototype.closeSync = function closeSync () {
	        this.syncSync();
	    };
	
	    return SyncKeyValueFile;
	}(PreloadFile));
	/**
	 * A "Synchronous key-value file system". Stores data to/retrieves data from an
	 * underlying key-value store.
	 *
	 * We use a unique ID for each node in the file system. The root node has a
	 * fixed ID.
	 * @todo Introduce Node ID caching.
	 * @todo Check modes.
	 */
	var SyncKeyValueFileSystem = (function (SynchronousFileSystem$$1) {
	    function SyncKeyValueFileSystem(options) {
	        SynchronousFileSystem$$1.call(this);
	        this.store = options.store;
	        // INVARIANT: Ensure that the root exists.
	        this.makeRootDirectory();
	    }
	
	    if ( SynchronousFileSystem$$1 ) SyncKeyValueFileSystem.__proto__ = SynchronousFileSystem$$1;
	    SyncKeyValueFileSystem.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    SyncKeyValueFileSystem.prototype.constructor = SyncKeyValueFileSystem;
	    SyncKeyValueFileSystem.isAvailable = function isAvailable () { return true; };
	
	    SyncKeyValueFileSystem.prototype.getName = function getName () { return this.store.name(); };
	    SyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
	    SyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks () { return false; };
	    SyncKeyValueFileSystem.prototype.supportsProps = function supportsProps () { return false; };
	    SyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch () { return true; };
	    /**
	     * Delete all contents stored in the file system.
	     */
	    SyncKeyValueFileSystem.prototype.empty = function empty () {
	        this.store.clear();
	        // INVARIANT: Root always exists.
	        this.makeRootDirectory();
	    };
	    SyncKeyValueFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	        var tx = this.store.beginTransaction('readwrite'), oldParent = path.dirname(oldPath), oldName = path.basename(oldPath), newParent = path.dirname(newPath), newName = path.basename(newPath), 
	        // Remove oldPath from parent's directory listing.
	        oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);
	        if (!oldDirList[oldName]) {
	            throw ApiError.ENOENT(oldPath);
	        }
	        var nodeId = oldDirList[oldName];
	        delete oldDirList[oldName];
	        // Invariant: Can't move a folder inside itself.
	        // This funny little hack ensures that the check passes only if oldPath
	        // is a subpath of newParent. We append '/' to avoid matching folders that
	        // are a substring of the bottom-most folder in the path.
	        if ((newParent + '/').indexOf(oldPath + '/') === 0) {
	            throw new ApiError(ErrorCode.EBUSY, oldParent);
	        }
	        // Add newPath to parent's directory listing.
	        var newDirNode, newDirList;
	        if (newParent === oldParent) {
	            // Prevent us from re-grabbing the same directory listing, which still
	            // contains oldName.
	            newDirNode = oldDirNode;
	            newDirList = oldDirList;
	        }
	        else {
	            newDirNode = this.findINode(tx, newParent);
	            newDirList = this.getDirListing(tx, newParent, newDirNode);
	        }
	        if (newDirList[newName]) {
	            // If it's a file, delete it.
	            var newNameNode = this.getINode(tx, newPath, newDirList[newName]);
	            if (newNameNode.isFile()) {
	                try {
	                    tx.del(newNameNode.id);
	                    tx.del(newDirList[newName]);
	                }
	                catch (e) {
	                    tx.abort();
	                    throw e;
	                }
	            }
	            else {
	                // If it's a directory, throw a permissions error.
	                throw ApiError.EPERM(newPath);
	            }
	        }
	        newDirList[newName] = nodeId;
	        // Commit the two changed directory listings.
	        try {
	            tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);
	            tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        tx.commit();
	    };
	    SyncKeyValueFileSystem.prototype.statSync = function statSync (p, isLstat) {
	        // Get the inode to the item, convert it into a Stats object.
	        return this.findINode(this.store.beginTransaction('readonly'), p).toStats();
	    };
	    SyncKeyValueFileSystem.prototype.createFileSync = function createFileSync (p, flag, mode) {
	        var tx = this.store.beginTransaction('readwrite'), data = emptyBuffer(), newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);
	        // Open the file.
	        return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
	    };
	    SyncKeyValueFileSystem.prototype.openFileSync = function openFileSync (p, flag) {
	        var tx = this.store.beginTransaction('readonly'), node = this.findINode(tx, p), data = tx.get(node.id);
	        if (data === undefined) {
	            throw ApiError.ENOENT(p);
	        }
	        return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
	    };
	    SyncKeyValueFileSystem.prototype.unlinkSync = function unlinkSync (p) {
	        this.removeEntry(p, false);
	    };
	    SyncKeyValueFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	        // Check first if directory is empty.
	        if (this.readdirSync(p).length > 0) {
	            throw ApiError.ENOTEMPTY(p);
	        }
	        else {
	            this.removeEntry(p, true);
	        }
	    };
	    SyncKeyValueFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
	        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');
	        this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
	    };
	    SyncKeyValueFileSystem.prototype.readdirSync = function readdirSync (p) {
	        var tx = this.store.beginTransaction('readonly');
	        return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
	    };
	    SyncKeyValueFileSystem.prototype._syncSync = function _syncSync (p, data, stats) {
	        // @todo Ensure mtime updates properly, and use that to determine if a data
	        //       update is required.
	        var tx = this.store.beginTransaction('readwrite'), 
	        // We use the _findInode helper because we actually need the INode id.
	        fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);
	        try {
	            // Sync data.
	            tx.put(fileInode.id, data, true);
	            // Sync metadata.
	            if (inodeChanged) {
	                tx.put(fileInodeId, fileInode.toBuffer(), true);
	            }
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        tx.commit();
	    };
	    /**
	     * Checks if the root directory exists. Creates it if it doesn't.
	     */
	    SyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory () {
	        var tx = this.store.beginTransaction('readwrite');
	        if (tx.get(ROOT_NODE_ID) === undefined) {
	            // Create new inode.
	            var currTime = (new Date()).getTime(), 
	            // Mode 0666
	            dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
	            // If the root doesn't exist, the first random ID shouldn't exist,
	            // either.
	            tx.put(dirInode.id, getEmptyDirNode(), false);
	            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
	            tx.commit();
	        }
	    };
	    /**
	     * Helper function for findINode.
	     * @param parent The parent directory of the file we are attempting to find.
	     * @param filename The filename of the inode we are attempting to find, minus
	     *   the parent.
	     * @return string The ID of the file's inode in the file system.
	     */
	    SyncKeyValueFileSystem.prototype._findINode = function _findINode (tx, parent, filename) {
	        var this$1 = this;
	
	        var readDirectory = function (inode) {
	            // Get the root's directory listing.
	            var dirList = this$1.getDirListing(tx, parent, inode);
	            // Get the file's ID.
	            if (dirList[filename]) {
	                return dirList[filename];
	            }
	            else {
	                throw ApiError.ENOENT(path.resolve(parent, filename));
	            }
	        };
	        if (parent === '/') {
	            if (filename === '') {
	                // BASE CASE #1: Return the root's ID.
	                return ROOT_NODE_ID;
	            }
	            else {
	                // BASE CASE #2: Find the item in the root ndoe.
	                return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
	            }
	        }
	        else {
	            return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));
	        }
	    };
	    /**
	     * Finds the Inode of the given path.
	     * @param p The path to look up.
	     * @return The Inode of the path p.
	     * @todo memoize/cache
	     */
	    SyncKeyValueFileSystem.prototype.findINode = function findINode (tx, p) {
	        return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));
	    };
	    /**
	     * Given the ID of a node, retrieves the corresponding Inode.
	     * @param tx The transaction to use.
	     * @param p The corresponding path to the file (used for error messages).
	     * @param id The ID to look up.
	     */
	    SyncKeyValueFileSystem.prototype.getINode = function getINode (tx, p, id) {
	        var inode = tx.get(id);
	        if (inode === undefined) {
	            throw ApiError.ENOENT(p);
	        }
	        return Inode.fromBuffer(inode);
	    };
	    /**
	     * Given the Inode of a directory, retrieves the corresponding directory
	     * listing.
	     */
	    SyncKeyValueFileSystem.prototype.getDirListing = function getDirListing (tx, p, inode) {
	        if (!inode.isDirectory()) {
	            throw ApiError.ENOTDIR(p);
	        }
	        var data = tx.get(inode.id);
	        if (data === undefined) {
	            throw ApiError.ENOENT(p);
	        }
	        return JSON.parse(data.toString());
	    };
	    /**
	     * Creates a new node under a random ID. Retries 5 times before giving up in
	     * the exceedingly unlikely chance that we try to reuse a random GUID.
	     * @return The GUID that the data was stored under.
	     */
	    SyncKeyValueFileSystem.prototype.addNewNode = function addNewNode (tx, data) {
	        var retries = 0;
	        var currId;
	        while (retries < 5) {
	            try {
	                currId = GenerateRandomID();
	                tx.put(currId, data, false);
	                return currId;
	            }
	            catch (e) {
	                // Ignore and reroll.
	            }
	        }
	        throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');
	    };
	    /**
	     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
	     * the given mode.
	     * Note: This will commit the transaction.
	     * @param p The path to the new file.
	     * @param type The type of the new file.
	     * @param mode The mode to create the new file with.
	     * @param data The data to store at the file's data node.
	     * @return The Inode for the new file.
	     */
	    SyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile (tx, p, type, mode, data) {
	        var parentDir = path.dirname(p), fname = path.basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = (new Date()).getTime();
	        // Invariant: The root always exists.
	        // If we don't check this prior to taking steps below, we will create a
	        // file with name '' in root should p == '/'.
	        if (p === '/') {
	            throw ApiError.EEXIST(p);
	        }
	        // Check if file already exists.
	        if (dirListing[fname]) {
	            throw ApiError.EEXIST(p);
	        }
	        var fileNode;
	        try {
	            // Commit data.
	            var dataId = this.addNewNode(tx, data);
	            fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
	            // Commit file node.
	            var fileNodeId = this.addNewNode(tx, fileNode.toBuffer());
	            // Update and commit parent directory listing.
	            dirListing[fname] = fileNodeId;
	            tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        tx.commit();
	        return fileNode;
	    };
	    /**
	     * Remove all traces of the given path from the file system.
	     * @param p The path to remove from the file system.
	     * @param isDir Does the path belong to a directory, or a file?
	     * @todo Update mtime.
	     */
	    SyncKeyValueFileSystem.prototype.removeEntry = function removeEntry (p, isDir) {
	        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = path.basename(p);
	        if (!parentListing[fileName]) {
	            throw ApiError.ENOENT(p);
	        }
	        // Remove from directory listing of parent.
	        var fileNodeId = parentListing[fileName];
	        delete parentListing[fileName];
	        // Get file inode.
	        var fileNode = this.getINode(tx, p, fileNodeId);
	        if (!isDir && fileNode.isDirectory()) {
	            throw ApiError.EISDIR(p);
	        }
	        else if (isDir && !fileNode.isDirectory()) {
	            throw ApiError.ENOTDIR(p);
	        }
	        try {
	            // Delete data.
	            tx.del(fileNode.id);
	            // Delete node.
	            tx.del(fileNodeId);
	            // Update directory listing.
	            tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        // Success.
	        tx.commit();
	    };
	
	    return SyncKeyValueFileSystem;
	}(SynchronousFileSystem));
	var AsyncKeyValueFile = (function (PreloadFile$$1) {
	    function AsyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile$$1 ) AsyncKeyValueFile.__proto__ = PreloadFile$$1;
	    AsyncKeyValueFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    AsyncKeyValueFile.prototype.constructor = AsyncKeyValueFile;
	    AsyncKeyValueFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (this.isDirty()) {
	            this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function (e) {
	                if (!e) {
	                    this$1.resetDirty();
	                }
	                cb(e);
	            });
	        }
	        else {
	            cb();
	        }
	    };
	    AsyncKeyValueFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	
	    return AsyncKeyValueFile;
	}(PreloadFile));
	/**
	 * An "Asynchronous key-value file system". Stores data to/retrieves data from
	 * an underlying asynchronous key-value store.
	 */
	var AsyncKeyValueFileSystem = (function (BaseFileSystem$$1) {
	    function AsyncKeyValueFileSystem () {
	        BaseFileSystem$$1.apply(this, arguments);
	    }
	
	    if ( BaseFileSystem$$1 ) AsyncKeyValueFileSystem.__proto__ = BaseFileSystem$$1;
	    AsyncKeyValueFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    AsyncKeyValueFileSystem.prototype.constructor = AsyncKeyValueFileSystem;
	
	    AsyncKeyValueFileSystem.isAvailable = function isAvailable () { return true; };
	    /**
	     * Initializes the file system. Typically called by subclasses' async
	     * constructors.
	     */
	    AsyncKeyValueFileSystem.prototype.init = function init (store, cb) {
	        this.store = store;
	        // INVARIANT: Ensure that the root exists.
	        this.makeRootDirectory(cb);
	    };
	    AsyncKeyValueFileSystem.prototype.getName = function getName () { return this.store.name(); };
	    AsyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
	    AsyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks () { return false; };
	    AsyncKeyValueFileSystem.prototype.supportsProps = function supportsProps () { return false; };
	    AsyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch () { return false; };
	    /**
	     * Delete all contents stored in the file system.
	     */
	    AsyncKeyValueFileSystem.prototype.empty = function empty (cb) {
	        var this$1 = this;
	
	        this.store.clear(function (e) {
	            if (noError(e, cb)) {
	                // INVARIANT: Root always exists.
	                this$1.makeRootDirectory(cb);
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readwrite');
	        var oldParent = path.dirname(oldPath), oldName = path.basename(oldPath);
	        var newParent = path.dirname(newPath), newName = path.basename(newPath);
	        var inodes = {};
	        var lists = {};
	        var errorOccurred = false;
	        // Invariant: Can't move a folder inside itself.
	        // This funny little hack ensures that the check passes only if oldPath
	        // is a subpath of newParent. We append '/' to avoid matching folders that
	        // are a substring of the bottom-most folder in the path.
	        if ((newParent + '/').indexOf(oldPath + '/') === 0) {
	            return cb(new ApiError(ErrorCode.EBUSY, oldParent));
	        }
	        /**
	         * Responsible for Phase 2 of the rename operation: Modifying and
	         * committing the directory listings. Called once we have successfully
	         * retrieved both the old and new parent's inodes and listings.
	         */
	        var theOleSwitcharoo = function () {
	            // Sanity check: Ensure both paths are present, and no error has occurred.
	            if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
	                return;
	            }
	            var oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];
	            // Delete file from old parent.
	            if (!oldParentList[oldName]) {
	                cb(ApiError.ENOENT(oldPath));
	            }
	            else {
	                var fileId = oldParentList[oldName];
	                delete oldParentList[oldName];
	                // Finishes off the renaming process by adding the file to the new
	                // parent.
	                var completeRename = function () {
	                    newParentList[newName] = fileId;
	                    // Commit old parent's list.
	                    tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, function (e) {
	                        if (noErrorTx(e, tx, cb)) {
	                            if (oldParent === newParent) {
	                                // DONE!
	                                tx.commit(cb);
	                            }
	                            else {
	                                // Commit new parent's list.
	                                tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, function (e) {
	                                    if (noErrorTx(e, tx, cb)) {
	                                        tx.commit(cb);
	                                    }
	                                });
	                            }
	                        }
	                    });
	                };
	                if (newParentList[newName]) {
	                    // 'newPath' already exists. Check if it's a file or a directory, and
	                    // act accordingly.
	                    this$1.getINode(tx, newPath, newParentList[newName], function (e, inode) {
	                        if (noErrorTx(e, tx, cb)) {
	                            if (inode.isFile()) {
	                                // Delete the file and continue.
	                                tx.del(inode.id, function (e) {
	                                    if (noErrorTx(e, tx, cb)) {
	                                        tx.del(newParentList[newName], function (e) {
	                                            if (noErrorTx(e, tx, cb)) {
	                                                completeRename();
	                                            }
	                                        });
	                                    }
	                                });
	                            }
	                            else {
	                                // Can't overwrite a directory using rename.
	                                tx.abort(function (e) {
	                                    cb(ApiError.EPERM(newPath));
	                                });
	                            }
	                        }
	                    });
	                }
	                else {
	                    completeRename();
	                }
	            }
	        };
	        /**
	         * Grabs a path's inode and directory listing, and shoves it into the
	         * inodes and lists hashes.
	         */
	        var processInodeAndListings = function (p) {
	            this$1.findINodeAndDirListing(tx, p, function (e, node, dirList) {
	                if (e) {
	                    if (!errorOccurred) {
	                        errorOccurred = true;
	                        tx.abort(function () {
	                            cb(e);
	                        });
	                    }
	                    // If error has occurred already, just stop here.
	                }
	                else {
	                    inodes[p] = node;
	                    lists[p] = dirList;
	                    theOleSwitcharoo();
	                }
	            });
	        };
	        processInodeAndListings(oldParent);
	        if (oldParent !== newParent) {
	            processInodeAndListings(newParent);
	        }
	    };
	    AsyncKeyValueFileSystem.prototype.stat = function stat (p, isLstat, cb) {
	        var tx = this.store.beginTransaction('readonly');
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                cb(null, inode.toStats());
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.createFile = function createFile (p, flag, mode, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readwrite'), data = emptyBuffer();
	        this.commitNewFile(tx, p, FileType.FILE, mode, data, function (e, newFile) {
	            if (noError(e, cb)) {
	                cb(null, new AsyncKeyValueFile(this$1, p, flag, newFile.toStats(), data));
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.openFile = function openFile (p, flag, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readonly');
	        // Step 1: Grab the file's inode.
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                // Step 2: Grab the file's data.
	                tx.get(inode.id, function (e, data) {
	                    if (noError(e, cb)) {
	                        if (data === undefined) {
	                            cb(ApiError.ENOENT(p));
	                        }
	                        else {
	                            cb(null, new AsyncKeyValueFile(this$1, p, flag, inode.toStats(), data));
	                        }
	                    }
	                });
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.unlink = function unlink (p, cb) {
	        this.removeEntry(p, false, cb);
	    };
	    AsyncKeyValueFileSystem.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	        // Check first if directory is empty.
	        this.readdir(p, function (err, files) {
	            if (err) {
	                cb(err);
	            }
	            else if (files.length > 0) {
	                cb(ApiError.ENOTEMPTY(p));
	            }
	            else {
	                this$1.removeEntry(p, true, cb);
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');
	        this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
	    };
	    AsyncKeyValueFileSystem.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readonly');
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                this$1.getDirListing(tx, p, inode, function (e, dirListing) {
	                    if (noError(e, cb)) {
	                        cb(null, Object.keys(dirListing));
	                    }
	                });
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype._sync = function _sync (p, data, stats, cb) {
	        var this$1 = this;
	
	        // @todo Ensure mtime updates properly, and use that to determine if a data
	        //       update is required.
	        var tx = this.store.beginTransaction('readwrite');
	        // Step 1: Get the file node's ID.
	        this._findINode(tx, path.dirname(p), path.basename(p), function (e, fileInodeId) {
	            if (noErrorTx(e, tx, cb)) {
	                // Step 2: Get the file inode.
	                this$1.getINode(tx, p, fileInodeId, function (e, fileInode) {
	                    if (noErrorTx(e, tx, cb)) {
	                        var inodeChanged = fileInode.update(stats);
	                        // Step 3: Sync the data.
	                        tx.put(fileInode.id, data, true, function (e) {
	                            if (noErrorTx(e, tx, cb)) {
	                                // Step 4: Sync the metadata (if it changed)!
	                                if (inodeChanged) {
	                                    tx.put(fileInodeId, fileInode.toBuffer(), true, function (e) {
	                                        if (noErrorTx(e, tx, cb)) {
	                                            tx.commit(cb);
	                                        }
	                                    });
	                                }
	                                else {
	                                    // No need to sync metadata; return.
	                                    tx.commit(cb);
	                                }
	                            }
	                        });
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Checks if the root directory exists. Creates it if it doesn't.
	     */
	    AsyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory (cb) {
	        var tx = this.store.beginTransaction('readwrite');
	        tx.get(ROOT_NODE_ID, function (e, data) {
	            if (e || data === undefined) {
	                // Create new inode.
	                var currTime = (new Date()).getTime(), 
	                // Mode 0666
	                dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
	                // If the root doesn't exist, the first random ID shouldn't exist,
	                // either.
	                tx.put(dirInode.id, getEmptyDirNode(), false, function (e) {
	                    if (noErrorTx(e, tx, cb)) {
	                        tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function (e) {
	                            if (e) {
	                                tx.abort(function () { cb(e); });
	                            }
	                            else {
	                                tx.commit(cb);
	                            }
	                        });
	                    }
	                });
	            }
	            else {
	                // We're good.
	                tx.commit(cb);
	            }
	        });
	    };
	    /**
	     * Helper function for findINode.
	     * @param parent The parent directory of the file we are attempting to find.
	     * @param filename The filename of the inode we are attempting to find, minus
	     *   the parent.
	     * @param cb Passed an error or the ID of the file's inode in the file system.
	     */
	    AsyncKeyValueFileSystem.prototype._findINode = function _findINode (tx, parent, filename, cb) {
	        var this$1 = this;
	
	        var handleDirectoryListings = function (e, inode, dirList) {
	            if (e) {
	                cb(e);
	            }
	            else if (dirList[filename]) {
	                cb(null, dirList[filename]);
	            }
	            else {
	                cb(ApiError.ENOENT(path.resolve(parent, filename)));
	            }
	        };
	        if (parent === '/') {
	            if (filename === '') {
	                // BASE CASE #1: Return the root's ID.
	                cb(null, ROOT_NODE_ID);
	            }
	            else {
	                // BASE CASE #2: Find the item in the root node.
	                this.getINode(tx, parent, ROOT_NODE_ID, function (e, inode) {
	                    if (noError(e, cb)) {
	                        this$1.getDirListing(tx, parent, inode, function (e, dirList) {
	                            // handle_directory_listings will handle e for us.
	                            handleDirectoryListings(e, inode, dirList);
	                        });
	                    }
	                });
	            }
	        }
	        else {
	            // Get the parent directory's INode, and find the file in its directory
	            // listing.
	            this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
	        }
	    };
	    /**
	     * Finds the Inode of the given path.
	     * @param p The path to look up.
	     * @param cb Passed an error or the Inode of the path p.
	     * @todo memoize/cache
	     */
	    AsyncKeyValueFileSystem.prototype.findINode = function findINode (tx, p, cb) {
	        var this$1 = this;
	
	        this._findINode(tx, path.dirname(p), path.basename(p), function (e, id) {
	            if (noError(e, cb)) {
	                this$1.getINode(tx, p, id, cb);
	            }
	        });
	    };
	    /**
	     * Given the ID of a node, retrieves the corresponding Inode.
	     * @param tx The transaction to use.
	     * @param p The corresponding path to the file (used for error messages).
	     * @param id The ID to look up.
	     * @param cb Passed an error or the inode under the given id.
	     */
	    AsyncKeyValueFileSystem.prototype.getINode = function getINode (tx, p, id, cb) {
	        tx.get(id, function (e, data) {
	            if (noError(e, cb)) {
	                if (data === undefined) {
	                    cb(ApiError.ENOENT(p));
	                }
	                else {
	                    cb(null, Inode.fromBuffer(data));
	                }
	            }
	        });
	    };
	    /**
	     * Given the Inode of a directory, retrieves the corresponding directory
	     * listing.
	     */
	    AsyncKeyValueFileSystem.prototype.getDirListing = function getDirListing (tx, p, inode, cb) {
	        if (!inode.isDirectory()) {
	            cb(ApiError.ENOTDIR(p));
	        }
	        else {
	            tx.get(inode.id, function (e, data) {
	                if (noError(e, cb)) {
	                    try {
	                        cb(null, JSON.parse(data.toString()));
	                    }
	                    catch (e) {
	                        // Occurs when data is undefined, or corresponds to something other
	                        // than a directory listing. The latter should never occur unless
	                        // the file system is corrupted.
	                        cb(ApiError.ENOENT(p));
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * Given a path to a directory, retrieves the corresponding INode and
	     * directory listing.
	     */
	    AsyncKeyValueFileSystem.prototype.findINodeAndDirListing = function findINodeAndDirListing (tx, p, cb) {
	        var this$1 = this;
	
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                this$1.getDirListing(tx, p, inode, function (e, listing) {
	                    if (noError(e, cb)) {
	                        cb(null, inode, listing);
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Adds a new node under a random ID. Retries 5 times before giving up in
	     * the exceedingly unlikely chance that we try to reuse a random GUID.
	     * @param cb Passed an error or the GUID that the data was stored under.
	     */
	    AsyncKeyValueFileSystem.prototype.addNewNode = function addNewNode (tx, data, cb) {
	        var retries = 0, currId;
	        var reroll = function () {
	            if (++retries === 5) {
	                // Max retries hit. Return with an error.
	                cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));
	            }
	            else {
	                // Try again.
	                currId = GenerateRandomID();
	                tx.put(currId, data, false, function (e, committed) {
	                    if (e || !committed) {
	                        reroll();
	                    }
	                    else {
	                        // Successfully stored under 'currId'.
	                        cb(null, currId);
	                    }
	                });
	            }
	        };
	        reroll();
	    };
	    /**
	     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
	     * the given mode.
	     * Note: This will commit the transaction.
	     * @param p The path to the new file.
	     * @param type The type of the new file.
	     * @param mode The mode to create the new file with.
	     * @param data The data to store at the file's data node.
	     * @param cb Passed an error or the Inode for the new file.
	     */
	    AsyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile (tx, p, type, mode, data, cb) {
	        var this$1 = this;
	
	        var parentDir = path.dirname(p), fname = path.basename(p), currTime = (new Date()).getTime();
	        // Invariant: The root always exists.
	        // If we don't check this prior to taking steps below, we will create a
	        // file with name '' in root should p == '/'.
	        if (p === '/') {
	            return cb(ApiError.EEXIST(p));
	        }
	        // Let's build a pyramid of code!
	        // Step 1: Get the parent directory's inode and directory listing
	        this.findINodeAndDirListing(tx, parentDir, function (e, parentNode, dirListing) {
	            if (noErrorTx(e, tx, cb)) {
	                if (dirListing[fname]) {
	                    // File already exists.
	                    tx.abort(function () {
	                        cb(ApiError.EEXIST(p));
	                    });
	                }
	                else {
	                    // Step 2: Commit data to store.
	                    this$1.addNewNode(tx, data, function (e, dataId) {
	                        if (noErrorTx(e, tx, cb)) {
	                            // Step 3: Commit the file's inode to the store.
	                            var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
	                            this$1.addNewNode(tx, fileInode.toBuffer(), function (e, fileInodeId) {
	                                if (noErrorTx(e, tx, cb)) {
	                                    // Step 4: Update parent directory's listing.
	                                    dirListing[fname] = fileInodeId;
	                                    tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, function (e) {
	                                        if (noErrorTx(e, tx, cb)) {
	                                            // Step 5: Commit and return the new inode.
	                                            tx.commit(function (e) {
	                                                if (noErrorTx(e, tx, cb)) {
	                                                    cb(null, fileInode);
	                                                }
	                                            });
	                                        }
	                                    });
	                                }
	                            });
	                        }
	                    });
	                }
	            }
	        });
	    };
	    /**
	     * Remove all traces of the given path from the file system.
	     * @param p The path to remove from the file system.
	     * @param isDir Does the path belong to a directory, or a file?
	     * @todo Update mtime.
	     */
	    AsyncKeyValueFileSystem.prototype.removeEntry = function removeEntry (p, isDir, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), fileName = path.basename(p);
	        // Step 1: Get parent directory's node and directory listing.
	        this.findINodeAndDirListing(tx, parent, function (e, parentNode, parentListing) {
	            if (noErrorTx(e, tx, cb)) {
	                if (!parentListing[fileName]) {
	                    tx.abort(function () {
	                        cb(ApiError.ENOENT(p));
	                    });
	                }
	                else {
	                    // Remove from directory listing of parent.
	                    var fileNodeId = parentListing[fileName];
	                    delete parentListing[fileName];
	                    // Step 2: Get file inode.
	                    this$1.getINode(tx, p, fileNodeId, function (e, fileNode) {
	                        if (noErrorTx(e, tx, cb)) {
	                            if (!isDir && fileNode.isDirectory()) {
	                                tx.abort(function () {
	                                    cb(ApiError.EISDIR(p));
	                                });
	                            }
	                            else if (isDir && !fileNode.isDirectory()) {
	                                tx.abort(function () {
	                                    cb(ApiError.ENOTDIR(p));
	                                });
	                            }
	                            else {
	                                // Step 3: Delete data.
	                                tx.del(fileNode.id, function (e) {
	                                    if (noErrorTx(e, tx, cb)) {
	                                        // Step 4: Delete node.
	                                        tx.del(fileNodeId, function (e) {
	                                            if (noErrorTx(e, tx, cb)) {
	                                                // Step 5: Update directory listing.
	                                                tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, function (e) {
	                                                    if (noErrorTx(e, tx, cb)) {
	                                                        tx.commit(cb);
	                                                    }
	                                                });
	                                            }
	                                        });
	                                    }
	                                });
	                            }
	                        }
	                    });
	                }
	            }
	        });
	    };
	
	    return AsyncKeyValueFileSystem;
	}(BaseFileSystem));
	
	/**
	 * A simple in-memory key-value store backed by a JavaScript object.
	 */
	var InMemoryStore = function InMemoryStore() {
	    this.store = {};
	};
	InMemoryStore.prototype.name = function name () { return InMemoryFileSystem.Name; };
	InMemoryStore.prototype.clear = function clear () { this.store = {}; };
	InMemoryStore.prototype.beginTransaction = function beginTransaction (type) {
	    return new SimpleSyncRWTransaction(this);
	};
	InMemoryStore.prototype.get = function get (key) {
	    return this.store[key];
	};
	InMemoryStore.prototype.put = function put (key, data, overwrite) {
	    if (!overwrite && this.store.hasOwnProperty(key)) {
	        return false;
	    }
	    this.store[key] = data;
	    return true;
	};
	InMemoryStore.prototype.del = function del (key) {
	    delete this.store[key];
	};
	/**
	 * A simple in-memory file system backed by an InMemoryStore.
	 * Files are not persisted across page loads.
	 */
	var InMemoryFileSystem = (function (SyncKeyValueFileSystem$$1) {
	    function InMemoryFileSystem() {
	        SyncKeyValueFileSystem$$1.call(this, { store: new InMemoryStore() });
	    }
	
	    if ( SyncKeyValueFileSystem$$1 ) InMemoryFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
	    InMemoryFileSystem.prototype = Object.create( SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype );
	    InMemoryFileSystem.prototype.constructor = InMemoryFileSystem;
	    /**
	     * Creates an InMemoryFileSystem instance.
	     */
	    InMemoryFileSystem.Create = function Create (options, cb) {
	        cb(null, new InMemoryFileSystem());
	    };
	
	    return InMemoryFileSystem;
	}(SyncKeyValueFileSystem));
	
	InMemoryFileSystem.Name = "InMemory";
	InMemoryFileSystem.Options = {};
	
	/**
	 * Get the indexedDB constructor for the current browser.
	 * @hidden
	 */
	var indexedDB = global$1.indexedDB ||
	    global$1.mozIndexedDB ||
	    global$1.webkitIndexedDB ||
	    global$1.msIndexedDB;
	/**
	 * Converts a DOMException or a DOMError from an IndexedDB event into a
	 * standardized BrowserFS API error.
	 * @hidden
	 */
	function convertError$2(e, message) {
	    if ( message === void 0 ) message = e.toString();
	
	    switch (e.name) {
	        case "NotFoundError":
	            return new ApiError(ErrorCode.ENOENT, message);
	        case "QuotaExceededError":
	            return new ApiError(ErrorCode.ENOSPC, message);
	        default:
	            // The rest do not seem to map cleanly to standard error codes.
	            return new ApiError(ErrorCode.EIO, message);
	    }
	}
	/**
	 * Produces a new onerror handler for IDB. Our errors are always fatal, so we
	 * handle them generically: Call the user-supplied callback with a translated
	 * version of the error, and let the error bubble up.
	 * @hidden
	 */
	function onErrorHandler(cb, code, message) {
	    if ( code === void 0 ) code = ErrorCode.EIO;
	    if ( message === void 0 ) message = null;
	
	    return function (e) {
	        // Prevent the error from canceling the transaction.
	        e.preventDefault();
	        cb(new ApiError(code, message !== null ? message : undefined));
	    };
	}
	/**
	 * @hidden
	 */
	var IndexedDBROTransaction = function IndexedDBROTransaction(tx, store) {
	    this.tx = tx;
	    this.store = store;
	};
	IndexedDBROTransaction.prototype.get = function get (key, cb) {
	    try {
	        var r = this.store.get(key);
	        r.onerror = onErrorHandler(cb);
	        r.onsuccess = function (event) {
	            // IDB returns the value 'undefined' when you try to get keys that
	            // don't exist. The caller expects this behavior.
	            var result = event.target.result;
	            if (result === undefined) {
	                cb(null, result);
	            }
	            else {
	                // IDB data is stored as an ArrayBuffer
	                cb(null, arrayBuffer2Buffer(result));
	            }
	        };
	    }
	    catch (e) {
	        cb(convertError$2(e));
	    }
	};
	/**
	 * @hidden
	 */
	var IndexedDBRWTransaction = (function (IndexedDBROTransaction) {
	    function IndexedDBRWTransaction(tx, store) {
	        IndexedDBROTransaction.call(this, tx, store);
	    }
	
	    if ( IndexedDBROTransaction ) IndexedDBRWTransaction.__proto__ = IndexedDBROTransaction;
	    IndexedDBRWTransaction.prototype = Object.create( IndexedDBROTransaction && IndexedDBROTransaction.prototype );
	    IndexedDBRWTransaction.prototype.constructor = IndexedDBRWTransaction;
	    IndexedDBRWTransaction.prototype.put = function put (key, data, overwrite, cb) {
	        try {
	            var arraybuffer = buffer2ArrayBuffer(data);
	            var r;
	            if (overwrite) {
	                r = this.store.put(arraybuffer, key);
	            }
	            else {
	                // 'add' will never overwrite an existing key.
	                r = this.store.add(arraybuffer, key);
	            }
	            // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.
	            r.onerror = onErrorHandler(cb);
	            r.onsuccess = function (event) {
	                cb(null, true);
	            };
	        }
	        catch (e) {
	            cb(convertError$2(e));
	        }
	    };
	    IndexedDBRWTransaction.prototype.del = function del (key, cb) {
	        try {
	            // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string
	            // like this.
	            // http://stackoverflow.com/a/26479152
	            var r = this.store['delete'](key);
	            r.onerror = onErrorHandler(cb);
	            r.onsuccess = function (event) {
	                cb();
	            };
	        }
	        catch (e) {
	            cb(convertError$2(e));
	        }
	    };
	    IndexedDBRWTransaction.prototype.commit = function commit (cb) {
	        // Return to the event loop to commit the transaction.
	        setTimeout(cb, 0);
	    };
	    IndexedDBRWTransaction.prototype.abort = function abort (cb) {
	        var _e = null;
	        try {
	            this.tx.abort();
	        }
	        catch (e) {
	            _e = convertError$2(e);
	        }
	        finally {
	            cb(_e);
	        }
	    };
	
	    return IndexedDBRWTransaction;
	}(IndexedDBROTransaction));
	var IndexedDBStore = function IndexedDBStore(cb, storeName) {
	    var this$1 = this;
	    if ( storeName === void 0 ) storeName = 'browserfs';
	
	    this.storeName = storeName;
	    var openReq = indexedDB.open(this.storeName, 1);
	    openReq.onupgradeneeded = function (event) {
	        var db = event.target.result;
	        // Huh. This should never happen; we're at version 1. Why does another
	        // database exist?
	        if (db.objectStoreNames.contains(this$1.storeName)) {
	            db.deleteObjectStore(this$1.storeName);
	        }
	        db.createObjectStore(this$1.storeName);
	    };
	    openReq.onsuccess = function (event) {
	        this$1.db = event.target.result;
	        cb(null, this$1);
	    };
	    openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
	};
	IndexedDBStore.prototype.name = function name () {
	    return IndexedDBFileSystem.Name + " - " + this.storeName;
	};
	IndexedDBStore.prototype.clear = function clear (cb) {
	    try {
	        var tx = this.db.transaction(this.storeName, 'readwrite'), objectStore = tx.objectStore(this.storeName), r = objectStore.clear();
	        r.onsuccess = function (event) {
	            // Use setTimeout to commit transaction.
	            setTimeout(cb, 0);
	        };
	        r.onerror = onErrorHandler(cb);
	    }
	    catch (e) {
	        cb(convertError$2(e));
	    }
	};
	IndexedDBStore.prototype.beginTransaction = function beginTransaction (type) {
	        if ( type === void 0 ) type = 'readonly';
	
	    var tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);
	    if (type === 'readwrite') {
	        return new IndexedDBRWTransaction(tx, objectStore);
	    }
	    else if (type === 'readonly') {
	        return new IndexedDBROTransaction(tx, objectStore);
	    }
	    else {
	        throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');
	    }
	};
	/**
	 * A file system that uses the IndexedDB key value file system.
	 */
	var IndexedDBFileSystem = (function (AsyncKeyValueFileSystem$$1) {
	    function IndexedDBFileSystem(cb, storeName, deprecateMsg) {
	        var this$1 = this;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        AsyncKeyValueFileSystem$$1.call(this);
	        this.store = new IndexedDBStore(function (e) {
	            if (e) {
	                cb(e);
	            }
	            else {
	                this$1.init(this$1.store, function (e) {
	                    cb(e, this$1);
	                });
	            }
	        }, storeName);
	        deprecationMessage(deprecateMsg, IndexedDBFileSystem.Name, { storeName: storeName });
	    }
	
	    if ( AsyncKeyValueFileSystem$$1 ) IndexedDBFileSystem.__proto__ = AsyncKeyValueFileSystem$$1;
	    IndexedDBFileSystem.prototype = Object.create( AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype );
	    IndexedDBFileSystem.prototype.constructor = IndexedDBFileSystem;
	    /**
	     * Constructs an IndexedDB file system with the given options.
	     */
	    IndexedDBFileSystem.Create = function Create (opts, cb) {
	        // tslint:disable-next-line:no-unused-new
	        new IndexedDBFileSystem(cb, opts.storeName, false);
	        // tslint:enable-next-line:no-unused-new
	    };
	    IndexedDBFileSystem.isAvailable = function isAvailable () {
	        // In Safari's private browsing mode, indexedDB.open returns NULL.
	        // In Firefox, it throws an exception.
	        // In Chrome, it "just works", and clears the database when you leave the page.
	        // Untested: Opera, IE.
	        try {
	            return typeof indexedDB !== 'undefined' && null !== indexedDB.open("__browserfs_test__");
	        }
	        catch (e) {
	            return false;
	        }
	    };
	
	    return IndexedDBFileSystem;
	}(AsyncKeyValueFileSystem));
	
	IndexedDBFileSystem.Name = "IndexedDB";
	IndexedDBFileSystem.Options = {
	    storeName: {
	        type: "string",
	        optional: true,
	        description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
	    }
	};
	
	/**
	 * Some versions of FF and all versions of IE do not support the full range of
	 * 16-bit numbers encoded as characters, as they enforce UTF-16 restrictions.
	 * @url http://stackoverflow.com/questions/11170716/are-there-any-characters-that-are-not-allowed-in-localstorage/11173673#11173673
	 * @hidden
	 */
	var supportsBinaryString = false;
	var binaryEncoding;
	try {
	    global$1.localStorage.setItem("__test__", String.fromCharCode(0xD800));
	    supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
	}
	catch (e) {
	    // IE throws an exception.
	    supportsBinaryString = false;
	}
	binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';
	if (!Buffer.isEncoding(binaryEncoding)) {
	    // Fallback for non BrowserFS implementations of buffer that lack a
	    // binary_string format.
	    binaryEncoding = "base64";
	}
	/**
	 * A synchronous key-value store backed by localStorage.
	 */
	var LocalStorageStore = function LocalStorageStore () {};
	
	LocalStorageStore.prototype.name = function name () {
	    return LocalStorageFileSystem.Name;
	};
	LocalStorageStore.prototype.clear = function clear () {
	    global$1.localStorage.clear();
	};
	LocalStorageStore.prototype.beginTransaction = function beginTransaction (type) {
	    // No need to differentiate.
	    return new SimpleSyncRWTransaction(this);
	};
	LocalStorageStore.prototype.get = function get (key) {
	    try {
	        var data = global$1.localStorage.getItem(key);
	        if (data !== null) {
	            return Buffer.from(data, binaryEncoding);
	        }
	    }
	    catch (e) {
	        // Do nothing.
	    }
	    // Key doesn't exist, or a failure occurred.
	    return undefined;
	};
	LocalStorageStore.prototype.put = function put (key, data, overwrite) {
	    try {
	        if (!overwrite && global$1.localStorage.getItem(key) !== null) {
	            // Don't want to overwrite the key!
	            return false;
	        }
	        global$1.localStorage.setItem(key, data.toString(binaryEncoding));
	        return true;
	    }
	    catch (e) {
	        throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
	    }
	};
	LocalStorageStore.prototype.del = function del (key) {
	    try {
	        global$1.localStorage.removeItem(key);
	    }
	    catch (e) {
	        throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
	    }
	};
	/**
	 * A synchronous file system backed by localStorage. Connects our
	 * LocalStorageStore to our SyncKeyValueFileSystem.
	 */
	var LocalStorageFileSystem = (function (SyncKeyValueFileSystem$$1) {
	    function LocalStorageFileSystem() { SyncKeyValueFileSystem$$1.call(this, { store: new LocalStorageStore() }); }
	
	    if ( SyncKeyValueFileSystem$$1 ) LocalStorageFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
	    LocalStorageFileSystem.prototype = Object.create( SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype );
	    LocalStorageFileSystem.prototype.constructor = LocalStorageFileSystem;
	    /**
	     * Creates a LocalStorageFileSystem instance.
	     */
	    LocalStorageFileSystem.Create = function Create (options, cb) {
	        cb(null, new LocalStorageFileSystem());
	    };
	    LocalStorageFileSystem.isAvailable = function isAvailable () {
	        return typeof global$1.localStorage !== 'undefined';
	    };
	
	    return LocalStorageFileSystem;
	}(SyncKeyValueFileSystem));
	
	LocalStorageFileSystem.Name = "LocalStorage";
	LocalStorageFileSystem.Options = {};
	
	/**
	 * The MountableFileSystem allows you to mount multiple backend types or
	 * multiple instantiations of the same backend into a single file system tree.
	 * The file systems do not need to know about each other; all interactions are
	 * automatically facilitated through this interface.
	 *
	 * For example, if a file system is mounted at /mnt/blah, and a request came in
	 * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.
	 *
	 * You can mount file systems when you configure the file system:
	 * ```javascript
	 * BrowserFS.configure({
	 *   fs: "MountableFileSystem",
	 *   options: {
	 *     '/data': { fs: 'XmlHttpRequest', options: { index: "http://mysite.com/files/index.json" } },
	 *     '/home': { fs: 'LocalStorage' }
	 *   }
	 * }, function(e) {
	 *
	 * });
	 * ```
	 *
	 * For advanced users, you can also mount file systems *after* MFS is constructed:
	 * ```javascript
	 * BrowserFS.FileSystem.XmlHttpRequest.Create({
	 *   index: "http://mysite.com/files/index.json"
	 * }, function(e, xhrfs) {
	 *   BrowserFS.FileSystem.MountableFileSystem.Create({
	 *     '/data': xhrfs
	 *   }, function(e, mfs) {
	 *     BrowserFS.initialize(mfs);
	 *
	 *     // Added after-the-fact...
	 *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {
	 *       mfs.mount('/home', lsfs);
	 *     });
	 *   });
	 * });
	 * ```
	 *
	 * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.
	 *
	 * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.
	 */
	var MountableFileSystem = (function (BaseFileSystem$$1) {
	    function MountableFileSystem() {
	        BaseFileSystem$$1.call(this);
	        // Contains the list of mount points in mntMap, sorted by string length in decreasing order.
	        // Ensures that we scan the most specific mount points for a match first, which lets us
	        // nest mount points.
	        this.mountList = [];
	        this.mntMap = {};
	        // The InMemory file system serves purely to provide directory listings for
	        // mounted file systems.
	        this.rootFs = new InMemoryFileSystem();
	    }
	
	    if ( BaseFileSystem$$1 ) MountableFileSystem.__proto__ = BaseFileSystem$$1;
	    MountableFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    MountableFileSystem.prototype.constructor = MountableFileSystem;
	    /**
	     * Creates a MountableFileSystem instance with the given options.
	     */
	    MountableFileSystem.Create = function Create (opts, cb) {
	        var fs = new MountableFileSystem();
	        Object.keys(opts).forEach(function (mountPoint) {
	            fs.mount(mountPoint, opts[mountPoint]);
	        });
	        cb(null, fs);
	    };
	    MountableFileSystem.isAvailable = function isAvailable () {
	        return true;
	    };
	    /**
	     * Mounts the file system at the given mount point.
	     */
	    MountableFileSystem.prototype.mount = function mount (mountPoint, fs) {
	        if (mountPoint[0] !== '/') {
	            mountPoint = "/" + mountPoint;
	        }
	        mountPoint = path.resolve(mountPoint);
	        if (this.mntMap[mountPoint]) {
	            throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
	        }
	        mkdirpSync(mountPoint, 0x1ff, this.rootFs);
	        this.mntMap[mountPoint] = fs;
	        this.mountList.push(mountPoint);
	        this.mountList = this.mountList.sort(function (a, b) { return b.length - a.length; });
	    };
	    MountableFileSystem.prototype.umount = function umount (mountPoint) {
	        var this$1 = this;
	
	        if (mountPoint[0] !== '/') {
	            mountPoint = "/" + mountPoint;
	        }
	        mountPoint = path.resolve(mountPoint);
	        if (!this.mntMap[mountPoint]) {
	            throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
	        }
	        delete this.mntMap[mountPoint];
	        this.mountList.splice(this.mountList.indexOf(mountPoint), 1);
	        while (mountPoint !== '/') {
	            if (this$1.rootFs.readdirSync(mountPoint).length === 0) {
	                this$1.rootFs.rmdirSync(mountPoint);
	                mountPoint = path.dirname(mountPoint);
	            }
	            else {
	                break;
	            }
	        }
	    };
	    /**
	     * Returns the file system that the path points to.
	     */
	    MountableFileSystem.prototype._getFs = function _getFs (path$$1) {
	        var this$1 = this;
	
	        var mountList = this.mountList, len = mountList.length;
	        for (var i = 0; i < len; i++) {
	            var mountPoint = mountList[i];
	            // We know path is normalized, so it is a substring of the mount point.
	            if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
	                path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);
	                if (path$$1 === '') {
	                    path$$1 = '/';
	                }
	                return { fs: this$1.mntMap[mountPoint], path: path$$1 };
	            }
	        }
	        // Query our root file system.
	        return { fs: this.rootFs, path: path$$1 };
	    };
	    // Global information methods
	    MountableFileSystem.prototype.getName = function getName () {
	        return MountableFileSystem.Name;
	    };
	    MountableFileSystem.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        cb(0, 0);
	    };
	    MountableFileSystem.prototype.isReadOnly = function isReadOnly () {
	        return false;
	    };
	    MountableFileSystem.prototype.supportsLinks = function supportsLinks () {
	        // I'm not ready for cross-FS links yet.
	        return false;
	    };
	    MountableFileSystem.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    MountableFileSystem.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    /**
	     * Fixes up error messages so they mention the mounted file location relative
	     * to the MFS root, not to the particular FS's root.
	     * Mutates the input error, and returns it.
	     */
	    MountableFileSystem.prototype.standardizeError = function standardizeError (err, path$$1, realPath) {
	        var index = err.message.indexOf(path$$1);
	        if (index !== -1) {
	            err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path$$1.length);
	            err.path = realPath;
	        }
	        return err;
	    };
	    // The following methods involve multiple file systems, and thus have custom
	    // logic.
	    // Note that we go through the Node API to use its robust default argument
	    // processing.
	    MountableFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        // Scenario 1: old and new are on same FS.
	        var fs1rv = this._getFs(oldPath);
	        var fs2rv = this._getFs(newPath);
	        if (fs1rv.fs === fs2rv.fs) {
	            return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function (e) {
	                if (e) {
	                    this$1.standardizeError(this$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
	                }
	                cb(e);
	            });
	        }
	        // Scenario 2: Different file systems.
	        // Read old file, write new file, delete old file.
	        return _fsMock.readFile(oldPath, function (err, data) {
	            if (err) {
	                return cb(err);
	            }
	            _fsMock.writeFile(newPath, data, function (err) {
	                if (err) {
	                    return cb(err);
	                }
	                _fsMock.unlink(oldPath, cb);
	            });
	        });
	    };
	    MountableFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	        // Scenario 1: old and new are on same FS.
	        var fs1rv = this._getFs(oldPath);
	        var fs2rv = this._getFs(newPath);
	        if (fs1rv.fs === fs2rv.fs) {
	            try {
	                return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
	            }
	            catch (e) {
	                this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
	                throw e;
	            }
	        }
	        // Scenario 2: Different file systems.
	        var data = _fsMock.readFileSync(oldPath);
	        _fsMock.writeFileSync(newPath, data);
	        return _fsMock.unlinkSync(oldPath);
	    };
	    MountableFileSystem.prototype.readdirSync = function readdirSync (p) {
	        var fsInfo = this._getFs(p);
	        // If null, rootfs did not have the directory
	        // (or the target FS is the root fs).
	        var rv = null;
	        // Mount points are all defined in the root FS.
	        // Ensure that we list those, too.
	        if (fsInfo.fs !== this.rootFs) {
	            try {
	                rv = this.rootFs.readdirSync(p);
	            }
	            catch (e) {
	                // Ignore.
	            }
	        }
	        try {
	            var rv2 = fsInfo.fs.readdirSync(fsInfo.path);
	            if (rv === null) {
	                return rv2;
	            }
	            else {
	                // Filter out duplicates.
	                return rv2.concat(rv.filter(function (val) { return rv2.indexOf(val) === -1; }));
	            }
	        }
	        catch (e) {
	            if (rv === null) {
	                throw this.standardizeError(e, fsInfo.path, p);
	            }
	            else {
	                // The root FS had something.
	                return rv;
	            }
	        }
	    };
	    MountableFileSystem.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	        var fsInfo = this._getFs(p);
	        fsInfo.fs.readdir(fsInfo.path, function (err, files) {
	            if (fsInfo.fs !== this$1.rootFs) {
	                try {
	                    var rv = this$1.rootFs.readdirSync(p);
	                    if (files) {
	                        // Filter out duplicates.
	                        files = files.concat(rv.filter(function (val) { return files.indexOf(val) === -1; }));
	                    }
	                    else {
	                        files = rv;
	                    }
	                }
	                catch (e) {
	                    // Root FS and target FS did not have directory.
	                    if (err) {
	                        return cb(this$1.standardizeError(err, fsInfo.path, p));
	                    }
	                }
	            }
	            else if (err) {
	                // Root FS and target FS are the same, and did not have directory.
	                return cb(this$1.standardizeError(err, fsInfo.path, p));
	            }
	            cb(null, files);
	        });
	    };
	    MountableFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	        var fsInfo = this._getFs(p);
	        if (this._containsMountPt(p)) {
	            throw ApiError.ENOTEMPTY(p);
	        }
	        else {
	            try {
	                fsInfo.fs.rmdirSync(fsInfo.path);
	            }
	            catch (e) {
	                throw this.standardizeError(e, fsInfo.path, p);
	            }
	        }
	    };
	    MountableFileSystem.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	        var fsInfo = this._getFs(p);
	        if (this._containsMountPt(p)) {
	            cb(ApiError.ENOTEMPTY(p));
	        }
	        else {
	            fsInfo.fs.rmdir(fsInfo.path, function (err) {
	                cb(err ? this$1.standardizeError(err, fsInfo.path, p) : null);
	            });
	        }
	    };
	    /**
	     * Returns true if the given path contains a mount point.
	     */
	    MountableFileSystem.prototype._containsMountPt = function _containsMountPt (p) {
	        var mountPoints = this.mountList, len = mountPoints.length;
	        for (var i = 0; i < len; i++) {
	            var pt = mountPoints[i];
	            if (pt.length >= p.length && pt.slice(0, p.length) === p) {
	                return true;
	            }
	        }
	        return false;
	    };
	
	    return MountableFileSystem;
	}(BaseFileSystem));
	
	MountableFileSystem.Name = "MountableFileSystem";
	MountableFileSystem.Options = {};
	/**
	 * Tricky: Define all of the functions that merely forward arguments to the
	 * relevant file system, or return/throw an error.
	 * Take advantage of the fact that the *first* argument is always the path, and
	 * the *last* is the callback function (if async).
	 * @todo Can use numArgs to make proxying more efficient.
	 * @hidden
	 */
	function defineFcn(name, isSync, numArgs) {
	    if (isSync) {
	        return function () {
	            var args = [], len = arguments.length;
	            while ( len-- ) args[ len ] = arguments[ len ];
	
	            var path$$1 = args[0];
	            var rv = this._getFs(path$$1);
	            args[0] = rv.path;
	            try {
	                return rv.fs[name].apply(rv.fs, args);
	            }
	            catch (e) {
	                this.standardizeError(e, rv.path, path$$1);
	                throw e;
	            }
	        };
	    }
	    else {
	        return function () {
	            var this$1 = this;
	            var args = [], len = arguments.length;
	            while ( len-- ) args[ len ] = arguments[ len ];
	
	            var path$$1 = args[0];
	            var rv = this._getFs(path$$1);
	            args[0] = rv.path;
	            if (typeof args[args.length - 1] === 'function') {
	                var cb = args[args.length - 1];
	                args[args.length - 1] = function () {
	                    var args = [], len = arguments.length;
	                    while ( len-- ) args[ len ] = arguments[ len ];
	
	                    if (args.length > 0 && args[0] instanceof ApiError) {
	                        this$1.standardizeError(args[0], rv.path, path$$1);
	                    }
	                    cb.apply(null, args);
	                };
	            }
	            return rv.fs[name].apply(rv.fs, args);
	        };
	    }
	}
	/**
	 * @hidden
	 */
	var fsCmdMap = [
	    // 1 arg functions
	    ['exists', 'unlink', 'readlink'],
	    // 2 arg functions
	    ['stat', 'mkdir', 'realpath', 'truncate'],
	    // 3 arg functions
	    ['open', 'readFile', 'chmod', 'utimes'],
	    // 4 arg functions
	    ['chown'],
	    // 5 arg functions
	    ['writeFile', 'appendFile']
	];
	for (var i = 0; i < fsCmdMap.length; i++) {
	    var cmds = fsCmdMap[i];
	    for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
	        var fnName = list[i$1];
	
	        MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
	        MountableFileSystem.prototype[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);
	    }
	}
	
	/**
	 * @hidden
	 */
	var bfsSetImmediate;
	if (typeof (setImmediate) !== "undefined") {
	    bfsSetImmediate = setImmediate;
	}
	else {
	    var gScope = global$1;
	    var timeouts = [];
	    var messageName = "zero-timeout-message";
	    var canUsePostMessage = function () {
	        if (typeof gScope.importScripts !== 'undefined' || !gScope.postMessage) {
	            return false;
	        }
	        var postMessageIsAsync = true;
	        var oldOnMessage = gScope.onmessage;
	        gScope.onmessage = function () {
	            postMessageIsAsync = false;
	        };
	        gScope.postMessage('', '*');
	        gScope.onmessage = oldOnMessage;
	        return postMessageIsAsync;
	    };
	    if (canUsePostMessage()) {
	        bfsSetImmediate = function (fn) {
	            timeouts.push(fn);
	            gScope.postMessage(messageName, "*");
	        };
	        var handleMessage = function (event) {
	            if (event.source === self && event.data === messageName) {
	                if (event.stopPropagation) {
	                    event.stopPropagation();
	                }
	                else {
	                    event.cancelBubble = true;
	                }
	                if (timeouts.length > 0) {
	                    var fn = timeouts.shift();
	                    return fn();
	                }
	            }
	        };
	        if (gScope.addEventListener) {
	            gScope.addEventListener('message', handleMessage, true);
	        }
	        else {
	            gScope.attachEvent('onmessage', handleMessage);
	        }
	    }
	    else if (gScope.MessageChannel) {
	        // WebWorker MessageChannel
	        var channel = new gScope.MessageChannel();
	        channel.port1.onmessage = function (event) {
	            if (timeouts.length > 0) {
	                return timeouts.shift()();
	            }
	        };
	        bfsSetImmediate = function (fn) {
	            timeouts.push(fn);
	            channel.port2.postMessage('');
	        };
	    }
	    else {
	        bfsSetImmediate = function (fn) {
	            return setTimeout(fn, 0);
	        };
	    }
	}
	var setImmediate$3 = bfsSetImmediate;
	
	/**
	 * Non-recursive mutex
	 * @hidden
	 */
	var Mutex = function Mutex() {
	    this._locked = false;
	    this._waiters = [];
	};
	Mutex.prototype.lock = function lock (cb) {
	    if (this._locked) {
	        this._waiters.push(cb);
	        return;
	    }
	    this._locked = true;
	    cb();
	};
	Mutex.prototype.unlock = function unlock () {
	    if (!this._locked) {
	        throw new Error('unlock of a non-locked mutex');
	    }
	    var next = this._waiters.shift();
	    // don't unlock - we want to queue up next for the
	    // _end_ of the current task execution, but we don't
	    // want it to be called inline with whatever the
	    // current stack is.  This way we still get the nice
	    // behavior that an unlock immediately followed by a
	    // lock won't cause starvation.
	    if (next) {
	        setImmediate$3(next);
	        return;
	    }
	    this._locked = false;
	};
	Mutex.prototype.tryLock = function tryLock () {
	    if (this._locked) {
	        return false;
	    }
	    this._locked = true;
	    return true;
	};
	Mutex.prototype.isLocked = function isLocked () {
	    return this._locked;
	};
	
	/**
	 * This class serializes access to an underlying async filesystem.
	 * For example, on an OverlayFS instance with an async lower
	 * directory operations like rename and rmdir may involve multiple
	 * requests involving both the upper and lower filesystems -- they
	 * are not executed in a single atomic step.  OverlayFS uses this
	 * LockedFS to avoid having to reason about the correctness of
	 * multiple requests interleaving.
	 */
	var LockedFS = function LockedFS(fs) {
	    this._fs = fs;
	    this._mu = new Mutex();
	};
	LockedFS.prototype.getName = function getName () {
	    return 'LockedFS<' + this._fs.getName() + '>';
	};
	LockedFS.prototype.getFSUnlocked = function getFSUnlocked () {
	    return this._fs;
	};
	LockedFS.prototype.initialize = function initialize (cb) {
	    // FIXME: check to see if FS supports initialization
	    this._fs.initialize(cb);
	};
	LockedFS.prototype.diskSpace = function diskSpace (p, cb) {
	    // FIXME: should this lock?
	    this._fs.diskSpace(p, cb);
	};
	LockedFS.prototype.isReadOnly = function isReadOnly () {
	    return this._fs.isReadOnly();
	};
	LockedFS.prototype.supportsLinks = function supportsLinks () {
	    return this._fs.supportsLinks();
	};
	LockedFS.prototype.supportsProps = function supportsProps () {
	    return this._fs.supportsProps();
	};
	LockedFS.prototype.supportsSynch = function supportsSynch () {
	    return this._fs.supportsSynch();
	};
	LockedFS.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.rename(oldPath, newPath, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.renameSync = function renameSync (oldPath, newPath) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.renameSync(oldPath, newPath);
	};
	LockedFS.prototype.stat = function stat (p, isLstat, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.stat(p, isLstat, function (err, stat) {
	            this$1._mu.unlock();
	            cb(err, stat);
	        });
	    });
	};
	LockedFS.prototype.statSync = function statSync (p, isLstat) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.statSync(p, isLstat);
	};
	LockedFS.prototype.open = function open (p, flag, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.open(p, flag, mode, function (err, fd) {
	            this$1._mu.unlock();
	            cb(err, fd);
	        });
	    });
	};
	LockedFS.prototype.openSync = function openSync (p, flag, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.openSync(p, flag, mode);
	};
	LockedFS.prototype.unlink = function unlink (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.unlink(p, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.unlinkSync = function unlinkSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.unlinkSync(p);
	};
	LockedFS.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.rmdir(p, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.rmdirSync = function rmdirSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.rmdirSync(p);
	};
	LockedFS.prototype.mkdir = function mkdir (p, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.mkdir(p, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.mkdirSync = function mkdirSync (p, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.mkdirSync(p, mode);
	};
	LockedFS.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.readdir(p, function (err, files) {
	            this$1._mu.unlock();
	            cb(err, files);
	        });
	    });
	};
	LockedFS.prototype.readdirSync = function readdirSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.readdirSync(p);
	};
	LockedFS.prototype.exists = function exists (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.exists(p, function (exists) {
	            this$1._mu.unlock();
	            cb(exists);
	        });
	    });
	};
	LockedFS.prototype.existsSync = function existsSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.existsSync(p);
	};
	LockedFS.prototype.realpath = function realpath (p, cache, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.realpath(p, cache, function (err, resolvedPath) {
	            this$1._mu.unlock();
	            cb(err, resolvedPath);
	        });
	    });
	};
	LockedFS.prototype.realpathSync = function realpathSync (p, cache) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.realpathSync(p, cache);
	};
	LockedFS.prototype.truncate = function truncate (p, len, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.truncate(p, len, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.truncateSync = function truncateSync (p, len) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.truncateSync(p, len);
	};
	LockedFS.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.readFile(fname, encoding, flag, function (err, data) {
	            this$1._mu.unlock();
	            cb(err, data);
	        });
	    });
	};
	LockedFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.readFileSync(fname, encoding, flag);
	};
	LockedFS.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.writeFile(fname, data, encoding, flag, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.writeFileSync = function writeFileSync (fname, data, encoding, flag, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.writeFileSync(fname, data, encoding, flag, mode);
	};
	LockedFS.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.appendFile(fname, data, encoding, flag, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.appendFileSync = function appendFileSync (fname, data, encoding, flag, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.appendFileSync(fname, data, encoding, flag, mode);
	};
	LockedFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.chmod(p, isLchmod, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.chmodSync(p, isLchmod, mode);
	};
	LockedFS.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.chown(p, isLchown, uid, gid, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.chownSync(p, isLchown, uid, gid);
	};
	LockedFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.utimes(p, atime, mtime, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.utimesSync(p, atime, mtime);
	};
	LockedFS.prototype.link = function link (srcpath, dstpath, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.link(srcpath, dstpath, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.linkSync = function linkSync (srcpath, dstpath) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.linkSync(srcpath, dstpath);
	};
	LockedFS.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.symlink(srcpath, dstpath, type, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.symlinkSync(srcpath, dstpath, type);
	};
	LockedFS.prototype.readlink = function readlink (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.readlink(p, function (err, linkString) {
	            this$1._mu.unlock();
	            cb(err, linkString);
	        });
	    });
	};
	LockedFS.prototype.readlinkSync = function readlinkSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.readlinkSync(p);
	};
	
	/**
	 * @hidden
	 */
	var deletionLogPath = '/.deletedFiles.log';
	/**
	 * Given a read-only mode, makes it writable.
	 * @hidden
	 */
	function makeModeWritable(mode) {
	    return 146 | mode;
	}
	/**
	 * @hidden
	 */
	function getFlag(f) {
	    return FileFlag.getFileFlag(f);
	}
	/**
	 * Overlays a RO file to make it writable.
	 */
	var OverlayFile = (function (PreloadFile$$1) {
	    function OverlayFile(fs, path$$1, flag, stats, data) {
	        PreloadFile$$1.call(this, fs, path$$1, flag, stats, data);
	    }
	
	    if ( PreloadFile$$1 ) OverlayFile.__proto__ = PreloadFile$$1;
	    OverlayFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    OverlayFile.prototype.constructor = OverlayFile;
	    OverlayFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (!this.isDirty()) {
	            cb(null);
	            return;
	        }
	        this._fs._syncAsync(this, function (err) {
	            this$1.resetDirty();
	            cb(err);
	        });
	    };
	    OverlayFile.prototype.syncSync = function syncSync () {
	        if (this.isDirty()) {
	            this._fs._syncSync(this);
	            this.resetDirty();
	        }
	    };
	    OverlayFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	    OverlayFile.prototype.closeSync = function closeSync () {
	        this.syncSync();
	    };
	
	    return OverlayFile;
	}(PreloadFile));
	/**
	 * *INTERNAL, DO NOT USE DIRECTLY!*
	 *
	 * Core OverlayFS class that contains no locking whatsoever. We wrap these objects
	 * in a LockedFS to prevent races.
	 */
	var UnlockedOverlayFS = (function (BaseFileSystem$$1) {
	    function UnlockedOverlayFS(writable, readable) {
	        BaseFileSystem$$1.call(this);
	        this._isInitialized = false;
	        this._initializeCallbacks = [];
	        this._deletedFiles = {};
	        this._deleteLog = '';
	        // If 'true', we have scheduled a delete log update.
	        this._deleteLogUpdatePending = false;
	        // If 'true', a delete log update is needed after the scheduled delete log
	        // update finishes.
	        this._deleteLogUpdateNeeded = false;
	        // If there was an error updating the delete log...
	        this._deleteLogError = null;
	        this._writable = writable;
	        this._readable = readable;
	        if (this._writable.isReadOnly()) {
	            throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
	        }
	    }
	
	    if ( BaseFileSystem$$1 ) UnlockedOverlayFS.__proto__ = BaseFileSystem$$1;
	    UnlockedOverlayFS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    UnlockedOverlayFS.prototype.constructor = UnlockedOverlayFS;
	    UnlockedOverlayFS.isAvailable = function isAvailable () {
	        return true;
	    };
	    UnlockedOverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems () {
	        return {
	            readable: this._readable,
	            writable: this._writable
	        };
	    };
	    UnlockedOverlayFS.prototype._syncAsync = function _syncAsync (file, cb) {
	        var this$1 = this;
	
	        this.createParentDirectoriesAsync(file.getPath(), function (err) {
	            if (err) {
	                return cb(err);
	            }
	            this$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode, cb);
	        });
	    };
	    UnlockedOverlayFS.prototype._syncSync = function _syncSync (file) {
	        this.createParentDirectories(file.getPath());
	        this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode);
	    };
	    UnlockedOverlayFS.prototype.getName = function getName () {
	        return OverlayFS.Name;
	    };
	    /**
	     * Called once to load up metadata stored on the writable file system.
	     */
	    UnlockedOverlayFS.prototype.initialize = function initialize (cb) {
	        var this$1 = this;
	
	        var callbackArray = this._initializeCallbacks;
	        var end = function (e) {
	            this$1._isInitialized = !e;
	            this$1._initializeCallbacks = [];
	            callbackArray.forEach((function (cb) { return cb(e); }));
	        };
	        // if we're already initialized, immediately invoke the callback
	        if (this._isInitialized) {
	            return cb();
	        }
	        callbackArray.push(cb);
	        // The first call to initialize initializes, the rest wait for it to complete.
	        if (callbackArray.length !== 1) {
	            return;
	        }
	        // Read deletion log, process into metadata.
	        this._writable.readFile(deletionLogPath, 'utf8', getFlag('r'), function (err, data) {
	            if (err) {
	                // ENOENT === Newly-instantiated file system, and thus empty log.
	                if (err.errno !== ErrorCode.ENOENT) {
	                    return end(err);
	                }
	            }
	            else {
	                this$1._deleteLog = data;
	            }
	            this$1._reparseDeletionLog();
	            end();
	        });
	    };
	    UnlockedOverlayFS.prototype.isReadOnly = function isReadOnly () { return false; };
	    UnlockedOverlayFS.prototype.supportsSynch = function supportsSynch () { return this._readable.supportsSynch() && this._writable.supportsSynch(); };
	    UnlockedOverlayFS.prototype.supportsLinks = function supportsLinks () { return false; };
	    UnlockedOverlayFS.prototype.supportsProps = function supportsProps () { return this._readable.supportsProps() && this._writable.supportsProps(); };
	    UnlockedOverlayFS.prototype.getDeletionLog = function getDeletionLog () {
	        return this._deleteLog;
	    };
	    UnlockedOverlayFS.prototype.restoreDeletionLog = function restoreDeletionLog (log) {
	        this._deleteLog = log;
	        this._reparseDeletionLog();
	        this.updateLog('');
	    };
	    UnlockedOverlayFS.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
	            return;
	        }
	        if (oldPath === deletionLogPath || newPath === deletionLogPath) {
	            return cb(ApiError.EPERM('Cannot rename deletion log.'));
	        }
	        // nothing to do if paths match
	        if (oldPath === newPath) {
	            return cb();
	        }
	        this.stat(oldPath, false, function (oldErr, oldStats) {
	            if (oldErr) {
	                return cb(oldErr);
	            }
	            return this$1.stat(newPath, false, function (newErr, newStats) {
	                var self = this$1;
	                // precondition: both oldPath and newPath exist and are dirs.
	                // decreases: |files|
	                // Need to move *every file/folder* currently stored on
	                // readable to its new location on writable.
	                function copyDirContents(files) {
	                    var file = files.shift();
	                    if (!file) {
	                        return cb();
	                    }
	                    var oldFile = path.resolve(oldPath, file);
	                    var newFile = path.resolve(newPath, file);
	                    // Recursion! Should work for any nested files / folders.
	                    self.rename(oldFile, newFile, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        copyDirContents(files);
	                    });
	                }
	                var mode = 511;
	                // from linux's rename(2) manpage: oldpath can specify a
	                // directory.  In this case, newpath must either not exist, or
	                // it must specify an empty directory.
	                if (oldStats.isDirectory()) {
	                    if (newErr) {
	                        if (newErr.errno !== ErrorCode.ENOENT) {
	                            return cb(newErr);
	                        }
	                        return this$1._writable.exists(oldPath, function (exists) {
	                            // simple case - both old and new are on the writable layer
	                            if (exists) {
	                                return this$1._writable.rename(oldPath, newPath, cb);
	                            }
	                            this$1._writable.mkdir(newPath, mode, function (mkdirErr) {
	                                if (mkdirErr) {
	                                    return cb(mkdirErr);
	                                }
	                                this$1._readable.readdir(oldPath, function (err, files) {
	                                    if (err) {
	                                        return cb();
	                                    }
	                                    copyDirContents(files);
	                                });
	                            });
	                        });
	                    }
	                    mode = newStats.mode;
	                    if (!newStats.isDirectory()) {
	                        return cb(ApiError.ENOTDIR(newPath));
	                    }
	                    this$1.readdir(newPath, function (readdirErr, files) {
	                        if (files && files.length) {
	                            return cb(ApiError.ENOTEMPTY(newPath));
	                        }
	                        this$1._readable.readdir(oldPath, function (err, files) {
	                            if (err) {
	                                return cb();
	                            }
	                            copyDirContents(files);
	                        });
	                    });
	                }
	                if (newStats && newStats.isDirectory()) {
	                    return cb(ApiError.EISDIR(newPath));
	                }
	                this$1.readFile(oldPath, null, getFlag('r'), function (err, data) {
	                    if (err) {
	                        return cb(err);
	                    }
	                    return this$1.writeFile(newPath, data, null, getFlag('w'), oldStats.mode, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        return this$1.unlink(oldPath, cb);
	                    });
	                });
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.renameSync = function renameSync (oldPath, newPath) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.checkPath(oldPath);
	        this.checkPath(newPath);
	        if (oldPath === deletionLogPath || newPath === deletionLogPath) {
	            throw ApiError.EPERM('Cannot rename deletion log.');
	        }
	        // Write newPath using oldPath's contents, delete oldPath.
	        var oldStats = this.statSync(oldPath, false);
	        if (oldStats.isDirectory()) {
	            // Optimization: Don't bother moving if old === new.
	            if (oldPath === newPath) {
	                return;
	            }
	            var mode = 511;
	            if (this.existsSync(newPath)) {
	                var stats = this.statSync(newPath, false);
	                mode = stats.mode;
	                if (stats.isDirectory()) {
	                    if (this.readdirSync(newPath).length > 0) {
	                        throw ApiError.ENOTEMPTY(newPath);
	                    }
	                }
	                else {
	                    throw ApiError.ENOTDIR(newPath);
	                }
	            }
	            // Take care of writable first. Move any files there, or create an empty directory
	            // if it doesn't exist.
	            if (this._writable.existsSync(oldPath)) {
	                this._writable.renameSync(oldPath, newPath);
	            }
	            else if (!this._writable.existsSync(newPath)) {
	                this._writable.mkdirSync(newPath, mode);
	            }
	            // Need to move *every file/folder* currently stored on readable to its new location
	            // on writable.
	            if (this._readable.existsSync(oldPath)) {
	                this._readable.readdirSync(oldPath).forEach(function (name) {
	                    // Recursion! Should work for any nested files / folders.
	                    this$1.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name));
	                });
	            }
	        }
	        else {
	            if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
	                throw ApiError.EISDIR(newPath);
	            }
	            this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag('r')), null, getFlag('w'), oldStats.mode);
	        }
	        if (oldPath !== newPath && this.existsSync(oldPath)) {
	            this.unlinkSync(oldPath);
	        }
	    };
	    UnlockedOverlayFS.prototype.stat = function stat (p, isLstat, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this._writable.stat(p, isLstat, function (err, stat) {
	            if (err && err.errno === ErrorCode.ENOENT) {
	                if (this$1._deletedFiles[p]) {
	                    cb(ApiError.ENOENT(p));
	                }
	                this$1._readable.stat(p, isLstat, function (err, stat) {
	                    if (stat) {
	                        // Make the oldStat's mode writable. Preserve the topmost
	                        // part of the mode, which specifies if it is a file or a
	                        // directory.
	                        stat = stat.clone();
	                        stat.mode = makeModeWritable(stat.mode);
	                    }
	                    cb(err, stat);
	                });
	            }
	            else {
	                cb(err, stat);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.statSync = function statSync (p, isLstat) {
	        this.checkInitialized();
	        try {
	            return this._writable.statSync(p, isLstat);
	        }
	        catch (e) {
	            if (this._deletedFiles[p]) {
	                throw ApiError.ENOENT(p);
	            }
	            var oldStat = this._readable.statSync(p, isLstat).clone();
	            // Make the oldStat's mode writable. Preserve the topmost part of the
	            // mode, which specifies if it is a file or a directory.
	            oldStat.mode = makeModeWritable(oldStat.mode);
	            return oldStat;
	        }
	    };
	    UnlockedOverlayFS.prototype.open = function open (p, flag, mode, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
	            return;
	        }
	        this.stat(p, false, function (err, stats) {
	            if (stats) {
	                switch (flag.pathExistsAction()) {
	                    case ActionType.TRUNCATE_FILE:
	                        return this$1.createParentDirectoriesAsync(p, function (err) {
	                            if (err) {
	                                return cb(err);
	                            }
	                            this$1._writable.open(p, flag, mode, cb);
	                        });
	                    case ActionType.NOP:
	                        return this$1._writable.exists(p, function (exists) {
	                            if (exists) {
	                                this$1._writable.open(p, flag, mode, cb);
	                            }
	                            else {
	                                // at this point we know the stats object we got is from
	                                // the readable FS.
	                                stats = stats.clone();
	                                stats.mode = mode;
	                                this$1._readable.readFile(p, null, getFlag('r'), function (readFileErr, data) {
	                                    if (readFileErr) {
	                                        return cb(readFileErr);
	                                    }
	                                    if (stats.size === -1) {
	                                        stats.size = data.length;
	                                    }
	                                    var f = new OverlayFile(this$1, p, flag, stats, data);
	                                    cb(null, f);
	                                });
	                            }
	                        });
	                    default:
	                        return cb(ApiError.EEXIST(p));
	                }
	            }
	            else {
	                switch (flag.pathNotExistsAction()) {
	                    case ActionType.CREATE_FILE:
	                        return this$1.createParentDirectoriesAsync(p, function (err) {
	                            if (err) {
	                                return cb(err);
	                            }
	                            return this$1._writable.open(p, flag, mode, cb);
	                        });
	                    default:
	                        return cb(ApiError.ENOENT(p));
	                }
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.openSync = function openSync (p, flag, mode) {
	        this.checkInitialized();
	        this.checkPath(p);
	        if (p === deletionLogPath) {
	            throw ApiError.EPERM('Cannot open deletion log.');
	        }
	        if (this.existsSync(p)) {
	            switch (flag.pathExistsAction()) {
	                case ActionType.TRUNCATE_FILE:
	                    this.createParentDirectories(p);
	                    return this._writable.openSync(p, flag, mode);
	                case ActionType.NOP:
	                    if (this._writable.existsSync(p)) {
	                        return this._writable.openSync(p, flag, mode);
	                    }
	                    else {
	                        // Create an OverlayFile.
	                        var buf = this._readable.readFileSync(p, null, getFlag('r'));
	                        var stats = this._readable.statSync(p, false).clone();
	                        stats.mode = mode;
	                        return new OverlayFile(this, p, flag, stats, buf);
	                    }
	                default:
	                    throw ApiError.EEXIST(p);
	            }
	        }
	        else {
	            switch (flag.pathNotExistsAction()) {
	                case ActionType.CREATE_FILE:
	                    this.createParentDirectories(p);
	                    return this._writable.openSync(p, flag, mode);
	                default:
	                    throw ApiError.ENOENT(p);
	            }
	        }
	    };
	    UnlockedOverlayFS.prototype.unlink = function unlink (p, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
	            return;
	        }
	        this.exists(p, function (exists) {
	            if (!exists) {
	                return cb(ApiError.ENOENT(p));
	            }
	            this$1._writable.exists(p, function (writableExists) {
	                if (writableExists) {
	                    return this$1._writable.unlink(p, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        this$1.exists(p, function (readableExists) {
	                            if (readableExists) {
	                                this$1.deletePath(p);
	                            }
	                            cb(null);
	                        });
	                    });
	                }
	                else {
	                    // if this only exists on the readable FS, add it to the
	                    // delete map.
	                    this$1.deletePath(p);
	                    cb(null);
	                }
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.unlinkSync = function unlinkSync (p) {
	        this.checkInitialized();
	        this.checkPath(p);
	        if (this.existsSync(p)) {
	            if (this._writable.existsSync(p)) {
	                this._writable.unlinkSync(p);
	            }
	            // if it still exists add to the delete log
	            if (this.existsSync(p)) {
	                this.deletePath(p);
	            }
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        var rmdirLower = function () {
	            this$1.readdir(p, function (err, files) {
	                if (err) {
	                    return cb(err);
	                }
	                if (files.length) {
	                    return cb(ApiError.ENOTEMPTY(p));
	                }
	                this$1.deletePath(p);
	                cb(null);
	            });
	        };
	        this.exists(p, function (exists) {
	            if (!exists) {
	                return cb(ApiError.ENOENT(p));
	            }
	            this$1._writable.exists(p, function (writableExists) {
	                if (writableExists) {
	                    this$1._writable.rmdir(p, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        this$1._readable.exists(p, function (readableExists) {
	                            if (readableExists) {
	                                rmdirLower();
	                            }
	                            else {
	                                cb();
	                            }
	                        });
	                    });
	                }
	                else {
	                    rmdirLower();
	                }
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.rmdirSync = function rmdirSync (p) {
	        this.checkInitialized();
	        if (this.existsSync(p)) {
	            if (this._writable.existsSync(p)) {
	                this._writable.rmdirSync(p);
	            }
	            if (this.existsSync(p)) {
	                // Check if directory is empty.
	                if (this.readdirSync(p).length > 0) {
	                    throw ApiError.ENOTEMPTY(p);
	                }
	                else {
	                    this.deletePath(p);
	                }
	            }
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.mkdir = function mkdir (p, mode, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.exists(p, function (exists) {
	            if (exists) {
	                return cb(ApiError.EEXIST(p));
	            }
	            // The below will throw should any of the parent directories
	            // fail to exist on _writable.
	            this$1.createParentDirectoriesAsync(p, function (err) {
	                if (err) {
	                    return cb(err);
	                }
	                this$1._writable.mkdir(p, mode, cb);
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.mkdirSync = function mkdirSync (p, mode) {
	        this.checkInitialized();
	        if (this.existsSync(p)) {
	            throw ApiError.EEXIST(p);
	        }
	        else {
	            // The below will throw should any of the parent directories fail to exist
	            // on _writable.
	            this.createParentDirectories(p);
	            this._writable.mkdirSync(p, mode);
	        }
	    };
	    UnlockedOverlayFS.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.stat(p, false, function (err, dirStats) {
	            if (err) {
	                return cb(err);
	            }
	            if (!dirStats.isDirectory()) {
	                return cb(ApiError.ENOTDIR(p));
	            }
	            this$1._writable.readdir(p, function (err, wFiles) {
	                if (err && err.code !== 'ENOENT') {
	                    return cb(err);
	                }
	                else if (err || !wFiles) {
	                    wFiles = [];
	                }
	                this$1._readable.readdir(p, function (err, rFiles) {
	                    // if the directory doesn't exist on the lower FS set rFiles
	                    // here to simplify the following code.
	                    if (err || !rFiles) {
	                        rFiles = [];
	                    }
	                    // Readdir in both, check delete log on read-only file system's files, merge, return.
	                    var seenMap = {};
	                    var filtered = wFiles.concat(rFiles.filter(function (fPath) { return !this$1._deletedFiles[(p + "/" + fPath)]; })).filter(function (fPath) {
	                        // Remove duplicates.
	                        var result = !seenMap[fPath];
	                        seenMap[fPath] = true;
	                        return result;
	                    });
	                    cb(null, filtered);
	                });
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.readdirSync = function readdirSync (p) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        var dirStats = this.statSync(p, false);
	        if (!dirStats.isDirectory()) {
	            throw ApiError.ENOTDIR(p);
	        }
	        // Readdir in both, check delete log on RO file system's listing, merge, return.
	        var contents = [];
	        try {
	            contents = contents.concat(this._writable.readdirSync(p));
	        }
	        catch (e) {
	            // NOP.
	        }
	        try {
	            contents = contents.concat(this._readable.readdirSync(p).filter(function (fPath) { return !this$1._deletedFiles[(p + "/" + fPath)]; }));
	        }
	        catch (e) {
	            // NOP.
	        }
	        var seenMap = {};
	        return contents.filter(function (fileP) {
	            var result = !seenMap[fileP];
	            seenMap[fileP] = true;
	            return result;
	        });
	    };
	    UnlockedOverlayFS.prototype.exists = function exists (p, cb) {
	        var this$1 = this;
	
	        // Cannot pass an error back to callback, so throw an exception instead
	        // if not initialized.
	        this.checkInitialized();
	        this._writable.exists(p, function (existsWritable) {
	            if (existsWritable) {
	                return cb(true);
	            }
	            this$1._readable.exists(p, function (existsReadable) {
	                cb(existsReadable && this$1._deletedFiles[p] !== true);
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.existsSync = function existsSync (p) {
	        this.checkInitialized();
	        return this._writable.existsSync(p) || (this._readable.existsSync(p) && this._deletedFiles[p] !== true);
	    };
	    UnlockedOverlayFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.operateOnWritableAsync(p, function (err) {
	            if (err) {
	                return cb(err);
	            }
	            else {
	                this$1._writable.chmod(p, isLchmod, mode, cb);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.operateOnWritable(p, function () {
	            this$1._writable.chmodSync(p, isLchmod, mode);
	        });
	    };
	    UnlockedOverlayFS.prototype.chown = function chown (p, isLchmod, uid, gid, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.operateOnWritableAsync(p, function (err) {
	            if (err) {
	                return cb(err);
	            }
	            else {
	                this$1._writable.chown(p, isLchmod, uid, gid, cb);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.operateOnWritable(p, function () {
	            this$1._writable.chownSync(p, isLchown, uid, gid);
	        });
	    };
	    UnlockedOverlayFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.operateOnWritableAsync(p, function (err) {
	            if (err) {
	                return cb(err);
	            }
	            else {
	                this$1._writable.utimes(p, atime, mtime, cb);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.operateOnWritable(p, function () {
	            this$1._writable.utimesSync(p, atime, mtime);
	        });
	    };
	    UnlockedOverlayFS.prototype.deletePath = function deletePath (p) {
	        this._deletedFiles[p] = true;
	        this.updateLog(("d" + p + "\n"));
	    };
	    UnlockedOverlayFS.prototype.updateLog = function updateLog (addition) {
	        var this$1 = this;
	
	        this._deleteLog += addition;
	        if (this._deleteLogUpdatePending) {
	            this._deleteLogUpdateNeeded = true;
	        }
	        else {
	            this._deleteLogUpdatePending = true;
	            this._writable.writeFile(deletionLogPath, this._deleteLog, 'utf8', FileFlag.getFileFlag('w'), 420, function (e) {
	                this$1._deleteLogUpdatePending = false;
	                if (e) {
	                    this$1._deleteLogError = e;
	                }
	                else if (this$1._deleteLogUpdateNeeded) {
	                    this$1._deleteLogUpdateNeeded = false;
	                    this$1.updateLog('');
	                }
	            });
	        }
	    };
	    UnlockedOverlayFS.prototype._reparseDeletionLog = function _reparseDeletionLog () {
	        var this$1 = this;
	
	        this._deletedFiles = {};
	        this._deleteLog.split('\n').forEach(function (path$$1) {
	            // If the log entry begins w/ 'd', it's a deletion.
	            this$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === 'd';
	        });
	    };
	    UnlockedOverlayFS.prototype.checkInitialized = function checkInitialized () {
	        if (!this._isInitialized) {
	            throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
	        }
	        else if (this._deleteLogError !== null) {
	            var e = this._deleteLogError;
	            this._deleteLogError = null;
	            throw e;
	        }
	    };
	    UnlockedOverlayFS.prototype.checkInitAsync = function checkInitAsync (cb) {
	        if (!this._isInitialized) {
	            cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
	            return false;
	        }
	        else if (this._deleteLogError !== null) {
	            var e = this._deleteLogError;
	            this._deleteLogError = null;
	            cb(e);
	            return false;
	        }
	        return true;
	    };
	    UnlockedOverlayFS.prototype.checkPath = function checkPath (p) {
	        if (p === deletionLogPath) {
	            throw ApiError.EPERM(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.checkPathAsync = function checkPathAsync (p, cb) {
	        if (p === deletionLogPath) {
	            cb(ApiError.EPERM(p));
	            return true;
	        }
	        return false;
	    };
	    UnlockedOverlayFS.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync (p, cb) {
	        var parent = path.dirname(p);
	        var toCreate = [];
	        var self = this;
	        this._writable.stat(parent, false, statDone);
	        function statDone(err, stat) {
	            if (err) {
	                toCreate.push(parent);
	                parent = path.dirname(parent);
	                self._writable.stat(parent, false, statDone);
	            }
	            else {
	                createParents();
	            }
	        }
	        function createParents() {
	            if (!toCreate.length) {
	                return cb();
	            }
	            var dir = toCreate.pop();
	            self._readable.stat(dir, false, function (err, stats) {
	                // stop if we couldn't read the dir
	                if (!stats) {
	                    return cb();
	                }
	                self._writable.mkdir(dir, stats.mode, function (err) {
	                    if (err) {
	                        return cb(err);
	                    }
	                    createParents();
	                });
	            });
	        }
	    };
	    /**
	     * With the given path, create the needed parent directories on the writable storage
	     * should they not exist. Use modes from the read-only storage.
	     */
	    UnlockedOverlayFS.prototype.createParentDirectories = function createParentDirectories (p) {
	        var this$1 = this;
	
	        var parent = path.dirname(p), toCreate = [];
	        while (!this._writable.existsSync(parent)) {
	            toCreate.push(parent);
	            parent = path.dirname(parent);
	        }
	        toCreate = toCreate.reverse();
	        toCreate.forEach(function (p) {
	            this$1._writable.mkdirSync(p, this$1.statSync(p, false).mode);
	        });
	    };
	    /**
	     * Helper function:
	     * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.
	     * - Calls f to perform operation on writable.
	     */
	    UnlockedOverlayFS.prototype.operateOnWritable = function operateOnWritable (p, f) {
	        if (this.existsSync(p)) {
	            if (!this._writable.existsSync(p)) {
	                // File is on readable storage. Copy to writable storage before
	                // changing its mode.
	                this.copyToWritable(p);
	            }
	            f();
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.operateOnWritableAsync = function operateOnWritableAsync (p, cb) {
	        var this$1 = this;
	
	        this.exists(p, function (exists) {
	            if (!exists) {
	                return cb(ApiError.ENOENT(p));
	            }
	            this$1._writable.exists(p, function (existsWritable) {
	                if (existsWritable) {
	                    cb();
	                }
	                else {
	                    return this$1.copyToWritableAsync(p, cb);
	                }
	            });
	        });
	    };
	    /**
	     * Copy from readable to writable storage.
	     * PRECONDITION: File does not exist on writable storage.
	     */
	    UnlockedOverlayFS.prototype.copyToWritable = function copyToWritable (p) {
	        var pStats = this.statSync(p, false);
	        if (pStats.isDirectory()) {
	            this._writable.mkdirSync(p, pStats.mode);
	        }
	        else {
	            this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag('r')), null, getFlag('w'), this.statSync(p, false).mode);
	        }
	    };
	    UnlockedOverlayFS.prototype.copyToWritableAsync = function copyToWritableAsync (p, cb) {
	        var this$1 = this;
	
	        this.stat(p, false, function (err, pStats) {
	            if (err) {
	                return cb(err);
	            }
	            if (pStats.isDirectory()) {
	                return this$1._writable.mkdir(p, pStats.mode, cb);
	            }
	            // need to copy file.
	            this$1._readable.readFile(p, null, getFlag('r'), function (err, data) {
	                if (err) {
	                    return cb(err);
	                }
	                this$1.writeFile(p, data, null, getFlag('w'), pStats.mode, cb);
	            });
	        });
	    };
	
	    return UnlockedOverlayFS;
	}(BaseFileSystem));
	/**
	 * OverlayFS makes a read-only filesystem writable by storing writes on a second,
	 * writable file system. Deletes are persisted via metadata stored on the writable
	 * file system.
	 */
	var OverlayFS = (function (LockedFS$$1) {
	    function OverlayFS(writable, readable, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
	        deprecationMessage(deprecateMsg, OverlayFS.Name, { readable: "readable file system", writable: "writable file system" });
	    }
	
	    if ( LockedFS$$1 ) OverlayFS.__proto__ = LockedFS$$1;
	    OverlayFS.prototype = Object.create( LockedFS$$1 && LockedFS$$1.prototype );
	    OverlayFS.prototype.constructor = OverlayFS;
	    /**
	     * Constructs and initializes an OverlayFS instance with the given options.
	     */
	    OverlayFS.Create = function Create (opts, cb) {
	        try {
	            var fs = new OverlayFS(opts.writable, opts.readable, false);
	            fs.initialize(function (e) {
	                cb(e, fs);
	            }, false);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    OverlayFS.isAvailable = function isAvailable () {
	        return UnlockedOverlayFS.isAvailable();
	    };
	    /**
	     * **Deprecated. Please use OverlayFS.Create() to construct and initialize OverlayFS instances.**
	     */
	    OverlayFS.prototype.initialize = function initialize (cb, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
	        }
	        LockedFS$$1.prototype.initialize.call(this, cb);
	    };
	    OverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems () {
	        return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
	    };
	    OverlayFS.prototype.unwrap = function unwrap () {
	        return LockedFS$$1.prototype.getFSUnlocked.call(this);
	    };
	
	    return OverlayFS;
	}(LockedFS));
	
	OverlayFS.Name = "OverlayFS";
	OverlayFS.Options = {
	    writable: {
	        type: "object",
	        description: "The file system to write modified files to."
	    },
	    readable: {
	        type: "object",
	        description: "The file system that initially populates this file system."
	    }
	};
	
	/**
	 * @hidden
	 */
	var SpecialArgType;
	(function (SpecialArgType) {
	    // Callback
	    SpecialArgType[SpecialArgType["CB"] = 0] = "CB";
	    // File descriptor
	    SpecialArgType[SpecialArgType["FD"] = 1] = "FD";
	    // API error
	    SpecialArgType[SpecialArgType["API_ERROR"] = 2] = "API_ERROR";
	    // Stats object
	    SpecialArgType[SpecialArgType["STATS"] = 3] = "STATS";
	    // Initial probe for file system information.
	    SpecialArgType[SpecialArgType["PROBE"] = 4] = "PROBE";
	    // FileFlag object.
	    SpecialArgType[SpecialArgType["FILEFLAG"] = 5] = "FILEFLAG";
	    // Buffer object.
	    SpecialArgType[SpecialArgType["BUFFER"] = 6] = "BUFFER";
	    // Generic Error object.
	    SpecialArgType[SpecialArgType["ERROR"] = 7] = "ERROR";
	})(SpecialArgType || (SpecialArgType = {}));
	/**
	 * Converts callback arguments into ICallbackArgument objects, and back
	 * again.
	 * @hidden
	 */
	var CallbackArgumentConverter = function CallbackArgumentConverter() {
	    this._callbacks = {};
	    this._nextId = 0;
	};
	CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg (cb) {
	    var id = this._nextId++;
	    this._callbacks[id] = cb;
	    return {
	        type: SpecialArgType.CB,
	        id: id
	    };
	};
	CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg (id) {
	    var cb = this._callbacks[id];
	    delete this._callbacks[id];
	    return cb;
	};
	/**
	 * @hidden
	 */
	var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter() {
	    this._fileDescriptors = {};
	    this._nextId = 0;
	};
	FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg (fd, p, flag, cb) {
	    var id = this._nextId++;
	    var data;
	    var stat;
	    this._fileDescriptors[id] = fd;
	    // Extract needed information asynchronously.
	    fd.stat(function (err, stats) {
	        if (err) {
	            cb(err);
	        }
	        else {
	            stat = bufferToTransferrableObject(stats.toBuffer());
	            // If it's a readable flag, we need to grab contents.
	            if (flag.isReadable()) {
	                fd.read(Buffer.alloc(stats.size), 0, stats.size, 0, function (err, bytesRead, buff) {
	                    if (err) {
	                        cb(err);
	                    }
	                    else {
	                        data = bufferToTransferrableObject(buff);
	                        cb(null, {
	                            type: SpecialArgType.FD,
	                            id: id,
	                            data: data,
	                            stat: stat,
	                            path: p,
	                            flag: flag.getFlagString()
	                        });
	                    }
	                });
	            }
	            else {
	                // File is not readable, which means writing to it will append or
	                // truncate/replace existing contents. Return an empty arraybuffer.
	                cb(null, {
	                    type: SpecialArgType.FD,
	                    id: id,
	                    data: new ArrayBuffer(0),
	                    stat: stat,
	                    path: p,
	                    flag: flag.getFlagString()
	                });
	            }
	        }
	    });
	};
	FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest (request, cb) {
	        var this$1 = this;
	
	    var fdArg = request.args[0];
	    this._applyFdChanges(fdArg, function (err, fd) {
	        if (err) {
	            cb(err);
	        }
	        else {
	            // Apply method on now-changed file descriptor.
	            fd[request.method](function (e) {
	                if (request.method === 'close') {
	                    delete this$1._fileDescriptors[fdArg.id];
	                }
	                cb(e);
	            });
	        }
	    });
	};
	FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges (remoteFd, cb) {
	    var fd = this._fileDescriptors[remoteFd.id], data = transferrableObjectToBuffer(remoteFd.data), remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));
	    // Write data if the file is writable.
	    var flag = FileFlag.getFileFlag(remoteFd.flag);
	    if (flag.isWriteable()) {
	        // Appendable: Write to end of file.
	        // Writeable: Replace entire contents of file.
	        fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function (e) {
	            function applyStatChanges() {
	                // Check if mode changed.
	                fd.stat(function (e, stats) {
	                    if (e) {
	                        cb(e);
	                    }
	                    else {
	                        if (stats.mode !== remoteStats.mode) {
	                            fd.chmod(remoteStats.mode, function (e) {
	                                cb(e, fd);
	                            });
	                        }
	                        else {
	                            cb(e, fd);
	                        }
	                    }
	                });
	            }
	            if (e) {
	                cb(e);
	            }
	            else {
	                // If writeable & not appendable, we need to ensure file contents are
	                // identical to those from the remote FD. Thus, we truncate to the
	                // length of the remote file.
	                if (!flag.isAppendable()) {
	                    fd.truncate(data.length, function () {
	                        applyStatChanges();
	                    });
	                }
	                else {
	                    applyStatChanges();
	                }
	            }
	        });
	    }
	    else {
	        cb(null, fd);
	    }
	};
	/**
	 * @hidden
	 */
	function apiErrorLocal2Remote(e) {
	    return {
	        type: SpecialArgType.API_ERROR,
	        errorData: bufferToTransferrableObject(e.writeToBuffer())
	    };
	}
	/**
	 * @hidden
	 */
	function apiErrorRemote2Local(e) {
	    return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
	}
	/**
	 * @hidden
	 */
	function errorLocal2Remote(e) {
	    return {
	        type: SpecialArgType.ERROR,
	        name: e.name,
	        message: e.message,
	        stack: e.stack
	    };
	}
	/**
	 * @hidden
	 */
	function errorRemote2Local(e) {
	    var cnstr = global$1[e.name];
	    if (typeof (cnstr) !== 'function') {
	        cnstr = Error;
	    }
	    var err = new cnstr(e.message);
	    err.stack = e.stack;
	    return err;
	}
	/**
	 * @hidden
	 */
	function statsLocal2Remote(stats) {
	    return {
	        type: SpecialArgType.STATS,
	        statsData: bufferToTransferrableObject(stats.toBuffer())
	    };
	}
	/**
	 * @hidden
	 */
	function statsRemote2Local(stats) {
	    return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
	}
	/**
	 * @hidden
	 */
	function fileFlagLocal2Remote(flag) {
	    return {
	        type: SpecialArgType.FILEFLAG,
	        flagStr: flag.getFlagString()
	    };
	}
	/**
	 * @hidden
	 */
	function fileFlagRemote2Local(remoteFlag) {
	    return FileFlag.getFileFlag(remoteFlag.flagStr);
	}
	/**
	 * @hidden
	 */
	function bufferToTransferrableObject(buff) {
	    return buffer2ArrayBuffer(buff);
	}
	/**
	 * @hidden
	 */
	function transferrableObjectToBuffer(buff) {
	    return arrayBuffer2Buffer(buff);
	}
	/**
	 * @hidden
	 */
	function bufferLocal2Remote(buff) {
	    return {
	        type: SpecialArgType.BUFFER,
	        data: bufferToTransferrableObject(buff)
	    };
	}
	/**
	 * @hidden
	 */
	function bufferRemote2Local(buffArg) {
	    return transferrableObjectToBuffer(buffArg.data);
	}
	/**
	 * @hidden
	 */
	function isAPIRequest(data) {
	    return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
	}
	/**
	 * @hidden
	 */
	function isAPIResponse(data) {
	    return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
	}
	/**
	 * Represents a remote file in a different worker/thread.
	 */
	var WorkerFile = (function (PreloadFile$$1) {
	    function WorkerFile(_fs, _path, _flag, _stat, remoteFdId, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	        this._remoteFdId = remoteFdId;
	    }
	
	    if ( PreloadFile$$1 ) WorkerFile.__proto__ = PreloadFile$$1;
	    WorkerFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    WorkerFile.prototype.constructor = WorkerFile;
	    WorkerFile.prototype.getRemoteFdId = function getRemoteFdId () {
	        return this._remoteFdId;
	    };
	    /**
	     * @hidden
	     */
	    WorkerFile.prototype.toRemoteArg = function toRemoteArg () {
	        return {
	            type: SpecialArgType.FD,
	            id: this._remoteFdId,
	            data: bufferToTransferrableObject(this.getBuffer()),
	            stat: bufferToTransferrableObject(this.getStats().toBuffer()),
	            path: this.getPath(),
	            flag: this.getFlag().getFlagString()
	        };
	    };
	    WorkerFile.prototype.sync = function sync (cb) {
	        this._syncClose('sync', cb);
	    };
	    WorkerFile.prototype.close = function close (cb) {
	        this._syncClose('close', cb);
	    };
	    WorkerFile.prototype._syncClose = function _syncClose (type, cb) {
	        var this$1 = this;
	
	        if (this.isDirty()) {
	            this._fs.syncClose(type, this, function (e) {
	                if (!e) {
	                    this$1.resetDirty();
	                }
	                cb(e);
	            });
	        }
	        else {
	            cb();
	        }
	    };
	
	    return WorkerFile;
	}(PreloadFile));
	/**
	 * WorkerFS lets you access a BrowserFS instance that is running in a different
	 * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or
	 * access BrowserFS running on the main page from a WebWorker).
	 *
	 * For example, to have a WebWorker access files in the main browser thread,
	 * do the following:
	 *
	 * MAIN BROWSER THREAD:
	 *
	 * ```javascript
	 *   // Listen for remote file system requests.
	 *   BrowserFS.FileSystem.WorkerFS.attachRemoteListener(webWorkerObject);
	 * ```
	 *
	 * WEBWORKER THREAD:
	 *
	 * ```javascript
	 *   // Set the remote file system as the root file system.
	 *   BrowserFS.configure({ fs: "WorkerFS", options: { worker: self }}, function(e) {
	 *     // Ready!
	 *   });
	 * ```
	 *
	 * Note that synchronous operations are not permitted on the WorkerFS, regardless
	 * of the configuration option of the remote FS.
	 */
	var WorkerFS = (function (BaseFileSystem$$1) {
	    function WorkerFS(worker, deprecateMsg) {
	        var this$1 = this;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        this._callbackConverter = new CallbackArgumentConverter();
	        this._isInitialized = false;
	        this._isReadOnly = false;
	        this._supportLinks = false;
	        this._supportProps = false;
	        this._worker = worker;
	        deprecationMessage(deprecateMsg, WorkerFS.Name, { worker: "Web Worker instance" });
	        this._worker.addEventListener('message', function (e) {
	            var resp = e.data;
	            if (isAPIResponse(resp)) {
	                var i;
	                var args = resp.args;
	                var fixedArgs = new Array(args.length);
	                // Dispatch event to correct id.
	                for (i = 0; i < fixedArgs.length; i++) {
	                    fixedArgs[i] = this$1._argRemote2Local(args[i]);
	                }
	                this$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
	            }
	        });
	    }
	
	    if ( BaseFileSystem$$1 ) WorkerFS.__proto__ = BaseFileSystem$$1;
	    WorkerFS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    WorkerFS.prototype.constructor = WorkerFS;
	    WorkerFS.Create = function Create (opts, cb) {
	        var fs = new WorkerFS(opts.worker, false);
	        fs.initialize(function () {
	            cb(null, fs);
	        });
	    };
	    WorkerFS.isAvailable = function isAvailable () {
	        return typeof (importScripts) !== 'undefined' || typeof (Worker) !== 'undefined';
	    };
	    /**
	     * Attaches a listener to the remote worker for file system requests.
	     */
	    WorkerFS.attachRemoteListener = function attachRemoteListener (worker) {
	        var fdConverter = new FileDescriptorArgumentConverter();
	        function argLocal2Remote(arg, requestArgs, cb) {
	            switch (typeof arg) {
	                case 'object':
	                    if (arg instanceof Stats) {
	                        cb(null, statsLocal2Remote(arg));
	                    }
	                    else if (arg instanceof ApiError) {
	                        cb(null, apiErrorLocal2Remote(arg));
	                    }
	                    else if (arg instanceof BaseFile) {
	                        // Pass in p and flags from original request.
	                        cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
	                    }
	                    else if (arg instanceof FileFlag) {
	                        cb(null, fileFlagLocal2Remote(arg));
	                    }
	                    else if (arg instanceof Buffer) {
	                        cb(null, bufferLocal2Remote(arg));
	                    }
	                    else if (arg instanceof Error) {
	                        cb(null, errorLocal2Remote(arg));
	                    }
	                    else {
	                        cb(null, arg);
	                    }
	                    break;
	                default:
	                    cb(null, arg);
	                    break;
	            }
	        }
	        function argRemote2Local(arg, fixedRequestArgs) {
	            if (!arg) {
	                return arg;
	            }
	            switch (typeof arg) {
	                case 'object':
	                    if (typeof arg['type'] === 'number') {
	                        var specialArg = arg;
	                        switch (specialArg.type) {
	                            case SpecialArgType.CB:
	                                var cbId = arg.id;
	                                return function () {
	                                    var arguments$1 = arguments;
	
	                                    var i;
	                                    var fixedArgs = new Array(arguments.length);
	                                    var message, countdown = arguments.length;
	                                    function abortAndSendError(err) {
	                                        if (countdown > 0) {
	                                            countdown = -1;
	                                            message = {
	                                                browserfsMessage: true,
	                                                cbId: cbId,
	                                                args: [apiErrorLocal2Remote(err)]
	                                            };
	                                            worker.postMessage(message);
	                                        }
	                                    }
	                                    for (i = 0; i < arguments.length; i++) {
	                                        // Capture i and argument.
	                                        (function (i, arg) {
	                                            argLocal2Remote(arg, fixedRequestArgs, function (err, fixedArg) {
	                                                fixedArgs[i] = fixedArg;
	                                                if (err) {
	                                                    abortAndSendError(err);
	                                                }
	                                                else if (--countdown === 0) {
	                                                    message = {
	                                                        browserfsMessage: true,
	                                                        cbId: cbId,
	                                                        args: fixedArgs
	                                                    };
	                                                    worker.postMessage(message);
	                                                }
	                                            });
	                                        })(i, arguments$1[i]);
	                                    }
	                                    if (arguments.length === 0) {
	                                        message = {
	                                            browserfsMessage: true,
	                                            cbId: cbId,
	                                            args: fixedArgs
	                                        };
	                                        worker.postMessage(message);
	                                    }
	                                };
	                            case SpecialArgType.API_ERROR:
	                                return apiErrorRemote2Local(specialArg);
	                            case SpecialArgType.STATS:
	                                return statsRemote2Local(specialArg);
	                            case SpecialArgType.FILEFLAG:
	                                return fileFlagRemote2Local(specialArg);
	                            case SpecialArgType.BUFFER:
	                                return bufferRemote2Local(specialArg);
	                            case SpecialArgType.ERROR:
	                                return errorRemote2Local(specialArg);
	                            default:
	                                // No idea what this is.
	                                return arg;
	                        }
	                    }
	                    else {
	                        return arg;
	                    }
	                default:
	                    return arg;
	            }
	        }
	        worker.addEventListener('message', function (e) {
	            var request = e.data;
	            if (isAPIRequest(request)) {
	                var args = request.args, fixedArgs = new Array(args.length);
	                switch (request.method) {
	                    case 'close':
	                    case 'sync':
	                        (function () {
	                            // File descriptor-relative methods.
	                            var remoteCb = args[1];
	                            fdConverter.applyFdAPIRequest(request, function (err) {
	                                // Send response.
	                                var response = {
	                                    browserfsMessage: true,
	                                    cbId: remoteCb.id,
	                                    args: err ? [apiErrorLocal2Remote(err)] : []
	                                };
	                                worker.postMessage(response);
	                            });
	                        })();
	                        break;
	                    case 'probe':
	                        (function () {
	                            var rootFs = _fsMock.getRootFS(), remoteCb = args[1], probeResponse = {
	                                type: SpecialArgType.PROBE,
	                                isReadOnly: rootFs.isReadOnly(),
	                                supportsLinks: rootFs.supportsLinks(),
	                                supportsProps: rootFs.supportsProps()
	                            }, response = {
	                                browserfsMessage: true,
	                                cbId: remoteCb.id,
	                                args: [probeResponse]
	                            };
	                            worker.postMessage(response);
	                        })();
	                        break;
	                    default:
	                        // File system methods.
	                        for (var i = 0; i < args.length; i++) {
	                            fixedArgs[i] = argRemote2Local(args[i], fixedArgs);
	                        }
	                        var rootFS = _fsMock.getRootFS();
	                        rootFS[request.method].apply(rootFS, fixedArgs);
	                        break;
	                }
	            }
	        });
	    };
	    WorkerFS.prototype.getName = function getName () {
	        return WorkerFS.Name;
	    };
	    /**
	     * **Deprecated. Please use WorkerFS.Create() method to construct and initialize WorkerFS instances.**
	     *
	     * Called once both local and remote sides are set up.
	     */
	    WorkerFS.prototype.initialize = function initialize (cb) {
	        var this$1 = this;
	
	        if (!this._isInitialized) {
	            var message = {
	                browserfsMessage: true,
	                method: 'probe',
	                args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function (probeResponse) {
	                        this$1._isInitialized = true;
	                        this$1._isReadOnly = probeResponse.isReadOnly;
	                        this$1._supportLinks = probeResponse.supportsLinks;
	                        this$1._supportProps = probeResponse.supportsProps;
	                        cb();
	                    })]
	            };
	            this._worker.postMessage(message);
	        }
	        else {
	            cb();
	        }
	    };
	    WorkerFS.prototype.isReadOnly = function isReadOnly () { return this._isReadOnly; };
	    WorkerFS.prototype.supportsSynch = function supportsSynch () { return false; };
	    WorkerFS.prototype.supportsLinks = function supportsLinks () { return this._supportLinks; };
	    WorkerFS.prototype.supportsProps = function supportsProps () { return this._supportProps; };
	    WorkerFS.prototype.rename = function rename (oldPath, newPath, cb) {
	        this._rpc('rename', arguments);
	    };
	    WorkerFS.prototype.stat = function stat (p, isLstat, cb) {
	        this._rpc('stat', arguments);
	    };
	    WorkerFS.prototype.open = function open (p, flag, mode, cb) {
	        this._rpc('open', arguments);
	    };
	    WorkerFS.prototype.unlink = function unlink (p, cb) {
	        this._rpc('unlink', arguments);
	    };
	    WorkerFS.prototype.rmdir = function rmdir (p, cb) {
	        this._rpc('rmdir', arguments);
	    };
	    WorkerFS.prototype.mkdir = function mkdir (p, mode, cb) {
	        this._rpc('mkdir', arguments);
	    };
	    WorkerFS.prototype.readdir = function readdir (p, cb) {
	        this._rpc('readdir', arguments);
	    };
	    WorkerFS.prototype.exists = function exists (p, cb) {
	        this._rpc('exists', arguments);
	    };
	    WorkerFS.prototype.realpath = function realpath (p, cache, cb) {
	        this._rpc('realpath', arguments);
	    };
	    WorkerFS.prototype.truncate = function truncate (p, len, cb) {
	        this._rpc('truncate', arguments);
	    };
	    WorkerFS.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	        this._rpc('readFile', arguments);
	    };
	    WorkerFS.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
	        this._rpc('writeFile', arguments);
	    };
	    WorkerFS.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
	        this._rpc('appendFile', arguments);
	    };
	    WorkerFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        this._rpc('chmod', arguments);
	    };
	    WorkerFS.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	        this._rpc('chown', arguments);
	    };
	    WorkerFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        this._rpc('utimes', arguments);
	    };
	    WorkerFS.prototype.link = function link (srcpath, dstpath, cb) {
	        this._rpc('link', arguments);
	    };
	    WorkerFS.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	        this._rpc('symlink', arguments);
	    };
	    WorkerFS.prototype.readlink = function readlink (p, cb) {
	        this._rpc('readlink', arguments);
	    };
	    WorkerFS.prototype.syncClose = function syncClose (method, fd, cb) {
	        this._worker.postMessage({
	            browserfsMessage: true,
	            method: method,
	            args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
	        });
	    };
	    WorkerFS.prototype._argRemote2Local = function _argRemote2Local (arg) {
	        if (!arg) {
	            return arg;
	        }
	        switch (typeof arg) {
	            case 'object':
	                if (typeof arg['type'] === 'number') {
	                    var specialArg = arg;
	                    switch (specialArg.type) {
	                        case SpecialArgType.API_ERROR:
	                            return apiErrorRemote2Local(specialArg);
	                        case SpecialArgType.FD:
	                            var fdArg = specialArg;
	                            return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));
	                        case SpecialArgType.STATS:
	                            return statsRemote2Local(specialArg);
	                        case SpecialArgType.FILEFLAG:
	                            return fileFlagRemote2Local(specialArg);
	                        case SpecialArgType.BUFFER:
	                            return bufferRemote2Local(specialArg);
	                        case SpecialArgType.ERROR:
	                            return errorRemote2Local(specialArg);
	                        default:
	                            return arg;
	                    }
	                }
	                else {
	                    return arg;
	                }
	            default:
	                return arg;
	        }
	    };
	    WorkerFS.prototype._rpc = function _rpc (methodName, args) {
	        var this$1 = this;
	
	        var fixedArgs = new Array(args.length);
	        for (var i = 0; i < args.length; i++) {
	            fixedArgs[i] = this$1._argLocal2Remote(args[i]);
	        }
	        var message = {
	            browserfsMessage: true,
	            method: methodName,
	            args: fixedArgs
	        };
	        this._worker.postMessage(message);
	    };
	    /**
	     * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.
	     */
	    WorkerFS.prototype._argLocal2Remote = function _argLocal2Remote (arg) {
	        if (!arg) {
	            return arg;
	        }
	        switch (typeof arg) {
	            case "object":
	                if (arg instanceof Stats) {
	                    return statsLocal2Remote(arg);
	                }
	                else if (arg instanceof ApiError) {
	                    return apiErrorLocal2Remote(arg);
	                }
	                else if (arg instanceof WorkerFile) {
	                    return arg.toRemoteArg();
	                }
	                else if (arg instanceof FileFlag) {
	                    return fileFlagLocal2Remote(arg);
	                }
	                else if (arg instanceof Buffer) {
	                    return bufferLocal2Remote(arg);
	                }
	                else if (arg instanceof Error) {
	                    return errorLocal2Remote(arg);
	                }
	                else {
	                    return "Unknown argument";
	                }
	            case "function":
	                return this._callbackConverter.toRemoteArg(arg);
	            default:
	                return arg;
	        }
	    };
	
	    return WorkerFS;
	}(BaseFileSystem));
	
	WorkerFS.Name = "WorkerFS";
	WorkerFS.Options = {
	    worker: {
	        type: "object",
	        description: "The target worker that you want to connect to, or the current worker if in a worker context.",
	        validator: function (v, cb) {
	            // Check for a `postMessage` function.
	            if (v['postMessage']) {
	                cb();
	            }
	            else {
	                cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
	            }
	        }
	    }
	};
	
	/**
	 * Contains utility methods for performing a variety of tasks with
	 * XmlHttpRequest across browsers.
	 */
	function asyncDownloadFileModern(p, type, cb) {
	    var req = new XMLHttpRequest();
	    req.open('GET', p, true);
	    var jsonSupported = true;
	    switch (type) {
	        case 'buffer':
	            req.responseType = 'arraybuffer';
	            break;
	        case 'json':
	            // Some browsers don't support the JSON response type.
	            // They either reset responseType, or throw an exception.
	            // @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js
	            try {
	                req.responseType = 'json';
	                jsonSupported = req.responseType === 'json';
	            }
	            catch (e) {
	                jsonSupported = false;
	            }
	            break;
	        default:
	            return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
	    }
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                switch (type) {
	                    case 'buffer':
	                        // XXX: WebKit-based browsers return *null* when XHRing an empty file.
	                        return cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());
	                    case 'json':
	                        if (jsonSupported) {
	                            return cb(null, req.response);
	                        }
	                        else {
	                            return cb(null, JSON.parse(req.responseText));
	                        }
	                }
	            }
	            else {
	                return cb(new ApiError(req.status, "XHR error."));
	            }
	        }
	    };
	    req.send();
	}
	function syncDownloadFileModern(p, type) {
	    var req = new XMLHttpRequest();
	    req.open('GET', p, false);
	    // On most platforms, we cannot set the responseType of synchronous downloads.
	    // @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.
	    var data = null;
	    var err = null;
	    // Classic hack to download binary data as a string.
	    req.overrideMimeType('text/plain; charset=x-user-defined');
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                switch (type) {
	                    case 'buffer':
	                        // Convert the text into a buffer.
	                        var text = req.responseText;
	                        data = Buffer.alloc(text.length);
	                        // Throw away the upper bits of each character.
	                        for (var i = 0; i < text.length; i++) {
	                            // This will automatically throw away the upper bit of each
	                            // character for us.
	                            data[i] = text.charCodeAt(i);
	                        }
	                        return;
	                    case 'json':
	                        data = JSON.parse(req.responseText);
	                        return;
	                }
	            }
	            else {
	                err = new ApiError(req.status, "XHR error.");
	                return;
	            }
	        }
	    };
	    req.send();
	    if (err) {
	        throw err;
	    }
	    return data;
	}
	function syncDownloadFileIE10(p, type) {
	    var req = new XMLHttpRequest();
	    req.open('GET', p, false);
	    switch (type) {
	        case 'buffer':
	            req.responseType = 'arraybuffer';
	            break;
	        case 'json':
	            // IE10 does not support the JSON type.
	            break;
	        default:
	            throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
	    }
	    var data;
	    var err;
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                switch (type) {
	                    case 'buffer':
	                        data = Buffer.from(req.response);
	                        break;
	                    case 'json':
	                        data = JSON.parse(req.response);
	                        break;
	                }
	            }
	            else {
	                err = new ApiError(req.status, "XHR error.");
	            }
	        }
	    };
	    req.send();
	    if (err) {
	        throw err;
	    }
	    return data;
	}
	/**
	 * @hidden
	 */
	function getFileSize(async, p, cb) {
	    var req = new XMLHttpRequest();
	    req.open('HEAD', p, async);
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                try {
	                    return cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));
	                }
	                catch (e) {
	                    // In the event that the header isn't present or there is an error...
	                    return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
	                }
	            }
	            else {
	                return cb(new ApiError(req.status, "XHR HEAD error."));
	            }
	        }
	    };
	    req.send();
	}
	/**
	 * Asynchronously download a file as a buffer or a JSON object.
	 * Note that the third function signature with a non-specialized type is
	 * invalid, but TypeScript requires it when you specialize string arguments to
	 * constants.
	 * @hidden
	 */
	var asyncDownloadFile = asyncDownloadFileModern;
	/**
	 * Synchronously download a file as a buffer or a JSON object.
	 * Note that the third function signature with a non-specialized type is
	 * invalid, but TypeScript requires it when you specialize string arguments to
	 * constants.
	 * @hidden
	 */
	var syncDownloadFile = (isIE && typeof Blob !== 'undefined') ? syncDownloadFileIE10 : syncDownloadFileModern;
	/**
	 * Synchronously retrieves the size of the given file in bytes.
	 * @hidden
	 */
	function getFileSizeSync(p) {
	    var rv = -1;
	    getFileSize(false, p, function (err, size) {
	        if (err) {
	            throw err;
	        }
	        rv = size;
	    });
	    return rv;
	}
	/**
	 * Asynchronously retrieves the size of the given file in bytes.
	 * @hidden
	 */
	function getFileSizeAsync(p, cb) {
	    getFileSize(true, p, cb);
	}
	
	/**
	 * A simple class for storing a filesystem index. Assumes that all paths passed
	 * to it are *absolute* paths.
	 *
	 * Can be used as a partial or a full index, although care must be taken if used
	 * for the former purpose, especially when directories are concerned.
	 */
	var FileIndex = function FileIndex() {
	    // _index is a single-level key,value store that maps *directory* paths to
	    // DirInodes. File information is only contained in DirInodes themselves.
	    this._index = {};
	    // Create the root directory.
	    this.addPath('/', new DirInode());
	};
	/**
	 * Static method for constructing indices from a JSON listing.
	 * @param listing Directory listing generated by tools/XHRIndexer.coffee
	 * @return A new FileIndex object.
	 */
	FileIndex.fromListing = function fromListing (listing) {
	    var idx = new FileIndex();
	    // Add a root DirNode.
	    var rootInode = new DirInode();
	    idx._index['/'] = rootInode;
	    var queue = [['', listing, rootInode]];
	    while (queue.length > 0) {
	        var inode = (void 0);
	        var next = queue.pop();
	        var pwd = next[0];
	        var tree = next[1];
	        var parent = next[2];
	        for (var node in tree) {
	            if (tree.hasOwnProperty(node)) {
	                var children = tree[node];
	                var name = pwd + "/" + node;
	                if (children) {
	                    idx._index[name] = inode = new DirInode();
	                    queue.push([name, children, inode]);
	                }
	                else {
	                    // This inode doesn't have correct size information, noted with -1.
	                    inode = new FileInode(new Stats(FileType.FILE, -1, 0x16D));
	                }
	                if (parent) {
	                    parent._ls[node] = inode;
	                }
	            }
	        }
	    }
	    return idx;
	};
	/**
	 * Runs the given function over all files in the index.
	 */
	FileIndex.prototype.fileIterator = function fileIterator (cb) {
	        var this$1 = this;
	
	    for (var path$$1 in this$1._index) {
	        if (this$1._index.hasOwnProperty(path$$1)) {
	            var dir = this$1._index[path$$1];
	            var files = dir.getListing();
	            for (var i = 0, list = files; i < list.length; i += 1) {
	                var file = list[i];
	
	                    var item = dir.getItem(file);
	                if (isFileInode(item)) {
	                    cb(item.getData());
	                }
	            }
	        }
	    }
	};
	/**
	 * Adds the given absolute path to the index if it is not already in the index.
	 * Creates any needed parent directories.
	 * @param path The path to add to the index.
	 * @param inode The inode for the
	 *   path to add.
	 * @return 'True' if it was added or already exists, 'false' if there
	 *   was an issue adding it (e.g. item in path is a file, item exists but is
	 *   different).
	 * @todo If adding fails and implicitly creates directories, we do not clean up
	 *   the new empty directories.
	 */
	FileIndex.prototype.addPath = function addPath (path$$1, inode) {
	    if (!inode) {
	        throw new Error('Inode must be specified');
	    }
	    if (path$$1[0] !== '/') {
	        throw new Error('Path must be absolute, got: ' + path$$1);
	    }
	    // Check if it already exists.
	    if (this._index.hasOwnProperty(path$$1)) {
	        return this._index[path$$1] === inode;
	    }
	    var splitPath = this._split_path(path$$1);
	    var dirpath = splitPath[0];
	    var itemname = splitPath[1];
	    // Try to add to its parent directory first.
	    var parent = this._index[dirpath];
	    if (parent === undefined && path$$1 !== '/') {
	        // Create parent.
	        parent = new DirInode();
	        if (!this.addPath(dirpath, parent)) {
	            return false;
	        }
	    }
	    // Add myself to my parent.
	    if (path$$1 !== '/') {
	        if (!parent.addItem(itemname, inode)) {
	            return false;
	        }
	    }
	    // If I'm a directory, add myself to the index.
	    if (isDirInode(inode)) {
	        this._index[path$$1] = inode;
	    }
	    return true;
	};
	/**
	 * Adds the given absolute path to the index if it is not already in the index.
	 * The path is added without special treatment (no joining of adjacent separators, etc).
	 * Creates any needed parent directories.
	 * @param path The path to add to the index.
	 * @param inode The inode for the
	 *   path to add.
	 * @return 'True' if it was added or already exists, 'false' if there
	 *   was an issue adding it (e.g. item in path is a file, item exists but is
	 *   different).
	 * @todo If adding fails and implicitly creates directories, we do not clean up
	 *   the new empty directories.
	 */
	FileIndex.prototype.addPathFast = function addPathFast (path$$1, inode) {
	    var itemNameMark = path$$1.lastIndexOf('/');
	    var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
	    var itemName = path$$1.substring(itemNameMark + 1);
	    // Try to add to its parent directory first.
	    var parent = this._index[parentPath];
	    if (parent === undefined) {
	        // Create parent.
	        parent = new DirInode();
	        this.addPathFast(parentPath, parent);
	    }
	    if (!parent.addItem(itemName, inode)) {
	        return false;
	    }
	    // If adding a directory, add to the index as well.
	    if (inode.isDir()) {
	        this._index[path$$1] = inode;
	    }
	    return true;
	};
	/**
	 * Removes the given path. Can be a file or a directory.
	 * @return The removed item,
	 *   or null if it did not exist.
	 */
	FileIndex.prototype.removePath = function removePath (path$$1) {
	        var this$1 = this;
	
	    var splitPath = this._split_path(path$$1);
	    var dirpath = splitPath[0];
	    var itemname = splitPath[1];
	    // Try to remove it from its parent directory first.
	    var parent = this._index[dirpath];
	    if (parent === undefined) {
	        return null;
	    }
	    // Remove myself from my parent.
	    var inode = parent.remItem(itemname);
	    if (inode === null) {
	        return null;
	    }
	    // If I'm a directory, remove myself from the index, and remove my children.
	    if (isDirInode(inode)) {
	        var children = inode.getListing();
	        for (var i = 0, list = children; i < list.length; i += 1) {
	            var child = list[i];
	
	                this$1.removePath(path$$1 + '/' + child);
	        }
	        // Remove the directory from the index, unless it's the root.
	        if (path$$1 !== '/') {
	            delete this._index[path$$1];
	        }
	    }
	    return inode;
	};
	/**
	 * Retrieves the directory listing of the given path.
	 * @return An array of files in the given path, or 'null' if it does not exist.
	 */
	FileIndex.prototype.ls = function ls (path$$1) {
	    var item = this._index[path$$1];
	    if (item === undefined) {
	        return null;
	    }
	    return item.getListing();
	};
	/**
	 * Returns the inode of the given item.
	 * @return Returns null if the item does not exist.
	 */
	FileIndex.prototype.getInode = function getInode (path$$1) {
	    var splitPath = this._split_path(path$$1);
	    var dirpath = splitPath[0];
	    var itemname = splitPath[1];
	    // Retrieve from its parent directory.
	    var parent = this._index[dirpath];
	    if (parent === undefined) {
	        return null;
	    }
	    // Root case
	    if (dirpath === path$$1) {
	        return parent;
	    }
	    return parent.getItem(itemname);
	};
	/**
	 * Split into a (directory path, item name) pair
	 */
	FileIndex.prototype._split_path = function _split_path (p) {
	    var dirpath = path.dirname(p);
	    var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
	    return [dirpath, itemname];
	};
	/**
	 * Inode for a file. Stores an arbitrary (filesystem-specific) data payload.
	 */
	var FileInode = function FileInode(data) {
	    this.data = data;
	};
	FileInode.prototype.isFile = function isFile () { return true; };
	FileInode.prototype.isDir = function isDir () { return false; };
	FileInode.prototype.getData = function getData () { return this.data; };
	FileInode.prototype.setData = function setData (data) { this.data = data; };
	/**
	 * Inode for a directory. Currently only contains the directory listing.
	 */
	var DirInode = function DirInode(data) {
	    if ( data === void 0 ) data = null;
	
	    this.data = data;
	    this._ls = {};
	};
	DirInode.prototype.isFile = function isFile () {
	    return false;
	};
	DirInode.prototype.isDir = function isDir () {
	    return true;
	};
	DirInode.prototype.getData = function getData () { return this.data; };
	/**
	 * Return a Stats object for this inode.
	 * @todo Should probably remove this at some point. This isn't the
	 *   responsibility of the FileIndex.
	 */
	DirInode.prototype.getStats = function getStats () {
	    return new Stats(FileType.DIRECTORY, 4096, 0x16D);
	};
	/**
	 * Returns the directory listing for this directory. Paths in the directory are
	 * relative to the directory's path.
	 * @return The directory listing for this directory.
	 */
	DirInode.prototype.getListing = function getListing () {
	    return Object.keys(this._ls);
	};
	/**
	 * Returns the inode for the indicated item, or null if it does not exist.
	 * @param p Name of item in this directory.
	 */
	DirInode.prototype.getItem = function getItem (p) {
	    var item = this._ls[p];
	    return item ? item : null;
	};
	/**
	 * Add the given item to the directory listing. Note that the given inode is
	 * not copied, and will be mutated by the DirInode if it is a DirInode.
	 * @param p Item name to add to the directory listing.
	 * @param inode The inode for the
	 *   item to add to the directory inode.
	 * @return True if it was added, false if it already existed.
	 */
	DirInode.prototype.addItem = function addItem (p, inode) {
	    if (p in this._ls) {
	        return false;
	    }
	    this._ls[p] = inode;
	    return true;
	};
	/**
	 * Removes the given item from the directory listing.
	 * @param p Name of item to remove from the directory listing.
	 * @return Returns the item
	 *   removed, or null if the item did not exist.
	 */
	DirInode.prototype.remItem = function remItem (p) {
	    var item = this._ls[p];
	    if (item === undefined) {
	        return null;
	    }
	    delete this._ls[p];
	    return item;
	};
	/**
	 * @hidden
	 */
	function isFileInode(inode) {
	    return !!inode && inode.isFile();
	}
	/**
	 * @hidden
	 */
	function isDirInode(inode) {
	    return !!inode && inode.isDir();
	}
	
	/**
	 * Try to convert the given buffer into a string, and pass it to the callback.
	 * Optimization that removes the needed try/catch into a helper function, as
	 * this is an uncommon case.
	 * @hidden
	 */
	function tryToString(buff, encoding, cb) {
	    try {
	        cb(null, buff.toString(encoding));
	    }
	    catch (e) {
	        cb(e);
	    }
	}
	/**
	 * A simple filesystem backed by XMLHttpRequests. You must create a directory listing using the
	 * `make_xhrfs_index` tool provided by BrowserFS.
	 *
	 * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by
	 * running `make_xhrfs_index` in your terminal in the directory you would like to index:
	 *
	 * ```
	 * make_xhrfs_index > index.json
	 * ```
	 *
	 * Listings objects look like the following:
	 *
	 * ```json
	 * {
	 *   "home": {
	 *     "jvilk": {
	 *       "someFile.txt": null,
	 *       "someDir": {
	 *         // Empty directory
	 *       }
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*
	 */
	var XmlHttpRequest = (function (BaseFileSystem$$1) {
	    function XmlHttpRequest(listingUrlOrObj, prefixUrl, deprecateMsg) {
	        if ( prefixUrl === void 0 ) prefixUrl = '';
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        if (!listingUrlOrObj) {
	            listingUrlOrObj = 'index.json';
	        }
	        // prefix_url must end in a directory separator.
	        if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {
	            prefixUrl = prefixUrl + '/';
	        }
	        this.prefixUrl = prefixUrl;
	        var listing = null;
	        if (typeof (listingUrlOrObj) === "string") {
	            listing = this._requestFileSync(listingUrlOrObj, 'json');
	            if (!listing) {
	                throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
	            }
	        }
	        else {
	            listing = listingUrlOrObj;
	        }
	        deprecationMessage(deprecateMsg, XmlHttpRequest.Name, { index: typeof (listingUrlOrObj) === "string" ? listingUrlOrObj : "file index as an object", baseUrl: prefixUrl });
	        this._index = FileIndex.fromListing(listing);
	    }
	
	    if ( BaseFileSystem$$1 ) XmlHttpRequest.__proto__ = BaseFileSystem$$1;
	    XmlHttpRequest.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    XmlHttpRequest.prototype.constructor = XmlHttpRequest;
	    /**
	     * Construct an XmlHttpRequest file system backend with the given options.
	     */
	    XmlHttpRequest.Create = function Create (opts, cb) {
	        if (opts.index === undefined) {
	            opts.index = "index.json";
	        }
	        if (typeof (opts.index) === "string") {
	            XmlHttpRequest.FromURL(opts.index, cb, opts.baseUrl, false);
	        }
	        else {
	            cb(null, new XmlHttpRequest(opts.index, opts.baseUrl, false));
	        }
	    };
	    XmlHttpRequest.isAvailable = function isAvailable () {
	        return typeof (XMLHttpRequest) !== "undefined" && XMLHttpRequest !== null;
	    };
	    /**
	     * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
	     *
	     * Constructs an XmlHttpRequest object using the directory listing at the given URL.
	     * Uses the base URL as the URL prefix for fetched files.
	     * @param cb Called when the file system has been instantiated, or if an error occurs.
	     */
	    XmlHttpRequest.FromURL = function FromURL (url, cb, baseUrl, deprecateMsg) {
	        if ( baseUrl === void 0 ) baseUrl = url.slice(0, url.lastIndexOf('/') + 1);
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn(("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \"" + url + "\", baseUrl: \"" + baseUrl + "\" }, cb)' instead."));
	        }
	        asyncDownloadFile(url, "json", function (e, data) {
	            if (e) {
	                cb(e);
	            }
	            else {
	                cb(null, new XmlHttpRequest(data, baseUrl, false));
	            }
	        });
	    };
	    XmlHttpRequest.prototype.empty = function empty () {
	        this._index.fileIterator(function (file) {
	            file.fileData = null;
	        });
	    };
	    XmlHttpRequest.prototype.getName = function getName () {
	        return XmlHttpRequest.Name;
	    };
	    XmlHttpRequest.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        // Read-only file system. We could calculate the total space, but that's not
	        // important right now.
	        cb(0, 0);
	    };
	    XmlHttpRequest.prototype.isReadOnly = function isReadOnly () {
	        return true;
	    };
	    XmlHttpRequest.prototype.supportsLinks = function supportsLinks () {
	        return false;
	    };
	    XmlHttpRequest.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    XmlHttpRequest.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    /**
	     * Special XHR function: Preload the given file into the index.
	     * @param [String] path
	     * @param [BrowserFS.Buffer] buffer
	     */
	    XmlHttpRequest.prototype.preloadFile = function preloadFile (path$$1, buffer$$1) {
	        var inode = this._index.getInode(path$$1);
	        if (isFileInode(inode)) {
	            if (inode === null) {
	                throw ApiError.ENOENT(path$$1);
	            }
	            var stats = inode.getData();
	            stats.size = buffer$$1.length;
	            stats.fileData = buffer$$1;
	        }
	        else {
	            throw ApiError.EISDIR(path$$1);
	        }
	    };
	    XmlHttpRequest.prototype.stat = function stat (path$$1, isLstat, cb) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            return cb(ApiError.ENOENT(path$$1));
	        }
	        var stats;
	        if (isFileInode(inode)) {
	            stats = inode.getData();
	            // At this point, a non-opened file will still have default stats from the listing.
	            if (stats.size < 0) {
	                this._requestFileSizeAsync(path$$1, function (e, size) {
	                    if (e) {
	                        return cb(e);
	                    }
	                    stats.size = size;
	                    cb(null, stats.clone());
	                });
	            }
	            else {
	                cb(null, stats.clone());
	            }
	        }
	        else if (isDirInode(inode)) {
	            stats = inode.getStats();
	            cb(null, stats);
	        }
	        else {
	            cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
	        }
	    };
	    XmlHttpRequest.prototype.statSync = function statSync (path$$1, isLstat) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        var stats;
	        if (isFileInode(inode)) {
	            stats = inode.getData();
	            // At this point, a non-opened file will still have default stats from the listing.
	            if (stats.size < 0) {
	                stats.size = this._requestFileSizeSync(path$$1);
	            }
	        }
	        else if (isDirInode(inode)) {
	            stats = inode.getStats();
	        }
	        else {
	            throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
	        }
	        return stats;
	    };
	    XmlHttpRequest.prototype.open = function open (path$$1, flags, mode, cb) {
	        // INVARIANT: You can't write to files on this file system.
	        if (flags.isWriteable()) {
	            return cb(new ApiError(ErrorCode.EPERM, path$$1));
	        }
	        var self = this;
	        // Check if the path exists, and is a file.
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            return cb(ApiError.ENOENT(path$$1));
	        }
	        if (isFileInode(inode)) {
	            var stats = inode.getData();
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    return cb(ApiError.EEXIST(path$$1));
	                case ActionType.NOP:
	                    // Use existing file contents.
	                    // XXX: Uh, this maintains the previously-used flag.
	                    if (stats.fileData) {
	                        return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), stats.fileData));
	                    }
	                    // @todo be lazier about actually requesting the file
	                    this._requestFileAsync(path$$1, 'buffer', function (err, buffer$$1) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        // we don't initially have file sizes
	                        stats.size = buffer$$1.length;
	                        stats.fileData = buffer$$1;
	                        return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), buffer$$1));
	                    });
	                    break;
	                default:
	                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));
	            }
	        }
	        else {
	            return cb(ApiError.EISDIR(path$$1));
	        }
	    };
	    XmlHttpRequest.prototype.openSync = function openSync (path$$1, flags, mode) {
	        // INVARIANT: You can't write to files on this file system.
	        if (flags.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, path$$1);
	        }
	        // Check if the path exists, and is a file.
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        if (isFileInode(inode)) {
	            var stats = inode.getData();
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    throw ApiError.EEXIST(path$$1);
	                case ActionType.NOP:
	                    // Use existing file contents.
	                    // XXX: Uh, this maintains the previously-used flag.
	                    if (stats.fileData) {
	                        return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
	                    }
	                    // @todo be lazier about actually requesting the file
	                    var buffer$$1 = this._requestFileSync(path$$1, 'buffer');
	                    // we don't initially have file sizes
	                    stats.size = buffer$$1.length;
	                    stats.fileData = buffer$$1;
	                    return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);
	                default:
	                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
	            }
	        }
	        else {
	            throw ApiError.EISDIR(path$$1);
	        }
	    };
	    XmlHttpRequest.prototype.readdir = function readdir (path$$1, cb) {
	        try {
	            cb(null, this.readdirSync(path$$1));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    XmlHttpRequest.prototype.readdirSync = function readdirSync (path$$1) {
	        // Check if it exists.
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (isDirInode(inode)) {
	            return inode.getListing();
	        }
	        else {
	            throw ApiError.ENOTDIR(path$$1);
	        }
	    };
	    /**
	     * We have the entire file as a buffer; optimize readFile.
	     */
	    XmlHttpRequest.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	        // Wrap cb in file closing code.
	        var oldCb = cb;
	        // Get file.
	        this.open(fname, flag, 0x1a4, function (err, fd) {
	            if (err) {
	                return cb(err);
	            }
	            cb = function (err, arg) {
	                fd.close(function (err2) {
	                    if (!err) {
	                        err = err2;
	                    }
	                    return oldCb(err, arg);
	                });
	            };
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                cb(err, copyingSlice(fdBuff));
	            }
	            else {
	                tryToString(fdBuff, encoding, cb);
	            }
	        });
	    };
	    /**
	     * Specially-optimized readfile.
	     */
	    XmlHttpRequest.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	        // Get file.
	        var fd = this.openSync(fname, flag, 0x1a4);
	        try {
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                return copyingSlice(fdBuff);
	            }
	            return fdBuff.toString(encoding);
	        }
	        finally {
	            fd.closeSync();
	        }
	    };
	    XmlHttpRequest.prototype.getXhrPath = function getXhrPath (filePath) {
	        if (filePath.charAt(0) === '/') {
	            filePath = filePath.slice(1);
	        }
	        return this.prefixUrl + filePath;
	    };
	    XmlHttpRequest.prototype._requestFileAsync = function _requestFileAsync (p, type, cb) {
	        asyncDownloadFile(this.getXhrPath(p), type, cb);
	    };
	    XmlHttpRequest.prototype._requestFileSync = function _requestFileSync (p, type) {
	        return syncDownloadFile(this.getXhrPath(p), type);
	    };
	    /**
	     * Only requests the HEAD content, for the file size.
	     */
	    XmlHttpRequest.prototype._requestFileSizeAsync = function _requestFileSizeAsync (path$$1, cb) {
	        getFileSizeAsync(this.getXhrPath(path$$1), cb);
	    };
	    XmlHttpRequest.prototype._requestFileSizeSync = function _requestFileSizeSync (path$$1) {
	        return getFileSizeSync(this.getXhrPath(path$$1));
	    };
	
	    return XmlHttpRequest;
	}(BaseFileSystem));
	
	XmlHttpRequest.Name = "XmlHttpRequest";
	XmlHttpRequest.Options = {
	    index: {
	        type: ["string", "object"],
	        optional: true,
	        description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
	    },
	    baseUrl: {
	        type: "string",
	        optional: true,
	        description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
	    }
	};
	
	/**
	 * (Nonstandard) String utility function for 8-bit ASCII with the extended
	 * character set. Unlike the ASCII above, we do not mask the high bits.
	 *
	 * Placed into a separate file so it can be used with other Buffer implementations.
	 * @see http://en.wikipedia.org/wiki/Extended_ASCII
	 */
	/**
	 * (Nonstandard) String utility function for 8-bit ASCII with the extended
	 * character set. Unlike the ASCII above, we do not mask the high bits.
	 *
	 * Placed into a separate file so it can be used with other Buffer implementations.
	 * @see http://en.wikipedia.org/wiki/Extended_ASCII
	 */ var ExtendedASCII = function ExtendedASCII () {};
	
	 ExtendedASCII.str2byte = function str2byte (str, buf) {
	    var length = str.length > buf.length ? buf.length : str.length;
	    for (var i = 0; i < length; i++) {
	        var charCode = str.charCodeAt(i);
	        if (charCode > 0x7F) {
	            // Check if extended ASCII.
	            var charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i));
	            if (charIdx > -1) {
	                charCode = charIdx + 0x80;
	            }
	            // Otherwise, keep it as-is.
	        }
	        buf[charCode] = i;
	    }
	    return length;
	};
	ExtendedASCII.byte2str = function byte2str (buff) {
	    var chars = new Array(buff.length);
	    for (var i = 0; i < buff.length; i++) {
	        var charCode = buff[i];
	        if (charCode > 0x7F) {
	            chars[i] = ExtendedASCII.extendedChars[charCode - 128];
	        }
	        else {
	            chars[i] = String.fromCharCode(charCode);
	        }
	    }
	    return chars.join('');
	};
	ExtendedASCII.byteLength = function byteLength (str) { return str.length; };
	
	 ExtendedASCII.extendedChars = ['\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4',
	    '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB', '\u00E8', '\u00EF',
	    '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6',
	    '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9', '\u00FF', '\u00D6',
	    '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1',
	    '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1', '\u00AA', '\u00BA',
	    '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB',
	    '\u00BB', '_', '_', '_', '\u00A6', '\u00A6', '\u00C1', '\u00C2', '\u00C0',
	    '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-',
	    '-', '+', '-', '+', '\u00E3', '\u00C3', '+', '+', '-', '-', '\u00A6', '-',
	    '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i',
	    '\u00CD', '\u00CE', '\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_',
	    '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5',
	    '\u00FE', '\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD',
	    '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7',
	    '\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3',
	    '\u00B2', '_', ' '];
	
	/**
	 * @hidden
	 */
	var inflateRaw = __webpack_require__(31).inflateRaw;
	/**
	 * Maps CompressionMethod => function that decompresses.
	 * @hidden
	 */
	var decompressionMethods = {};
	/**
	 * 4.4.2.2: Indicates the compatibiltiy of a file's external attributes.
	 */
	var ExternalFileAttributeType;
	(function (ExternalFileAttributeType) {
	    ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
	    ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
	    ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
	    ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
	    ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
	    ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
	    ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
	    ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
	    ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
	    ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
	    ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
	    ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
	    ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
	    ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
	    ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
	    ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
	    ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
	    ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
	    ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
	    ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
	})(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
	/**
	 * 4.4.5
	 */
	var CompressionMethod;
	(function (CompressionMethod) {
	    CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
	    CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
	    CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
	    CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
	    CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
	    CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
	    CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
	    CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
	    CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
	    CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
	    CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
	    CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
	    CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
	    CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
	    CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
	    CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD"; // PPMd version I, Rev 1
	})(CompressionMethod || (CompressionMethod = {}));
	/**
	 * Converts the input time and date in MS-DOS format into a JavaScript Date
	 * object.
	 * @hidden
	 */
	function msdos2date(time, date) {
	    // MS-DOS Date
	    // |0 0 0 0  0|0 0 0  0|0 0 0  0 0 0 0
	    //   D (1-31)  M (1-23)  Y (from 1980)
	    var day = date & 0x1F;
	    // JS date is 0-indexed, DOS is 1-indexed.
	    var month = ((date >> 5) & 0xF) - 1;
	    var year = (date >> 9) + 1980;
	    // MS DOS Time
	    // |0 0 0 0  0|0 0 0  0 0 0|0  0 0 0 0
	    //    Second      Minute       Hour
	    var second = time & 0x1F;
	    var minute = (time >> 5) & 0x3F;
	    var hour = time >> 11;
	    return new Date(year, month, day, hour, minute, second);
	}
	/**
	 * Safely returns the string from the buffer, even if it is 0 bytes long.
	 * (Normally, calling toString() on a buffer with start === end causes an
	 * exception).
	 * @hidden
	 */
	function safeToString(buff, useUTF8, start, length) {
	    if (length === 0) {
	        return "";
	    }
	    else if (useUTF8) {
	        return buff.toString('utf8', start, start + length);
	    }
	    else {
	        return ExtendedASCII.byte2str(buff.slice(start, start + length));
	    }
	}
	/*
	   4.3.6 Overall .ZIP file format:
	
	      [local file header 1]
	      [encryption header 1]
	      [file data 1]
	      [data descriptor 1]
	      .
	      .
	      .
	      [local file header n]
	      [encryption header n]
	      [file data n]
	      [data descriptor n]
	      [archive decryption header]
	      [archive extra data record]
	      [central directory header 1]
	      .
	      .
	      .
	      [central directory header n]
	      [zip64 end of central directory record]
	      [zip64 end of central directory locator]
	      [end of central directory record]
	*/
	/**
	 * 4.3.7  Local file header:
	 *
	 *     local file header signature     4 bytes  (0x04034b50)
	 *     version needed to extract       2 bytes
	 *     general purpose bit flag        2 bytes
	 *     compression method              2 bytes
	 *    last mod file time              2 bytes
	 *    last mod file date              2 bytes
	 *    crc-32                          4 bytes
	 *    compressed size                 4 bytes
	 *    uncompressed size               4 bytes
	 *    file name length                2 bytes
	 *    extra field length              2 bytes
	 *
	 *    file name (variable size)
	 *    extra field (variable size)
	 */
	var FileHeader = function FileHeader(data) {
	     this.data = data;
	     if (data.readUInt32LE(0) !== 0x04034b50) {
	         throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
	     }
	 };
	 FileHeader.prototype.versionNeeded = function versionNeeded () { return this.data.readUInt16LE(4); };
	 FileHeader.prototype.flags = function flags () { return this.data.readUInt16LE(6); };
	 FileHeader.prototype.compressionMethod = function compressionMethod () { return this.data.readUInt16LE(8); };
	 FileHeader.prototype.lastModFileTime = function lastModFileTime () {
	     // Time and date is in MS-DOS format.
	     return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
	 };
	 FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime () {
	     return this.data.readUInt32LE(10);
	 };
	 FileHeader.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(14); };
	 /**
	  * These two values are COMPLETELY USELESS.
	  *
	  * Section 4.4.9:
	  *If bit 3 of the general purpose bit flag is set,
	  *these fields are set to zero in the local header and the
	  *correct values are put in the data descriptor and
	  *in the central directory.
	  *
	  * So we'll just use the central directory's values.
	  */
	 // public compressedSize(): number { return this.data.readUInt32LE(18); }
	 // public uncompressedSize(): number { return this.data.readUInt32LE(22); }
	 FileHeader.prototype.fileNameLength = function fileNameLength () { return this.data.readUInt16LE(26); };
	 FileHeader.prototype.extraFieldLength = function extraFieldLength () { return this.data.readUInt16LE(28); };
	 FileHeader.prototype.fileName = function fileName () {
	     return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
	 };
	 FileHeader.prototype.extraField = function extraField () {
	     var start = 30 + this.fileNameLength();
	     return this.data.slice(start, start + this.extraFieldLength());
	 };
	 FileHeader.prototype.totalSize = function totalSize () { return 30 + this.fileNameLength() + this.extraFieldLength(); };
	 FileHeader.prototype.useUTF8 = function useUTF8 () { return (this.flags() & 0x800) === 0x800; };
	/**
	 * 4.3.8  File data
	 *
	 *   Immediately following the local header for a file
	 *   SHOULD be placed the compressed or stored data for the file.
	 *   If the file is encrypted, the encryption header for the file
	 *   SHOULD be placed after the local header and before the file
	 *   data. The series of [local file header][encryption header]
	 *   [file data][data descriptor] repeats for each file in the
	 *   .ZIP archive.
	 *
	 *   Zero-byte files, directories, and other file types that
	 *   contain no content MUST not include file data.
	 */
	var FileData = function FileData(header, record, data) {
	     this.header = header;
	     this.record = record;
	     this.data = data;
	 };
	 FileData.prototype.decompress = function decompress () {
	     // Check the compression
	     var compressionMethod = this.header.compressionMethod();
	     var fcn = decompressionMethods[compressionMethod];
	     if (fcn) {
	         return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
	     }
	     else {
	         var name = CompressionMethod[compressionMethod];
	         if (!name) {
	             name = "Unknown: " + compressionMethod;
	         }
	         throw new ApiError(ErrorCode.EINVAL, ("Invalid compression method on file '" + (this.header.fileName()) + "': " + name));
	     }
	 };
	 FileData.prototype.getHeader = function getHeader () {
	     return this.header;
	 };
	 FileData.prototype.getRecord = function getRecord () {
	     return this.record;
	 };
	 FileData.prototype.getRawData = function getRawData () {
	     return this.data;
	 };
	/**
	 * 4.3.9  Data descriptor:
	 *
	 *    crc-32                          4 bytes
	 *    compressed size                 4 bytes
	 *    uncompressed size               4 bytes
	 */
	var DataDescriptor = function DataDescriptor(data) {
	     this.data = data;
	 };
	 DataDescriptor.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(0); };
	 DataDescriptor.prototype.compressedSize = function compressedSize () { return this.data.readUInt32LE(4); };
	 DataDescriptor.prototype.uncompressedSize = function uncompressedSize () { return this.data.readUInt32LE(8); };
	/*
	` 4.3.10  Archive decryption header:
	
	      4.3.10.1 The Archive Decryption Header is introduced in version 6.2
	      of the ZIP format specification.  This record exists in support
	      of the Central Directory Encryption Feature implemented as part of
	      the Strong Encryption Specification as described in this document.
	      When the Central Directory Structure is encrypted, this decryption
	      header MUST precede the encrypted data segment.
	 */
	/**
	 * 4.3.11  Archive extra data record:
	 *
	 *      archive extra data signature    4 bytes  (0x08064b50)
	 *      extra field length              4 bytes
	 *      extra field data                (variable size)
	 *
	 *    4.3.11.1 The Archive Extra Data Record is introduced in version 6.2
	 *    of the ZIP format specification.  This record MAY be used in support
	 *    of the Central Directory Encryption Feature implemented as part of
	 *    the Strong Encryption Specification as described in this document.
	 *    When present, this record MUST immediately precede the central
	 *    directory data structure.
	 */
	var ArchiveExtraDataRecord = function ArchiveExtraDataRecord(data) {
	     this.data = data;
	     if (this.data.readUInt32LE(0) !== 0x08064b50) {
	         throw new ApiError(ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
	     }
	 };
	 ArchiveExtraDataRecord.prototype.length = function length () { return this.data.readUInt32LE(4); };
	 ArchiveExtraDataRecord.prototype.extraFieldData = function extraFieldData () { return this.data.slice(8, 8 + this.length()); };
	/**
	 * 4.3.13 Digital signature:
	 *
	 *      header signature                4 bytes  (0x05054b50)
	 *      size of data                    2 bytes
	 *      signature data (variable size)
	 *
	 *    With the introduction of the Central Directory Encryption
	 *    feature in version 6.2 of this specification, the Central
	 *    Directory Structure MAY be stored both compressed and encrypted.
	 *    Although not required, it is assumed when encrypting the
	 *    Central Directory Structure, that it will be compressed
	 *    for greater storage efficiency.  Information on the
	 *    Central Directory Encryption feature can be found in the section
	 *    describing the Strong Encryption Specification. The Digital
	 *    Signature record will be neither compressed nor encrypted.
	 */
	var DigitalSignature = function DigitalSignature(data) {
	     this.data = data;
	     if (this.data.readUInt32LE(0) !== 0x05054b50) {
	         throw new ApiError(ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
	     }
	 };
	 DigitalSignature.prototype.size = function size () { return this.data.readUInt16LE(4); };
	 DigitalSignature.prototype.signatureData = function signatureData () { return this.data.slice(6, 6 + this.size()); };
	/**
	 * 4.3.12  Central directory structure:
	 *
	 *  central file header signature   4 bytes  (0x02014b50)
	 *  version made by                 2 bytes
	 *  version needed to extract       2 bytes
	 *  general purpose bit flag        2 bytes
	 *  compression method              2 bytes
	 *  last mod file time              2 bytes
	 *  last mod file date              2 bytes
	 *  crc-32                          4 bytes
	 *  compressed size                 4 bytes
	 *  uncompressed size               4 bytes
	 *  file name length                2 bytes
	 *  extra field length              2 bytes
	 *  file comment length             2 bytes
	 *  disk number start               2 bytes
	 *  internal file attributes        2 bytes
	 *  external file attributes        4 bytes
	 *  relative offset of local header 4 bytes
	 *
	 *  file name (variable size)
	 *  extra field (variable size)
	 *  file comment (variable size)
	 */
	var CentralDirectory = function CentralDirectory(zipData, data) {
	     this.zipData = zipData;
	     this.data = data;
	     // Sanity check.
	     if (this.data.readUInt32LE(0) !== 0x02014b50) {
	         throw new ApiError(ErrorCode.EINVAL, ("Invalid Zip file: Central directory record has invalid signature: " + (this.data.readUInt32LE(0))));
	     }
	     this._filename = this.produceFilename();
	 };
	 CentralDirectory.prototype.versionMadeBy = function versionMadeBy () { return this.data.readUInt16LE(4); };
	 CentralDirectory.prototype.versionNeeded = function versionNeeded () { return this.data.readUInt16LE(6); };
	 CentralDirectory.prototype.flag = function flag () { return this.data.readUInt16LE(8); };
	 CentralDirectory.prototype.compressionMethod = function compressionMethod () { return this.data.readUInt16LE(10); };
	 CentralDirectory.prototype.lastModFileTime = function lastModFileTime () {
	     // Time and date is in MS-DOS format.
	     return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
	 };
	 CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime () {
	     return this.data.readUInt32LE(12);
	 };
	 CentralDirectory.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(16); };
	 CentralDirectory.prototype.compressedSize = function compressedSize () { return this.data.readUInt32LE(20); };
	 CentralDirectory.prototype.uncompressedSize = function uncompressedSize () { return this.data.readUInt32LE(24); };
	 CentralDirectory.prototype.fileNameLength = function fileNameLength () { return this.data.readUInt16LE(28); };
	 CentralDirectory.prototype.extraFieldLength = function extraFieldLength () { return this.data.readUInt16LE(30); };
	 CentralDirectory.prototype.fileCommentLength = function fileCommentLength () { return this.data.readUInt16LE(32); };
	 CentralDirectory.prototype.diskNumberStart = function diskNumberStart () { return this.data.readUInt16LE(34); };
	 CentralDirectory.prototype.internalAttributes = function internalAttributes () { return this.data.readUInt16LE(36); };
	 CentralDirectory.prototype.externalAttributes = function externalAttributes () { return this.data.readUInt32LE(38); };
	 CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset () { return this.data.readUInt32LE(42); };
	 CentralDirectory.prototype.produceFilename = function produceFilename () {
	     /*
	       4.4.17.1 claims:
	       * All slashes are forward ('/') slashes.
	       * Filename doesn't begin with a slash.
	       * No drive letters or any nonsense like that.
	       * If filename is missing, the input came from standard input.
	    
	       Unfortunately, this isn't true in practice. Some Windows zip utilities use
	       a backslash here, but the correct Unix-style path in file headers.
	    
	       To avoid seeking all over the file to recover the known-good filenames
	       from file headers, we simply convert '/' to '\' here.
	     */
	     var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
	     return fileName.replace(/\\/g, "/");
	 };
	 CentralDirectory.prototype.fileName = function fileName () {
	     return this._filename;
	 };
	 CentralDirectory.prototype.rawFileName = function rawFileName () {
	     return this.data.slice(46, 46 + this.fileNameLength());
	 };
	 CentralDirectory.prototype.extraField = function extraField () {
	     var start = 44 + this.fileNameLength();
	     return this.data.slice(start, start + this.extraFieldLength());
	 };
	 CentralDirectory.prototype.fileComment = function fileComment () {
	     var start = 46 + this.fileNameLength() + this.extraFieldLength();
	     return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
	 };
	 CentralDirectory.prototype.rawFileComment = function rawFileComment () {
	     var start = 46 + this.fileNameLength() + this.extraFieldLength();
	     return this.data.slice(start, start + this.fileCommentLength());
	 };
	 CentralDirectory.prototype.totalSize = function totalSize () {
	     return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
	 };
	 CentralDirectory.prototype.isDirectory = function isDirectory () {
	     // NOTE: This assumes that the zip file implementation uses the lower byte
	     //    of external attributes for DOS attributes for
	     //    backwards-compatibility. This is not mandated, but appears to be
	     //    commonplace.
	     //    According to the spec, the layout of external attributes is
	     //    platform-dependent.
	     //    If that fails, we also check if the name of the file ends in '/',
	     //    which is what Java's ZipFile implementation does.
	     var fileName = this.fileName();
	     return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');
	 };
	 CentralDirectory.prototype.isFile = function isFile () { return !this.isDirectory(); };
	 CentralDirectory.prototype.useUTF8 = function useUTF8 () { return (this.flag() & 0x800) === 0x800; };
	 CentralDirectory.prototype.isEncrypted = function isEncrypted () { return (this.flag() & 0x1) === 0x1; };
	 CentralDirectory.prototype.getFileData = function getFileData () {
	     // Need to grab the header before we can figure out where the actual
	     // compressed data starts.
	     var start = this.headerRelativeOffset();
	     var header = new FileHeader(this.zipData.slice(start));
	     return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
	 };
	 CentralDirectory.prototype.getData = function getData () {
	     return this.getFileData().decompress();
	 };
	 CentralDirectory.prototype.getRawData = function getRawData () {
	     return this.getFileData().getRawData();
	 };
	 CentralDirectory.prototype.getStats = function getStats () {
	     return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
	 };
	/**
	 * 4.3.16: end of central directory record
	 *  end of central dir signature    4 bytes  (0x06054b50)
	 *  number of this disk             2 bytes
	 *  number of the disk with the
	 *  start of the central directory  2 bytes
	 *  total number of entries in the
	 *  central directory on this disk  2 bytes
	 *  total number of entries in
	 *  the central directory           2 bytes
	 *  size of the central directory   4 bytes
	 *  offset of start of central
	 *  directory with respect to
	 *  the starting disk number        4 bytes
	 *  .ZIP file comment length        2 bytes
	 *  .ZIP file comment       (variable size)
	 */
	var EndOfCentralDirectory = function EndOfCentralDirectory(data) {
	     this.data = data;
	     if (this.data.readUInt32LE(0) !== 0x06054b50) {
	         throw new ApiError(ErrorCode.EINVAL, ("Invalid Zip file: End of central directory record has invalid signature: " + (this.data.readUInt32LE(0))));
	     }
	 };
	 EndOfCentralDirectory.prototype.diskNumber = function diskNumber () { return this.data.readUInt16LE(4); };
	 EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber () { return this.data.readUInt16LE(6); };
	 EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount () { return this.data.readUInt16LE(8); };
	 EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount () { return this.data.readUInt16LE(10); };
	 EndOfCentralDirectory.prototype.cdSize = function cdSize () { return this.data.readUInt32LE(12); };
	 EndOfCentralDirectory.prototype.cdOffset = function cdOffset () { return this.data.readUInt32LE(16); };
	 EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength () { return this.data.readUInt16LE(20); };
	 EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment () {
	     // Assuming UTF-8. The specification doesn't specify.
	     return safeToString(this.data, true, 22, this.cdZipCommentLength());
	 };
	 EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment () {
	     return this.data.slice(22, 22 + this.cdZipCommentLength());
	 };
	/**
	 * Contains the table of contents of a Zip file.
	 */
	var ZipTOC = function ZipTOC(index, directoryEntries, eocd, data) {
	     this.index = index;
	     this.directoryEntries = directoryEntries;
	     this.eocd = eocd;
	     this.data = data;
	 };
	/**
	 * Zip file-backed filesystem
	 * Implemented according to the standard:
	 * http://www.pkware.com/documents/casestudies/APPNOTE.TXT
	 *
	 * While there are a few zip libraries for JavaScript (e.g. JSZip and zip.js),
	 * they are not a good match for BrowserFS. In particular, these libraries
	 * perform a lot of unneeded data copying, and eagerly decompress every file
	 * in the zip file upon loading to check the CRC32. They also eagerly decode
	 * strings. Furthermore, these libraries duplicate functionality already present
	 * in BrowserFS (e.g. UTF-8 decoding and binary data manipulation).
	 *
	 * This filesystem takes advantage of BrowserFS's Buffer implementation, which
	 * efficiently represents the zip file in memory (in both ArrayBuffer-enabled
	 * browsers *and* non-ArrayBuffer browsers), and which can neatly be 'sliced'
	 * without copying data. Each struct defined in the standard is represented with
	 * a buffer slice pointing to an offset in the zip file, and has getters for
	 * each field. As we anticipate that this data will not be read often, we choose
	 * not to store each struct field in the JavaScript object; instead, to reduce
	 * memory consumption, we retrieve it directly from the binary data each time it
	 * is requested.
	 *
	 * When the filesystem is instantiated, we determine the directory structure
	 * of the zip file as quickly as possible. We lazily decompress and check the
	 * CRC32 of files. We do not cache decompressed files; if this is a desired
	 * feature, it is best implemented as a generic file system wrapper that can
	 * cache data from arbitrary file systems.
	 *
	 * For inflation, we use `pako`'s implementation:
	 * https://github.com/nodeca/pako
	 *
	 * Current limitations:
	 * * No encryption.
	 * * No ZIP64 support.
	 * * Read-only.
	 *   Write support would require that we:
	 *   - Keep track of changed/new files.
	 *   - Compress changed files, and generate appropriate metadata for each.
	 *   - Update file offsets for other files in the zip file.
	 *   - Stream it out to a location.
	 *   This isn't that bad, so we might do this at a later date.
	 */
	var ZipFS = (function (SynchronousFileSystem$$1) {
	   function ZipFS(input, name, deprecateMsg) {
	        if ( name === void 0 ) name = '';
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        SynchronousFileSystem$$1.call(this);
	        this.name = name;
	        this._index = new FileIndex();
	        this._directoryEntries = [];
	        this._eocd = null;
	        deprecationMessage(deprecateMsg, ZipFS.Name, { zipData: "zip data as a Buffer", name: name });
	        if (input instanceof ZipTOC) {
	            this._index = input.index;
	            this._directoryEntries = input.directoryEntries;
	            this._eocd = input.eocd;
	            this.data = input.data;
	        }
	        else {
	            this.data = input;
	            this.populateIndex();
	        }
	    }
	
	   if ( SynchronousFileSystem$$1 ) ZipFS.__proto__ = SynchronousFileSystem$$1;
	   ZipFS.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	   ZipFS.prototype.constructor = ZipFS;
	    /**
	     * Constructs a ZipFS instance with the given options.
	     */
	    ZipFS.Create = function Create (opts, cb) {
	        try {
	            ZipFS.computeIndex(opts.zipData, function (zipTOC) {
	                var fs = new ZipFS(zipTOC, opts.name, false);
	                cb(null, fs);
	            }, false);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    ZipFS.isAvailable = function isAvailable () { return true; };
	    ZipFS.RegisterDecompressionMethod = function RegisterDecompressionMethod (m, fcn) {
	        decompressionMethods[m] = fcn;
	    };
	    /**
	     * **Deprecated. Please use ZipFS.Create() method instead.**
	     */
	    ZipFS.computeIndex = function computeIndex (data, cb, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        // TODO: Refactor to plumb errors through. Right now, they throw.
	        if (deprecateMsg) {
	            console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
	        }
	        var index = new FileIndex();
	        var eocd = ZipFS.getEOCD(data);
	        if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
	        }
	        var cdPtr = eocd.cdOffset();
	        if (cdPtr === 0xFFFFFFFF) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
	        }
	        var cdEnd = cdPtr + eocd.cdSize();
	        ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
	    };
	    /**
	     * Locates the end of central directory record at the end of the file.
	     * Throws an exception if it cannot be found.
	     */
	    ZipFS.getEOCD = function getEOCD (data) {
	        // Unfortunately, the comment is variable size and up to 64K in size.
	        // We assume that the magic signature does not appear in the comment, and
	        // in the bytes between the comment and the signature. Other ZIP
	        // implementations make this same assumption, since the alternative is to
	        // read thread every entry in the file to get to it. :(
	        // These are *negative* offsets from the end of the file.
	        var startOffset = 22;
	        var endOffset = Math.min(startOffset + 0xFFFF, data.length - 1);
	        // There's not even a byte alignment guarantee on the comment so we need to
	        // search byte by byte. *grumble grumble*
	        for (var i = startOffset; i < endOffset; i++) {
	            // Magic number: EOCD Signature
	            if (data.readUInt32LE(data.length - i) === 0x06054b50) {
	                return new EndOfCentralDirectory(data.slice(data.length - i));
	            }
	        }
	        throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
	    };
	    ZipFS.addToIndex = function addToIndex (cd, index) {
	        // Paths must be absolute, yet zip file paths are always relative to the
	        // zip root. So we append '/' and call it a day.
	        var filename = cd.fileName();
	        if (filename.charAt(0) === '/') {
	            throw new Error("WHY IS THIS ABSOLUTE");
	        }
	        // XXX: For the file index, strip the trailing '/'.
	        if (filename.charAt(filename.length - 1) === '/') {
	            filename = filename.substr(0, filename.length - 1);
	        }
	        if (cd.isDirectory()) {
	            index.addPathFast('/' + filename, new DirInode(cd));
	        }
	        else {
	            index.addPathFast('/' + filename, new FileInode(cd));
	        }
	    };
	    ZipFS.computeIndexResponsive = function computeIndexResponsive (data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
	        if (cdPtr < cdEnd) {
	            var count = 0;
	            while (count++ < 200 && cdPtr < cdEnd) {
	                var cd = new CentralDirectory(data, data.slice(cdPtr));
	                ZipFS.addToIndex(cd, index);
	                cdPtr += cd.totalSize();
	                cdEntries.push(cd);
	            }
	            setImmediate$3(function () {
	                ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
	            });
	        }
	        else {
	            cb(new ZipTOC(index, cdEntries, eocd, data));
	        }
	    };
	    ZipFS.prototype.getName = function getName () {
	        return ZipFS.Name + (this.name !== '' ? (" " + (this.name)) : '');
	    };
	    /**
	     * Get the CentralDirectory object for the given path.
	     */
	    ZipFS.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry (path$$1) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        if (isFileInode(inode)) {
	            return inode.getData();
	        }
	        else if (isDirInode(inode)) {
	            return inode.getData();
	        }
	        else {
	            // Should never occur.
	            throw ApiError.EPERM(("Invalid inode: " + inode));
	        }
	    };
	    ZipFS.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt (index) {
	        var dirEntry = this._directoryEntries[index];
	        if (!dirEntry) {
	            throw new RangeError(("Invalid directory index: " + index + "."));
	        }
	        return dirEntry;
	    };
	    ZipFS.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries () {
	        return this._directoryEntries.length;
	    };
	    ZipFS.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory () {
	        return this._eocd;
	    };
	    ZipFS.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        // Read-only file system.
	        cb(this.data.length, 0);
	    };
	    ZipFS.prototype.isReadOnly = function isReadOnly () {
	        return true;
	    };
	    ZipFS.prototype.supportsLinks = function supportsLinks () {
	        return false;
	    };
	    ZipFS.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    ZipFS.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    ZipFS.prototype.statSync = function statSync (path$$1, isLstat) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        var stats;
	        if (isFileInode(inode)) {
	            stats = inode.getData().getStats();
	        }
	        else if (isDirInode(inode)) {
	            stats = inode.getStats();
	        }
	        else {
	            throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
	        }
	        return stats;
	    };
	    ZipFS.prototype.openSync = function openSync (path$$1, flags, mode) {
	        // INVARIANT: Cannot write to RO file systems.
	        if (flags.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, path$$1);
	        }
	        // Check if the path exists, and is a file.
	        var inode = this._index.getInode(path$$1);
	        if (!inode) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (isFileInode(inode)) {
	            var cdRecord = inode.getData();
	            var stats = cdRecord.getStats();
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    throw ApiError.EEXIST(path$$1);
	                case ActionType.NOP:
	                    return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());
	                default:
	                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
	            }
	        }
	        else {
	            throw ApiError.EISDIR(path$$1);
	        }
	    };
	    ZipFS.prototype.readdirSync = function readdirSync (path$$1) {
	        // Check if it exists.
	        var inode = this._index.getInode(path$$1);
	        if (!inode) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (isDirInode(inode)) {
	            return inode.getListing();
	        }
	        else {
	            throw ApiError.ENOTDIR(path$$1);
	        }
	    };
	    /**
	     * Specially-optimized readfile.
	     */
	    ZipFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	        // Get file.
	        var fd = this.openSync(fname, flag, 0x1a4);
	        try {
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                return copyingSlice(fdBuff);
	            }
	            return fdBuff.toString(encoding);
	        }
	        finally {
	            fd.closeSync();
	        }
	    };
	    ZipFS.prototype.populateIndex = function populateIndex () {
	        var this$1 = this;
	
	        var eocd = this._eocd = ZipFS.getEOCD(this.data);
	        if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
	        }
	        var cdPtr = eocd.cdOffset();
	        if (cdPtr === 0xFFFFFFFF) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
	        }
	        var cdEnd = cdPtr + eocd.cdSize();
	        while (cdPtr < cdEnd) {
	            var cd = new CentralDirectory(this$1.data, this$1.data.slice(cdPtr));
	            cdPtr += cd.totalSize();
	            ZipFS.addToIndex(cd, this$1._index);
	            this$1._directoryEntries.push(cd);
	        }
	    };
	
	   return ZipFS;
	}(SynchronousFileSystem));
	
	ZipFS.Name = "ZipFS";
	ZipFS.Options = {
	    zipData: {
	        type: "object",
	        description: "The zip file as a Buffer object.",
	        validator: bufferValidator
	    },
	    name: {
	        type: "string",
	        optional: true,
	        description: "The name of the zip file (optional)."
	    }
	};
	ZipFS.CompressionMethod = CompressionMethod;
	ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function (data, compressedSize, uncompressedSize) {
	    return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), { chunkSize: uncompressedSize }));
	});
	ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function (data, compressedSize, uncompressedSize) {
	    return copyingSlice(data, 0, uncompressedSize);
	});
	
	/**
	 * @hidden
	 */
	var rockRidgeIdentifier = "IEEE_P1282";
	/**
	 * @hidden
	 */
	function getASCIIString(data, startIndex, length) {
	    return data.toString('ascii', startIndex, startIndex + length).trim();
	}
	/**
	 * @hidden
	 */
	function getJolietString(data, startIndex, length) {
	    if (length === 1) {
	        // Special: Root, parent, current directory are still a single byte.
	        return String.fromCharCode(data[startIndex]);
	    }
	    // UTF16-BE, which isn't natively supported by NodeJS Buffers.
	    // Length should be even, but pessimistically floor just in case.
	    var pairs = Math.floor(length / 2);
	    var chars = new Array(pairs);
	    for (var i = 0; i < pairs; i++) {
	        var pos = startIndex + (i << 1);
	        chars[i] = String.fromCharCode(data[pos + 1] | (data[pos] << 8));
	    }
	    return chars.join('');
	}
	/**
	 * @hidden
	 */
	function getDate(data, startIndex) {
	    var year = parseInt(getASCIIString(data, startIndex, 4), 10);
	    var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
	    var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
	    var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
	    var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
	    var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
	    var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);
	    // Last is a time-zone offset, but JavaScript dates don't support time zones well.
	    return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
	}
	/**
	 * @hidden
	 */
	function getShortFormDate(data, startIndex) {
	    var yearsSince1900 = data[startIndex];
	    var month = data[startIndex + 1];
	    var day = data[startIndex + 2];
	    var hour = data[startIndex + 3];
	    var minute = data[startIndex + 4];
	    var second = data[startIndex + 5];
	    // JavaScript's Date support isn't so great; ignore timezone.
	    // const offsetFromGMT = this._data[24];
	    return new Date(yearsSince1900, month - 1, day, hour, minute, second);
	}
	/**
	 * @hidden
	 */
	function constructSystemUseEntry(bigData, i) {
	    var data = bigData.slice(i);
	    var sue = new SystemUseEntry(data);
	    switch (sue.signatureWord()) {
	        case 17221 /* CE */:
	            return new CEEntry(data);
	        case 20548 /* PD */:
	            return new PDEntry(data);
	        case 21328 /* SP */:
	            return new SPEntry(data);
	        case 21332 /* ST */:
	            return new STEntry(data);
	        case 17746 /* ER */:
	            return new EREntry(data);
	        case 17747 /* ES */:
	            return new ESEntry(data);
	        case 20568 /* PX */:
	            return new PXEntry(data);
	        case 20558 /* PN */:
	            return new PNEntry(data);
	        case 21324 /* SL */:
	            return new SLEntry(data);
	        case 20045 /* NM */:
	            return new NMEntry(data);
	        case 17228 /* CL */:
	            return new CLEntry(data);
	        case 20556 /* PL */:
	            return new PLEntry(data);
	        case 21061 /* RE */:
	            return new REEntry(data);
	        case 21574 /* TF */:
	            return new TFEntry(data);
	        case 21318 /* SF */:
	            return new SFEntry(data);
	        case 21074 /* RR */:
	            return new RREntry(data);
	        default:
	            return sue;
	    }
	}
	/**
	 * @hidden
	 */
	function constructSystemUseEntries(data, i, len, isoData) {
	    // If the remaining allocated space following the last recorded System Use Entry in a System
	    // Use field or Continuation Area is less than four bytes long, it cannot contain a System
	    // Use Entry and shall be ignored
	    len = len - 4;
	    var entries = new Array();
	    while (i < len) {
	        var entry = constructSystemUseEntry(data, i);
	        var length = entry.length();
	        if (length === 0) {
	            // Invalid SU section; prevent infinite loop.
	            return entries;
	        }
	        i += length;
	        if (entry instanceof STEntry) {
	            // ST indicates the end of entries.
	            break;
	        }
	        if (entry instanceof CEEntry) {
	            entries = entries.concat(entry.getEntries(isoData));
	        }
	        else {
	            entries.push(entry);
	        }
	    }
	    return entries;
	}
	/**
	 * @hidden
	 */
	var VolumeDescriptor = function VolumeDescriptor(data) {
	    this._data = data;
	};
	VolumeDescriptor.prototype.type = function type () {
	    return this._data[0];
	};
	VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier () {
	    return getASCIIString(this._data, 1, 5);
	};
	VolumeDescriptor.prototype.version = function version () {
	    return this._data[6];
	};
	VolumeDescriptor.prototype.data = function data () {
	    return this._data.slice(7, 2048);
	};
	/**
	 * @hidden
	 */
	var PrimaryOrSupplementaryVolumeDescriptor = (function (VolumeDescriptor) {
	    function PrimaryOrSupplementaryVolumeDescriptor(data) {
	        VolumeDescriptor.call(this, data);
	        this._root = null;
	    }
	
	    if ( VolumeDescriptor ) PrimaryOrSupplementaryVolumeDescriptor.__proto__ = VolumeDescriptor;
	    PrimaryOrSupplementaryVolumeDescriptor.prototype = Object.create( VolumeDescriptor && VolumeDescriptor.prototype );
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor;
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.systemIdentifier = function systemIdentifier () {
	        return this._getString32(8);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeIdentifier = function volumeIdentifier () {
	        return this._getString32(40);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSpaceSize = function volumeSpaceSize () {
	        return this._data.readUInt32LE(80);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetSize = function volumeSetSize () {
	        return this._data.readUInt16LE(120);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSequenceNumber = function volumeSequenceNumber () {
	        return this._data.readUInt16LE(124);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.logicalBlockSize = function logicalBlockSize () {
	        return this._data.readUInt16LE(128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.pathTableSize = function pathTableSize () {
	        return this._data.readUInt32LE(132);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable () {
	        return this._data.readUInt32LE(140);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable () {
	        return this._data.readUInt32LE(144);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable () {
	        return this._data.readUInt32BE(148);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable () {
	        return this._data.readUInt32BE(152);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.rootDirectoryEntry = function rootDirectoryEntry (isoData) {
	        if (this._root === null) {
	            this._root = this._constructRootDirectoryRecord(this._data.slice(156));
	            this._root.rootCheckForRockRidge(isoData);
	        }
	        return this._root;
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetIdentifier = function volumeSetIdentifier () {
	        return this._getString(190, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.publisherIdentifier = function publisherIdentifier () {
	        return this._getString(318, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.dataPreparerIdentifier = function dataPreparerIdentifier () {
	        return this._getString(446, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationIdentifier = function applicationIdentifier () {
	        return this._getString(574, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.copyrightFileIdentifier = function copyrightFileIdentifier () {
	        return this._getString(702, 38);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.abstractFileIdentifier = function abstractFileIdentifier () {
	        return this._getString(740, 36);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier () {
	        return this._getString(776, 37);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeCreationDate = function volumeCreationDate () {
	        return getDate(this._data, 813);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeModificationDate = function volumeModificationDate () {
	        return getDate(this._data, 830);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeExpirationDate = function volumeExpirationDate () {
	        return getDate(this._data, 847);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeEffectiveDate = function volumeEffectiveDate () {
	        return getDate(this._data, 864);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.fileStructureVersion = function fileStructureVersion () {
	        return this._data[881];
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationUsed = function applicationUsed () {
	        return this._data.slice(883, 883 + 512);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.reserved = function reserved () {
	        return this._data.slice(1395, 1395 + 653);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype._getString32 = function _getString32 (idx) {
	        return this._getString(idx, 32);
	    };
	
	    return PrimaryOrSupplementaryVolumeDescriptor;
	}(VolumeDescriptor));
	/**
	 * @hidden
	 */
	var PrimaryVolumeDescriptor = (function (PrimaryOrSupplementaryVolumeDescriptor) {
	    function PrimaryVolumeDescriptor(data) {
	        PrimaryOrSupplementaryVolumeDescriptor.call(this, data);
	        if (this.type() !== 1 /* PrimaryVolumeDescriptor */) {
	            throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
	        }
	    }
	
	    if ( PrimaryOrSupplementaryVolumeDescriptor ) PrimaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
	    PrimaryVolumeDescriptor.prototype = Object.create( PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype );
	    PrimaryVolumeDescriptor.prototype.constructor = PrimaryVolumeDescriptor;
	    PrimaryVolumeDescriptor.prototype.name = function name () {
	        return "ISO9660";
	    };
	    PrimaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord (data) {
	        return new ISODirectoryRecord(data, -1);
	    };
	    PrimaryVolumeDescriptor.prototype._getString = function _getString (idx, len) {
	        return this._getString(idx, len);
	    };
	
	    return PrimaryVolumeDescriptor;
	}(PrimaryOrSupplementaryVolumeDescriptor));
	/**
	 * @hidden
	 */
	var SupplementaryVolumeDescriptor = (function (PrimaryOrSupplementaryVolumeDescriptor) {
	    function SupplementaryVolumeDescriptor(data) {
	        PrimaryOrSupplementaryVolumeDescriptor.call(this, data);
	        if (this.type() !== 2 /* SupplementaryVolumeDescriptor */) {
	            throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
	        }
	        var escapeSequence = this.escapeSequence();
	        var third = escapeSequence[2];
	        // Third character identifies what 'level' of the UCS specification to follow.
	        // We ignore it.
	        if (escapeSequence[0] !== 0x25 || escapeSequence[1] !== 0x2F ||
	            (third !== 0x40 && third !== 0x43 && third !== 0x45)) {
	            throw new ApiError(ErrorCode.EIO, ("Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + (escapeSequence.toString())));
	        }
	    }
	
	    if ( PrimaryOrSupplementaryVolumeDescriptor ) SupplementaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
	    SupplementaryVolumeDescriptor.prototype = Object.create( PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype );
	    SupplementaryVolumeDescriptor.prototype.constructor = SupplementaryVolumeDescriptor;
	    SupplementaryVolumeDescriptor.prototype.name = function name () {
	        return "Joliet";
	    };
	    SupplementaryVolumeDescriptor.prototype.escapeSequence = function escapeSequence () {
	        return this._data.slice(88, 120);
	    };
	    SupplementaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord (data) {
	        return new JolietDirectoryRecord(data, -1);
	    };
	    SupplementaryVolumeDescriptor.prototype._getString = function _getString (idx, len) {
	        return getJolietString(this._data, idx, len);
	    };
	
	    return SupplementaryVolumeDescriptor;
	}(PrimaryOrSupplementaryVolumeDescriptor));
	/**
	 * @hidden
	 */
	var DirectoryRecord = function DirectoryRecord(data, rockRidgeOffset) {
	    this._suEntries = null;
	    this._fileOrDir = null;
	    this._data = data;
	    this._rockRidgeOffset = rockRidgeOffset;
	};
	DirectoryRecord.prototype.hasRockRidge = function hasRockRidge () {
	    return this._rockRidgeOffset > -1;
	};
	DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset () {
	    return this._rockRidgeOffset;
	};
	/**
	 * !!ONLY VALID ON ROOT NODE!!
	 * Checks if Rock Ridge is enabled, and sets the offset.
	 */
	DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge (isoData) {
	    var dir = this.getDirectory(isoData);
	    this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);
	    if (this._rockRidgeOffset > -1) {
	        // Wipe out directory. Start over with RR knowledge.
	        this._fileOrDir = null;
	    }
	};
	DirectoryRecord.prototype.length = function length () {
	    return this._data[0];
	};
	DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength () {
	    return this._data[1];
	};
	DirectoryRecord.prototype.lba = function lba () {
	    return this._data.readUInt32LE(2) * 2048;
	};
	DirectoryRecord.prototype.dataLength = function dataLength () {
	    return this._data.readUInt32LE(10);
	};
	DirectoryRecord.prototype.recordingDate = function recordingDate () {
	    return getShortFormDate(this._data, 18);
	};
	DirectoryRecord.prototype.fileFlags = function fileFlags () {
	    return this._data[25];
	};
	DirectoryRecord.prototype.fileUnitSize = function fileUnitSize () {
	    return this._data[26];
	};
	DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize () {
	    return this._data[27];
	};
	DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber () {
	    return this._data.readUInt16LE(28);
	};
	DirectoryRecord.prototype.identifier = function identifier () {
	    return this._getString(33, this._data[32]);
	};
	DirectoryRecord.prototype.fileName = function fileName (isoData) {
	    if (this.hasRockRidge()) {
	        var fn = this._rockRidgeFilename(isoData);
	        if (fn !== null) {
	            return fn;
	        }
	    }
	    var ident = this.identifier();
	    if (this.isDirectory(isoData)) {
	        return ident;
	    }
	    // Files:
	    // - MUST have 0x2E (.) separating the name from the extension
	    // - MUST have 0x3B (;) separating the file name and extension from the version
	    // Gets expanded to two-byte char in Unicode directory records.
	    var versionSeparator = ident.indexOf(';');
	    if (versionSeparator === -1) {
	        // Some Joliet filenames lack the version separator, despite the standard
	        // specifying that it should be there.
	        return ident;
	    }
	    else if (ident[versionSeparator - 1] === '.') {
	        // Empty extension. Do not include '.' in the filename.
	        return ident.slice(0, versionSeparator - 1);
	    }
	    else {
	        // Include up to version separator.
	        return ident.slice(0, versionSeparator);
	    }
	};
	DirectoryRecord.prototype.isDirectory = function isDirectory (isoData) {
	    var rv = !!(this.fileFlags() & 2 /* Directory */);
	    // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory
	    // depth limit. Rock Ridge marks these as files and adds a special attribute.
	    if (!rv && this.hasRockRidge()) {
	        rv = this.getSUEntries(isoData).filter(function (e) { return e instanceof CLEntry; }).length > 0;
	    }
	    return rv;
	};
	DirectoryRecord.prototype.isSymlink = function isSymlink (isoData) {
	    return this.hasRockRidge() && this.getSUEntries(isoData).filter(function (e) { return e instanceof SLEntry; }).length > 0;
	};
	DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath (isoData) {
	    var p = "";
	    var entries = this.getSUEntries(isoData);
	    var getStr = this._getGetString();
	    for (var i = 0, list = entries; i < list.length; i += 1) {
	        var entry = list[i];
	
	            if (entry instanceof SLEntry) {
	            var components = entry.componentRecords();
	            for (var i$1 = 0, list$1 = components; i$1 < list$1.length; i$1 += 1) {
	                var component = list$1[i$1];
	
	                    var flags = component.flags();
	                if (flags & 2 /* CURRENT */) {
	                    p += "./";
	                }
	                else if (flags & 4 /* PARENT */) {
	                    p += "../";
	                }
	                else if (flags & 8 /* ROOT */) {
	                    p += "/";
	                }
	                else {
	                    p += component.content(getStr);
	                    if (!(flags & 1 /* CONTINUE */)) {
	                        p += '/';
	                    }
	                }
	            }
	            if (!entry.continueFlag()) {
	                // We are done with this link.
	                break;
	            }
	        }
	    }
	    if (p.length > 1 && p[p.length - 1] === '/') {
	        // Trim trailing '/'.
	        return p.slice(0, p.length - 1);
	    }
	    else {
	        return p;
	    }
	};
	DirectoryRecord.prototype.getFile = function getFile (isoData) {
	    if (this.isDirectory(isoData)) {
	        throw new Error("Tried to get a File from a directory.");
	    }
	    if (this._fileOrDir === null) {
	        this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
	    }
	    return this._fileOrDir;
	};
	DirectoryRecord.prototype.getDirectory = function getDirectory (isoData) {
	    if (!this.isDirectory(isoData)) {
	        throw new Error("Tried to get a Directory from a file.");
	    }
	    if (this._fileOrDir === null) {
	        this._fileOrDir = this._constructDirectory(isoData);
	    }
	    return this._fileOrDir;
	};
	DirectoryRecord.prototype.getSUEntries = function getSUEntries (isoData) {
	    if (!this._suEntries) {
	        this._constructSUEntries(isoData);
	    }
	    return this._suEntries;
	};
	DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename (isoData) {
	    var nmEntries = this.getSUEntries(isoData).filter(function (e) { return e instanceof NMEntry; });
	    if (nmEntries.length === 0 || nmEntries[0].flags() & (2 /* CURRENT */ | 4 /* PARENT */)) {
	        return null;
	    }
	    var str = '';
	    var getString = this._getGetString();
	    for (var i = 0, list = nmEntries; i < list.length; i += 1) {
	        var e = list[i];
	
	            str += e.name(getString);
	        if (!(e.flags() & 1 /* CONTINUE */)) {
	            break;
	        }
	    }
	    return str;
	};
	DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries (isoData) {
	    var i = 33 + this._data[32];
	    if (i % 2 === 1) {
	        // Skip padding field.
	        i++;
	    }
	    i += this._rockRidgeOffset;
	    this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);
	};
	/**
	 * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!
	 * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset
	 * at which system use fields begin.
	 */
	DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset (isoData) {
	    // In the worst case, we get some garbage SU entries.
	    // Fudge offset to 0 before proceeding.
	    this._rockRidgeOffset = 0;
	    var suEntries = this.getSUEntries(isoData);
	    if (suEntries.length > 0) {
	        var spEntry = suEntries[0];
	        if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
	            // SUSP is in use.
	            for (var i = 1; i < suEntries.length; i++) {
	                var entry = suEntries[i];
	                if (entry instanceof RREntry || (entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier)) {
	                    // Rock Ridge is in use!
	                    return spEntry.bytesSkipped();
	                }
	            }
	        }
	    }
	    // Failed.
	    this._rockRidgeOffset = -1;
	    return -1;
	};
	/**
	 * @hidden
	 */
	var ISODirectoryRecord = (function (DirectoryRecord) {
	    function ISODirectoryRecord(data, rockRidgeOffset) {
	        DirectoryRecord.call(this, data, rockRidgeOffset);
	    }
	
	    if ( DirectoryRecord ) ISODirectoryRecord.__proto__ = DirectoryRecord;
	    ISODirectoryRecord.prototype = Object.create( DirectoryRecord && DirectoryRecord.prototype );
	    ISODirectoryRecord.prototype.constructor = ISODirectoryRecord;
	    ISODirectoryRecord.prototype._getString = function _getString (i, len) {
	        return getASCIIString(this._data, i, len);
	    };
	    ISODirectoryRecord.prototype._constructDirectory = function _constructDirectory (isoData) {
	        return new ISODirectory(this, isoData);
	    };
	    ISODirectoryRecord.prototype._getGetString = function _getGetString () {
	        return getASCIIString;
	    };
	
	    return ISODirectoryRecord;
	}(DirectoryRecord));
	/**
	 * @hidden
	 */
	var JolietDirectoryRecord = (function (DirectoryRecord) {
	    function JolietDirectoryRecord(data, rockRidgeOffset) {
	        DirectoryRecord.call(this, data, rockRidgeOffset);
	    }
	
	    if ( DirectoryRecord ) JolietDirectoryRecord.__proto__ = DirectoryRecord;
	    JolietDirectoryRecord.prototype = Object.create( DirectoryRecord && DirectoryRecord.prototype );
	    JolietDirectoryRecord.prototype.constructor = JolietDirectoryRecord;
	    JolietDirectoryRecord.prototype._getString = function _getString (i, len) {
	        return getJolietString(this._data, i, len);
	    };
	    JolietDirectoryRecord.prototype._constructDirectory = function _constructDirectory (isoData) {
	        return new JolietDirectory(this, isoData);
	    };
	    JolietDirectoryRecord.prototype._getGetString = function _getGetString () {
	        return getJolietString;
	    };
	
	    return JolietDirectoryRecord;
	}(DirectoryRecord));
	/**
	 * @hidden
	 */
	var SystemUseEntry = function SystemUseEntry(data) {
	    this._data = data;
	};
	SystemUseEntry.prototype.signatureWord = function signatureWord () {
	    return this._data.readUInt16BE(0);
	};
	SystemUseEntry.prototype.signatureWordString = function signatureWordString () {
	    return getASCIIString(this._data, 0, 2);
	};
	SystemUseEntry.prototype.length = function length () {
	    return this._data[2];
	};
	SystemUseEntry.prototype.suVersion = function suVersion () {
	    return this._data[3];
	};
	/**
	 * Continuation entry.
	 * @hidden
	 */
	var CEEntry = (function (SystemUseEntry) {
	    function CEEntry(data) {
	        SystemUseEntry.call(this, data);
	        this._entries = null;
	    }
	
	    if ( SystemUseEntry ) CEEntry.__proto__ = SystemUseEntry;
	    CEEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    CEEntry.prototype.constructor = CEEntry;
	    /**
	     * Logical block address of the continuation area.
	     */
	    CEEntry.prototype.continuationLba = function continuationLba () {
	        return this._data.readUInt32LE(4);
	    };
	    /**
	     * Offset into the logical block.
	     */
	    CEEntry.prototype.continuationLbaOffset = function continuationLbaOffset () {
	        return this._data.readUInt32LE(12);
	    };
	    /**
	     * Length of the continuation area.
	     */
	    CEEntry.prototype.continuationLength = function continuationLength () {
	        return this._data.readUInt32LE(20);
	    };
	    CEEntry.prototype.getEntries = function getEntries (isoData) {
	        if (!this._entries) {
	            var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
	            this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
	        }
	        return this._entries;
	    };
	
	    return CEEntry;
	}(SystemUseEntry));
	/**
	 * Padding entry.
	 * @hidden
	 */
	var PDEntry = (function (SystemUseEntry) {
	    function PDEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PDEntry.__proto__ = SystemUseEntry;
	    PDEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PDEntry.prototype.constructor = PDEntry;
	
	    return PDEntry;
	}(SystemUseEntry));
	/**
	 * Identifies that SUSP is in-use.
	 * @hidden
	 */
	var SPEntry = (function (SystemUseEntry) {
	    function SPEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) SPEntry.__proto__ = SystemUseEntry;
	    SPEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    SPEntry.prototype.constructor = SPEntry;
	    SPEntry.prototype.checkBytesPass = function checkBytesPass () {
	        return this._data[4] === 0xBE && this._data[5] === 0xEF;
	    };
	    SPEntry.prototype.bytesSkipped = function bytesSkipped () {
	        return this._data[6];
	    };
	
	    return SPEntry;
	}(SystemUseEntry));
	/**
	 * Identifies the end of the SUSP entries.
	 * @hidden
	 */
	var STEntry = (function (SystemUseEntry) {
	    function STEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) STEntry.__proto__ = SystemUseEntry;
	    STEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    STEntry.prototype.constructor = STEntry;
	
	    return STEntry;
	}(SystemUseEntry));
	/**
	 * Specifies system-specific extensions to SUSP.
	 * @hidden
	 */
	var EREntry = (function (SystemUseEntry) {
	    function EREntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) EREntry.__proto__ = SystemUseEntry;
	    EREntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    EREntry.prototype.constructor = EREntry;
	    EREntry.prototype.identifierLength = function identifierLength () {
	        return this._data[4];
	    };
	    EREntry.prototype.descriptorLength = function descriptorLength () {
	        return this._data[5];
	    };
	    EREntry.prototype.sourceLength = function sourceLength () {
	        return this._data[6];
	    };
	    EREntry.prototype.extensionVersion = function extensionVersion () {
	        return this._data[7];
	    };
	    EREntry.prototype.extensionIdentifier = function extensionIdentifier () {
	        return getASCIIString(this._data, 8, this.identifierLength());
	    };
	    EREntry.prototype.extensionDescriptor = function extensionDescriptor () {
	        return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
	    };
	    EREntry.prototype.extensionSource = function extensionSource () {
	        return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
	    };
	
	    return EREntry;
	}(SystemUseEntry));
	/**
	 * @hidden
	 */
	var ESEntry = (function (SystemUseEntry) {
	    function ESEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) ESEntry.__proto__ = SystemUseEntry;
	    ESEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    ESEntry.prototype.constructor = ESEntry;
	    ESEntry.prototype.extensionSequence = function extensionSequence () {
	        return this._data[4];
	    };
	
	    return ESEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Marks that RockRidge is in use [deprecated]
	 * @hidden
	 */
	var RREntry = (function (SystemUseEntry) {
	    function RREntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) RREntry.__proto__ = SystemUseEntry;
	    RREntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    RREntry.prototype.constructor = RREntry;
	
	    return RREntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records POSIX file attributes.
	 * @hidden
	 */
	var PXEntry = (function (SystemUseEntry) {
	    function PXEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PXEntry.__proto__ = SystemUseEntry;
	    PXEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PXEntry.prototype.constructor = PXEntry;
	    PXEntry.prototype.mode = function mode () {
	        return this._data.readUInt32LE(4);
	    };
	    PXEntry.prototype.fileLinks = function fileLinks () {
	        return this._data.readUInt32LE(12);
	    };
	    PXEntry.prototype.uid = function uid () {
	        return this._data.readUInt32LE(20);
	    };
	    PXEntry.prototype.gid = function gid () {
	        return this._data.readUInt32LE(28);
	    };
	    PXEntry.prototype.inode = function inode () {
	        return this._data.readUInt32LE(36);
	    };
	
	    return PXEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records POSIX device number.
	 * @hidden
	 */
	var PNEntry = (function (SystemUseEntry) {
	    function PNEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PNEntry.__proto__ = SystemUseEntry;
	    PNEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PNEntry.prototype.constructor = PNEntry;
	    PNEntry.prototype.devTHigh = function devTHigh () {
	        return this._data.readUInt32LE(4);
	    };
	    PNEntry.prototype.devTLow = function devTLow () {
	        return this._data.readUInt32LE(12);
	    };
	
	    return PNEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records symbolic link
	 * @hidden
	 */
	var SLEntry = (function (SystemUseEntry) {
	    function SLEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) SLEntry.__proto__ = SystemUseEntry;
	    SLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    SLEntry.prototype.constructor = SLEntry;
	    SLEntry.prototype.flags = function flags () {
	        return this._data[4];
	    };
	    SLEntry.prototype.continueFlag = function continueFlag () {
	        return this.flags() & 0x1;
	    };
	    SLEntry.prototype.componentRecords = function componentRecords () {
	        var this$1 = this;
	
	        var records = new Array();
	        var i = 5;
	        while (i < this.length()) {
	            var record = new SLComponentRecord(this$1._data.slice(i));
	            records.push(record);
	            i += record.length();
	        }
	        return records;
	    };
	
	    return SLEntry;
	}(SystemUseEntry));
	/**
	 * @hidden
	 */
	var SLComponentRecord = function SLComponentRecord(data) {
	    this._data = data;
	};
	SLComponentRecord.prototype.flags = function flags () {
	    return this._data[0];
	};
	SLComponentRecord.prototype.length = function length () {
	    return 2 + this.componentLength();
	};
	SLComponentRecord.prototype.componentLength = function componentLength () {
	    return this._data[1];
	};
	SLComponentRecord.prototype.content = function content (getString) {
	    return getString(this._data, 2, this.componentLength());
	};
	/**
	 * RockRidge: Records alternate file name
	 * @hidden
	 */
	var NMEntry = (function (SystemUseEntry) {
	    function NMEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) NMEntry.__proto__ = SystemUseEntry;
	    NMEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    NMEntry.prototype.constructor = NMEntry;
	    NMEntry.prototype.flags = function flags () {
	        return this._data[4];
	    };
	    NMEntry.prototype.name = function name (getString) {
	        return getString(this._data, 5, this.length() - 5);
	    };
	
	    return NMEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records child link
	 * @hidden
	 */
	var CLEntry = (function (SystemUseEntry) {
	    function CLEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) CLEntry.__proto__ = SystemUseEntry;
	    CLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    CLEntry.prototype.constructor = CLEntry;
	    CLEntry.prototype.childDirectoryLba = function childDirectoryLba () {
	        return this._data.readUInt32LE(4);
	    };
	
	    return CLEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records parent link.
	 * @hidden
	 */
	var PLEntry = (function (SystemUseEntry) {
	    function PLEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PLEntry.__proto__ = SystemUseEntry;
	    PLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PLEntry.prototype.constructor = PLEntry;
	    PLEntry.prototype.parentDirectoryLba = function parentDirectoryLba () {
	        return this._data.readUInt32LE(4);
	    };
	
	    return PLEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records relocated directory.
	 * @hidden
	 */
	var REEntry = (function (SystemUseEntry) {
	    function REEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) REEntry.__proto__ = SystemUseEntry;
	    REEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    REEntry.prototype.constructor = REEntry;
	
	    return REEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records file timestamps
	 * @hidden
	 */
	var TFEntry = (function (SystemUseEntry) {
	    function TFEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) TFEntry.__proto__ = SystemUseEntry;
	    TFEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    TFEntry.prototype.constructor = TFEntry;
	    TFEntry.prototype.flags = function flags () {
	        return this._data[4];
	    };
	    TFEntry.prototype.creation = function creation () {
	        if (this.flags() & 1 /* CREATION */) {
	            if (this._longFormDates()) {
	                return getDate(this._data, 5);
	            }
	            else {
	                return getShortFormDate(this._data, 5);
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.modify = function modify () {
	        if (this.flags() & 2 /* MODIFY */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.access = function access () {
	        if (this.flags() & 4 /* ACCESS */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.backup = function backup () {
	        if (this.flags() & 16 /* BACKUP */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.expiration = function expiration () {
	        if (this.flags() & 32 /* EXPIRATION */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
	            previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.effective = function effective () {
	        if (this.flags() & 64 /* EFFECTIVE */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
	            previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;
	            previousDates += (this.flags() & 32 /* EXPIRATION */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype._longFormDates = function _longFormDates () {
	        return !!(this.flags() && 128 /* LONG_FORM */);
	    };
	
	    return TFEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: File data in sparse format.
	 * @hidden
	 */
	var SFEntry = (function (SystemUseEntry) {
	    function SFEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) SFEntry.__proto__ = SystemUseEntry;
	    SFEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    SFEntry.prototype.constructor = SFEntry;
	    SFEntry.prototype.virtualSizeHigh = function virtualSizeHigh () {
	        return this._data.readUInt32LE(4);
	    };
	    SFEntry.prototype.virtualSizeLow = function virtualSizeLow () {
	        return this._data.readUInt32LE(12);
	    };
	    SFEntry.prototype.tableDepth = function tableDepth () {
	        return this._data[20];
	    };
	
	    return SFEntry;
	}(SystemUseEntry));
	/**
	 * @hidden
	 */
	var Directory = function Directory(record, isoData) {
	    var this$1 = this;
	
	    this._fileList = [];
	    this._fileMap = {};
	    this._record = record;
	    var i = record.lba();
	    var iLimit = i + record.dataLength();
	    if (!(record.fileFlags() & 2 /* Directory */)) {
	        // Must have a CL entry.
	        var cl = record.getSUEntries(isoData).filter(function (e) { return e instanceof CLEntry; })[0];
	        i = cl.childDirectoryLba() * 2048;
	        iLimit = Infinity;
	    }
	    while (i < iLimit) {
	        var len = isoData[i];
	        // Zero-padding between sectors.
	        // TODO: Could optimize this to seek to nearest-sector upon
	        // seeing a 0.
	        if (len === 0) {
	            i++;
	            continue;
	        }
	        var r = this$1._constructDirectoryRecord(isoData.slice(i));
	        var fname = r.fileName(isoData);
	        // Skip '.' and '..' entries.
	        if (fname !== '\u0000' && fname !== '\u0001') {
	            // Skip relocated entries.
	            if (!r.hasRockRidge() || r.getSUEntries(isoData).filter(function (e) { return e instanceof REEntry; }).length === 0) {
	                this$1._fileMap[fname] = r;
	                this$1._fileList.push(fname);
	            }
	        }
	        else if (iLimit === Infinity) {
	            // First entry contains needed data.
	            iLimit = i + r.dataLength();
	        }
	        i += r.length();
	    }
	};
	/**
	 * Get the record with the given name.
	 * Returns undefined if not present.
	 */
	Directory.prototype.getRecord = function getRecord (name) {
	    return this._fileMap[name];
	};
	Directory.prototype.getFileList = function getFileList () {
	    return this._fileList;
	};
	Directory.prototype.getDotEntry = function getDotEntry (isoData) {
	    return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
	};
	/**
	 * @hidden
	 */
	var ISODirectory = (function (Directory) {
	    function ISODirectory(record, isoData) {
	        Directory.call(this, record, isoData);
	    }
	
	    if ( Directory ) ISODirectory.__proto__ = Directory;
	    ISODirectory.prototype = Object.create( Directory && Directory.prototype );
	    ISODirectory.prototype.constructor = ISODirectory;
	    ISODirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord (data) {
	        return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
	    };
	
	    return ISODirectory;
	}(Directory));
	/**
	 * @hidden
	 */
	var JolietDirectory = (function (Directory) {
	    function JolietDirectory(record, isoData) {
	        Directory.call(this, record, isoData);
	    }
	
	    if ( Directory ) JolietDirectory.__proto__ = Directory;
	    JolietDirectory.prototype = Object.create( Directory && Directory.prototype );
	    JolietDirectory.prototype.constructor = JolietDirectory;
	    JolietDirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord (data) {
	        return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
	    };
	
	    return JolietDirectory;
	}(Directory));
	/**
	 * Mounts an ISO file as a read-only file system.
	 *
	 * Supports:
	 * * Vanilla ISO9660 ISOs
	 * * Microsoft Joliet and Rock Ridge extensions to the ISO9660 standard
	 */
	var IsoFS = (function (SynchronousFileSystem$$1) {
	    function IsoFS(data, name, deprecateMsg) {
	        var this$1 = this;
	        if ( name === void 0 ) name = "";
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        SynchronousFileSystem$$1.call(this);
	        this._data = data;
	        deprecationMessage(deprecateMsg, IsoFS.Name, { data: "ISO data as a Buffer", name: name });
	        // Skip first 16 sectors.
	        var vdTerminatorFound = false;
	        var i = 16 * 2048;
	        var candidateVDs = new Array();
	        while (!vdTerminatorFound) {
	            var slice = data.slice(i);
	            var vd = new VolumeDescriptor(slice);
	            switch (vd.type()) {
	                case 1 /* PrimaryVolumeDescriptor */:
	                    candidateVDs.push(new PrimaryVolumeDescriptor(slice));
	                    break;
	                case 2 /* SupplementaryVolumeDescriptor */:
	                    candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
	                    break;
	                case 255 /* VolumeDescriptorSetTerminator */:
	                    vdTerminatorFound = true;
	                    break;
	            }
	            i += 2048;
	        }
	        if (candidateVDs.length === 0) {
	            throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
	        }
	        candidateVDs.forEach(function (v) {
	            // Take an SVD over a PVD.
	            if (!this$1._pvd || this$1._pvd.type() !== 2 /* SupplementaryVolumeDescriptor */) {
	                this$1._pvd = v;
	            }
	        });
	        this._root = this._pvd.rootDirectoryEntry(data);
	        this._name = name;
	    }
	
	    if ( SynchronousFileSystem$$1 ) IsoFS.__proto__ = SynchronousFileSystem$$1;
	    IsoFS.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    IsoFS.prototype.constructor = IsoFS;
	    /**
	     * Creates an IsoFS instance with the given options.
	     */
	    IsoFS.Create = function Create (opts, cb) {
	        var fs;
	        var e;
	        try {
	            fs = new IsoFS(opts.data, opts.name, false);
	        }
	        catch (e) {
	            e = e;
	        }
	        finally {
	            cb(e, fs);
	        }
	    };
	    IsoFS.isAvailable = function isAvailable () {
	        return true;
	    };
	    IsoFS.prototype.getName = function getName () {
	        var name = "IsoFS" + (this._name) + (this._pvd ? ("-" + (this._pvd.name())) : '');
	        if (this._root && this._root.hasRockRidge()) {
	            name += "-RockRidge";
	        }
	        return name;
	    };
	    IsoFS.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        // Read-only file system.
	        cb(this._data.length, 0);
	    };
	    IsoFS.prototype.isReadOnly = function isReadOnly () {
	        return true;
	    };
	    IsoFS.prototype.supportsLinks = function supportsLinks () {
	        return false;
	    };
	    IsoFS.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    IsoFS.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    IsoFS.prototype.statSync = function statSync (p, isLstat) {
	        var record = this._getDirectoryRecord(p);
	        if (record === null) {
	            throw ApiError.ENOENT(p);
	        }
	        return this._getStats(p, record);
	    };
	    IsoFS.prototype.openSync = function openSync (p, flags, mode) {
	        // INVARIANT: Cannot write to RO file systems.
	        if (flags.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, p);
	        }
	        // Check if the path exists, and is a file.
	        var record = this._getDirectoryRecord(p);
	        if (!record) {
	            throw ApiError.ENOENT(p);
	        }
	        else if (record.isSymlink(this._data)) {
	            return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
	        }
	        else if (!record.isDirectory(this._data)) {
	            var data = record.getFile(this._data);
	            var stats = this._getStats(p, record);
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    throw ApiError.EEXIST(p);
	                case ActionType.NOP:
	                    return new NoSyncFile(this, p, flags, stats, data);
	                default:
	                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
	            }
	        }
	        else {
	            throw ApiError.EISDIR(p);
	        }
	    };
	    IsoFS.prototype.readdirSync = function readdirSync (path$$1) {
	        // Check if it exists.
	        var record = this._getDirectoryRecord(path$$1);
	        if (!record) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (record.isDirectory(this._data)) {
	            return record.getDirectory(this._data).getFileList().slice(0);
	        }
	        else {
	            throw ApiError.ENOTDIR(path$$1);
	        }
	    };
	    /**
	     * Specially-optimized readfile.
	     */
	    IsoFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	        // Get file.
	        var fd = this.openSync(fname, flag, 0x1a4);
	        try {
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                return copyingSlice(fdBuff);
	            }
	            return fdBuff.toString(encoding);
	        }
	        finally {
	            fd.closeSync();
	        }
	    };
	    IsoFS.prototype._getDirectoryRecord = function _getDirectoryRecord (path$$1) {
	        var this$1 = this;
	
	        // Special case.
	        if (path$$1 === '/') {
	            return this._root;
	        }
	        var components = path$$1.split('/').slice(1);
	        var dir = this._root;
	        for (var i = 0, list = components; i < list.length; i += 1) {
	            var component = list[i];
	
	            if (dir.isDirectory(this$1._data)) {
	                dir = dir.getDirectory(this$1._data).getRecord(component);
	                if (!dir) {
	                    return null;
	                }
	            }
	            else {
	                return null;
	            }
	        }
	        return dir;
	    };
	    IsoFS.prototype._getStats = function _getStats (p, record) {
	        if (record.isSymlink(this._data)) {
	            var newP = path.resolve(p, record.getSymlinkPath(this._data));
	            var dirRec = this._getDirectoryRecord(newP);
	            if (!dirRec) {
	                return null;
	            }
	            return this._getStats(newP, dirRec);
	        }
	        else {
	            var len = record.dataLength();
	            var mode = 0x16D;
	            var date = record.recordingDate();
	            var atime = date;
	            var mtime = date;
	            var ctime = date;
	            if (record.hasRockRidge()) {
	                var entries = record.getSUEntries(this._data);
	                for (var i = 0, list = entries; i < list.length; i += 1) {
	                    var entry = list[i];
	
	                    if (entry instanceof PXEntry) {
	                        mode = entry.mode();
	                    }
	                    else if (entry instanceof TFEntry) {
	                        var flags = entry.flags();
	                        if (flags & 4 /* ACCESS */) {
	                            atime = entry.access();
	                        }
	                        if (flags & 2 /* MODIFY */) {
	                            mtime = entry.modify();
	                        }
	                        if (flags & 1 /* CREATION */) {
	                            ctime = entry.creation();
	                        }
	                    }
	                }
	            }
	            // Mask out writeable flags. This is a RO file system.
	            mode = mode & 0x16D;
	            return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
	        }
	    };
	
	    return IsoFS;
	}(SynchronousFileSystem));
	
	IsoFS.Name = "IsoFS";
	IsoFS.Options = {
	    data: {
	        type: "object",
	        description: "The ISO file in a buffer",
	        validator: bufferValidator
	    }
	};
	
	// Monkey-patch `Create` functions to check options before file system initialization.
	[AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function (fsType) {
	    var create = fsType.Create;
	    fsType.Create = function (opts, cb) {
	        var oneArg = typeof (opts) === "function";
	        var normalizedCb = oneArg ? opts : cb;
	        var normalizedOpts = oneArg ? {} : opts;
	        function wrappedCb(e) {
	            if (e) {
	                normalizedCb(e);
	            }
	            else {
	                create.call(fsType, normalizedOpts, normalizedCb);
	            }
	        }
	        checkOptions(fsType, normalizedOpts, wrappedCb);
	    };
	});
	/**
	 * @hidden
	 */
	var Backends = { AsyncMirror: AsyncMirror, Dropbox: DropboxFileSystem, Emscripten: EmscriptenFileSystem, FolderAdapter: FolderAdapter, HTML5FS: HTML5FS, InMemory: InMemoryFileSystem, IndexedDB: IndexedDBFileSystem, IsoFS: IsoFS, LocalStorage: LocalStorageFileSystem, MountableFileSystem: MountableFileSystem, OverlayFS: OverlayFS, WorkerFS: WorkerFS, XmlHttpRequest: XmlHttpRequest, ZipFS: ZipFS };
	
	/**
	 * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
	 * Due to limitations in typedoc, we document these functions in ./typedoc.ts.
	 */
	if (process['initializeTTYs']) {
	    process['initializeTTYs']();
	}
	/**
	 * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,
	 * and a Node process polyfill as the global `process` variable.
	 */
	function install(obj) {
	    obj.Buffer = Buffer;
	    obj.process = process;
	    var oldRequire = obj.require ? obj.require : null;
	    // Monkey-patch require for Node-style code.
	    obj.require = function (arg) {
	        var rv = BFSRequire(arg);
	        if (!rv) {
	            return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
	        }
	        else {
	            return rv;
	        }
	    };
	}
	/**
	 * @hidden
	 */
	function registerFileSystem(name, fs) {
	    Backends[name] = fs;
	}
	function BFSRequire(module) {
	    switch (module) {
	        case 'fs':
	            return _fsMock;
	        case 'path':
	            return path;
	        case 'buffer':
	            // The 'buffer' module has 'Buffer' as a property.
	            return buffer;
	        case 'process':
	            return process;
	        case 'bfs_utils':
	            return BFSUtils;
	        default:
	            return Backends[module];
	    }
	}
	/**
	 * Initializes BrowserFS with the given root file system.
	 */
	function initialize(rootfs) {
	    return _fsMock.initialize(rootfs);
	}
	/**
	 * Creates a file system with the given configuration, and initializes BrowserFS with it.
	 * See the FileSystemConfiguration type for more info on the configuration object.
	 */
	function configure(config, cb) {
	    getFileSystem(config, function (e, fs) {
	        if (fs) {
	            initialize(fs);
	            cb();
	        }
	        else {
	            cb(e);
	        }
	    });
	}
	/**
	 * Retrieve a file system with the given configuration.
	 * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.
	 * @param cb Called when the file system is constructed, or when an error occurs.
	 */
	function getFileSystem(config, cb) {
	    var fsName = config['fs'];
	    if (!fsName) {
	        return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
	    }
	    var options = config['options'];
	    var waitCount = 0;
	    var called = false;
	    function finish() {
	        if (!called) {
	            called = true;
	            var fsc = Backends[fsName];
	            if (!fsc) {
	                cb(new ApiError(ErrorCode.EPERM, ("File system " + fsName + " is not available in BrowserFS.")));
	            }
	            else {
	                fsc.Create(options, cb);
	            }
	        }
	    }
	    if (options !== null && typeof (options) === "object") {
	        var finishedIterating = false;
	        var props = Object.keys(options).filter(function (k) { return k !== 'fs'; });
	        // Check recursively if other fields have 'fs' properties.
	        props.forEach(function (p) {
	            var d = options[p];
	            if (d !== null && typeof (d) === "object" && d['fs']) {
	                waitCount++;
	                getFileSystem(d, function (e, fs) {
	                    waitCount--;
	                    if (e) {
	                        if (called) {
	                            return;
	                        }
	                        called = true;
	                        cb(e);
	                    }
	                    else {
	                        options[p] = fs;
	                        if (waitCount === 0 && finishedIterating) {
	                            finish();
	                        }
	                    }
	                });
	            }
	        });
	        finishedIterating = true;
	    }
	    if (waitCount === 0) {
	        finish();
	    }
	}
	
	/**
	 * BrowserFS's main entry point.
	 * It installs all of the needed polyfills, and requires() the main module.
	 */
	// IE substr does not support negative indices
	if ('ab'.substr(-1) !== 'b') {
	    String.prototype.substr = function (substr) {
	        return function (start, length) {
	            // did we get a negative start, calculate how much it is from the
	            // beginning of the string
	            if (start < 0) {
	                start = this.length + start;
	            }
	            // call the original function
	            return substr.call(this, start, length);
	        };
	    }(String.prototype.substr);
	}
	// Polyfill for Uint8Array.prototype.slice.
	// Safari and some other browsers do not define it.
	if (typeof (ArrayBuffer) !== 'undefined' && typeof (Uint8Array) !== 'undefined') {
	    if (!Uint8Array.prototype['slice']) {
	        Uint8Array.prototype.slice = function (start, end) {
	            if ( start === void 0 ) start = 0;
	            if ( end === void 0 ) end = this.length;
	
	            var self = this;
	            if (start < 0) {
	                start = this.length + start;
	                if (start < 0) {
	                    start = 0;
	                }
	            }
	            if (end < 0) {
	                end = this.length + end;
	                if (end < 0) {
	                    end = 0;
	                }
	            }
	            if (end < start) {
	                end = start;
	            }
	            return new Uint8Array(self.buffer, self.byteOffset + start, end - start);
	        };
	    }
	}
	
	exports.install = install;
	exports.registerFileSystem = registerFileSystem;
	exports.BFSRequire = BFSRequire;
	exports.initialize = initialize;
	exports.configure = configure;
	exports.getFileSystem = getFileSystem;
	exports.EmscriptenFS = BFSEmscriptenFS;
	exports.FileSystem = Backends;
	exports.Errors = api_error;
	exports.setImmediate = setImmediate$3;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }()), __webpack_require__(5)(module), __webpack_require__(6)))

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2).Buffer;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(3)
	var ieee754 = __webpack_require__(4)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	var K_MAX_LENGTH = 0x7fffffff
	exports.kMaxLength = K_MAX_LENGTH
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
	
	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	  console.error(
	    'This browser lacks typed array (Uint8Array) support which is required by ' +
	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  )
	}
	
	function typedArraySupport () {
	  // Can typed array instances can be augmented?
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}
	
	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
	    throw new RangeError('Invalid typed array length')
	  }
	  // Return an augmented `Uint8Array` instance
	  var buf = new Uint8Array(length)
	  buf.__proto__ = Buffer.prototype
	  return buf
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}
	
	// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	if (typeof Symbol !== 'undefined' && Symbol.species &&
	    Buffer[Symbol.species] === Buffer) {
	  Object.defineProperty(Buffer, Symbol.species, {
	    value: null,
	    configurable: true,
	    enumerable: false,
	    writable: false
	  })
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (isArrayBuffer(value)) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset)
	  }
	
	  return fromObject(value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	}
	
	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Buffer.prototype.__proto__ = Uint8Array.prototype
	Buffer.__proto__ = Uint8Array
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(size).fill(fill, encoding)
	      : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	}
	
	function allocUnsafe (size) {
	  assertSize(size)
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	}
	
	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  var buf = createBuffer(length)
	
	  var actual = buf.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    buf = buf.slice(0, actual)
	  }
	
	  return buf
	}
	
	function fromArrayLike (array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  var buf = createBuffer(length)
	  for (var i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255
	  }
	  return buf
	}
	
	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  var buf
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array)
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset)
	  } else {
	    buf = new Uint8Array(array, byteOffset, length)
	  }
	
	  // Return an augmented `Uint8Array` instance
	  buf.__proto__ = Buffer.prototype
	  return buf
	}
	
	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    var buf = createBuffer(len)
	
	    if (buf.length === 0) {
	      return buf
	    }
	
	    obj.copy(buf, 0, 0, len)
	    return buf
	  }
	
	  if (obj) {
	    if (isArrayBufferView(obj) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	        return createBuffer(0)
	      }
	      return fromArrayLike(obj)
	    }
	
	    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	      return fromArrayLike(obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (isArrayBufferView(string) || isArrayBuffer(string)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (numberIsNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (numberIsNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset >>> 0
	    if (isFinite(length)) {
	      length = length >>> 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf = this.subarray(start, end)
	  // Return an augmented `Uint8Array` instance
	  newBuf.__proto__ = Buffer.prototype
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  this[offset] = (value >>> 8)
	  this[offset + 1] = (value & 0xff)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  this[offset + 3] = (value >>> 24)
	  this[offset + 2] = (value >>> 16)
	  this[offset + 1] = (value >>> 8)
	  this[offset] = (value & 0xff)
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  this[offset] = (value >>> 24)
	  this[offset + 1] = (value >>> 16)
	  this[offset + 2] = (value >>> 8)
	  this[offset + 3] = (value & 0xff)
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  this[offset] = (value >>> 8)
	  this[offset + 1] = (value & 0xff)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  this[offset + 2] = (value >>> 16)
	  this[offset + 3] = (value >>> 24)
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  this[offset] = (value >>> 24)
	  this[offset + 1] = (value >>> 16)
	  this[offset + 2] = (value >>> 8)
	  this[offset + 3] = (value & 0xff)
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : new Buffer(val, encoding)
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = str.trim().replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
	// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
	function isArrayBuffer (obj) {
	  return obj instanceof ArrayBuffer ||
	    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
	      typeof obj.byteLength === 'number')
	}
	
	// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
	function isArrayBufferView (obj) {
	  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
	}
	
	function numberIsNaN (obj) {
	  return obj !== obj // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 4 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Process = __webpack_require__(7);
	var process = new Process(), processProxy = {};
	function defineKey(key) {
	    if (processProxy[key]) {
	        // Probably a builtin Object property we don't care about.
	        return;
	    }
	    if (typeof process[key] === 'function') {
	        processProxy[key] = function () {
	            return process[key].apply(process, arguments);
	        };
	    }
	    else {
	        processProxy[key] = process[key];
	    }
	}
	for (var key in process) {
	    // Don't check if process.hasOwnProperty; we want to also expose objects
	    // up the prototype hierarchy.
	    defineKey(key);
	}
	// Special key: Ensure we update public-facing values of stdin/stdout/stderr.
	processProxy.initializeTTYs = function () {
	    if (process.stdin === null) {
	        process.initializeTTYs();
	        processProxy.stdin = process.stdin;
	        processProxy.stdout = process.stdout;
	        processProxy.stderr = process.stderr;
	    }
	};
	process.nextTick(function () {
	    processProxy.initializeTTYs();
	});
	module.exports = processProxy;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var events = __webpack_require__(8);
	// Path depends on process. Avoid a circular reference by dynamically including path when we need it.
	var path = null;
	var Item = (function () {
	    function Item(fun, array) {
	        this.fun = fun;
	        this.array = array;
	    }
	    Item.prototype.run = function () {
	        this.fun.apply(null, this.array);
	    };
	    return Item;
	}());
	/**
	 * Contains a queue of Items for process.nextTick.
	 * Inspired by node-process: https://github.com/defunctzombie/node-process
	 */
	var NextTickQueue = (function () {
	    function NextTickQueue() {
	        this._queue = [];
	        this._draining = false;
	        // Used/assigned by the drainQueue function.
	        this._currentQueue = null;
	        this._queueIndex = -1;
	    }
	    NextTickQueue.prototype.push = function (item) {
	        var _this = this;
	        if (this._queue.push(item) === 1 && !this._draining) {
	            setTimeout(function () { return _this._drainQueue(); }, 0);
	        }
	    };
	    NextTickQueue.prototype._cleanUpNextTick = function () {
	        this._draining = false;
	        if (this._currentQueue && this._currentQueue.length) {
	            this._queue = this._currentQueue.concat(this._queue);
	        }
	        else {
	            this._queueIndex = -1;
	        }
	        if (this._queue.length) {
	            this._drainQueue();
	        }
	    };
	    NextTickQueue.prototype._drainQueue = function () {
	        var _this = this;
	        if (this._draining) {
	            return;
	        }
	        // If an Item throws an unhandled exception, this function will clean things up.
	        var timeout = setTimeout(function () { return _this._cleanUpNextTick(); });
	        this._draining = true;
	        var len = this._queue.length;
	        while (len) {
	            this._currentQueue = this._queue;
	            this._queue = [];
	            while (++this._queueIndex < len) {
	                if (this._currentQueue) {
	                    this._currentQueue[this._queueIndex].run();
	                }
	            }
	            this._queueIndex = -1;
	            len = this._queue.length;
	        }
	        this._currentQueue = null;
	        this._draining = false;
	        clearTimeout(timeout);
	    };
	    return NextTickQueue;
	}());
	/**
	 * Partial implementation of Node's `process` module.
	 * We implement the portions that are relevant for the filesystem.
	 * @see http://nodejs.org/api/process.html
	 * @class
	 */
	var Process = (function (_super) {
	    __extends(Process, _super);
	    function Process() {
	        _super.apply(this, arguments);
	        this.startTime = Date.now();
	        this._cwd = '/';
	        /**
	         * Returns what platform you are running on.
	         * @return [String]
	         */
	        this.platform = 'browser';
	        this.argv = [];
	        this.execArgv = [];
	        this.stdout = null;
	        this.stderr = null;
	        this.stdin = null;
	        this.domain = null;
	        this._queue = new NextTickQueue();
	        this.execPath = __dirname;
	        this.env = {};
	        this.exitCode = 0;
	        this._gid = 1;
	        this._uid = 1;
	        this.version = 'v5.0';
	        this.versions = {
	            http_parser: '0.0',
	            node: '5.0',
	            v8: '0.0',
	            uv: '0.0',
	            zlib: '0.0',
	            ares: '0.0',
	            icu: '0.0',
	            modules: '0',
	            openssl: '0.0'
	        };
	        this.config = {
	            target_defaults: { cflags: [],
	                default_configuration: 'Release',
	                defines: [],
	                include_dirs: [],
	                libraries: [] },
	            variables: { clang: 0,
	                host_arch: 'x32',
	                node_install_npm: false,
	                node_install_waf: false,
	                node_prefix: '',
	                node_shared_cares: false,
	                node_shared_http_parser: false,
	                node_shared_libuv: false,
	                node_shared_zlib: false,
	                node_shared_v8: false,
	                node_use_dtrace: false,
	                node_use_etw: false,
	                node_use_openssl: false,
	                node_shared_openssl: false,
	                strict_aliasing: false,
	                target_arch: 'x32',
	                v8_use_snapshot: false,
	                v8_no_strict_aliasing: 0,
	                visibility: '' } };
	        this.pid = (Math.random() * 1000) | 0;
	        this.title = 'node';
	        this.arch = 'x32';
	        this._mask = 18;
	        // Undefined in main thread. Worker-only.
	        this.connected = undefined;
	    }
	    /**
	     * Changes the current working directory.
	     *
	     * **Note**: BrowserFS does not validate that the directory actually exists.
	     *
	     * @example Usage example
	     *   console.log('Starting directory: ' + process.cwd());
	     *   process.chdir('/tmp');
	     *   console.log('New directory: ' + process.cwd());
	     * @param [String] dir The directory to change to.
	     */
	    Process.prototype.chdir = function (dir) {
	        // XXX: Circular dependency hack.
	        if (path === null) {
	            path = __webpack_require__(9);
	        }
	        this._cwd = path.resolve(dir);
	    };
	    /**
	     * Returns the current working directory.
	     * @example Usage example
	     *   console.log('Current directory: ' + process.cwd());
	     * @return [String] The current working directory.
	     */
	    Process.prototype.cwd = function () {
	        return this._cwd;
	    };
	    /**
	     * Number of seconds BrowserFS has been running.
	     * @return [Number]
	     */
	    Process.prototype.uptime = function () {
	        return ((Date.now() - this.startTime) / 1000) | 0;
	    };
	    Process.prototype.nextTick = function (fun) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        this._queue.push(new Item(fun, args));
	    };
	    Process.prototype.abort = function () {
	        this.emit('abort');
	    };
	    Process.prototype.exit = function (code) {
	        this.exitCode = code;
	        this.emit('exit', [code]);
	    };
	    Process.prototype.getgid = function () {
	        return this._gid;
	    };
	    Process.prototype.setgid = function (gid) {
	        if (typeof gid === 'number') {
	            this._gid = gid;
	        }
	        else {
	            this._gid = 1;
	        }
	    };
	    Process.prototype.getuid = function () {
	        return this._uid;
	    };
	    Process.prototype.setuid = function (uid) {
	        if (typeof uid === 'number') {
	            this._uid = uid;
	        }
	        else {
	            this._uid = 1;
	        }
	    };
	    Process.prototype.kill = function (pid, signal) {
	        this.emit('kill', [pid, signal]);
	    };
	    Process.prototype.memoryUsage = function () {
	        return { rss: 0, heapTotal: 0, heapUsed: 0 };
	    };
	    Process.prototype.umask = function (mask) {
	        if (mask === void 0) { mask = this._mask; }
	        var oldMask = this._mask;
	        this._mask = mask;
	        this.emit('umask', [mask]);
	        return oldMask;
	    };
	    Process.prototype.hrtime = function () {
	        var timeinfo;
	        if (typeof performance !== 'undefined') {
	            timeinfo = performance.now();
	        }
	        else if (Date['now']) {
	            timeinfo = Date.now();
	        }
	        else {
	            timeinfo = (new Date()).getTime();
	        }
	        var secs = (timeinfo / 1000) | 0;
	        timeinfo -= secs * 1000;
	        timeinfo = (timeinfo * 1000000) | 0;
	        return [secs, timeinfo];
	    };
	    /**
	     * [BFS only] Initialize the TTY devices.
	     */
	    Process.prototype.initializeTTYs = function () {
	        // Guard against multiple invocations.
	        if (this.stdout === null) {
	            var TTY = __webpack_require__(10);
	            this.stdout = new TTY();
	            this.stderr = new TTY();
	            this.stdin = new TTY();
	        }
	    };
	    /**
	     * Worker-only function; irrelevant here.
	     */
	    Process.prototype.disconnect = function () {
	    };
	    return Process;
	}(events.EventEmitter));
	module.exports = Process;
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 8 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	function posixSplitPath(filename) {
	    var out = splitPathRe.exec(filename);
	    out.shift();
	    return out;
	}
	/**
	 * Emulates Node's `path` module. This module contains utilities for handling and
	 * transforming file paths. **All** of these methods perform only string
	 * transformations. The file system is not consulted to check whether paths are
	 * valid.
	 * @see http://nodejs.org/api/path.html
	 * @class
	 */
	var path = (function () {
	    function path() {
	    }
	    /**
	     * Normalize a string path, taking care of '..' and '.' parts.
	     *
	     * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
	     * @example Usage example
	     *   path.normalize('/foo/bar//baz/asdf/quux/..')
	     *   // returns
	     *   '/foo/bar/baz/asdf'
	     * @param [String] p The path to normalize.
	     * @return [String]
	     */
	    path.normalize = function (p) {
	        // Special case: '' -> '.'
	        if (p === '') {
	            p = '.';
	        }
	        // It's very important to know if the path is relative or not, since it
	        // changes how we process .. and reconstruct the split string.
	        var absolute = p.charAt(0) === path.sep;
	        // Remove repeated //s
	        p = path._removeDuplicateSeps(p);
	        // Try to remove as many '../' as possible, and remove '.' completely.
	        var components = p.split(path.sep);
	        var goodComponents = [];
	        for (var idx = 0; idx < components.length; idx++) {
	            var c = components[idx];
	            if (c === '.') {
	                continue;
	            }
	            else if (c === '..' && (absolute || (!absolute && goodComponents.length > 0 && goodComponents[0] !== '..'))) {
	                // In the absolute case: Path is relative to root, so we may pop even if
	                // goodComponents is empty (e.g. /../ => /)
	                // In the relative case: We're getting rid of a directory that preceded
	                // it (e.g. /foo/../bar -> /bar)
	                goodComponents.pop();
	            }
	            else {
	                goodComponents.push(c);
	            }
	        }
	        // Add in '.' when it's a relative path with no other nonempty components.
	        // Possible results: '.' and './' (input: [''] or [])
	        // @todo Can probably simplify this logic.
	        if (!absolute && goodComponents.length < 2) {
	            switch (goodComponents.length) {
	                case 1:
	                    if (goodComponents[0] === '') {
	                        goodComponents.unshift('.');
	                    }
	                    break;
	                default:
	                    goodComponents.push('.');
	            }
	        }
	        p = goodComponents.join(path.sep);
	        if (absolute && p.charAt(0) !== path.sep) {
	            p = path.sep + p;
	        }
	        return p;
	    };
	    /**
	     * Join all arguments together and normalize the resulting path.
	     *
	     * Arguments must be strings.
	     * @example Usage
	     *   path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
	     *   // returns
	     *   '/foo/bar/baz/asdf'
	     *
	     *   path.join('foo', {}, 'bar')
	     *   // throws exception
	     *   TypeError: Arguments to path.join must be strings
	     * @param [String,...] paths Each component of the path
	     * @return [String]
	     */
	    path.join = function () {
	        var paths = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            paths[_i - 0] = arguments[_i];
	        }
	        // Required: Prune any non-strings from the path. I also prune empty segments
	        // so we can do a simple join of the array.
	        var processed = [];
	        for (var i = 0; i < paths.length; i++) {
	            var segment = paths[i];
	            if (typeof segment !== 'string') {
	                throw new TypeError("Invalid argument type to path.join: " + (typeof segment));
	            }
	            else if (segment !== '') {
	                processed.push(segment);
	            }
	        }
	        return path.normalize(processed.join(path.sep));
	    };
	    /**
	     * Resolves to to an absolute path.
	     *
	     * If to isn't already absolute from arguments are prepended in right to left
	     * order, until an absolute path is found. If after using all from paths still
	     * no absolute path is found, the current working directory is used as well.
	     * The resulting path is normalized, and trailing slashes are removed unless
	     * the path gets resolved to the root directory. Non-string arguments are
	     * ignored.
	     *
	     * Another way to think of it is as a sequence of cd commands in a shell.
	     *
	     *     path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')
	     *
	     * Is similar to:
	     *
	     *     cd foo/bar
	     *     cd /tmp/file/
	     *     cd ..
	     *     cd a/../subfile
	     *     pwd
	     *
	     * The difference is that the different paths don't need to exist and may also
	     * be files.
	     * @example Usage example
	     *   path.resolve('/foo/bar', './baz')
	     *   // returns
	     *   '/foo/bar/baz'
	     *
	     *   path.resolve('/foo/bar', '/tmp/file/')
	     *   // returns
	     *   '/tmp/file'
	     *
	     *   path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')
	     *   // if currently in /home/myself/node, it returns
	     *   '/home/myself/node/wwwroot/static_files/gif/image.gif'
	     * @param [String,...] paths
	     * @return [String]
	     */
	    path.resolve = function () {
	        var paths = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            paths[_i - 0] = arguments[_i];
	        }
	        // Monitor for invalid paths, throw out empty paths, and look for the *last*
	        // absolute path that we see.
	        var processed = [];
	        for (var i = 0; i < paths.length; i++) {
	            var p = paths[i];
	            if (typeof p !== 'string') {
	                throw new TypeError("Invalid argument type to path.join: " + (typeof p));
	            }
	            else if (p !== '') {
	                // Remove anything that has occurred before this absolute path, as it
	                // doesn't matter.
	                if (p.charAt(0) === path.sep) {
	                    processed = [];
	                }
	                processed.push(p);
	            }
	        }
	        // Special: Remove trailing slash unless it's the root
	        var resolved = path.normalize(processed.join(path.sep));
	        if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path.sep) {
	            return resolved.substr(0, resolved.length - 1);
	        }
	        // Special: If it doesn't start with '/', it's relative and we need to append
	        // the current directory.
	        if (resolved.charAt(0) !== path.sep) {
	            // Remove ./, since we're going to append the current directory.
	            if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === path.sep)) {
	                resolved = resolved.length === 1 ? '' : resolved.substr(2);
	            }
	            // Append the current directory, which *must* be an absolute path.
	            var cwd = process.cwd();
	            if (resolved !== '') {
	                // cwd will never end in a /... unless it's the root.
	                resolved = this.normalize(cwd + (cwd !== '/' ? path.sep : '') + resolved);
	            }
	            else {
	                resolved = cwd;
	            }
	        }
	        return resolved;
	    };
	    /**
	     * Solve the relative path from from to to.
	     *
	     * At times we have two absolute paths, and we need to derive the relative path
	     * from one to the other. This is actually the reverse transform of
	     * path.resolve, which means we see that:
	     *
	     *    path.resolve(from, path.relative(from, to)) == path.resolve(to)
	     *
	     * @example Usage example
	     *   path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb')
	     *   // returns
	     *   '..\\..\\impl\\bbb'
	     *
	     *   path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
	     *   // returns
	     *   '../../impl/bbb'
	     * @param [String] from
	     * @param [String] to
	     * @return [String]
	     */
	    path.relative = function (from, to) {
	        var i;
	        // Alright. Let's resolve these two to absolute paths and remove any
	        // weirdness.
	        from = path.resolve(from);
	        to = path.resolve(to);
	        var fromSegs = from.split(path.sep);
	        var toSegs = to.split(path.sep);
	        // Remove the first segment on both, as it's '' (both are absolute paths)
	        toSegs.shift();
	        fromSegs.shift();
	        // There are two segments to this path:
	        // * Going *up* the directory hierarchy with '..'
	        // * Going *down* the directory hierarchy with foo/baz/bat.
	        var upCount = 0;
	        var downSegs = [];
	        // Figure out how many things in 'from' are shared with 'to'.
	        for (i = 0; i < fromSegs.length; i++) {
	            var seg = fromSegs[i];
	            if (seg === toSegs[i]) {
	                continue;
	            }
	            // The rest of 'from', including the current element, indicates how many
	            // directories we need to go up.
	            upCount = fromSegs.length - i;
	            break;
	        }
	        // The rest of 'to' indicates where we need to change to. We place this
	        // outside of the loop, as toSegs.length may be greater than fromSegs.length.
	        downSegs = toSegs.slice(i);
	        // Special case: If 'from' is '/'
	        if (fromSegs.length === 1 && fromSegs[0] === '') {
	            upCount = 0;
	        }
	        // upCount can't be greater than the number of fromSegs
	        // (cd .. from / is still /)
	        if (upCount > fromSegs.length) {
	            upCount = fromSegs.length;
	        }
	        // Create the final string!
	        var rv = '';
	        for (i = 0; i < upCount; i++) {
	            rv += '../';
	        }
	        rv += downSegs.join(path.sep);
	        // Special case: Remove trailing '/'. Happens if it's all up and no down.
	        if (rv.length > 1 && rv.charAt(rv.length - 1) === path.sep) {
	            rv = rv.substr(0, rv.length - 1);
	        }
	        return rv;
	    };
	    /**
	     * Return the directory name of a path. Similar to the Unix `dirname` command.
	     *
	     * Note that BrowserFS does not validate if the path is actually a valid
	     * directory.
	     * @example Usage example
	     *   path.dirname('/foo/bar/baz/asdf/quux')
	     *   // returns
	     *   '/foo/bar/baz/asdf'
	     * @param [String] p The path to get the directory name of.
	     * @return [String]
	     */
	    path.dirname = function (p) {
	        // We get rid of //, but we don't modify anything else (e.g. any extraneous .
	        // and ../ are kept intact)
	        p = path._removeDuplicateSeps(p);
	        var absolute = p.charAt(0) === path.sep;
	        var sections = p.split(path.sep);
	        // Do 1 if it's /foo/bar, 2 if it's /foo/bar/
	        if (sections.pop() === '' && sections.length > 0) {
	            sections.pop();
	        }
	        // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.
	        // If not absolute, the first section is the first part of the path, and is OK
	        // to return.
	        if (sections.length > 1 || (sections.length === 1 && !absolute)) {
	            return sections.join(path.sep);
	        }
	        else if (absolute) {
	            return path.sep;
	        }
	        else {
	            return '.';
	        }
	    };
	    /**
	     * Return the last portion of a path. Similar to the Unix basename command.
	     * @example Usage example
	     *   path.basename('/foo/bar/baz/asdf/quux.html')
	     *   // returns
	     *   'quux.html'
	     *
	     *   path.basename('/foo/bar/baz/asdf/quux.html', '.html')
	     *   // returns
	     *   'quux'
	     * @param [String] p
	     * @param [String?] ext
	     * @return [String]
	     */
	    path.basename = function (p, ext) {
	        if (ext === void 0) { ext = ""; }
	        // Special case: Normalize will modify this to '.'
	        if (p === '') {
	            return p;
	        }
	        // Normalize the string first to remove any weirdness.
	        p = path.normalize(p);
	        // Get the last part of the string.
	        var sections = p.split(path.sep);
	        var lastPart = sections[sections.length - 1];
	        // Special case: If it's empty, then we have a string like so: foo/
	        // Meaning, 'foo' is guaranteed to be a directory.
	        if (lastPart === '' && sections.length > 1) {
	            return sections[sections.length - 2];
	        }
	        // Remove the extension, if need be.
	        if (ext.length > 0) {
	            var lastPartExt = lastPart.substr(lastPart.length - ext.length);
	            if (lastPartExt === ext) {
	                return lastPart.substr(0, lastPart.length - ext.length);
	            }
	        }
	        return lastPart;
	    };
	    /**
	     * Return the extension of the path, from the last '.' to end of string in the
	     * last portion of the path. If there is no '.' in the last portion of the path
	     * or the first character of it is '.', then it returns an empty string.
	     * @example Usage example
	     *   path.extname('index.html')
	     *   // returns
	     *   '.html'
	     *
	     *   path.extname('index.')
	     *   // returns
	     *   '.'
	     *
	     *   path.extname('index')
	     *   // returns
	     *   ''
	     * @param [String] p
	     * @return [String]
	     */
	    path.extname = function (p) {
	        p = path.normalize(p);
	        var sections = p.split(path.sep);
	        p = sections.pop();
	        // Special case: foo/file.ext/ should return '.ext'
	        if (p === '' && sections.length > 0) {
	            p = sections.pop();
	        }
	        if (p === '..') {
	            return '';
	        }
	        var i = p.lastIndexOf('.');
	        if (i === -1 || i === 0) {
	            return '';
	        }
	        return p.substr(i);
	    };
	    /**
	     * Checks if the given path is an absolute path.
	     *
	     * Despite not being documented, this is a tested part of Node's path API.
	     * @param [String] p
	     * @return [Boolean] True if the path appears to be an absolute path.
	     */
	    path.isAbsolute = function (p) {
	        return p.length > 0 && p.charAt(0) === path.sep;
	    };
	    /**
	     * Unknown. Undocumented.
	     */
	    path._makeLong = function (p) {
	        return p;
	    };
	    /**
	     * Returns an object from a path string.
	     */
	    path.parse = function (p) {
	        var allParts = posixSplitPath(p);
	        return {
	            root: allParts[0],
	            dir: allParts[0] + allParts[1].slice(0, -1),
	            base: allParts[2],
	            ext: allParts[3],
	            name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
	        };
	    };
	    path.format = function (pathObject) {
	        if (pathObject === null || typeof pathObject !== 'object') {
	            throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
	        }
	        var root = pathObject.root || '';
	        if (typeof root !== 'string') {
	            throw new TypeError("'pathObject.root' must be a string or undefined, not " +
	                typeof pathObject.root);
	        }
	        var dir = pathObject.dir ? pathObject.dir + path.sep : '';
	        var base = pathObject.base || '';
	        return dir + base;
	    };
	    path._removeDuplicateSeps = function (p) {
	        p = p.replace(this._replaceRegex, this.sep);
	        return p;
	    };
	    // The platform-specific file separator. BrowserFS uses `/`.
	    path.sep = '/';
	    path._replaceRegex = new RegExp("//+", 'g');
	    // The platform-specific path delimiter. BrowserFS uses `:`.
	    path.delimiter = ':';
	    path.posix = path;
	    // XXX: Typing hack. We don't actually support win32.
	    path.win32 = path;
	    return path;
	}());
	var _ = path;
	module.exports = path;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var stream = __webpack_require__(11);
	var TTY = (function (_super) {
	    __extends(TTY, _super);
	    function TTY() {
	        _super.call(this);
	        this.isRaw = false;
	        this.columns = 80;
	        this.rows = 120;
	        this.isTTY = true;
	        this._bufferedWrites = [];
	        this._waitingForWrites = false;
	    }
	    /**
	     * Toggle raw mode.
	     */
	    TTY.prototype.setRawMode = function (mode) {
	        if (this.isRaw !== mode) {
	            this.isRaw = mode;
	            // [BFS] TTY implementations can use this to change their event emitting
	            //       patterns.
	            this.emit('modeChange');
	        }
	    };
	    /**
	     * [BFS] Update the number of columns available on the terminal.
	     */
	    TTY.prototype.changeColumns = function (columns) {
	        if (columns !== this.columns) {
	            this.columns = columns;
	            // Resize event.
	            this.emit('resize');
	        }
	    };
	    /**
	     * [BFS] Update the number of rows available on the terminal.
	     */
	    TTY.prototype.changeRows = function (rows) {
	        if (rows !== this.rows) {
	            this.rows = rows;
	            // Resize event.
	            this.emit('resize');
	        }
	    };
	    /**
	     * Returns 'true' if the given object is a TTY.
	     */
	    TTY.isatty = function (fd) {
	        return fd && fd instanceof TTY;
	    };
	    TTY.prototype._write = function (chunk, encoding, cb) {
	        var error;
	        try {
	            var data;
	            if (typeof (chunk) === 'string') {
	                data = new Buffer(chunk, encoding);
	            }
	            else {
	                data = chunk;
	            }
	            this._bufferedWrites.push(data);
	            if (this._waitingForWrites) {
	                this._read(1024);
	            }
	        }
	        catch (e) {
	            error = e;
	        }
	        finally {
	            cb(error);
	        }
	    };
	    TTY.prototype._read = function (size) {
	        // Size is advisory -- we can ignore it.
	        if (this._bufferedWrites.length === 0) {
	            this._waitingForWrites = true;
	        }
	        else {
	            while (this._bufferedWrites.length > 0) {
	                this._waitingForWrites = this.push(this._bufferedWrites.shift());
	                if (!this._waitingForWrites) {
	                    break;
	                }
	            }
	        }
	    };
	    return TTY;
	}(stream.Duplex));
	module.exports = TTY;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(8).EventEmitter;
	var inherits = __webpack_require__(12);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(13);
	Stream.Writable = __webpack_require__(27);
	Stream.Duplex = __webpack_require__(28);
	Stream.Transform = __webpack_require__(29);
	Stream.PassThrough = __webpack_require__(30);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 12 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(11); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(14);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(22);
	exports.Duplex = __webpack_require__(21);
	exports.Transform = __webpack_require__(25);
	exports.PassThrough = __webpack_require__(26);
	
	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(15);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(16);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(8).EventEmitter;
	
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(11);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(8).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(2).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(17);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(18);
	util.inherits = __webpack_require__(12);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(19);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(20);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(21);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(21);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __webpack_require__(2);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 19 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(2).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(17);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(15);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(18);
	util.inherits = __webpack_require__(12);
	/*</replacement>*/
	
	var Readable = __webpack_require__(14);
	var Writable = __webpack_require__(22);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(15);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(18);
	util.inherits = __webpack_require__(12);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(23)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(11);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(8).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(2).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(17);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(21);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(21);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = Buffer.isBuffer(chunk);
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    chunk = decodeChunk(state, chunk, encoding);
	    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 23 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(2).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(21);
	
	/*<replacement>*/
	var util = __webpack_require__(18);
	util.inherits = __webpack_require__(12);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(25);
	
	/*<replacement>*/
	var util = __webpack_require__(18);
	util.inherits = __webpack_require__(12);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(22)


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(21)


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(25)


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(26)


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var zlib_inflate = __webpack_require__(32);
	var utils        = __webpack_require__(33);
	var strings      = __webpack_require__(38);
	var c            = __webpack_require__(39);
	var msg          = __webpack_require__(40);
	var ZStream      = __webpack_require__(41);
	var GZheader     = __webpack_require__(42);
	
	var toString = Object.prototype.toString;
	
	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/
	
	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overriden.
	 **/
	
	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/
	
	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/
	
	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/
	
	
	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);
	
	  this.options = utils.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});
	
	  var opt = this.options;
	
	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }
	
	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }
	
	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }
	
	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data
	
	  this.strm   = new ZStream();
	  this.strm.avail_out = 0;
	
	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );
	
	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }
	
	  this.header = new GZheader();
	
	  zlib_inflate.inflateGetHeader(this.strm, this.header);
	}
	
	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;
	  var dict;
	
	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;
	
	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);
	
	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }
	
	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;
	
	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	
	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */
	
	    if (status === c.Z_NEED_DICT && dictionary) {
	      // Convert data if needed
	      if (typeof dictionary === 'string') {
	        dict = strings.string2buf(dictionary);
	      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
	        dict = new Uint8Array(dictionary);
	      } else {
	        dict = dictionary;
	      }
	
	      status = zlib_inflate.inflateSetDictionary(this.strm, dict);
	
	    }
	
	    if (status === c.Z_BUF_ERROR && allowBufError === true) {
	      status = c.Z_OK;
	      allowBufError = false;
	    }
	
	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	
	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {
	
	        if (this.options.to === 'string') {
	
	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
	
	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);
	
	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }
	
	          this.onData(utf8str);
	
	        } else {
	          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }
	
	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }
	
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
	
	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }
	
	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }
	
	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === c.Z_SYNC_FLUSH) {
	    this.onEnd(c.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }
	
	  return true;
	};
	
	
	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};
	
	
	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 alligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};
	
	
	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);
	
	  inflator.push(input, true);
	
	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }
	
	  return inflator.result;
	}
	
	
	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}
	
	
	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/
	
	
	exports.Inflate = Inflate;
	exports.inflate = inflate;
	exports.inflateRaw = inflateRaw;
	exports.ungzip  = inflate;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils         = __webpack_require__(33);
	var adler32       = __webpack_require__(34);
	var crc32         = __webpack_require__(35);
	var inflate_fast  = __webpack_require__(36);
	var inflate_table = __webpack_require__(37);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;
	
	/* The deflate compression method */
	var Z_DEFLATED  = 8;
	
	
	/* STATES ====================================================================*/
	/* ===========================================================================*/
	
	
	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
	
	/* ===========================================================================*/
	
	
	
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
	
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;
	
	
	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}
	
	
	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */
	
	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */
	
	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */
	
	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */
	
	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */
	
	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */
	
	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */
	
	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */
	
	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}
	
	function inflateResetKeep(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
	
	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}
	
	function inflateReset(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);
	
	}
	
	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;
	
	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }
	
	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }
	
	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}
	
	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;
	
	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */
	
	  state = new InflateState();
	
	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}
	
	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}
	
	
	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;
	
	var lenfix, distfix; // We have no pointers in JS, so keep tables separate
	
	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;
	
	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);
	
	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }
	
	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
	
	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }
	
	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
	
	    /* do this just once */
	    virgin = false;
	  }
	
	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}
	
	
	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.
	
	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;
	
	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;
	
	    state.window = new utils.Buf8(state.wsize);
	  }
	
	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}
	
	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;
	
	  var n; // temporary var for NEED_BITS
	
	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
	
	
	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }
	
	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */
	
	
	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---
	
	  _in = have;
	  _out = left;
	  ret = Z_OK;
	
	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//
	
	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;
	
	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }
	
	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }
	
	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }
	
	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }
	
	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---
	
	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
	
	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }
	
	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
	
	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */
	
	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---
	
	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}
	
	function inflateEnd(strm) {
	
	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}
	
	function inflateGetHeader(strm, head) {
	  var state;
	
	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
	
	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}
	
	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var state;
	  var dictid;
	  var ret;
	
	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}
	
	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';
	
	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';
	
	
	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');
	
	
	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }
	
	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }
	
	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }
	
	  return obj;
	};
	
	
	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};
	
	
	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;
	
	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }
	
	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }
	
	    return result;
	  }
	};
	
	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};
	
	
	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};
	
	exports.setTyped(TYPED_OK);


/***/ },
/* 34 */
/***/ function(module, exports) {

	'use strict';
	
	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.
	
	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;
	
	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;
	
	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);
	
	    s1 %= 65521;
	    s2 %= 65521;
	  }
	
	  return (s1 | (s2 << 16)) |0;
	}
	
	
	module.exports = adler32;


/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.
	
	
	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];
	
	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }
	
	  return table;
	}
	
	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();
	
	
	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;
	
	  crc ^= -1;
	
	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }
	
	  return (crc ^ (-1)); // >>> 0;
	}
	
	
	module.exports = crc32;


/***/ },
/* 36 */
/***/ function(module, exports) {

	'use strict';
	
	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	
	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.
	
	   Entry assumptions:
	
	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8
	
	   On return, state.mode is one of:
	
	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data
	
	   Notes:
	
	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.
	
	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;
	
	
	  var input, output; // JS specific, because we have no pointers
	
	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;
	
	
	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */
	
	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }
	
	    here = lcode[hold & lmask];
	
	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];
	
	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;
	
	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }
	
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }
	
	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }
	
	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);
	
	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;
	
	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils = __webpack_require__(33);
	
	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];
	
	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];
	
	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];
	
	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];
	
	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */
	
	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;
	
	  var here_bits, here_op, here_val;
	
	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.
	
	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.
	
	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.
	
	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */
	
	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }
	
	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	
	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }
	
	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }
	
	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }
	
	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }
	
	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.
	
	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.
	
	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.
	
	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.
	
	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */
	
	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;
	
	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;
	
	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }
	
	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */
	
	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }
	
	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }
	
	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);
	
	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }
	
	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }
	
	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }
	
	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */
	
	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }
	
	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }
	
	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }
	
	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }
	
	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// String encode/decode helpers
	'use strict';
	
	
	var utils = __webpack_require__(33);
	
	
	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safary
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;
	
	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }
	
	
	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils.Buf8(256);
	for (var q = 0; q < 256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
	
	
	// convert string to array (typed, when possible)
	exports.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
	
	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }
	
	  // allocate buffer
	  buf = new utils.Buf8(buf_len);
	
	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }
	
	  return buf;
	};
	
	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
	    }
	  }
	
	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}
	
	
	// Convert byte array to binary string
	exports.buf2binstring = function (buf) {
	  return buf2binstring(buf, buf.length);
	};
	
	
	// Convert binary string (typed, when possible)
	exports.binstring2buf = function (str) {
	  var buf = new utils.Buf8(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};
	
	
	// convert array to string
	exports.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;
	
	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);
	
	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }
	
	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }
	
	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }
	
	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
	
	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }
	
	  return buf2binstring(utf16buf, out);
	};
	
	
	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	exports.utf8border = function (buf, max) {
	  var pos;
	
	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }
	
	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
	
	  // Fuckup - very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }
	
	  // If we came to start of buffer - that means vuffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }
	
	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};


/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict';
	
	
	module.exports = {
	
	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,
	
	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,
	
	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,
	
	
	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,
	
	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,
	
	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 40 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';
	
	
	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}
	
	module.exports = ZStream;


/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';
	
	
	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications
	
	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //
	
	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}
	
	module.exports = GZheader;


/***/ }
/******/ ])
});
;

}).call(this,require("timers").setImmediate)
},{"timers":362}],358:[function(require,module,exports){

},{}],359:[function(require,module,exports){
(function (process,__dirname){
var fs = require('fs')
var path = require('path')

var pathFile = path.join(__dirname, 'path.txt')

function getElectronPath () {
  if (fs.existsSync(pathFile)) {
    var executablePath = fs.readFileSync(pathFile, 'utf-8')
    if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {
      return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath)
    }
    return path.join(__dirname, 'dist', executablePath)
  } else {
    throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again')
  }
}

module.exports = getElectronPath()

}).call(this,require('_process'),"/node_modules/electron")
},{"_process":361,"fs":358,"path":360}],360:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":361}],361:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],362:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":361,"timers":362}]},{},[329]);
